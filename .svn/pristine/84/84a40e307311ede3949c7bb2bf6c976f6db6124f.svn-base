<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SoftArtisans.OfficeWriter.ExcelWriter</name>
    </assembly>
    <members>
        <member name="T:SoftArtisans.OfficeWriter.Shared.AdoMdDataReaderWrapper">
            <summary> A wrapper that takes a IDataReader that is really an AdoMdDataReader.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper">
            Summary description for DataSourceWrapper.
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DataSource">
            <summary> DataSource is an abstract class that allows binding and iterating data sources of all flavor.
            Has just basic a set of functions, making it easier for a customer to create his own data sources
            that our products would consume.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getColumnPosition(System.String)">
            <summary> Returns a 0-based position of a column in the Dataset.
            Column is identified by a given column name
            
            </summary>
            <param name="aColumnName">  case-insensitive name of the column in the
            DataSource
            </param>
            <returns> 0-based column index, or -1 if the column does not exist.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getColumnName(System.Int32)">
            <summary> For a given 0-based column index returns the column name as a string</summary>
            <param name="aColumnIndex"> 0-based column index
            </param>
            <returns> column name, or null if column information is not available.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getColumnType(System.Int32)">
            <summary> Returns column type as an identifier (from java.sql.Types)</summary>
            <param name="aColumnNumber">0-based column index
            </param>
            <returns> column type (from java.sql.Types)
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.next">
            <summary> Advances to the next record in the data source</summary>
            <returns>  true if successful
            false if at the end of data source already
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.rewind">
            <summary> Rewinds the data source to the first row of data</summary>
            <throws>  RuntimeException, provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.getCharacterStream(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.getCharacterStream(System.Int32)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getString(System.String)">
            <summary> Methods for retreiving values **</summary>
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnName">  case-insensitive name of the column in the
            DataSource
            </param>
            <returns> data object, or null
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getString(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex"> 0-based column index
            </param>
            <returns> data object, or null
            </returns>
            <throws>  provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.getSByte(System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getSByte(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex	0-based">column index
            </param>
            <returns>  byte, or 0 for NULL
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.getShort(System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getShort(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex	0-based">column index
            </param>
            <returns>  short, or 0 for NULL
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.getInt(System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getInt(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex	0-based">column index
            </param>
            <returns>  int or 0 for NULL
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.getLong(System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getLong(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex	0-based">column index
            </param>
            <returns>  long, or 0 for NULL
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.getFloat(System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getFloat(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex	0-based">column index
            </param>
            <returns> float, or 0 for NULL
            </returns>
            <throws>  provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.getDouble(System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getDouble(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex	0-based">column index
            </param>
            <returns>  double, or 0 for NULL
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.getDecimal(System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getDecimal(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex	0-based">column index
            </param>
            <returns>  BigDecimal, or null for NULL
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.getBoolean(System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getBoolean(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex	0-based">column index
            </param>
            <returns> data object, or null
            </returns>
            <throws>  provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.getSBytes(System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getSBytes(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex	0-based">column index
            </param>
            <returns> data object, or null
            </returns>
            <throws>  provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.GetBytes(System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.GetBytes(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex	0-based">column index
            </param>
            <returns> data object, or null
            </returns>
            <throws>  provider-specific exception </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getDate(System.String)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnName">  case-insensitive name of the column in the
            DataSource
            </param>
            <returns> data object, or null
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getDate(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex"> 0-based column index
            </param>
            <returns> data object, or null
            </returns>
            <throws>  provider-specific exception </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getTime(System.String)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnName">  case-insensitive name of the column in the
            DataSource
            </param>
            <returns> data object, or null
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getTime(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex"> 0-based column index
            </param>
            <returns> data object, or null
            </returns>
            <throws>  provider-specific exception </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSource.ColumnCount">
            <summary> Returns column count in the data source</summary>
            <returns>  total number of columns in the datasource, or -1
            if this information is not available
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSource.Rewindable">
            <summary> Reports if the data source is rewindable.</summary>
            <returns> true if the rewind() can legally be called.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSource.AfterLast">
            <returns> "EOF" state, like java ResultSet.isAfterLast().
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSource.CanCacheDataType">
            <summary> Returns true if the data type is constant in columns and the transformation can be cached;
            returns false if the data type can change on columns.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSource.HasMultipleFieldnamesPerColumn">
            <summary> Returns true if the data for this data source will return multiple values for
            a FIELDNAME bound data marker. 
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSource.WasNull">
            <summary> Reports whether the last column read had a value of NULL. 
            Note that you must first call one of the getter methods 
            on a column to try to read its value and then call the 
            method wasNull to see if the value read was SQL NULL.
            </summary>
            <throws>   provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SoftArtisans.OfficeWriter.Shared.DataSource.Item(System.String)" -->
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSource.Item(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex	0-based">column index
            </param>
            <returns>  data object, or null
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.#ctor(System.Data.DataSet)">
            
            <summary>Constructor takes Dataset
            Similar to DataSourceWrapper(aDataSet.get_Tables.get_Item(0))</summary>
            
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.#ctor(System.Data.DataTable)">
            <summary>Constructor takes DataTable</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getColumnPosition(System.String)">
            <summary>
            Returns a 0-based position of a column in the Dataset.
            Column is identified by a given column name
            </summary>
            <param name="aColumnName">case-insensitive name of the column in the DataSource</param>
            <returns>0-based column index, or -1 if column is not found</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getColumnName(System.Int32)">
            <summary>
            For a given 0-based column index returns the column name as a string
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>column name, or null if column information is not available.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getColumnType(System.Int32)">
            <summary>
            Returns column type as an identifier (from java.sql.Types) 
            </summary>
            <param name="aColumnNumber">aColumnNumber	0-based column index</param>
            <returns>column type (from java.sql.Types)</returns>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException"> if can't find the type equivalent to the .NET type</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.next">
            <summary>
            Advances to the next record in the data source
            
            </summary>
            <returns>true if successful, false if at the end of data source already</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.rewind">
            <summary>
            Rewinds the data source to the first row of data
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getSByte(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnName">case-insensitive name of the column in the DataSource</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getSByte(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getShort(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getShort(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getInt(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getInt(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getLong(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getLong(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getFloat(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getFloat(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getDouble(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getDouble(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getDecimal(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getDecimal(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getBoolean(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getBoolean(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getString(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getString(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getSBytes(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getSBytes(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.GetBytes(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.GetBytes(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getDate(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getDate(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getTime(System.String)">
            <summary>
            Retrieves data for the specified column
            
            NOTE: this does the same thing as getDate()
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getTime(System.Int32)">
            <summary>
            Retrieves data for the specified column
            
            NOTE: this does the same thing as getDate()
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getUnicodeStream(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getUnicodeStream(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.ColumnCount">
            <summary>
            Gets the column count in the data source.
            or -1 if this information is not available
            </summary>
            
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.Rewindable">
            <summary>
            Check if this source is rewindable
            </summary>
            <returns></returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.WasNull">
            <summary>
            Reports whether the last column read had a value of NULL. 
            Note that you must first call one of the getter methods 
            on a column to try to read its value and then call the 
            method wasNull to see if the value read was SQL NULL.
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception"> throws provider-specific exception</exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.AfterLast">
            <summary>
            return "EOF" state, like java ResultSet.isAfterLast().
            </summary>
            <exception cref="T:System.Exception"> throws  provider-specific exception</exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.Item(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnName">case-insensitive name of the column in the DataSource</param>
            <returns>data object, or null</returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.Item(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">case-insensitive name of the column in the DataSource</param>
            <returns>data object, or null</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.AdoMdDataReaderWrapper.#ctor(System.Data.IDataReader)">
            <summary> Takes a DataReader and extracts the meta data.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.AdoMdDataReaderWrapper.next" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.AdoMdDataReaderWrapper.rewind">
            <summary> DataReaders are forward-only!  Throws and exception.</summary>
            <throws>  always, because DataReader is forward-only. </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.AdoMdDataReaderWrapper.AfterLast">
            <returns> "EOF" state, like java ResultSet.isAfterLast().
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.AdoMdDataReaderWrapper.Item(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnName	case-insensitive">name of the column in the
            DataSource
            </param>
            <returns> data object, or null
            </returns>
            <throws>  Unknown, probably nothing </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SoftArtisans.OfficeWriter.Shared.ArrayWrapperBase_TestFramework" -->
        <member name="F:SoftArtisans.OfficeWriter.Shared.ArrayWrapperBase_TestFramework.m_MetaData">
            <summary> Some ResultSet methods require that we return or accept an
            object of type MetaData:
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ArrayWrapperBase_TestFramework.ToString">
            <summary> This is a utility method, mostly for debugging output:</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ArrayWrapperBase_TestFramework.wasNull">
            <summary> Reports whether the last column read had a value of NULL.
            Note that you must first call one of the getter methods
            on a column to try to read its value and then call the
            method wasNull to see if the value read was SQL NULL.
            </summary>
            <throws>   SQLException </throws>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DataViewWrapper">
            Provides an interface to a System.Data.DataView.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataViewWrapper.#ctor(System.Data.DataView)">
            Takes a DataView and extracts the meta data.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataViewWrapper.next">
             Advances to the next record in the data source
             @return	true if successful
            			false if at the end of data source already
             @throws	Nothing
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataViewWrapper.rewind">
            DataViews are always rewindable.
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataViewWrapper.AfterLast">
            @return "EOF" state, like java ResultSet.isAfterLast().
            @throws  provider-specific exception
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataViewWrapper.Item(System.Int32)">
             Retrieves data for the specified column
             @param aColumnName	case-insensitive name of the column in the
            						DataSource
             @return data object, or null
             @throws Unknown, probably nothing
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DynamicAccessorBase">
            <summary> This is the internal base class for the DynamicAccessor objects.
            This class lets you return or generate or access objects <b>dynamically</b>
            at runtime, for the DynamicWrapper class.
            This base class contains a dummy getObject method that generates
            strings on the fly: we use it in our test suite.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DynamicAccessorBase.getObject(System.Int32,System.Int32)">
            <summary> Accessor method:</summary>
            <param name="row">row of the simulated ResultSet.
            </param>
            <param name="col">col of the simulated ResultSet.
            </param>
            <returns> object.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DynamicWrapper">
            <summary> The intention of the DynamicWrapper.* classes was to generate
            objects as they are requested, rather than creating large structures
            in memory.  Unfortunately, most of the classes DataTable needs to work
            are sealed/final (ie. they can't be overridden to dynamically generate the
            data.  So the constructor for this class simply generates
            the approprate structure in memory and looks like its doint it as 
            requested.
            
            See NumberDataReader and StringDataReader for dynamically generated data
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DynamicWrapper.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},SoftArtisans.OfficeWriter.Shared.DynamicAccessorBase)">
            <summary> Constructor.</summary>
            <param name="numColumns">how many columns are in the simulated ResultSet.
            </param>
            <param name="numRows">   how many rows are in the simulated ResultSet.
            </param>
            <param name="colNames">  String array of column names: should generally
            match numColumns, but excess columns are allows.
            </param>
            <param name="dynAccessor">accessor to get or create the value at runtime.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DynamicWrapper.Rewindable">
            <summary>
            This property replaces getType() from ResultSet in java. We seem to only ever use it to see if it's rewindable
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.IDataAccess">
            <summary> 
            </summary>
            <author>  geoffk
            Dec 23, 2003 5:34:28 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IDataAccess.open(System.String)">
            <summary> Open a connection to a database.</summary>
            <param name="aConnString">the connection string to use.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IDataAccess.close">
            <summary> Close an already open connection.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IDataAccess.execute(System.String)">
            <summary> Executes a query with a forward-only cursor and read-only result.</summary>
            <param name="aQuery">
            </param>
            <returns> A ResultSet, DataSet, or DataReader depending on the ResultSetType.
            </returns>
            <throws>  SQLException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IDataAccess.execute(System.String,System.Int32)">
            <summary> Execute a query.</summary>
            <returns> A ResultSet, DataSet, or DataReader depending on the ResultSetType.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.IDataReaderWrapper">
            <summary>
            This wraps an IDataReader which provides non-rewindable data
            
            Much of this file was taken from ArrayWrapper
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IDataReaderWrapper.#ctor(System.Data.IDataReader)">
            Takes a DataReader and extracts the meta data.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IDataReaderWrapper.rewind">
            DataReaders are forward-only!  Throws and exception.
            @throws always, because DataReader is forward-only.
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.IDataReaderWrapper.Rewindable">
             Advances to the next record in the data source
             @return	true if successful
            			false if at the end of data source already
             @throws	Nothing
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.IDataReaderWrapper.AfterLast">
            @return "EOF" state, like java ResultSet.isAfterLast().
            @throws  provider-specific exception
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.IDataReaderWrapper.Item(System.Int32)">
             Retrieves data for the specified column
             @param aColumnName	case-insensitive name of the column in the
            						DataSource
             @return data object, or null
             @throws Unknown, probably nothing
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.OleDbDataReaderWrapper">
            A wrapper that takes a OleDataReader.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.OleDbDataReaderWrapper.#ctor(System.Data.OleDb.OleDbDataReader)">
            Takes a DataReader and extracts the meta data.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.OleDbDataReaderWrapper.next">
             Advances to the next record in the data source
             @return	true if successful
            			false if at the end of data source already
             @throws	Nothing
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.OleDbDataReaderWrapper.rewind">
            DataReaders are forward-only!  Throws and exception.
            @throws always, because DataReader is forward-only.
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.OleDbDataReaderWrapper.AfterLast">
            @return "EOF" state, like java ResultSet.isAfterLast().
            @throws  provider-specific exception
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.OleDbDataReaderWrapper.Item(System.Int32)">
             Retrieves data for the specified column
             @param aColumnName	case-insensitive name of the column in the
            						DataSource
             @return data object, or null
             @throws Unknown, probably nothing
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SimpleMetaData">
            <summary> SimpleMetaData: some ResultSet methods
            require that we return or accept an object of type ResultSetMetaData.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.SimpleMetaData.m_OwningResultSet">
            <summary>m_OwningResultSet is so that we can find out the current row
            in a Java array, because for getColumnType on java arrays, the
            type of the object can be different on different rows for the same
            column:</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SimpleMetaData.ToString">
            <summary>
            This is a utility method, mostly for debugging output:
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SimpleMetaData.#ctor">
            <summary>no-args constructor, in case we need it for compatibility with
            serialization or something:
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SimpleMetaData.#ctor(System.Data.DataTable,System.Int32,System.String[])">
            <summary> The real constructor:</summary>
            <param name="owningResultSet">reference to owning ResultSet
            </param>
            <param name="colCount">number of columns
            </param>
            <param name="colNames">array of columns names: need not be same size
            as given in colCount, excess columns are permitted.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SimpleMetaData.getCatalogName(System.Int32)">
            <summary> All other methods are Dummy definitions for SimpleMetaData:
            so that this will be accepted as a MetaData implementation.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SimpleMetaData.getColumnName(System.Int32)">
            <summary> Accessor for column Name.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SimpleMetaData.getColumnType(System.Int32)">
            <summary> Accessor for column Type.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SingleRowDataSourceWrapper.#ctor(System.Data.DataSet)">
            Constructor takes Dataset
            Similar to DataSourceWrapper(aDataSet.get_Tables.get_Item(0))
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SingleRowDataSourceWrapper.#ctor(System.Data.DataTable)">
            Constructor takes DataTable
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SqlDataReaderWrapper">
            A wrapper that takes a SqlDataReader.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SqlDataReaderWrapper.#ctor(System.Data.SqlClient.SqlDataReader)">
            Takes a DataReader and extracts the meta data.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SqlDataReaderWrapper.next">
             Advances to the next record in the data source
             @return	true if successful
            			false if at the end of data source already
             @throws	Nothing
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SqlDataReaderWrapper.rewind">
            DataReaders are forward-only!  Throws and exception.
            @throws always, because DataReader is forward-only.
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.SqlDataReaderWrapper.AfterLast">
            @return "EOF" state, like java ResultSet.isAfterLast().
            @throws  provider-specific exception
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.SqlDataReaderWrapper.Item(System.Int32)">
             Retrieves data for the specified column
             @param aColumnName	case-insensitive name of the column in the
            						DataSource
             @return data object, or null
             @throws Unknown, probably nothing
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.Array2D">
            <summary> 
            </summary>
            <author>  geoffk
            Feb 3, 2004 4:21:33 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ArrayWrapperBase">
            <summary> Summary description for VectorWrapper.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ArrayWrapperBase.CanCacheDataType">
            <seealso cref="!:DataSource#canCacheDataType()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ArrayWrapperBase.WasNull">
            <summary> Reports whether the last column read had a value of NULL.
            Note that you must first call one of the getter methods
            on a column to try to read its value and then call the
            method wasNull to see if the value read was SQL NULL.
            </summary>
            <throws>   provider-specific exception </throws>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ICountable`1">
            <summary>
            An IEnumerable which supports Count
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2">
            <summary>
            A set of methods used by OutputRowsHandler; specifically the differences in functionality 
            between Word and Excel.
            </summary>
            <typeparam name="TB">The type of Binding used for this product (either Excel or Word)
            </typeparam>
            <typeparam name="TM">The type of Marker used for this product, for Excel this would be a 
            cell with marker syntax, for Word, it would be a Field</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.GetDataBinding(`1)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.AdvanceBindings">
            <summary>
            Advances all the bindings associated with this marker set.
            </summary>
            <returns><c>true</c> if the bindings were successfully advanced, <c>false</c> if there
            are no more bindings for the fields.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.ResetState">
            <summary>
            Resets any of the internal variables that are dependent on the current bindings
            </summary>
            <remarks>This should be called any time the iteration is restarted (between 
            <see cref="!:RewindableOutputRowsHandler&lt;TB,TM,TH&gt;.CountOutputRows"/> and 
            <see cref="M:SoftArtisans.OfficeWriter.Shared.OutputRowsHandler`3.CreateOutputRows(SoftArtisans.OfficeWriter.Shared.ICountable{`1})"/>, or multiple iterations of
            CreateOutputRows</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.ApplyModifiers(`1,`0,SoftArtisans.OfficeWriter.Shared.MarkerData@)">
            <summary>
            Applies modifiers creating the resulting data
            </summary>
            <param name="marker">The marker</param>
            <param name="binding">The binding holding the data for the marker</param>
            <param name="data">The data that is created if modifiers are applied, e.g. a marker data
            containing the feild name if the marker has the field name modifier.</param>
            <returns><c>true</c> if the marker had modifiers, and new data was created because of
            this.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.StringCellData(`1,System.String)">
            <summary>
            Returns the cell data for the given marker, when set to the given string
            </summary>
            <remarks>In Excel this would just be an entry to the string table, after 
            Upper/Lowercase updates, In word this is either an index to a custom string table 
            or the string itself</remarks>
            <param name="marker">The marker from the template</param>
            <param name="content">The content to-be for this marker</param>
            <returns>The output data associated with the marker</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.DateCellData(`1,System.Nullable{System.DateTime})">
            <summary>
            Returns the cell data for the given marker, when set to the given date
            </summary>
            <remarks>Excel converts dates into doubles, Word leaves them be</remarks>
            <param name="marker">The marker from the template</param>
            <param name="date">The content to-be for this marker, must be called with the type of 
            the binding is a date</param>
            <returns>The output data associated with the marker</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.ByteData(`1,System.Nullable{System.Int16})">
            <summary>
            Returns the byte Data ready for serialization.
            </summary>
            <remarks>ExcelTemplate does some funky stuff with TinyInts (bytes), word was just
            converting to Integer whatever it got, short should be sufficient for both.</remarks>
            <param name="marker">The marker from the template</param>
            <param name="value">The content to-be for this marker</param>
            <returns>A MarkerData ready for encoding</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.BinaryCellData(`1,System.Byte[],System.Data.OleDb.OleDbType)">
            <summary>
            Returns the cell data for the given marker, when set to the given binary data (image)
            </summary>
            <remarks>Word can handle images, Excel just outputs the data type as a string 
            (or something like that)</remarks>
            <param name="marker">The marker from the template</param>
            <param name="bytes">The content to-be for this marker, must be called with the type of 
            the binding is binary data</param>
            <returns>The output data associated with the marker</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.RowCountHandler(SoftArtisans.OfficeWriter.Shared.MarkerData[],System.Boolean)">
            <summary>
            Updates various counts after each row, such as group sizes/offsets
            </summary>
            <remarks>Word may just ignore the given row, and grab the data source, for each of  the
            appropriate formulas or grouping, since group counts aren't actually linked to  markers
            like they are in Excel</remarks>
            <param name="row">The list of all the markers in the data source. If this is <c>null</c>
            , that signifies that the last row passed in was the last row for this set of markers.
            </param>
            <param name="computeGrouping">If true (and in ExcelWriter) do the grouping computation
            else this function just does a max row check</param>
            <returns>false, if the max number of rows have been reached</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.UpdateUniqueBindings">
            <summary>
            Called after creating all the rows.
            </summary>
            <remarks>Excel uses this to update the use count and reset per marker count</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.RewindBindings">
            <summary>
            Rewind the bindings to start from the beginning again. Used with RewindableOutputRowsHandler
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.ZeroRows">
            <summary>
            Returns <c>true</c>, if there are no rows to write out; only accessed before accessing
            the first row.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.IMarker">
            <summary>
            Extended by MarkerCell and XmlMergeFieldProcessor? or MergeFieldNameParser?
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.IMarker.UseFieldName">
            <summary>
            Whether to display the field/column name instead of the value from the data source.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.IMarker.OrdinalColumn">
            <summary>
            Whether the field/column is given as a number (<c>true</c>) or the column name (
            <c>false</c>)
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.IMarker.Optional">
            <summary>
            If <c>true</c>, and the field does not actually exist, an exception will not be thrown
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.IMarker.ColumnNumber">
            <summary>
            The Column number associated with the marker; only valid if <see cref="P:SoftArtisans.OfficeWriter.Shared.IMarker.OrdinalColumn"/>is
            <c>true</c>.
            </summary>
            <remarks>Although, it is written in as a one based index, this property returns a
            0-based index</remarks>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.IMarker.ColumnName">
            <summary>
            The Column name associated with the marker; If <see cref="P:SoftArtisans.OfficeWriter.Shared.IMarker.OrdinalColumn"/>
            is <c>false</c>, this should be the text denoting the column (e.g. "#3").
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.IMarker.OriginalText">
            <summary>
            The original text of the marker, useful for throwing exceptions.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ISimpleBinding">
            <summary>
            A Wrapper for the data source associated with a marker
            </summary>
            <remarks>Any <c>columnNumber</c> parameters should be the result from one of the 
            <c>GetColumnNumber</c> methods and <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnName(System.Int32,System.Boolean)"/>. It is expected that you will
            call GetFieldType before any of the other Get* Methods. GetString is the only method that 
            can handle <see cref="F:System.Data.OleDb.OleDbType.IUnknown"/> (i.e. columnNumber&lt;0)</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.Next">
            <summary>
            Advances the Data Source one row
            </summary>
            <returns><c>true</c> if the data source was successfully advanced</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetFieldType(System.Int32)">
            <summary>
            Get the type of the data in the given column, or <see cref="F:System.Data.OleDb.OleDbType.IUnknown"/> if 
            <paramref name="columnNumber"/> is less than 0
            </summary>
            <param name="columnNumber">The output from <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)"/> or
            <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)">
            <summary>
            Returns the column number for the column associated with the given name. 
            </summary>
            <param name="columnName">The name associated with the column to retrieve</param>
            <param name="optional">If this is <c>false</c> and <paramref name="columnName"/> is not
            associated with a column, an exception will be thrown.</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)">
            <summary>
            Returns the column number as appropriate for the binding.
            </summary>
            <param name="columnNumber">The column number; a 1-based index, can be grabbed directly
            from the input</param>
            <param name="optional"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnName(System.Int32,System.Boolean)">
            <summary>
            Returns the column name associated with the given column
            </summary>
            <param name="columnNumber">The column number; a 1-based index, can be grabbed directly
            from the input</param>
            <param name="optional">If this is <c>true</c>, no exception will be thrown if the given
            number does not align with a data source</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetString(System.Int32)">
            <summary>
            
            </summary>
            <param name="columnNumber">The output from <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)"/> or
            <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetLong(System.Int32)">
            <summary>
            
            </summary>
            <param name="columnNumber">The output from <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)"/> or
            <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetFloat(System.Int32)">
            <summary>
            
            </summary>
            <param name="columnNumber">The output from <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)"/> or
            <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetInt(System.Int32)">
            <summary>
            
            </summary>
            <param name="columnNumber">The output from <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)"/> or
            <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetShort(System.Int32)">
            <summary>
            
            </summary>
            <param name="columnNumber">The output from <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)"/> or
            <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetDouble(System.Int32)">
            <summary>
            
            </summary>
            <param name="columnNumber">The output from <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)"/> or
            <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetBoolean(System.Int32)">
            <summary>
            
            </summary>
            <param name="columnNumber">The output from <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)"/> or
            <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetDate(System.Int32)">
            <summary>
            
            </summary>
            <param name="columnNumber">The output from <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)"/> or
            <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetBytes(System.Int32)">
            <summary>
            Returns the binary information in the data source.
            </summary>
            <param name="columnNumber">The output from <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)"/> or
            <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.IsNull(System.Int32)">
            <summary>
            Returns whether the given column is <c>null</c> or not.
            </summary>
            <param name="columnNumber">The output from <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)"/> or
            <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)"/>.</param>
            <returns></returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.ShouldntAccessAnyMoreData">
            <summary>
            Returns true if there is both no data left and that this means we should not access any
            column info. This should be used to avoid getting data from a row when we're past the end
            and therefore avoiding an exception.
            
            This was added in response to OWD-3041, where empty data sources would cause
            weird behavior. Getting information from a row after the end of the data stream would throw an
            exception in OOXML Excel, but not in Binary Excel. Binary Excel did this check already, and we
            need to add a similar check to OOXML Excel so that empty data sources don't cause an exception.
            
            In WordWriter this always returns false, since we don't want to avoid accessing info from a row.
            I think WordWriter handles this case already in some different way, but I haven't looked into it
            so I don't really know.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.MarkerData">
            <summary>
            Contains the output cell value. Style information is not included here because
            when it is needed it's just taken from the marker cell style
            
            This class should be as lightweight as possible
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.MarkerData.Value">
            <summary>
            This is null if and only if Type is None
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.NonRewindableOutputRowsHandler`3">
            <summary>
            Handles the output rows of data sources which aren't rewindable
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.OutputRowsHandler`3">
            <summary>
            Presents Data sources as enumerable objects over a list of marker data
            </summary>
            <remarks>Rewindable data sources are changed to NonRewindable if there is grouping, 
            this is faster, with a bigger memory footprint, so leave as is.</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.OutputRowsHandler`3.CreateOutputRows(SoftArtisans.OfficeWriter.Shared.ICountable{`1})">
            <summary>
            This is an iterator function which returns a IEnumerable that is a list of output cells
            
            Each iteration returns another output row
            
            Somewhat analogous to TemplateReaderBIFF8.processRow()
            </summary>
            <param name="vMarkerRow">the marker row corresponding with the output rows</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.OutputRowsHandler`3.CreateCellFromBinding(`1,`0)">
            <summary>
            Returns an OutputCellXML object based on what type of object the output cell should be
            </summary>
            <param name="marker">the field marker info</param>
            <param name="binding"></param>
            <param name="sharedStringTable"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.RewindableOutputRowsHandler`3">
            <summary>
            Handles output rows which are rewindable
            
            </summary>
            <note>If you have a data source that does not need to be counted you can use this, and so
            long as you don't call CountRows, it wont matter whether the underlying data source is
            rewindable or not.</note>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.RewindableOutputRowsHandler`3.outputRowIterator">
            <summary>
            We either store everything in memoryStream, or we can use the iterator and generate it on the fly
            
            Since we need the number of rows produced before we produce XML, we sometimes might need to
            store the stream in memory so we can read through it twice, once to count, and once to process.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.RewindableOutputRowsHandler`3.CountRows">
            <summary>
            Do what CreateOutputRows does, but without creating all those data structures or 
            doing as much processing
            
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ValueTypeSerialization">
            <summary>
            This provides space-efficient serialization to ValueType objects (int, byte, float, etc)
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ValueTypeSerialization.SerializeRow(System.IO.Stream,SoftArtisans.OfficeWriter.Shared.MarkerData[])">
            <summary>
            Write a row of cells to the outputStream
            </summary>
            <param name="outputStream">destination for serialization</param>
            <param name="cells">data to serialize</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ValueTypeSerialization.DeserializeRow(System.IO.Stream)">
            <summary>
            Convert some data in a stream to a row of cells
            </summary>
            <param name="inputStream">The input stream</param>
            <returns>a row of cells</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.AdaptiveMemoryStream">
            <summary>
            A stream which uses a MemoryStream for small amounts of data, and switches to a NonContiguousMemoryStream
            for larger amounts of data. This avoids the 4mb floor on allocations that NonContiguousMemoryStream has
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ArrayWrapper">
            <summary> The constructor for an array.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.CellRange">
            <summary>
            An object which represents a range (ie A1:B2)
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.Chunk.start">
            <summary>
            The starting bound in data of this chunk's information
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.Chunk.end">
            <summary>
            The ending bound in data of this chunk's information
            
            this is a value such that end - start = length in bytes. 
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Chunk.Write``1(System.Int32,``0[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Write count bytes from buffer at offset in buffer to the chunk, starting at positionInChunk
            </summary>
            <param name="positionInChunk"></param>
            <param name="buffer">Make sure this is either byte[] or sbyte[]</param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="stretch">true if we should push 'end' to the end of 'data' to accommodate 
            more data. We normally want this false unless there's a good reason; Write()'s
            don't push back data as they write, and they only add to the Stream if it's at
            the end of the entire stream</param>
            <returns>
            The number of bytes written
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Chunk.Insert``1(``0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="dataToInsert">
            This must be small enough to fit, else an exception is thrown.
            This must be an sbyte[] or a byte[]</param>
            <param name="currentChunkPosition"></param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Chunk.End">
            <summary>
            The ending bound in data of this chunk's information
            
            this is a value such that end - start = length in bytes. 
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ColumnWrapper">
            <summary> A wrapper for a Column of data (used to be ExcelWriter's VectorWrapper.
            
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ConsumingNonContiguousMemoryStream">
            <summary>
            This class is not thread safe!
            
            This provides a noncontiguous memory stream which is allocated when it's written to and
            deallocated when it's read from.
            
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ConsumingNonContiguousMemoryStream.#ctor">
            <summary>
            populate the storage
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ConsumingNonContiguousMemoryStream.Length">
            <summary>
            The amount of data left in the stream
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DummyDataSource">
            <summary>HACK: An implementation of a DataSource that does not have an end row and returns a blank string for all columns.
            When a NEXT field is encountered during template processing the original data source is shifted to the next record,
            if the original data source is exhausted the DummyDataSource s/b used, because otherwise for table cell repetitions the output file is corrupt
            (probably due to incorrect character run, cell or paragraph style updates at the end of processing.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DummyDataSource.getDate(System.String)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnName">  case-insensitive name of the column in the
            DataSource
            </param>
            <returns> data object, or null
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DummyDataSource.getDate(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex"> 0-based column index
            </param>
            <returns> data object, or null
            </returns>
            <throws>  provider-specific exception </throws>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EmptyDisposable">
            <summary>
            Used when we return an IDisposable but we have nothing to dispose
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.FragmentedMemoryStream">
            <summary>
            A memorystream like NonContiguousMemoryStream, except the chunks of data
            aren't all necessarily the same size. This is optimized for lots of insertions and deletions
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.FragmentedMemoryStream.currentChunkIndex">
            <summary>
            The current position is in this index to chunks. This may be past the end, at chunks.Count
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.FragmentedMemoryStream.currentChunkPosition">
            <summary>
            The current position starts at this position in the chunk specified by currentChunkIndex.
            This position is absolute, not relative to chunk.Start
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.FragmentedMemoryStream.totalPosition">
            <summary>
            The value that would be returned to Position
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.FragmentedMemoryStream.totalLength">
            <summary>
            The value that would be returned to Length
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.FragmentedMemoryStream.isClosed">
            <summary>
            Is the stream closed?
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.FragmentedMemoryStream.DecrementPosition(System.Int64)">
            <summary>
            Should be equivalent to Position -= offset, except more efficient
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.FragmentedMemoryStream.IncrementPosition(System.Int64)">
            <summary>
            Should be equivalent to Position += offset, except more efficient
            </summary>
            <param name="offset"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SoftArtisans.OfficeWriter.Shared.IntPair" -->
        <member name="T:SoftArtisans.OfficeWriter.Shared.IteratorStream">
            <summary>
            An IteratorStream takes an IEnumerator of streams, concatenates them, and outputs data such that
            it came from one big stream. This is used for cases where it's not possible to store everything in memory at once.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IteratorStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Since the whole point of this class is to make a stream which doesn't store everything in memory at once,
            we can't seek through it.
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IteratorStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Fill buffer with bytes from the streams pointed to by ienumerator
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="bytesToRead"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.JaggedArray2D">
            <summary> Array wrapping object for an array of arrays.
            
            </summary>
            <author>  geoffk
            Feb 3, 2004 4:31:27 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.JaggedArray2D.getObject(System.Int32,System.Int32)">
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.Array2D.getObject(System.Int32,System.Int32)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.JaggedArray2D.MaxCols">
            <seealso cref="!:Array2D.getMaxCols()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.JaggedArray2D.MaxRows">
            <seealso cref="!:Array2D.getMaxRows()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.NearEnumerator`1">
            <summary>
            Provides an iterator which has pointers to the previous and next elements as well as the current
            
            NOTE: values of Previous, Current, and Next are undefined for when that value doesn't make sense
            ie, Previous at the beginning, Next at the end, are probably null but may be anything.
            Note that sometimes null is a legit value, and it shouldn't be used to determine EOF
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.NonContiguousMemoryStream">
            <summary>
            This is a stream whose store is non-contiguous memory
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.NonContiguousMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Set a new position in the stream
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.NonContiguousMemoryStream.SetLength(System.Int64)">
            <summary>
            SetLength is not supported because there's no reason to let someone increase the size of this object
            without filling it with data.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.NonContiguousMemoryStream.EnsureCapacity(System.Int64)">
            <summary>
            Make sure there are capacity bytes available to write to
            </summary>
            <param name="capacity">The number of bytes to extend the storage to</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.NonContiguousMemoryStream.WriteTo(System.IO.Stream)">
            <summary>
            Write all contained data to a stream
            
            NOTE: starts from beginning, even if position isn't at beginning
            </summary>
            <param name="stream">the stream to write the data to</param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.NonContiguousMemoryStream.Position">
            <summary>
            Position is the offset in the stream, as if it were a contiguous byte array
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.Range2D">
            <summary>
            Used to store a 2d range, and tell if a coordinate is inside that range
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Range2D.Includes(System.Int32,System.Int32)">
            <summary>
            Is coordinate inside this 2D range?
            </summary>
            <param name="row">row</param>
            <param name="col">column</param>
            <returns>true or false</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.RectArray2D">
            <summary> Array wrapping object for a .NET rectangular array.
            
            </summary>
            <author>  geoffk
            Feb 3, 2004 4:31:27 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.RectArray2D.#ctor(System.Object[0:,0:],System.Boolean)">
            <summary>
            
            </summary>
            <param name="aData"></param>
            <param name="aTransposeToRowCol">By Default the access is [Col,Row], set this to 
            <c>true</c> to have [Row,Col]</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.RectArray2D.getObject(System.Int32,System.Int32)">
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.Array2D.getObject(System.Int32,System.Int32)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.RectArray2D.MaxCols">
            <seealso cref="!:Array2D.getMaxCols()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.RectArray2D.MaxRows">
            <seealso cref="!:Array2D.getMaxRows()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.Replacements">
            <summary>
            This is a container for a list of replacements to be made (what text 
            should be removed, and what should be added.) 
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Replacements.Add(System.Int32,System.Int32,System.String)">
            <summary>
            Add a replacement to the list
            </summary>
            <param name="startIndex">the offset in a string where text should be inserted</param>
            <param name="length">the length of text that should be removed at startIndex</param>
            <param name="token">the text that should be inserted at startIndex</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Replacements.ReplaceAll(System.Text.StringBuilder)">
            <summary>
            Apply all replacements to the stringBuilder. This should start from the end of the string
            so that other offsets aren't affected as text is changed.
            </summary>
            <param name="stringBuilder"></param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ResettableMemoryStream">
            <summary>
            This is a stream which contains a MemoryStream which all method calls are redirected to.
            The purpose of this function is to allow the user to reset it (through ResetStream())
            without deleting this instance of a Stream. For example, an XmlWriter writes everything to a MemoryStream,
            but every so often you want to get the data from that MemoryStream and empty it to make space for more data. By calling
            ResetStream(), the XmlWriter doesn't think anything unusual happened to it.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.RowWrapper">
            <summary> 
            </summary>
            <author>  geoffk
            Dec 15, 2003 11:00:31 AM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.RowWrapper.#ctor(System.Object[],System.String[])">
            <param name="aData">
            </param>
            <param name="aColumns">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ScalarWrapper">
            <summary> 
            </summary>
            <author>  geoffk
            Dec 15, 2003 11:08:01 AM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SplittableBounds">
            <summary>
            A bounded region, with functions to allow breaking it up
            
            NOTE: FragmentedMemoryStream does some very similar stuff. Maybe we can share code?
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.SplittableBounds.bounds">
            <summary>
            Bounds is not guaranteed to be in order
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SplittableBounds.Whittle(System.Int32,System.Int32)">
            <summary>
            Hollow out region between begin and end, inclusive
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SplittableBounds.VerifyNoOverlap">
            <summary>
            Returns true if there is no overlap, else false
            </summary>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.StreamFromZipStream">
            <summary>
            This stream encapsulates an internal stream from a ZipFile. If you seek to 0, it resets the ZipFile stream
            to the correct file.
            
            NOTE: The GetInputStream() function of ZipFile returns pretty much the same Stream, except seeked to
            a different file, which means you can only access one file in a ZipFile at a time. 
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.TriState">
            <summary>
            Provides a value of either true, false, or unset
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.XmlFilter">
            <summary>
            Provides a class which reads in XML and writes it out differently based on certain rules
            
            Override this class to provide functionality. By default the class writes out everything it read in unchanged
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.XmlFilter.stack">
            <summary>
            keep track of the context of node names
            
            NOTE: I don't think we ever use this beyond looking at the top element of the stack
            but it's not a performance bottleneck
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.XmlFilter.disableWrite">
            <summary>
            if this is true, no XML should be written out.
            You probably want to test this rigorously; it might be unreliable
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.XmlFilter.uniqueElementCount">
            <summary>
            this is incremented for each element so that when the file is read through again, it knows what element to look for
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.XmlFilter.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Produce a XmlReader and XmlWriter from the streams given
            </summary>
            <param name="inputStream"></param>
            <param name="outputStream"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.XmlFilter.Process">
            <summary>
            Iterate through the xml nodes while reading, and write them depending on if the other functions of this class
            are overridden.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.XmlFilter.WriteSignificantWhitespace(System.Xml.XmlWriter)">
            <summary>
            Write whitespace with xml:space="preserve"
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.XmlFilter.WriteAttributeString(System.Xml.XmlWriter)">
            <summary>
            Write an attribute. Override if attributes need to be different somehow. 
            disableWrite is already assumed to be tested
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.XmlFilter.WriteStartElement(System.Xml.XmlWriter)">
            <summary>
            Write the starting element and attributes. If it's an empty element, 
            Process() will close it with WriteEndElement(). So this function shouldn't test for IsEmptyElement
            
            This function does iterate through attributes, so make sure to include that part if the base function
            is never called
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.XmlFilter.WriteEndElement(System.Xml.XmlWriter)">
            <summary>
            Write ending element
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.XmlFilter.WriteText(System.Xml.XmlWriter)">
            <summary>
            Write text in between elements
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.XmlFilter.WriteStartDocument(System.Xml.XmlWriter)">
            <summary>
            Write the start of the document
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.XmlFilter.WriteEndDocument(System.Xml.XmlWriter)">
            <summary>
            Write the end of the document
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.XmlFilter.OutputStream">
            <summary>
            This is what Process() used to return
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.BitFieldInt16">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  unascribed
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.UnsignedInt16">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DocumentType">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.BitFieldInt32">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  unascribed
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.UnsignedInt32">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.BitFieldInt8">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.UnsignedInt8">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.RgbFieldWrapper">
            <summary> <p>Holds a standard RGB field 00, B, G, R.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.UnsignedInt32i">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherPlaceholder">
            <summary> <p>EscherPlaceholder allows arbitrary, client-specific data to be injected
            into a tree of subrecords and subelements.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherPlaceholderScanner">
            <summary> The TextObjectScanner allows Text (TXO) records to be inserted into the
            Escher tree structure.  It holds a single TextObjectElement and returns it
            upon request by {@link #next_token()}
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SoftArtisans.OfficeWriter.Shared.Scanner" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.Scanner.next_token">
            <summary>Return the next token, or <code>null</code> on end-of-file. </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherPlaceholderScanner.#ctor(SoftArtisans.OfficeWriter.Shared.EscherPlaceholder)">
            <summary> Construct a new scanner that will return the specified element</summary>
            <param name="aTxtEl">the element to return
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherPlaceholderScanner.next_token">
            <seealso cref="!:Scanner#next_token()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelement">
            <summary> This is the base element class for all MsoSubelements.
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ParentElement`1">
            <summary> 
            
            An element is a piece of an Excel file (one or more continuous records).
            
            Elements are collected into Features, which are manipulated by the API and
            the Dispatcher.
            
            </summary>
            <author>  geoffk Jun 28, 2004 12:43:05 PM
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element.runSpecialAction">
            <summary>
            This is an optimization so we don't call walkTreeIgnoreLeafSpecialAction() unless
            necessary. It's a virtual function and will cause a small performance hit
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element.walkTreeIgnoreLeaf(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ITreeAction)">
            <summary>
            Walk a tree, executing an action. 
            This function is called very often, keep performance in mind.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element.Clone">
            <summary>
            Implements java's clone method, which does a field-to-field copy of all instance variables.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element.ToString">
            <public>  </public>
            <seealso cref="!:java.lang.Object#toString()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element.Children">
            <summary>
            An enumerable collection of all the children of this element.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ParentElement`1.addChildren(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a group of elements at once.
            </summary>
            <param name="children"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ParentElement`1.copyChild(System.Int32)">
            <summary> Returns a copy of the element at origPos.</summary>
            <param name="origPos">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ParentElement`1.Children">
            <summary>
            An enumerable collection of all the children of this element.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelement.write(SoftArtisans.OfficeWriter.Shared.EscherTreeDehydrator)">
            <summary> Write this subelement and all child subelements to the specified 
            buffer.
            </summary>
            <param name="aDehydrator">the buffer to write data to
            </param>
            <throws>  IOException if an error occurs while writing data </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelement.calcSize(SoftArtisans.OfficeWriter.Shared.EscherTreeDehydrator)">
            <summary> Calculates the size of this subelement and its children.  This also
            updates any record headers with the new size of its data and children.
            </summary>
            <returns> the size of this subelement and its children
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelement.ToString">
            <seealso cref="!:java.lang.Object#toString()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelement.toXml">
            <seealso cref="!:java.lang.Object#toString()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementBSE">
            <summary> <p>Holds a single BlipStoreEntry in the BStore of an MSODRAWINGGROUP.  A BSE
            consists of a BSE subrecord holding metadata about an image and the bits of 
            the image itself in either a BlipBitmap or a BlipMetafile subrecord.  
            Sometimes, excel also writes a blank BSE, so this Subelement may not contain
            a valid or actual blip...</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementBSE.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord,SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord)">
            <summary> Construct a new BSE subelement with the specified BSE subrecord and the
            specified BLIP subrecord.  This should only be called from the parser.
            </summary>
            <param name="aBse">the BSE subrecord
            </param>
            <param name="aBlip">the BLIP subrecord
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementBSE.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord)">
            <summary> Construct a new BSE subelement with the specified BSE subrecord.  This
            should only be called from the parser when we have a BSE entry with no
            associated Blip (this happens when a blip has no references so it is
            not written, but the entry is still writen to avoid having to fix up
            the blip indices).
            </summary>
            <param name="aBse">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementBSE.#ctor(System.SByte[],SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherBlipType,System.SByte[],System.Boolean)">
            <summary> Constructs a new BSE for picture data with the specified MD4 digest and
            having the specified type.  This is the only constructor that should be
            called from outside the parser.
            </summary>
            <param name="aHash">the hash of the image data
            </param>
            <param name="aType">the type of blip
            </param>
            <param name="aImgBuff"></param>
            <param name="containerType"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementBSE.hasReferences">
            <summary> Returns whether this BSE is referenced by any shapes in any drawing.</summary>
            <returns> whether this BSE is referenced by any shapes in any drawing.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementBSE.calcSize(SoftArtisans.OfficeWriter.Shared.EscherTreeDehydrator)">
            <seealso cref="!:Subelement#calcSize()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementBSE.write(SoftArtisans.OfficeWriter.Shared.EscherTreeDehydrator)">
            <seealso cref="!:Subelement#write(TreeDehydrator)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementBSE.setBlipData(System.SByte[],SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherBlipType,System.SByte[])">
            <summary> Sets the blip data for this BSE.</summary>
            <param name="aHashBuff">
            </param>
            <param name="aType">
            </param>
            <param name="aImgBuff">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementBSE.BSE">
            <summary> Returns the BSE subrecord for this subelement.  This should always 
            return a non-null value.
            </summary>
            <returns> the BSE subrecord for this subelement.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementBStore">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementContainerHandler">
            <summary> Wrapper for Container subrecords that do not have any specific data of 
            their own.
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementContainerHandler.calcSize(SoftArtisans.OfficeWriter.Shared.EscherTreeDehydrator)">
            <seealso cref="!:Subelement#calcSize()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementContainerHandler.write(SoftArtisans.OfficeWriter.Shared.EscherTreeDehydrator)">
            <seealso cref="!:Subelement#write(TreeDehydrator)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementBStore.getBlipByHash(System.SByte[])">
            <param name="aHashBuff">
            </param>
            <param name="aType">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementBStore.removeBlipReference(System.Int32)">
            <summary> Tells both the BStore and the BSE with the specified ID that a reference
            to the BSE (picture holding that blip), has been removed.  This will 
            then be used when determining if the BStore or BSE blip data should be
            writen to the file.
            </summary>
            <param name="aBlipId">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementBStore.createBlip(System.SByte[],SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherBlipType,System.SByte[],System.Boolean)">
            <summary> Creates a new blip for the specified hash and type.  This method is 
            seperate from getBlipFor so a user of this api can determine if a
            blip exists and take the correct action.  This method does not
            take the blip data because the client application (Word) might use a
            delay stream to store the image data rather than directly in a 
            subelement of this element.  By returning the element, the client
            of this api has control of what happens.
            </summary>
            <param name="aHashBuff">
            </param>
            <param name="aType">
            </param>
            <param name="aImgBuff"></param>
            <param name="isHfDrawing"></param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementBStore.addChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element,System.Int32)">
            <seealso cref="!:int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementBStore.addChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementBStore.calcSize(SoftArtisans.OfficeWriter.Shared.EscherTreeDehydrator)">
            <seealso cref="!:EscherSubelement#calcSize(TreeDehydrator)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementBStore.checkEmpty">
            <summary> Checks to see if all the BSE's in the BStore have no references.</summary>
            <returns> true if all BSE's in the BStore have no references and false 
            otherwise.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementBStore.write(SoftArtisans.OfficeWriter.Shared.EscherTreeDehydrator)">
            <seealso cref="!:EscherSubelement#write(TreeDehydrator)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementClientPlaceholder">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementClientPlaceholder.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord)">
            <param name="clntTxt">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementClientPlaceholder.addPlaceholder(SoftArtisans.OfficeWriter.Shared.EscherPlaceholder)">
            <param name="txtData">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementClientPlaceholder.getPlaceholderOfType(System.Type)">
            <summary> Returns the placeholder of the specified type from this ClientPlaceholder
            or null if no such placeholder exists
            </summary>
            <param name="aType">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementClientPlaceholder.write(SoftArtisans.OfficeWriter.Shared.EscherTreeDehydrator)">
            <seealso cref="!:Subelement#write(TreeDehydrator)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementClientPlaceholder.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler)">
            <seealso cref="!:Subelement#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementDeletedItems">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementDeletedItems.addShapeGroup(SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShapeGroup)">
            <param name="shapeGroup">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementDeletedItems.addShape(SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShape)">
            <param name="shape">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementDrawing">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementDrawing.addDG(SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementSubrecordHandler)">
            <param name="handler">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementDrawing.addRegroupItems(SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementSubrecordHandler)">
            <param name="regroup">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementDrawing.addPatriarch(SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShapeGroup)">
            <param name="object">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementDrawing.addDeletedItems(SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementDeletedItems)">
            <param name="deleted">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementDrawing.addSolverContainer(SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementSolver)">
            <param name="solver">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementDrawing.initializeNewDrawing(System.Int64,System.Int64,System.Int16)">
            <param name="aDrawingId">
            
            </param>
            <param name="aShapeId">
            </param>
            <param name="isHfPicture"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementDrawing.getDrawingId">
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementDrawing.reportShapeDeletion(System.Int64)">
            <param name="spid">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementDrawing.resetShapeStatistics">
            <summary> Method used to reset the shape statistics carried in the drawing
            record.  This should only be done if IDs need to be reallocated.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementDrawingGroup">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementDrawingGroup.deallocateShapeId(System.Int64,System.Int64)">
            <param name="drawid">
            </param>
            <param name="spid">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementDrawingGroup.BStore">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementSelection">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementSubrecordHandler">
            <summary> Wrapper for a subrecord in the tree structure of Subelements.
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementSubrecordHandler.calcSize(SoftArtisans.OfficeWriter.Shared.EscherTreeDehydrator)">
            <seealso cref="!:Subelement#calcSize()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementSubrecordHandler.write(SoftArtisans.OfficeWriter.Shared.EscherTreeDehydrator)">
            <seealso cref="!:Subelement#write(TreeDehydrator)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementSelection.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.Subrecord)">
            <param name="aSubrec">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShape">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShape.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.ShapeType,System.Int64,System.Boolean,System.Int16)">
            <summary> Create a new MsoSubelementShape and all approprate subrecords for the
            specified shape type.
            </summary>
            <param name="aType">the type for the new shape
            </param>
            <param name="aShapeId">the Id for the new shape
            </param>
            <param name="isChild"></param>
            <param name="aContainerType"></param>
            <param name="aObjId">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShape.addSPGR(SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementSubrecordHandler)">
            <param name="groupMarker">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShape.addSP(SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementSubrecordHandler)">
            <param name="handler">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShape.addUnknown(SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementUnknown)">
            <param name="unk1">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShape.addOPT(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordOPT)">
            <param name="handler">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShape.addAnchor(SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementSubrecordHandler)">
            <param name="anch">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShape.addClientData(SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementClientPlaceholder)">
            <param name="clntData">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShape.addTextbox(SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementClientPlaceholder)">
            <param name="txt">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShape.initializeNewPatriarchShape(System.Int64,System.Int16)">
            <param name="aShapeId">
            
            </param>
            <param name="aContainerType"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShape.setTestInfo(System.Int32,System.Int32)">
            <summary> Test method</summary>
            <param name="index">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShape.ShapeId">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShapeGroup">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShapeGroup.createShape(SoftArtisans.OfficeWriter.ExcelWriter.ShapeType,System.Int64,System.Int16)">
            <param name="aType"></param>
            <param name="aShapeId"></param>
            <param name="aContainerType"></param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShapeGroup.addShape(SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShape)">
            <param name="sctr">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShapeGroup.addShapeGroup(SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShapeGroup)">
            <param name="sgctr">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShapeGroup.initializeNewPatriarch(System.Int64,System.Int16)">
            <param name="aShapeId">
            
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShapeGroup.removeShape(SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelement)">
            <summary> Removes the specified shape and returns whether or not it was removed.</summary>
            <param name="shapeSubelement">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementSolver">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementSolver.addChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementUnknown">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementUnknown.addChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherBlipCompression">
            <summary> <p>MsoBlipCompression is a type safe enum class listing the options in a
            Blip subrecord detailing how it was compressed.</p>
            <code>
            typedef enum
            {
            msocompressionDeflate = 0,
            msocompressionNone = 254,    // Used only if compression fails
            msocompressionTest = 255,    // For testing only
            }
            MSOBLIPCOMPRESSION;
            </code>
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherBlipType">
            <summary> This is a typesafe enum pattern class holding the following enum
            for the escher layer.<br/>
            typedef enum
            {                          // GEL provided types...
            msoblipERROR = 0,          // An error occured during loading
            msoblipUNKNOWN,            // An unknown blip type
            msoblipEMF,                // Windows Enhanced Metafile
            msoblipWMF,                // Windows Metafile
            msoblipPICT,               // Macintosh PICT
            msoblipJPEG,               // JFIF
            msoblipPNG,                // PNG
            msoblipDIB,                // Windows DIB
            msoblipFirstClient = 32,   // First client defined blip type
            msoblipLastClient  = 255   // Last client defined blip type
            } MSOBLIPTYPE;
            <br/>
            Any client Blip types are dynamically added to the enum as Unknowns when
            they are looked up by value.
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherBlipType.getByInstValue(System.Int32)">
            <summary> Returns the BlipType as encoded in the inst field specified.
            The field is encodes according to the following
            enum:
            <code>
            typedef enum
            {
            msobiUNKNOWN = 0,
            msobiWMF  = 0x216,      // Metafile header then compressed WMF
            msobiEMF  = 0x3D4,      // Metafile header then compressed EMF
            msobiPICT = 0x542,      // Metafile header then compressed PICT
            msobiPNG  = 0x6E0,      // One byte tag then PNG data
            msobiJFIF = 0x46A,      // One byte tag then JFIF data
            msobiJPEG = msobiJFIF,
            msobiDIB  = 0x7A8,      // One byte tag then DIB data
            msobiClient=0x800,      // Clients should set this bit
            } MSOBI;               // Blip signature as encoded in the MSOFBH.inst
            </code>
            If msobiClient is specified, ...
            </summary>
            <param name="aInst">the Inst value
            </param>
            <returns> the BlipType for the Inst value
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherBlipUsage">
            <summary> Typesafe enum pattern class holding the following escher enum information:
            <br/>
            typedef enum
            {
            msoblipUsageDefault,  // All non-texture fill blips get this.
            msoblipUsageTexture,
            msoblipUsageMax = 255 // Since this is stored in a byte
            } MSOBLIPUSAGE;
            <br/>
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntry">
            <summary> <p>An MsoOptEntry represents a single property entry inside an MsoOPT 
            subrecord.  The basic MsoOptEntry treats its values as unsigned 32 bit
            numbers and any extra property value data as a byte[].  The various
            subclasses of this class deal with specific types of value data.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntry.#ctor(System.Int32,SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryType)">
            <summary> Construct a new MsoOptEntry with the specified header and type. This
            should only be called from one of the createOptEntry methods.
            </summary>
            <param name="aHeader">the header for the entry
            </param>
            <param name="aHeaderType">the type of entry
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntry.readValue(System.SByte[],System.Int32)">
            <summary> Reads the value (not value data) from the specified data buffer</summary>
            <param name="aBuff">the buffer to read from
            </param>
            <param name="aOffset">the offset to begin readint at
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntry.readValueData(System.SByte[],System.Int32)">
            <summary> Reads the value data (if any) for this entry and returns the new offset.</summary>
            <param name="aBuff">the buffer to read from 
            </param>
            <param name="aOffset">the starting offset in the buffer
            </param>
            <returns> aOffset after incrementing for any data read
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntry.writeEntry(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <summary> Writes the header and value (not value data) for this entry to the
            specified buffer
            </summary>
            <param name="aBuff">the buffer to write to
            </param>
            <throws>  IOException if an error occurs during writing </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntry.writeValueData(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <summary> Writes the value data, if any, for this entry into the specified buffer </summary>
            <param name="aBuff">the buffer to write to
            </param>
            <throws>  IOException if an error occurs during writing </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntry.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <param name="handler">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryArray">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryBoolean">
            <summary> <p>MsoOptEntryBoolean manages OptEntries that contain bit flags in their
            values.</p>
            <p>In a strange quirk, or really stupid thing to do, these boolean 
            properties may only be set in the high 16 bits, the low 16 bits, or both.
            There really doesn't appear to be a solid pattern behind it.  However, it 
            looks like you're safe if you set both the bit in the high 16 bits and the
            low 16 bits.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryBoolean.getBit(System.Int32)">
            <summary> Gets the bit in the specified index.</summary>
            <param name="aBitIndex">The index of the bit to get begining with the lowest 
            order bit (0=lowest 31=highest)
            </param>
            <returns> the value of the bit at the specified location
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryColor">
            <summary>
            See MS-ODRAW Sec 2.2.2, OfficeArtCOLORREF. Basically, it's a 4 byte structure which acts differently
            depending on what the last byte means. It looks like this:  |  red  | blue | green | flags |
            
            Red, Green, and Blue are all one byte values where 0x00 is minimum intensity and 0xFF is maximum intensity,
            as you'd expect.
            
            The flags byte is split into 8 bits. NOTE the subtle differences in the description. Also,
            the description says that if this is 0xFF, the color should be ignored completely. The relevant flags
            in order: 
            
            fPaletteIndex - A bit that specifies whether the current palette will be used to determine the color.
            A value of 0x1 specifies green and red will be treated as an unsigned 16-bit index into the current
            color palette. This color MAY be dithered. If this is 0x1, blue MUST be 0x00.
            
            fPaletteRGB - A bit that specifies whether the current palette will be used to determine the color.
            A value of 0x1 specifies that red, green, and blue contain an RGB value that will be matched in the current
            color palette. This color MUST be solid.
            
            fSystemRGB -  A bit that species whether the color is a standard RGB color. 0x0 means the RGB color
            may use halftone dithering, 0x1 means it's a solid color.
            
            fSchemeIndex - A bit that specifies whether the current application-defined color scheme will be used to 
            determine the color. 0x1 means red will be treated as an index into the current color scheme table. If 0x1,
            blue and green MUST be 0x00.
            
            fSysIndex - A bit that specifies whether the system color scheme will be used to determine the color.
            A value of 0x1 specifies that green and red will be treated as an unsigned 16-bit index into the
            system color table. Values less than 0x00F0 map directly to system colors. For more information
            see [MSDN-GetSysColor]. NOTE: some of these values have special meaning, see the docs
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryColor.mFlags">
            <summary> Holds the mode of the color entry.  These correspond to flags
            described as MSOCOLORINDEX in the class level javadoc.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryColor.readValue(System.SByte[],System.Int32)">
            <seealso cref="!:int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryColor.copy">
            <seealso cref="!:EscherOptEntry#copy()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryColor.initColorData">
            <summary>
            Initialize mFlags, mIndex, mRed, mBlue, and mGreen from mValue. For this property, mValue is 32 bits
            despite being of type long. 
            
            NOTE: mFlags and mIndex seem to overlap space. We should refactor them to be the same variable
            so this is less confusing
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryColor.finalizeColorData">
            <summary>
            Write mValue using mFlags, mIndex, mRed, mBlue, and mGreen.
            
            NOTE: mFlags and mIndex seem to overlap space. We should refactor them to be the same variable
            so this is less confusing
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryColor.writeEntry(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:EscherOptEntry#writeEntry(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryColor.PalletIndex">
            <returns> Returns the mFlagsPalletIndexMask.
            </returns>
            <param name="flagsPalletIndexMask">The mFlagsPalletIndexMask to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryColor.PalletRGB">
            <returns> Returns the mFlagsPalletRGBMask.
            </returns>
            <param name="flagsPalletRGBMask">The mFlagsPalletRGBMask to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryColor.SchemeIndex">
            <returns> Returns the mFlagsSchemeIndexMask.
            </returns>
            <param name="flagsSchemeIndexMask">The mFlagsSchemeIndexMask to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryColor.SysIndex">
            <returns> Returns the mFlagsSysIndexMask.
            </returns>
            <param name="flagsSysIndexMask">The mFlagsSysIndexMask to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryColor.SystemRGB">
            <returns> Returns the mFlagsSystemRGBMask.
            </returns>
            <param name="flagsSystemRGBMask">The mFlagsSystemRGBMask to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryColor.Blue">
            <returns> Returns the mBlue.
            </returns>
            <param name="blue">The mBlue to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryColor.Green">
            <returns> Returns the mGreen.
            </returns>
            <param name="green">The mGreen to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryColor.Index">
            <returns> Returns the mIndex.
            </returns>
            <param name="index">The mIndex to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryColor.Red">
            <returns> Returns the mRed.
            </returns>
            <param name="red">The mRed to set.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryFixedDecimal">
            <summary> <p>Handles reading and writing OPT subrecord entries that contain a
            signed 32 bit fixed point decimal number.  The high word specifies the
            integer part and the low word specifies the decimal part.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryFixedDecimal.#ctor(System.Int32,SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryType)">
            <param name="aHeader">
            </param>
            <param name="aHeaderType">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryFixedDecimal.copy">
            <seealso cref="!:EscherOptEntry#copy()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryFixedDecimal.readValue(System.SByte[],System.Int32)">
            <seealso cref="!:int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryFixedDecimal.writeEntry(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:EscherOptEntry#writeEntry(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryFixedDecimal.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:EscherOptEntry#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryFixedDecimal.DecimalValue">
            <summary> Returns the decimal value held by this OPT entry. This method should be
            used rather than getValue as getValue will return -1;
            </summary>
            <returns> the decimal value held by this opt entry
            </returns>
            <summary> Sets the decimal value held by this OPT entry.  This method should be 
            used instead of setValue as the value set by setValue will not be 
            written back to file.
            </summary>
            <param name="aValue">the new value for this OPT entry.
            </param>
            <throws>  SARuntimeException if aValue is larger than 2^15+1 or  </throws>
            <summary> smaller than -2^15-1
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntrySignedValue">
            <summary> <p>Class for managing OPT entries that contain signed, rather than
            unsigned, values</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntrySignedValue.#ctor(System.Int32,SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryType)">
            <param name="aHeader">
            </param>
            <param name="aHeaderType">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntrySignedValue.readValue(System.SByte[],System.Int32)">
            <seealso cref="!:int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntrySignedValue.setValue(System.Int64)">
            <seealso cref="!:EscherOptEntry#setValue(long)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntrySignedValue.writeEntry(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:EscherOptEntry#writeEntry(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryString">
            <summary> <p>Manages OptEntries that have unicode strings as their value data</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryString.copy">
            <seealso cref="!:EscherOptEntry#copy()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryString.readValueData(System.SByte[],System.Int32)">
            <seealso cref="!:int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryString.setValue(System.Int64)">
            <summary> Do not use this method.  Use setString instead</summary>
            <throws>  SARuntimeException if this method is called.  Use setString instead. </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryString.setValueData(System.SByte[])">
            <summary> Do not use this method.  Use setString instead</summary>
            <throws>  SARuntimeException if this method is called.  Use setString instead. </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryString.writeValueData(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:EscherOptEntry#writeValueData(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryString.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:EscherOptEntry#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryString.TotalSize">
            <seealso cref="!:EscherOptEntry#getTotalSize()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryType">
            <summary> <p>This class holds all the different types of entries that may be found in 
            an OPT subrecord.</p>
            
            This is not a type safe enum because of the large number of options.
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherRect">
            <summary> <p>A Rect defines a region by a mTop mLeft and mBottom mRight coordinate.
            This class is responsible for reading, and writing its data in the format
            expected within MsoDrawing subrecords.</p>
            <p>Rects have the following structure:</p>
            <code>
            typedef struct RECT
            {
            S32 mLeft;
            S32 mRight;
            S32 mTop;
            S32 mBottom;
            }RECT;
            </code>
            <p>Note that the fields within a rect are <i>signed</i> 32 bit numbers.</p>
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherRect.#ctor">
            <summary> Construct a new rect.  The resulting Rect will have invalid values
            for its mTop, mLeft, mBottom and mRight variables.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherRect.copy">
            <summary> Returns a new Rect that is a deep clone of this Rect.</summary>
            <returns> a new Rect that is a deep clone of this Rect.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherRect.initializeData(System.SByte[],System.Int32)">
            <summary> Initializes the data fields in this Rect from the specified buffer
            begining at the speified location.  If this is called from another
            method reading from the buffer, they should increment their own 
            internal offset counter by {@link EscherRect#SIZE} after this method returns.
            </summary>
            <param name="aBuff">the buffer to read from
            </param>
            <param name="aOffset">the starting point in aBuff
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherRect.writeData(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <summary> Writes the data in this Rect to the specified buffer.</summary>
            <param name="aBuff">the buffer to write to
            </param>
            <throws>  IOException if anything goes wrong while writing the data </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherRect.ToString">
            <seealso cref="!:java.lang.Object#toString()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherRect.Bottom">
            <returns> Returns the mBottom.
            </returns>
            <param name="bottom">The mBottom to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherRect.Left">
            <returns> Returns the mLeft.
            </returns>
            <param name="left">The mLeft to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherRect.Right">
            <returns> Returns the mRight.
            </returns>
            <param name="right">The mRight to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherRect.Top">
            <returns> Returns the mTop.
            </returns>
            <param name="top">The mTop to set.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherShapeType">
            <summary> <p>This class holds all the different types of shapes that may be found
            in the type field of an SP subrecord</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord">
            <summary> MsoSubrecord represents an abstraction of any properties common to 
            all MsoSubrecords.  As such it should be the base class for all 
            MsoSubrecords.  
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.Subrecord">
            <summary> Subrecord represents a record which is contained within the data block of
            other records, or other subrecords.  Subrecords may contain zero or more
            additional subrecords within their data block.  However, they have no 
            knowledge of these internal subrecords as they are handled at the
            subelement level for the particular package.
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.Subrecord.copy">
            <summary> Copies all the data fields in this Subrecord into a new
            Subrecord.
            </summary>
            <returns> an new Subrecord which is a deep clone of this subrecord.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.Subrecord.write(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <summary> Writes the data and headers for this Subrecord.  This should only be
            called after {@link #calcSize()} or {@link #calcSize(int)} if this
            subrecord contains child subrecords has been called. 
            </summary>
            <param name="aBuff">the buffer to write subrecord data to.
            </param>
            <throws>  IOException if an error occures during write </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.Subrecord.calcSize">
            <summary> Calculates the size of this subrecord's header and any data it knows 
            about, this data does not include child subrecords.  If this subrecord 
            has child subrecords, {@link #calcSize(int)} should be called instead.
            </summary>
            <returns> the size of this subrecord's header and data.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.Subrecord.calcSize(System.Int32)">
            <summary> Calculates the size of this subrecords' header and data.  The header's
            size field is updated with the specified child size to prepare the
            subrecord for writing.
            </summary>
            <param name="aChildSize">the size of any child records contained in the data
            block for this subrecord.
            </param>
            <returns> the size of this subrecord's header and non-child data.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.Subrecord.updateSubrecordHeader(System.Int32)">
            <summary> Updates the header in this subrecord with the specified size of any
            child records.  This will prepare the subrecord for writing.
            </summary>
            <param name="childSize">the size of any child subrecords that will be writen
            in the data block for this subrecord.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.Subrecord.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <summary> Add a structured representation of this Subrecord to the specified 
            StructuredOutputHandler
            </summary>
            <param name="aHandler">the handler to process the representation of this 
            Subrecord
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.Subrecord.ToString">
            <seealso cref="!:java.lang.Object#toString()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.Subrecord.toXml">
            <summary> Returns a XML representation of this subrecord.</summary>
            <returns> a XML representation of this subrecord.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.Subrecord.Size">
            <summary> Returns the size of this subrecord's header and non-child data.</summary>
            <returns> the size of this subrecord's header and non-child data.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.Subrecord.HeaderSize">
            <summary> Returns the fixed size of the subrecord's header</summary>
            <returns> the fixed size of the subrecord's header
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.Subrecord.DataSize">
            <summary> Returns the size of the data fields (both static and variable sized)
            in the subrecord.  This should not include the size of any child
            subrecords.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord.mHeader">
            <summary> The header for the subrecord.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader)">
            <summary> Build a new subrecord from the specified header </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord.copy">
            <seealso cref="!:Subrecord#copy()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord.copyDataTo(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord)">
            <summary> Copies the subrecord data in this subrecord to the specified subrecord.
            This method will fail unless aSubrec is the same type as this subrecord.
            </summary>
            <param name="aSubrec">the subrecord to copy data to
            </param>
            <returns> aSubrec after it has had this subrecord's data copied to it.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord.writeData(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <summary> Writes the data from this subrecord to the specified buffer. This excludes the header;
            use write() to write the whole thing</summary>
            <param name="aBuff">the buffer to write data to
            </param>
            <throws>  IOException if an error occurs writing the data </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord.updateSubrecordHeader(System.Int32)">
            <seealso cref="!:Subrecord#updateSubrecordHeader(int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord.initializeData(System.SByte[],System.Int32)">
            <summary> Initialize the data in this subrecord starting at the specified location
            in the specified buffer.
            </summary>
            <param name="aBuff">the buffer to copy data from
            </param>
            <param name="aOffset">the starting point in the buffer to begin reading from
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord.createMsoSubrecord(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader,System.Int16)">
            <summary> Factory method to create a new MsoSubrecord using an existing header.
            The header must be initialized so that its type can be used to determine
            what class of MsoSubrecord to return.
            </summary>
            <param name="aHeader">an initialized header to base the new subrecord on
            </param>
            <returns> the newly created subrecord
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord.HeaderSize">
            <seealso cref="!:Subrecord#getHeaderSize()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipBitmap">
            <summary> <p>This record holds the image header and data for JPEG, PNG, OR DIB images.
            </p>
            <p>The record has the following structure<code>
            // The secondary, or data, UID - should always be set. 
            BYTE  m_rgbUid[16];
            //The primary UID - this defaults to 0, in which case the primary ID is
            //that of the internal data. NOTE!: The primary UID is only saved to disk
            //if (blip_instance ^ blip_signature == 1). Blip_instance is MSOFBH.finst and 
            //blip_signature is one of the values defined in MSOBI
            BYTE  m_rgbUidPrimary[16];    // optional based on the above check
            BYTE  m_bTag;            
            void  *m_pvBits;              // raster bits of the blip.
            </code></p>
            <p>
            Additionally, as with all Blip records, the type of blip is encoded in the
            inst field of the header.
            </p>
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipBitmap.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipBitmap.copyDataTo(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord)">
            <seealso cref="!:EscherSubrecord#copyDataTo(MsoSubrecord)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipBitmap.writeData(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:EscherSubrecord#writeData(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipBitmap.initializeData(System.SByte[],System.Int32)">
            <seealso cref="!:int)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipBitmap.DataSize">
            <seealso cref="!:Subrecord#getDataSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipBitmap.InstBlipType">
            <summary> Returns the blip type as encoded in the inst field of the header</summary>
            <returns>
            </returns>
            <summary> Sets the blip type as encoded in the inst field of the header</summary>
            <param name="aType">the new blip type that should be encoded in the 
            inst field of the header
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipBitmap.ImageData">
            <returns> Returns the mImageData.
            </returns>
            <param name="imageData">The mImageData to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipBitmap.Uid">
            <returns> Returns the mUid.
            </returns>
            <param name="uid">The mUid to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipBitmap.UidPrimary">
            <returns> Returns the mUidPrimary.
            
            NOTE: never used or filled
            </returns>
            <param name="uidPrimary">The mUidPrimary to set.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipMetafile">
            <summary> <p>
            This record holds a BLIP (Big Large Image or Picture) with one of the
            following types: EMF, WMF, PICT. These files all share a common structure
            allowing them to be in a single class despite having different subrecord
            types.
            </p>
            <p>
            The record has the following structure: <code>
            // The secondary, or data, UID - should always be set.
            BYTE  m_rgbUid[16];
            //The primary UID - this defaults to 0, in which case the primary ID is
            //that of the internal data. NOTE!: The primary UID is only saved to disk
            //if (blip_instance ^ blip_signature == 1). Blip_instance is MSOFBH.inst and 
            //blip_signature is one of the values defined in MSOBI
            BYTE  m_rgbUidPrimary[16]; // optional based on the above check
            
            //Metafile Blip overhead = 34 bytes. m_cb gives the number of
            //bytes required to store an uncompressed version of the file, m_cbSave
            //is the compressed size.  m_mfBounds gives the boundary of all the
            //drawing calls within the metafile (this may just be the bounding box
            //or it may allow some whitespace, for a WMF this comes from the
            //SetWindowOrg and SetWindowExt records of the metafile).
            int           m_cb;           // Cache of the metafile size
            RECT          m_rcBounds;     // Boundary of metafile drawing commands
            POINT         m_ptSize;       // Size of metafile in EMUs
            int           m_cbSave;       // Cache of saved size (size of m_pvBits)
            BYTE          m_fCompression; // MSOBLIPCOMPRESSION
            BYTE          m_fFilter;      // always msofilterNone
            void         *m_pvBits;       // Compressed bits of metafile.
            </code>
            </p>
            <p>
            Additionally, as with all Blip records, the type of blip is encoded in the
            inst field of the header.
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipMetafile.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipMetafile.copyDataTo(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord)">
            <seealso cref="!:EscherSubrecord#copyDataTo(MsoSubrecord)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipMetafile.writeData(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:EscherSubrecord#writeData(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipMetafile.initializeData(System.SByte[],System.Int32)">
            <seealso cref="!:EscherSubrecord#initializeData(byte[],">
            int)
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipMetafile.getInstBlipType">
            <summary> Returns the blip type as encoded in the inst field of the header</summary>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipMetafile.setInstBlipType(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherBlipType)">
            <summary> Sets the blip type as encoded in the inst field of the header</summary>
            <param name="aType">the new blip type that should be encoded in the 
            inst field of the header
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipMetafile.DataSize">
            <seealso cref="!:Subrecord#getDataSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipMetafile.Bounds">
            <returns> Returns the mBounds.
            </returns>
            <param name="bounds">The mBounds to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipMetafile.Compression">
            <returns> Returns the mCompression.
            </returns>
            <param name="compression">The mCompression to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipMetafile.Filter">
            <returns> Returns the mFilter.
            </returns>
            <param name="filter">The mFilter to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipMetafile.ImageData">
            <returns> Returns the mImageData.
            </returns>
            <param name="imageData">The mImageData to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipMetafile.PtSize">
            <returns> Returns the mPtSize.
            </returns>
            <param name="ptSize">The mPtSize to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipMetafile.SavedSize">
            <returns> Returns the mSavedSize.
            </returns>
            <param name="savedSize">The mSavedSize to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipMetafile.Uid">
            <returns> Returns the mUid.
            </returns>
            <param name="uid">The mUid to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipMetafile.UidPrimary">
            <returns> Returns the mUidPrimary.
            </returns>
            <param name="uidPrimary">The mUidPrimary to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipMetafile.UncompressedSize">
            <returns> Returns the mUncompressedSize.
            </returns>
            <param name="uncompressedSize">The mUncompressedSize to set.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE">
            <summary> <p>A BSE (BLIP Store Entry) record holds meta information about a BLIP
            (Big Large Image or Picture).</p>
            <p>The BSE record has the following structure:<code>
            // FBSE - File Blip Store Entry
            typedef struct _FBSE
            {
            BYTE      btWin32;    // Required type on Win32
            BYTE      btMacOS;    // Required type on Mac
            BYTE      rgbUid[16]; // Identifier of blip
            WORD      tag;        // currently unused
            ULONG     size;       // Blip size in stream
            ULONG     cRef;       // Reference count on the blip
            MSOFO     foDelay;    // File offset in the delay stream
            BYTE      usage;      // How this blip is used (MSOBLIPUSAGE)
            BYTE      cbName;     // length of the blip name
            BYTE      unused2;    // for the future
            BYTE      unused3;    // for the future
            } FBSE;</code></p>
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.mBlipSize">
            <summary> Holds size</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.mBlipTypeMacOs">
            <summary> Holds btMacOS</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.mBlipTypeWin32">
            <summary> Holds btWin32</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.mBSEHashId">
            <summary> Holds rgbUid[16]</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.mDelayFileOffset">
            <summary> Holds foDelay</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.mRefCount">
            <summary> Holds cRef</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.mTag">
            <summary> Holds tag</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.mUnused2">
            <summary> Holds unused2</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.mUnused3">
            <summary> Holds unused3</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.mUsage">
            <summary> Holds usage</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.copyDataTo(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord)">
            <seealso cref="!:EscherSubrecord#copyDataTo(MsoSubrecord)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.writeData(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:EscherSubrecord#writeData(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.initializeData(System.SByte[],System.Int32)">
            <seealso cref="!:int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.calcSize(System.Int32)">
            <seealso cref="!:Subrecord#calcSize(int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:Subrecord#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.DataSize">
            <seealso cref="!:Subrecord#getDataSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.RefCount">
            <returns> Returns the mRefCount.
            </returns>
            <param name="refCount">The mRefCount to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.Tag">
            <returns> Returns the mTag.
            </returns>
            <param name="tag">The mTag to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.Usage">
            <returns> Returns the mUsage.
            </returns>
            <param name="usage">The mUsage to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.BlipSize">
            <returns> Returns the mBlipSize.
            </returns>
            <param name="blipSize">The mBlipSize to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.BlipTypeMacOs">
            <returns> Returns the mBlipTypeMacOS.
            </returns>
            <param name="blipTypeMacOS">The mBlipTypeMacOS to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.BlipTypeWin32">
            <returns> Returns the mBlipTypeWin32.
            </returns>
            <param name="blipTypeWin32">The mBlipTypeWin32 to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.BSEHashId">
            <returns> Returns the mBSEHashId.
            </returns>
            <param name="hashId">The mBSEHashId to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBSE.DelayFileOffset">
            <returns> Returns the mDelayFileOffset.
            </returns>
            <param name="delayFileOffset">The mDelayFileOffset to set.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCHILDANCHOR">
            <summary> <p>A CHILDANCHOR subrecord describes the position of a Shape that is
            part of a group.  The record just consists of a rect describing
            that position.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCHILDANCHOR.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader)">
            <summary> Constructs a new MsoSubrecordCHILDANCHOR from the specified header. </summary>
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCHILDANCHOR.copyDataTo(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord)">
            <seealso cref="!:EscherSubrecord#copyDataTo(MsoSubrecord)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCHILDANCHOR.writeData(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:EscherSubrecord#writeData(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCHILDANCHOR.initializeData(System.SByte[],System.Int32)">
            <seealso cref="!:int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCHILDANCHOR.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:Subrecord#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCHILDANCHOR.DataSize">
            <seealso cref="!:Subrecord#getDataSize()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTANCHOR">
            <summary> <p>
            The CLIENTANCHOR subrecord holds the position of a top level group or shape
            within an Excel WORKSHEET or CHARTSHEET.
            </p>
            <p>
            <b>For a WORKSHEET:</b> The size and position are specified as a row/column
            coordinate and an offset from the top-left corner of the cell at that
            coordinate. For the purposes of these offsets, a cell is 1024 units wide and
            256 units tall. This fractional value may then be multiplied by the actual
            size of the cell to get the actual position of the object.
            </p>
            <p>
            <b>For a CHARTSHEET:</b> The size and position are specified in 1/4000 ths
            of the ChartArea. This is the same as any other component on a chart. The
            FirstColInt and FirstRowInt correspond to the top left x and y coordinates,
            respectivly. The LastColInt and LastRowInt correspond to the bottom right x
            and y coordinates respectivly. It appears that all fractional values are not
            used.
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTANCHOR.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader)">
            <summary> Construct a new CLIENTANCHOR record from the specified header</summary>
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTANCHOR.copyDataTo(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord)">
            <seealso cref="!:EscherSubrecord#copyDataTo(MsoSubrecord)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTANCHOR.writeData(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:EscherSubrecord#writeData(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTANCHOR.initializeData(System.SByte[],System.Int32)">
            <seealso cref="!:int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTANCHOR.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:Subrecord#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTANCHOR.DataSize">
            <seealso cref="!:Subrecord#getDataSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTANCHOR.FirstColFractional">
            <summary> Return the fractional part of the column coordinate of the top left
            corner of the Shape
            </summary>
            <returns> Returns the mFirstColFractional.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTANCHOR.FirstColInt">
            <summary> Returns the integer part of the column coordinate of the top left
            corner of the Shape
            </summary>
            <returns> Returns the mFirstColInt.
            </returns>
            <summary> Sets the integer part of the column coordinate of the top left
            corner of the Shape
            </summary>
            <param name="firstColInt">The mFirstColInt to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTANCHOR.FirstRowFractional">
            <summary> Returns the fractional part of the row coordinate of the top left
            corner of the Shape
            </summary>
            <returns> Returns the mFirstRowFractional.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTANCHOR.FirstRowInt">
            <summary> Returns the integer part of the row coordinate of the top left
            corner of the Shape
            </summary>
            <returns> Returns the mFirstRowInt.
            </returns>
            <summary> Sets the integer part of the row coordinate of the top left
            corner of the Shape
            </summary>
            <param name="firstRowInt">The mFirstRowInt to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTANCHOR.LastColFractional">
            <summary> Returns the fractional part of the column coordinate of the bottom right
            corner of the Shape
            </summary>
            <returns> Returns the mLastColFractional.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTANCHOR.LastColInt">
            <summary> Returns the integer part of the column coordinate of the bottom right
            corner of the Shape
            </summary>
            <returns> Returns the mLastColInt.
            </returns>
            <summary> Sets the integer part of the column coordinate of the bottom right
            corner of the Shape
            </summary>
            <param name="lastColInt">The mLastColInt to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTANCHOR.LastRowFractional">
            <summary> Returns the fractional part of the row coordinate of the bottom right
            corner of the Shape
            </summary>
            <returns> Returns the mLastRowFractional.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTANCHOR.LastRowInt">
            <summary> Returns the integer part of the row coordinate of the bottom right
            corner of the Shape
            </summary>
            <returns> Returns the mLastRowInt.
            </returns>
            <summary> Sets the integer part of the row coordinate of the bottom right
            corner of the Shape
            </summary>
            <param name="lastRowInt">The mLastRowInt to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTANCHOR.NoResizeOnFixup">
            <summary>
            Counter intuitive method. Checks for a bit that specifies whether the drawing object 
            resizes with the sheet grid. Taken directly from excel spec. (section 2.5.193 in MS-XLS)
            Returns true if the drawing object is not supposed to resize (2nd bit is 1) when
            the grid under it is changed, false if it is supposed to resize (2nd bit is 0) on grid updated.  
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTANCHOR.NoMoveOnFixup">
            <summary>
            If this is true, the absolute position of this should stay the same regardless of
            what happens in the grid underneath. The docs (section 2.5.193 in MS-XLS) say that
            if this flag is true, NoResizeOnFixup must also be true.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTANCHORHF.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader)">
            <summary> Construct a new CLIENTANCHORHF record from the specified header</summary>
            <param name="aHeader">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTANCHORHF.DataSize">
            <seealso cref="!:Subrecord#getDataSize()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTDATA">
            <summary> <p>The CLIENTDATA subrecord indicates the portion of the MSODRAWING record
            where data from the client application (in this case Excel) should be
            writen.  Rather than store the data within the subrecord, Excel chooses to
            end the MSODRAWING record and insert an OBJ Excel record and then resume
            the content of the MSODRAWING record in a new MSODRAWING record.  This 
            subrecord <i>should</i> have zero length data, but handles the case where
            it has data just in case.</p> 
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTDATA.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader)">
            <summary> Construct a new CLIENTDATA subrecord using the specified header</summary>
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTDATA.copyDataTo(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord)">
            <seealso cref="!:EscherSubrecord#copyDataTo(MsoSubrecord)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTDATA.writeData(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:EscherSubrecord#writeData(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTDATA.initializeData(System.SByte[],System.Int32)">
            <seealso cref="!:int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTDATA.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:Subrecord#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTDATA.DataSize">
            <seealso cref="!:Subrecord#getDataSize()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTTEXTBOX">
            <summary> <p>Simillar to the CLIENTDATA subrecord, CLIENTTEXTBOX indicates the place
            in an MSODRAWING record where the client application (in this case Excel)
            should write client specific text information.  Rather than write the
            text information in the subrecord itself, Excel chooses to end the 
            MSODRAWING record and write a TXO Excel record, which may be followed by
            two CONTINUE records.  Excel then resumes the MSODRAWING record in a new
            MSODRAWING record after the text information.  This subrecord should hold
            zero length data, but handles the case where there is data just in case.</p> 
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTTEXTBOX.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTTEXTBOX.copyDataTo(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord)">
            <seealso cref="!:EscherSubrecord#copyDataTo(MsoSubrecord)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTTEXTBOX.writeData(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:EscherSubrecord#writeData(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTTEXTBOX.initializeData(System.SByte[],System.Int32)">
            <seealso cref="!:int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTTEXTBOX.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:Subrecord#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTTEXTBOX.DataSize">
            <seealso cref="!:Subrecord#getDataSize()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordContainer">
            <summary> <p>MsoSubrecordContainer is a generic subrecord class to handle MsoSubrecords
            that are simply container subrecords.  Container subrecords contain only 
            child subrecords within their data blocks, not specific fields.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordContainer.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader)">
            <summary> Construct a new MsoSubrecordContainer from the specified header</summary>
            <param name="aHeader">the header
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordContainer.copyDataTo(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord)">
            <seealso cref="!:EscherSubrecord#copyDataTo(MsoSubrecord)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordContainer.writeData(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:EscherSubrecord#writeData(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordContainer.initializeData(System.SByte[],System.Int32)">
            <seealso cref="!:int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordContainer.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:Subrecord#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordContainer.DataSize">
            <seealso cref="!:Subrecord#getDataSize()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDG">
            <summary> <p>The record holds information about an individual drawing.</p>
            <p>The DG record has the following structure:</p>
            <code>
            // FDG - File DG
            typedef struct _FDG
            {
            ULONG     csp;          // The number of shapes in this drawing
            MSOSPID   spidCur;      // The last MSOSPID given to an SP in this DG
            } FDG;
            </code>
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDG.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader)">
            <summary> Construct a new DG subrecord using the specified header</summary>
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDG.copyDataTo(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord)">
            <seealso cref="!:EscherSubrecord#copyDataTo(MsoSubrecord)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDG.writeData(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:EscherSubrecord#writeData(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDG.initializeData(System.SByte[],System.Int32)">
            <seealso cref="!:int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDG.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:Subrecord#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDG.DataSize">
            <seealso cref="!:Subrecord#getDataSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDG.LastShapeId">
            <summary> Returns the last shape id given to a shape in this drawing.</summary>
            <returns> Returns the mLastShapeId.
            </returns>
            <summary> Sets the last shape id given to a shape in this drawing.</summary>
            <param name="lastShapeId">The mLastShapeId to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDG.NumShapes">
            <summary> Returns the number of shapes in this drawing.</summary>
            <returns> Returns the mNumShapes.
            </returns>
            <summary> Sets the number of shapes in this drawing.</summary>
            <param name="numShapes">The mNumShapes to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDG.DrawingId">
            <summary> Returns the drawing id for this drawing.  This is a convenience as
            this value is encoded in the header's inst field.
            </summary>
            <returns> the drawing id for this drawing.
            </returns>
            <summary> Sets the drawing Id for this drawing.  This is a convenience as this
            value is encoded in the header's inst field.
            </summary>
            <param name="aId">the new drawing Id for this drawing.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDGG">
            <summary> <p>A DGG record describes a drawing group.  It begins with several fixed
            length fields, followed by a variable length array of ID clusters</p>
            <code>
            // FDGG - File DGG
            typedef struct _FDGG
            {
            MSOSPID spidMax; // The current maximum shape ID
            ULONG cidcl;     // The number of ID clusters (FIDCLs) 
            ULONG cspSaved;  // The total number of shapes saved
            // (including deleted shapes, if undo
            // information was saved)
            ULONG cdgSaved;  // The total number of drawings saved
            } FDGG;
            
            Each ID cluster is as follows:
            // File ID Cluster - used to save IDCLs
            typedef struct _FIDCL
            {
            MSODGID dgid;    // DG owning the SPIDs in this cluster
            ULONG cspidCur;  // number of SPIDs used so far
            } FIDCL;
            </code>
            <p>It is important to note that the ID clusters are not subrecords because
            they have no header.</p>
            <p>It appears that the first block of ID's (0-1024) are reserved and not
            allocated to drawings.  This block does not appear in the record, but is
            counted in the cidcl count.  The class below accomidates this and will
            return the actual number of shape id clusters rather than the direct value
            in cidcl.</p>
            <p>Shape ID's are allocated to a drawing in blocks of 1024 begining with 
            1025.  What actually constitutes a drawing is still a bit unclear, but it
            appears that in Excel all the drawing objects on a Worksheet comprise a
            single drawing.  If a drawing uses more than 1024 ID's, a new block will be
            allocated for that drawing.  If a shape is deleted, its ID does not appear to
            be reallocated and reused.  Instead, the count of shapes is decremented and
            any new shape will take the max shape ID + 1 for that drawing.</p>
            <p>The order of IDClusters within the data block of this record defines
            the ID range assigned to this block.  For example the first block to appear
            in the file holds Id's 1025-2048 and the second block holds 2049-3072, etc.</p>
            <p>When a drawing is deleted, the ID cluster it holds are not deallocated,
            instead the owningDgId of that cluster is set to 0.  Once a shape has been
            added to a worksheet, that worksheet will always have drawing elements
            (specifically the patriarch shape) even if all visible drawing elements are
            deleted.  The patriarch is only removed if the entire worksheet is deleted.
            </p>
            <p>Drawing Id's are reallocated.  When a drawing is deleted, numDrawings is 
            decremented.  When creating a new drawing, increment numDrawings.  The new
            drawing Id will be 1 greater than the max existing drawing Id.  If we 
            deleted the previous max drawing id then the new drawing id will be the 
            same.</p>
            <p>When all drawings are deleted, the MSODRAWINGGROUP record is also 
            deleted</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDGG.mNumDrawings">
            <summary> Holds the number of drawings in the document.  This number begins at
            1 (0 is an invalid ID used for deleted drawings).
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDGG.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDGG.copyDataTo(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord)">
            <seealso cref="!:EscherSubrecord#copyDataTo(MsoSubrecord)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDGG.writeData(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:EscherSubrecord#writeData(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDGG.initializeData(System.SByte[],System.Int32)">
            <seealso cref="!:int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDGG.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:Subrecord#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDGG.allocateDrawingId">
            <summary> Allocates and returns a new DrawingID.</summary>
            <returns> a new DrawingID
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDGG.deallocateDrawingId(System.Int64)">
            <summary> This method should be called when a drawing is deleted to deallocate
            its Id and to mark all its shape Id's as used but invalid.
            </summary>
            <param name="aDrawingId">the Id of the drawing being deleted and which should
            be deallocated.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDGG.allocateShapeId(System.Int64)">
            <summary> Allocates and returns a new shape ID for the specified drawing Id</summary>
            <param name="aDrawingId">the Id of the drawing that will contain the new
            shape
            </param>
            <returns> the newly allocated shape Id
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDGG.deallocateShapeId(System.Int64,System.Int64)">
            <param name="drawId">
            </param>
            <param name="spId">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDGG.DataSize">
            <seealso cref="!:Subrecord#getDataSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDGG.NumDrawings">
            <summary> Returns the number of drawings in the document</summary>
            <returns> the number of drawings in the document
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordDGG.IdCluster">
            <summary> <p>The IdCluster class encapsulates an Id cluster entry that
            appears in the data block of a DGG record.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader">
            <summary> <p>
            The MsoSubrecordHeader is an 8 byte structure that is common to all
            MsoSubrecords regardless of their depth within the subrecord structure.
            </p>
            <p>
            The header has the following structure: <code>
            typedef struct MSOFBH
            {
            struct
            {
            ULONG ver : 4;     //record version.  if a container = 0xFFFF
            ULONG inst: 12;	  //distinguishes between different usages of the record
            ULONG fbt : 16;    //record type 0xF000 to 0xFFFF
            };
            ULONG     cbLength;    //record length in bytes. if record is an atom, 
            //refers to length of atom excluding header, if a 
            //container holds sum of lengths of atoms inside 
            //it plus length of container.
            } MSOFBH;
            </code>
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader.#ctor(System.SByte[],System.Int32)">
            <summary> Build a new MsoSubrecordHeader an initialize it from the specified 
            buffer begining at the specified offset.
            </summary>
            <param name="aBuff">the buffer to intialize the data from
            </param>
            <param name="aOffset">where to begin reading data from aBuff
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader.#ctor(System.Int32,System.Int64,System.Int32,System.Int32)">
            <summary> Initialize the header from the data fields</summary>
            <param name="aType">the type of subrecord this header is for
            </param>
            <param name="aSize">the size of the subrecord's data (if its an atom) or the
            size of the data and headers (if its a container)
            </param>
            <param name="aVer">the ver field for the header
            </param>
            <param name="aInst">the inst field for the header
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader.init(System.SByte[],System.Int32)">
            <summary> Initialize this header from the specified byte[] begining at the
            specified offset.
            </summary>
            <param name="aBuff">the array to initialize from
            </param>
            <param name="aOffset">the offset to start at
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader.writeHeader(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <summary> Write the header to the specified buffer</summary>
            <param name="aBuff">the buffer to write to
            </param>
            <throws>  IOException if an error occurs while writing the header </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader.copy">
            <summary> Create and return a deep clone of this header.</summary>
            <returns> a deep clone of this header
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader.Type">
            <summary> Returns the type of MsoSubrecord represented by this header</summary>
            <returns>
            </returns>
            <summary> Sets the type of record this header corresponds to</summary>
            <param name="aType">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader.Size">
            <summary> Returns the size of this MsoSubrecord</summary>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader.Ver">
            <summary> Returns the ver portion of the header.</summary>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader.Inst">
            <summary> Returns the inst portion of the header</summary>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader.Container">
            <summary> Returns whether this SubrecordHeader represents a container subrecord.
            This will be true when the ver portion of the header = 0x000F.
            </summary>
            <returns> whether this SubrecordHeader represents a container subrecord.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordOPT">
            <summary> <p>This record holds drawing object properties.  These properties are stored
            as an array of FOPTE's (see below).  However, because certain types
            of property values may not fit into a FOPTE structure, the structure may
            indicate (via the fComplex bit) that the value of the FOPTE only holds 
            the length of the data.  This data is then stored after the array of
            FOPTE's sorted by property id (pid in FOPTE).</p>
            <p>The following is the structure of a FOPTE:<code>
            typedef struct _FOPTE
            {
            struct
            {
            USHORT pid : 14;     // Property ID
            USHORT fBid : 1;     // value is a blip ID – only valid if fComplex is FALSE
            USHORT fComplex : 1; // complex property, value is length
            };
            ULONG   op;  // Value
            } FOPTE;
            </code></p>
            <p>There's also a bunch of notes on types and data which will be noted
            throughout this record.  The interested reader should reference the
            Microsoft Office 97 Drawing File Format documentation in the MSDN library.
            However, you'll need to find an old version of it because Microsoft 
            helpfully removed that particular documentation from the current MSDN 
            library.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordOPT.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordOPT.copyDataTo(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord)">
            <seealso cref="!:EscherSubrecord#copyDataTo(MsoSubrecord)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordOPT.writeData(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:EscherSubrecord#writeData(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordOPT.initializeData(System.SByte[],System.Int32)">
            <seealso cref="!:int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordOPT.getEntry(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryType)">
            <summary> Returns the property entry with the specified type or creates a new
            entry with default values if no entry of the specified type
            currently exists.
            </summary>
            <param name="aType">the type to retrieve
            </param>
            <returns> the retrieved type or null if no such type exists.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordOPT.addEntry(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntry)">
            <summary> Adds a property entry to this OPT subrecord.  If an entry of that type
            already exists, a SARuntimeException will be thrown.
            </summary>
            <param name="aEntry">the entry to add
            </param>
            <throws>  SARuntimeException if an entry of the same type as aEntry  </throws>
            <summary> already exists.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordOPT.removeEntry(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntry)">
            <summary> Removes the specified entry from this OPT subrecord</summary>
            <param name="aEntry">the entry to remove
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordOPT.removeEntry(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherOptEntryType)">
            <summary> Removes the entry of the specified type from this OPT subrecord</summary>
            <param name="aType">the type of entry to remove
            </param>
            <returns> the removed entry
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordOPT.DataSize">
            <seealso cref="!:Subrecord#getDataSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordOPT.EntryCount">
            <summary> Returns a count of the properties in this OPT subrecord.</summary>
            <returns> a count of the properties in this OPT subrecord.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordReader">
            <summary> <p>MsoSubrecordReader reads a sequence of subrecords from a byte[].  The reader
            delves into container subrecords, so it takes the structure of nested
            subrecords and flattens it into a stream of subrecords.</p> 
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordReader.#ctor(System.Int16,System.SByte[])">
            <summary> Construct a new MsoSubrecordReader to read subrecords from the specified
            buffer.
            </summary>
            <param name="aBuff,">the buffer to read from.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordReader.nextSubrecord">
            <summary> Returns the next available subrecord from the buffer.  
            {@link #hasNext()} should be called prior to calling this method to
            check if more subrecords exist to be returned.
            </summary>
            <returns> the next MsoSubrecord from the buffer.
            </returns>
            <throws>  SARuntimeException if no more subrecords exist in the buffer </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordReader.hasNext">
            <summary> Returns <code>true</code> if more {@link #nextSubrecord()} will return
            a MsoSubrecord rather than throw an exception and <code>false</code> 
            otherwise.
            </summary>
            <returns> <code>true</code> if the buffer contains more subrecords and
            <code>false</code> otherwise.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordScanner">
            <summary> This is a scanner that translates the Subrecords produced by 
            MsoSubrecordScanner to Symbols that a Cup generated parser can understand. 
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordScanner.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordReader)">
            <summary> Construct a new MsoSubrecordScanner on top of the specified reader.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordScanner.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordReader,System.Int16)">
            <param name="contReader">
            </param>
            <param name="type">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordScanner.next_token">
            <seealso cref="!:Scanner#next_token()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSELECTION">
            <summary> The SELECTION subrecord describes the shapes currently selected
            
            Selections of shapes are saved as top-level file blocks; they are never
            placed in a container. (Note: As of Office 97, only Excel saves shape
            selections; Word and PowerPoint do not.) The selection record consists of an
            FDGSL followed by the SPIDs of the shapes in the selection.
            
            <pre>
            // FDGSL - File Drawing Selection
            typedef struct _FDGSL
            {
            ULONG         cpsp;       // number of shapes in the selection
            ULONG         dgslk;      // kind of selection (an MSODGSLK)
            MSOSPID       spidFocus;  // SPID of the focus shape
            } FDGSL;
            
            // DGSLK = DrawinG SeLection Kind.
            typedef enum
            {
            msodgslkNormal,          // Normal Selection Mode.
            msodgslkRotate,          // Rotate selection mode
            msodgslkReshape,         // Reshape Selection Mode.
            msodgslkUnused,
            msodgslkWrapPolygon,     // Display and edit of wrap polygons.
            msodgslkTextEdit         // Text Edit Mode.
            } MSODGSLK;
            </pre>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSELECTION.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader)">
            <summary> Constructs a new SELECTION subrecord</summary>
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSELECTION.copyDataTo(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord)">
            <seealso cref="!:EscherSubrecord#copyDataTo(EscherSubrecord)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSELECTION.writeData(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:EscherSubrecord#writeData(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSELECTION.initializeData(System.SByte[],System.Int32)">
            <seealso cref="!:EscherSubrecord#initializeData(byte[],">
            int)
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSELECTION.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:Subrecord#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSELECTION.DataSize">
            <seealso cref="!:Subrecord#getDataSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSELECTION.FocusShapeId">
            <returns> Returns the focusShapeId.
            </returns>
            <param name="aFocusShapeId">The focusShapeId to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSELECTION.NumShapes">
            <returns> Returns the numShapes.
            </returns>
            <param name="aNumShapes">The numShapes to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSELECTION.SelectedShapeIds">
            <returns> Returns the selectedShapeIds.
            </returns>
            <returns> Returns the selectedShapeIds.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSELECTION.SelectionType">
            <returns> Returns the selectionType.
            </returns>
            <param name="aSelectionType">The selectionType to set.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSP">
            <summary> <p>The SP record represents a Shape in a Drawing.  The inst field of the header
            contains the shape type.</p>
            <p>The SP record has the following structure:</p>
            <code>
            typedef struct _FSP
            {
            MSOSPID  spid;           // The shape id 
            ULONG    grfPersistent;
            } FSP;
            
            typedef struct 
            {
            ULONG fGroup : 1;        // This shape is a group shape
            ULONG fChild : 1;        // Not a top-level shape
            ULONG fPatriarch : 1;    // This is the topmost group shape.
            // Exactly one of these per drawing. 
            ULONG fDeleted : 1;      // The shape has been deleted
            ULONG fOleShape : 1;     // The shape is an OLE object
            ULONG fHaveMaster : 1;   // Shape has a hspMaster property
            ULONG fFlipH : 1;        // Shape is flipped horizontally
            ULONG fFlipV : 1;        // Shape is flipped vertically
            ULONG fConnector : 1;    // Connector type of shape
            ULONG fHaveAnchor : 1;   // Shape has an anchor of some kind
            ULONG fBackground : 1;   // Background shape
            ULONG fHaveSpt : 1;      // Shape has a shape type property
            ULONG reserved : 20;     // Not yet used
            }
            </code>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSP.mFlags">
            <summary> Ok to store this as in int as its upper 20 bits are reserved and
            unused
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSP.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader)">
            <summary> Construct a new SP record from the given header
            
            </summary>
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSP.copyDataTo(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord)">
            <seealso cref="!:EscherSubrecord#copyDataTo(MsoSubrecord)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSP.writeData(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:EscherSubrecord#writeData(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSP.initializeData(System.SByte[],System.Int32)">
            <seealso cref="!:int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSP.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:Subrecord#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSP.DataSize">
            <seealso cref="!:Subrecord#getDataSize()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSPGR">
            <summary> <p>The SPGR subrecord is only present in shapes that <i>are</i> groups. It 
            defines the coordinate system for all child chapes.</p>
            <p>The SPGR subrecord has the following structure:</p>
            <code>
            typedef struct _FSPGR
            {
            RECT   rcgBounds;
            } FSPGR;
            </code>
            <p>Note that the Ver field in the header should always be 1</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSPGR.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSPGR.copyDataTo(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord)">
            <seealso cref="!:EscherSubrecord#copyDataTo(MsoSubrecord)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSPGR.writeData(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:EscherSubrecord#writeData(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSPGR.initializeData(System.SByte[],System.Int32)">
            <seealso cref="!:int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSPGR.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:Subrecord#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordSPGR.DataSize">
            <seealso cref="!:Subrecord#getDataSize()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordTypes">
            <summary> This class lists all the possible subrecord types that may be found in an
            MSODRAWING or MSODRAWINGGROUP record's data block.
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordTypes.getNameStringForType(System.Int32)">
            <summary> Return a string representation of the name of the specified record type</summary>
            <param name="type">the type to get a string name for
            </param>
            <returns> the String name for the specified type
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordUnknown">
            <summary> MsoSubrecordUnknown represents an unimplemented or unknown type of 
            MsoSubrecord.
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordUnknown.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordHeader)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordUnknown.copyDataTo(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord)">
            <seealso cref="!:EscherSubrecord#copyDataTo(MsoSubrecord)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordUnknown.writeData(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:EscherSubrecord#writeData(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordUnknown.initializeData(System.SByte[],System.Int32)">
            <seealso cref="!:int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordUnknown.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:Subrecord#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordUnknown.DataSize">
            <seealso cref="!:Subrecord#getDataSize()">
            </seealso>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.EscherParser.EscherParser.ErrorOutput">
            error output stream.
                  It should be changeable.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.EscherParser.EscherParser.yyerror(System.String)">
            simplified error message.
                  @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.EscherParser.EscherParser.yyerror(System.String,System.String[])">
            (syntax) error message.
                  Can be overwritten to control message format.
                  @param message text to be displayed.
                  @param expected vector of acceptable tokens, if available.
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.EscherParser.EscherParser.yyFinal">
            debugging support, requires the package jay.yydebug.
                  Set to null to suppress debugging messages.
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.EscherParser.EscherParser.yyExpectingState">
            index-checked interface to yyNames[].
                  @param token single character or %token value.
                  @return token name or [illegal] or [unknown].
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.EscherParser.EscherParser.yyExpectingTokens(System.Int32)">
            computes list of expected tokens on error by tracing the tables.
                  @param state for which to compute the list.
                  @return list of token names.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.EscherParser.EscherParser.yyparse(SoftArtisans.OfficeWriter.ExcelWriter.ParserBase,System.Object)">
            the generated parser, with debugging messages.
                  Maintains a state and a value stack, currently with fixed maximum size.
                  @param yyLex scanner.
                  @param yydebug debug message writer implementing yyDebug, or null.
                  @return result of the last reduction, if any.
                  @throws yyException on irrecoverable parse error.
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.EscherParser.EscherParser.yyMax">
            initial size and increment of the state/value stack [default 256].
                  This is not final so that it can be overwritten outside of invocations
                  of yyparse().
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.EscherParser.EscherParser.yyDefault(System.Object)">
            executed at the beginning of a reduce action.
                  Used as $$ = yyDefault($1), prior to the user-specified action, if any.
                  Can be overwritten to provide deep copy, etc.
                  @param first value for $1, or null.
                  @return first.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.EscherParser.EscherParser.yyparse(SoftArtisans.OfficeWriter.ExcelWriter.ParserBase)">
            the generated parser.
                  Maintains a state and a value stack, currently with fixed maximum size.
                  @param yyLex scanner.
                  @return result of the last reduction, if any.
                  @throws yyException on irrecoverable parse error.
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.EscherParser.yyParser.yyException">
            thrown for irrecoverable syntax errors and stack overflow.
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSwitchingScanner">
            <summary> SwitchingScanner is a Scanner that takes its tokens from multiple other 
            Scanners.  This lets us provide input to a parser from disparate, possibly 
            hetrogenious, sources throughout a document (particularly the wackyness 
            that is MSODRAWING).  
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSwitchingScanner.next_token">
            <seealso cref="!:Scanner#next_token()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSwitchingScanner.addScanner(SoftArtisans.OfficeWriter.Shared.Scanner)">
            <summary> Add a new scanner to the end of the scanners already attached to this
            SwitchingScanner.  This method may <b>not</b> be called after 
            {@link #next_token()} has been called or a SARuntimeException will
            be thrown. 
            </summary>
            <param name="aScanner">the Scanner to add to this SwitchingScanner
            </param>
            <throws>  SARuntimeException if this method is called after next_token </throws>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherTreeDehydrator">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherTreeDehydrator.reportEscherSubrecordSize(System.Int16,System.Int32)">
            <summary> Tells the Dehydrator the size of an MsoSubrecord and returns the total
            size of all MsoSubrecords seen by this Dehydrator.
            </summary>
            <param name="aSize">the size of a MsoSubrecord
            </param>
            <returns> the size of all MsoSubrecords seen by this Deyhdrator so far.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherTreeDehydrator.getEscherStructureBuffer(System.Int16)">
            <summary> Returns a ByteDataBuffer approprate for writing a MsoSubrecord.</summary>
            <returns> a ByteDataBuffer approprate for writing a MsoSubrecord.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherTreeDehydrator.reportPlaceholder">
            <summary> Reports the size of a full record that appears in the sequence of 
            Escher records.
            </summary>
            <param name="aSize">the size being reported
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherTreeDehydrator.addPlaceholder(SoftArtisans.OfficeWriter.Shared.EscherPlaceholder)">
            <summary> Adds a record that appears in the sequence of Escher records.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAIHandler">
            <summary> <p>
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement">
            <summary> 
            
            Encapsulates any record, and is the only element with data that ties itself
            to the actual bytes.
            
            </summary>
            <author>  geoffk Jun 29, 2004 6:12:31 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.LeafElement">
            <summary> 
            Leaf elements are any elements which should hydrate, write, calc offsets,
            etc.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.LeafElement.hydrate">
            <summary> Hydrate any records and/or fields from the Excel file.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.LeafElement.calcSize">
            <summary> Return the total size that this leaf will occupy, in bytes, in the output file.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.LeafElement.write(System.IO.Stream)">
            <summary> Write this element out to an Excel file.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.LeafElement.Leaf">
            <summary> We override this method and return true; it is possible that a child could
            return false if it had children that should be called instead (unhydrated case, perhaps)
            
            </summary>
            <seealso cref="!:Element#isLeaf()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.LeafElement.Hydrated">
            <summary> Returns true if this LeafElement is already hydrated.
            Hydration means that we have the data from the Excel file in the object, instead of
            just holding pointers to that object.
            
            In some cases, it will not make sense to have this return anything but true.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement.copy">
            <seealso cref="!:Element#copy()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement.copyFieldsTo(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <summary> Copies the fields in this RecordHandlerElement to the specified
            RecordHandlerElement and returns that RecordHandlerElement. This method
            is a convenience so that subclasses do not have to copy this code.
            
            </summary>
            <param name="vEl">
            the RecordHandlerElement to write to
            </param>
            <returns> vEl after the fields from this RecordHandlerElement have been
            copied to it.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement.write(System.IO.Stream)">
            <param name="out">
            </param>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement.writeTailRecHandlerElement(System.IO.Stream)">
            <param name="out">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement.writeChildren(System.IO.Stream)">
            <param name="out">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement.calcSize">
            <seealso cref="!:LeafElement#calcSize()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement.createDefaultElement(System.Int16)">
            <param name="xlrecINDEX">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement.setDefaultRecordData(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record,System.Int16)">
            <param name="recordType">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement.Size">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement.RecHandlerElementTailSize">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Observers.Observable">
            <summary> 
            </summary>
            <author>  geoffk
            Nov 10, 2004 5:33:55 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAIHandler.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHeader)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAIHandler.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <param name="aRec">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAIHandler.#ctor(Antlr.Runtime.IToken)">
            <param name="aToken">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes">
            <summary> <p>ElementAxes is the parent element for the entire AxisGroup/Axis/ChartGroup
            structure of a Chart.  Primarily it provides access to the Primary and 
            Secondary AxisGroups and is the point of access for ChartGroups.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.mSavedLegend">
            <summary> This should only have a value if the legend can't be associated with a 
            ChartGroup because there is not chart group on the primary axis.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.addRecordHandlerChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <summary> 
            Adds a RecordHandlerElement as a child of this Element.  Should only 
            be called from the parser.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.addAxisGroupChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxisGroup)">
            <summary> 
            Adds a ElementAxisGroup as a child of this Element.  Should only 
            be called from the parser.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.getAxisElement(SoftArtisans.OfficeWriter.ExcelWriter.AxisType)">
            <summary> 
            Gets the ElementAxisGroup for the specified AxisType (primary or 
            secondary).  If the ElementAxisGroup does not exist it will be 
            created.
            </summary>
            <param name="aAxisType">the AxisType of the ElementAxisGroup to retrieve.
            </param>
            <returns> the ElementAxisGroup for the specified AxisType.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.insertAxisGroup(SoftArtisans.OfficeWriter.ExcelWriter.AxisType,SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxisGroup)">
            <summary> After parse time, this method should be used to ensure that an added
            ElementAxisGroup will be in the correct position.
            </summary>
            <param name="aAxisType">the AxisType of the specified ElementAxisGroup
            </param>
            <param name="aGroup">the ElementAxisGroup to add
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.getAxisGroup(SoftArtisans.OfficeWriter.ExcelWriter.AxisType)">
            <summary> Internal method used to get either the value of the variable hoding
            either the primary or secondary ElementAxisGroup.
            </summary>
            <param name="aAxisType">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.setAxisGroup(SoftArtisans.OfficeWriter.ExcelWriter.AxisType,SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxisGroup)">
            <summary> Internal method used to get either the value of the variable hoding
            either the primary or secondary ElementAxisGroup.
            </summary>
            <param name="aAxisType">
            </param>
            <param name="aGroup">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.getChartGroupCollection(SoftArtisans.OfficeWriter.ExcelWriter.AxisType)">
            <summary> Returns the ElementChartGroupCollection for the specified AxisType.</summary>
            <param name="aAxisType">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.getOppositAxisType(SoftArtisans.OfficeWriter.ExcelWriter.AxisType)">
            <summary> Utility method to get the opposit AxisType for the specified AxisType</summary>
            <param name="aType">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.removeChartGroup(System.Int32)">
            <summary> Removes the ChartGroup with the specified index and returns an array
            mapping old index to new index.
            </summary>
            <param name="aIndex">the index of the chart group to remove.
            </param>
            <returns> a mapping of old index to new index.  The removed item will
            have a new index of -1
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.getChartGroup(System.Int32)">
            <summary> Returns the ElementChartGroup having the specified index in the file or
            null if no such ElementChartGroup exists.  The index in the file is the
            index into a list of all ChartGroups starting with the one first listed
            in the primary axis group and ending with the last group listed in the
            secondary axis group.  This is how the SERTOCRT record stores chart 
            group indices.
            </summary>
            <param name="aIndex">the index of the ElementChartGroup to retrieve
            </param>
            <returns> the ElementChartGroup at the specified index or null if no
            such ElementChartGroup exists
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.getAxisTypeForGroup(System.Int32)">
            <summary> Returns the AxisType for the ChartGroup with the specified index or 
            null if no such ChartGroup exists.
            </summary>
            <param name="aChartGroupIndex">the index of the ChartGroup to find the AxisType
            for.
            </param>
            <returns> the AxisType for the ChartGroup with the specified index or null
            if no such ChartGroup exists.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.getChartGroupIndex(SoftArtisans.OfficeWriter.ExcelWriter.ChartType,SoftArtisans.OfficeWriter.ExcelWriter.AxisType)">
            <summary> Returns the index of the chart group having the same
            ChartType.ChartCategory as the specified ChartType on the specified axis.
            If no such ChartGroup exists, one will be created with records describing
            that ChartType (thats why the method takes the full type rather than just
            the category).
            </summary>
            <param name="aChartType">the type of the chart group to find
            </param>
            <param name="aAxisType">which axis the ChartGroup has to be located on.
            </param>
            <returns> the index of the matching chart group.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.createChartGroup(SoftArtisans.OfficeWriter.ExcelWriter.ChartType,SoftArtisans.OfficeWriter.ExcelWriter.AxisType)">
            <summary> Constructs a new ChartGroup with the specified ChartType on the specified
            axis.  Returns a mapping of old ChartGroup index to new ChartGroup 
            index.  This is needed if we added to the primary and there are items
            on the secondary.  This method does not validation that the configuration
            occuring after this method completes will be accepted by Excel.
            </summary>
            <param name="aType">the type of ChartGroup to create.
            </param>
            <param name="aAxisType">which axis the new ChartGroup should be placed on
            </param>
            <returns> a mapping of (key=oldIndex) -> (value=newIndex)
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.convertChartGroup(System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.ChartType)">
            <summary> Converts the ChartGroup with the specified index to have the specified
            ChartType.  This is done by removing the existing group, creating a
            new one with the new type and givving them the same index (before
            z-order fixups).
            </summary>
            <param name="aIndex">the index of the existing ChartGroup
            </param>
            <param name="aNewType">the new ChartType for the existingn group
            </param>
            <returns> a map of old index (key) to new index (value)
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.correctZOrder(System.Int32[])">
            <summary> Recomputes the Z-Order for each ChartGroup so that no two groups have
            the same Z-Order.  Each Category is assigned a weight in the following
            table.  The higher the weight, the close to the top the item will be
            rendered.  If two categories have the same weight, the item added later
            should have a higher z-order.
            <ul>
            <li>Scatter,Line</li>
            <li>Column, Bar</li>
            <li>Area</li>
            <li>Pie, Doughnut</li>
            <li>Radar</li>
            </ul>
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.walkTree(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ITreeAction)">
            <summary> Override of walkTree to clean up the axis groups before calculating
            this size of this element.
            </summary>
            <seealso cref="!:Element#walkTree(ITreeAction)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.cleanUpAxisGroups">
            <summary> Removes all empty (having no ChartGroups) AxisGroups from this element.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.getChartGroupByType(SoftArtisans.OfficeWriter.ExcelWriter.ChartType)">
            <param name="chartType">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.Clone">
            <seealso cref="!:java.lang.Object#clone()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.AxesUsedRecord">
            <summary> Gets the AXESUSED record for this ElementAxes</summary>
            <returns> the AXESUSED record.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.Legend">
            <summary> Retrieves the legend element.  This method must be used rather than 
            accessing the legend through the ChartGroup, because the legend can
            exist even if its not actually in a chart group.  If the Legend doesn't
            exist, it will be created and returned.
            </summary>
            <returns> the Legend for this chart.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.ChartGroupCount">
            <summary> Returns the number of ElementChartGroups currently under this 
            ElementAxes
            </summary>
            <returns> the number of ElementChartGroups under this element.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxes.HasUnknowns">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxisGroup">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxisGroup.addRecordHandlerChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxisGroup.addPlotAreaChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementPlotArea)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxisGroup.insertPlotArea(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementPlotArea)">
            <param name="aPlotArea">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxisGroup.correctAxes">
            <summary> Determines what Axes (Category/Value/Z) an AxisGroup should have based
            on the ChartGroups it contains.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxisGroup.walkTree(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ITreeAction)">
            <summary> Override of walkTree to clean up the axes before calculating
            this size of this element.
            </summary>
            <seealso cref="!:Element#walkTree(ITreeAction)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxisGroup.HasUnknowns">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxisLine">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementAxisLineCollection">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCategoryAxis">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCategoryAxis.addRecordHandlerChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellRecordCollection">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChart">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChart.addRecordHandlerChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChart.addChartAreaChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartArea)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChart.addDefaultTextChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDefaultText)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChart.addDataTableChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataTable)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChart.addTextCollectionChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementTextCollection)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChart.getTextElement(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementTextCollection.LinkedObjectType,System.Int32,System.Int32,System.Boolean,SoftArtisans.OfficeWriter.ExcelWriter.Observers.GridSubject)">
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChart.saveDataFormats(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element[])">
            <param name="dataFormats">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChart.removedUnknowns">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartArea">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartArea.addFrameChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFrame)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartArea.FrameElement">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartGroup">
            <summary> <p>ElementChartGroup holds chart settings associated with a particular
            axis group.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartGroup.addLegendChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartGroup.addDropBarsChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDropBars)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartGroup.addChartLineCollectionChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartLineCollection)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartGroup.addLegend(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend)">
            <summary> This method adds a Legend to an existing ChartGroup.  It should be 
            called rather than addChild(ElementLegend) anytime after Parse time.
            </summary>
            <param name="aLegend">the legend to add to this ChartGroup.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartGroup.createDefaultElement(SoftArtisans.OfficeWriter.ExcelWriter.ChartType,System.Boolean)">
            <summary> Creates a default ElementChartGroup having the proper record 
            configuration to represent the specified ChartType.
            </summary>
            <param name="aType">the ChartType the resulting ChartGroup should report.
            </param>
            <returns> the newly constructed ElementChartGroup
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartGroup.buildSurfaceTypeRecs(System.Collections.Generic.IList{SoftArtisans.OfficeWriter.ExcelWriter.Records.Record},SoftArtisans.OfficeWriter.ExcelWriter.ChartType)">
            <summary> Constructs the necessary type recs for Surface ChartTypes.</summary>
            <param name="aType">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartGroup.buildScatterTypeRecs(System.Collections.Generic.IList{SoftArtisans.OfficeWriter.ExcelWriter.Records.Record},SoftArtisans.OfficeWriter.ExcelWriter.ChartType)">
            <param name="aType">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartGroup.buildRadarTypeRecs(System.Collections.Generic.IList{SoftArtisans.OfficeWriter.ExcelWriter.Records.Record},SoftArtisans.OfficeWriter.ExcelWriter.ChartType,System.Boolean)">
            <param name="aType">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartGroup.buildPieTypeRecs(System.Collections.Generic.IList{SoftArtisans.OfficeWriter.ExcelWriter.Records.Record},SoftArtisans.OfficeWriter.ExcelWriter.ChartType)">
            <param name="aType">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartGroup.buildLineTypeRecs(System.Collections.Generic.IList{SoftArtisans.OfficeWriter.ExcelWriter.Records.Record},SoftArtisans.OfficeWriter.ExcelWriter.ChartType)">
            <param name="aType">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartGroup.buildDoughnutTypeRecs(System.Collections.Generic.IList{SoftArtisans.OfficeWriter.ExcelWriter.Records.Record},SoftArtisans.OfficeWriter.ExcelWriter.ChartType)">
            <param name="aType">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartGroup.buildColumnTypeRecs(System.Collections.Generic.IList{SoftArtisans.OfficeWriter.ExcelWriter.Records.Record},SoftArtisans.OfficeWriter.ExcelWriter.ChartType)">
            <param name="aType">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartGroup.buildBubbleTypeRecs(System.Collections.Generic.IList{SoftArtisans.OfficeWriter.ExcelWriter.Records.Record},SoftArtisans.OfficeWriter.ExcelWriter.ChartType)">
            <param name="aType">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartGroup.buildBarTypeRecs(System.Collections.Generic.IList{SoftArtisans.OfficeWriter.ExcelWriter.Records.Record},SoftArtisans.OfficeWriter.ExcelWriter.ChartType)">
            <param name="aType">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartGroup.buildAreaTypeRecs(System.Collections.Generic.IList{SoftArtisans.OfficeWriter.ExcelWriter.Records.Record},SoftArtisans.OfficeWriter.ExcelWriter.ChartType)">
            <param name="aType">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartGroup.ChartType">
            <summary> Returns the chart type of this chart group based on the information 
            contained in the chart type record for this ChartGroup.  This may or may
            not be the chart type for the full chart depending on infomration stored
            in other possible chart groups.
            </summary>
            <returns> the chart type for this chart group.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartGroup.DropBars">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartGroupCollection">
            <summary> <p>ElementChartGroupCollection holds and manages zero or more
            ElementChartGroups.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartGroupCollection.getChartGroupIndex(SoftArtisans.OfficeWriter.ExcelWriter.ChartType.ChartCategory)">
            <summary> Returns the index of the ChartGroup from this collection having the
            specified ChartType.ChartCategory. If no such ChartGroup exists, -1 will
            be returned.
            </summary>
            <param name="aCategory">the desired category for the returned ChartGroup
            </param>
            <returns> the index of the ChartGroup with the specified
            ChartGroup.Category or -1 if no such ChartGroup exists.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartGroupCollection.getChartGroup(System.Int32)">
            <summary> Returns the ChartGroup at the specified index.</summary>
            <param name="aIndex">the index of the chart group to find
            </param>
            <returns> the ChartGroup at the specified index.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartGroupCollection.removeChartGroup(System.Int32)">
            <param name="aIndex">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartGroupCollection.ChartGroupCount">
            <summary> Returns a count of all the ChartGroups in this collection</summary>
            <returns> a count of all the ChartGroups in this collection
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartLine">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartLine.addRecordHandlerChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartLineCollection">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartsheetStream">
            <summary> <p>
            This class is the top level element for a chart stream.  It implements the
            necessary interfaces to reside within the client data block of an escher
            substream (When embedded in a worksheet).  It also extends ElementSheet so
            it can stand alone as a ChartSheet.
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSheet">
            <summary> 
            
            </summary>
            <author>  geoffk Jun 30, 2004 1:46:02 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSheet.copy(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSheet)">
            <summary>
            Copy is broken up like this so that derived classes can still use this
            functionality but on a different derivation of ElementSheet.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSheet.GetScl">
            <summary>
            Sets Scl if it was null
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSheet.WorkbookElement">
            <summary>
            WorkbookElement just points upward. It's not actually
            a child of this Element.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ScannableElement">
            <summary> ScannableElement allows an element to provide a java_cup Scanner for
            its children or data.
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartsheetStream.getFbiAt(System.Int32)">
            <param name="i">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementChartsheetStream.Scanner">
            <summary> Create a default set of records that describe the value axis' display unit properties.
            
            </summary>
            <seealso cref="!:and chartModel.addDisplayUnits().">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataFormat">
            <summary> <p>
            ElementDataFormat holds the data format block of records that control display
            options for a single series, trendline, or error bar
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Observers.SeriesUpdateObserver">
            <author>  johnv
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataFormat.mChildWeights">
            <summary> Table of record weights.  The weight is nothing more than the records'
            position in a fully populated DataFormat block.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataFormat.#ctor">
            <summary> This constructor does nothing and should only be called from the parser</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataFormat.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataFormat,System.Int32)">
            <summary> Creates a new ElementDataFormat for the specified point number using 
            the specified seriesDataFormat as a base.
            </summary>
            <param name="aSeriesDataFormat">the data format for the series containing this
            new data format
            </param>
            <param name="aPointNumber">the point number for this data format
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataFormat.getRecord(System.Int16)">
            <summary> Returns the child record of this DataFormat block having </summary>
            <param name="aRecordType">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataFormat.createRecord(System.Int16)">
            <summary> Creates and returns a child record of the approprate type and in the
            approprate place.
            <p>
            Valid Record Types:
            </p>
            <ul>
            <li>Chart3DDataForm</li>
            <li>LineFormat</li>
            <li>AreaFormat</li>
            <li>PieFormat</li>
            <li>SerFmt</li>
            <li>MarkerFormat</li>
            <li>AttachedLabel</li>
            </ul>
            </summary>
            <param name="aRecordType">one of the data format records types as specified by
            Constants
            </param>
            <returns> the created record
            </returns>
            <throws>  SARuntimeException if the record type is invalid for a data </throws>
            <summary>             format element of if a record of that type already exists
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataFormat.SeriesDataFormat">
            <summary> Returns whether this DataFormatElement is for the entire series.  </summary>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataFormat.DataPointNumber">
            <summary> Returns the index of the data point this DataFormat element is 
            associated with.  A value of {@link #SeriesDataFormatIndex} indicates
            this DataFormatElement is associated with the entire series rather than
            a single data point.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataFormat.SeriesNumber">
            <summary> Returns the number of the series as it should appear in a list of
            series.  This may be different from the series index if the series
            have been reordered.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataFormat.SeriesIndex">
            <summary> Returns the index of the enclosing series within the file.</summary>
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataFormatCollection">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataFormatCollection.getDataFormatForPoint(System.Int32)">
            <summary> Returns the DataFormatElement for the specified point or null if no
            such DataFormatElement exists.
            </summary>
            <param name="aPoint">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataFormatCollection.createDataFormatForPoint(System.Int32)">
            <summary> Creates a DataFormatElement for the specified point.  No 
            DataFormatElement may exist for that point.
            </summary>
            <param name="aPoint">the point number to create the Element for
            </param>
            <returns> the new DataFormatElement
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataFormatCollection.DataFormatForSeries">
            <summary> Returns the DataFormatElement for the entire series or null if the 
            series doesn't have a DataFormatElement (should only happen
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataTable">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataTable.addLegendChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDefaultText">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDefaultText.addRecordHandlerChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDefaultText.addTextChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementText)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDefaultText.createDefaultElement(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDEFAULTTEXT_TextType,System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Observers.GridSubject)">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDefaultText.DefaultTextRecord">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDropBar">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDropBar.addRecordHandlerChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDropBar.createDefaultElement(System.Boolean)">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDropBars">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDropBars.createDropBar(System.Boolean)">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDropBars.HasDropDownBars">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.IFontReference">
            <summary> Any element that has a font reference should implement this interface.
            
            </summary>
            <author>  geoffk
            Dec 3, 2004 12:44:32 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.IReference">
            <summary> A common interface that every interface for a reference type should implement 
            so that we don't check every optimizer for every class.
            
            Examples of interfaces that use this are IFontReference and IXFReference.
            
            </summary>
            <author>  geoffk
            Dec 6, 2004 9:43:55 AM
            </author>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.IFontReference.FontIndex">
            <returns> the index of the font referenced.
            </returns>
            <param name="i">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFBI.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHeader)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFBI.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <param name="aRec">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFBI.#ctor(Antlr.Runtime.IToken)">
            <param name="aToken">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFontBasis">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFontBasis.getFbiAt(System.Int32)">
            <param name="index">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFontBasis.getFbiForFontIndex(System.Int32)">
            <param name="fontIndex">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFontX.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHeader)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFontX.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <param name="aRec">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFontX.#ctor(Antlr.Runtime.IToken)">
            <param name="aToken">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFrame">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFrame.createDefaultElement">
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementGelFrame.Clear">
            <summary>
            Removes the GELFRAME record. This is usually done if we want the chart fill pattern stuff to disappear
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementIFMT.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <param name="aRec">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementIFMT.#ctor(Antlr.Runtime.IToken)">
            <param name="aToken">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend.#ctor">
            <summary>
            Create a placeHolder Legend
            </summary> 
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend.clearRecordHandlers">
            <summary>
            Clear record handler references so we won't try to remove entries
            we already deleted with base.ChildrenInternal.Clear()
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend.SetToPlaceHolder">
            <summary>
            Deletes all existing children and replaces them with PlaceholderElements
            This should be used to make a Legend not visible
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend.SetToDefaultValues">
            <summary>
            Deletes all existing children and replaces them with PlaceholderElements
            default values for a visible Legend.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend.mLegendRecordHandler">
            <summary>
            Index 0
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend.mBeginRecordHandler">
            <summary>
            Index 1
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend.mPOSRecordHandler">
            <summary>
            Index 2
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend.mTextPlaceHolderRecordHandler">
            <summary>
            Index 3
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend.mFramePlaceHolderRecordHandler">
            <summary>
            Index 3 or 4
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend.mEndRecordHandler" -->
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend.deleteTextChild">
            <summary>
            Remove Text from children and null out references
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend.deleteFrameChild">
            <summary>
            Remove Frame from children and null out references
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend.addTextChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementText)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend.addLegendChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <summary>
            Handles adding a RecordHandlerElement for RecordLLEGEND at index 0
            </summary>
            <param name="aChild"></param> 
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend.addBeginChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <summary>
            Handles adding a RecordHandlerElement for RecordBEGIN at index 1
            </summary>
            <param name="aChild"></param> 
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend.addPOSChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <summary>
            Handles adding a RecordHandlerElement for RecordPOS at index 2
            </summary>
            <param name="aChild"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend.addTextPlaceHolderChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <summary>
            Handles adding a RecordHandlerElement for Text PlaceHolder at index 3
            </summary>
            <param name="aChild"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend.addFramePlaceHolderChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <summary>
            Handles adding a RecordHandlerElement for Frame PlaceHolder at index 3 or 4
            </summary>
            <param name="aChild"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend.addEndChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)" -->
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend.createPlaceHolderElement">
            <summary>
            Returns an element with PlaceHolder values. 
            This means the Legend is not visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegend.createDefaultElement">
            <summary>
            Return an element with actual Records
            This means the Legend will be visible
            </summary>
            <returns></returns>        
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegendException">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegendException.addTextChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementText)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegendException.HasTextElement">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLinkedData">
            <summary> <p>ElementLinkedData manages the state of an AI record and a possible 
            SERIESTEXT record.  Using the methods on this Element should be preferred
            over using the records directly.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLinkedData.getFormula(SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup,System.Boolean)">
            <summary> Returns the formula stored in the AI record as a string.</summary>
            <returns> the formula stored in the AI record as a string.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLinkedData.setFormula(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup,System.Boolean)">
            <summary> Sets the formula stored in the AI record for this LinkedData.  This will
            blow away the text stored in the SERIESTEXT record so Excel will 
            recalculate that value
            </summary>
            <param name="aFormula">the formula to set
            </param>
            <param name="aWorksheet">the model for the worksheet holding this chart (used
            for formula parsing).
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLinkedData.isSingleDimension(SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBase,SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup)">
            <param name="ptgBase">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLinkedData.LinkIdentifier">
            <summary> Returns the LinkIdentifier for this LinkedData.  The LinkIdentifier 
            specifies what this data is linked to on a chart.
            </summary>
            <returns> the LinkIdentifier for this ElementLinkedData
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLinkedData.Text">
            <summary> Returns the text stored in the SERIESTEXT record attached to this 
            LinkedData.  Generally, Excel will cache the result of formulas here.
            However, after setting a formula, we will blow the text away so Excel
            will recalculate it.
            </summary>
            <returns> the test associated with this linked data
            </returns>
            <summary> Sets the text associated with this LinkedData.  This will blow away any
            formula stored in the AI record.
            </summary>
            <param name="aText">the Text to set
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLinkedData.HasFormula">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLinkedDataCollection">
            <summary> <p>ElementLinkedDataCollection holds a set of ElementLinkedData and allows
            those items to be retrieved based on their LinkIdentifier.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLinkedDataCollection.getLinkedData(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAI.LinkIdentifierClass)">
            <summary> Returns the LinkedData with the specified LinkIdentifier or null if
            no such LinkedData exists.  
            </summary>
            <param name="aLinkType">the LinkIdentifier of the data to retrieve
            </param>
            <returns> the ElementLinkedData with the specified LinkIdentifier or null
            if no such item exists.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementPlotArea">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementPlotArea.addFrameChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFrame)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementPlotArea.createDefaultElement(System.Boolean)">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeries">
            <summary> <p>ElementSeries represents a SERIES block in the file that actually
            contains a series (rather than an ErrorBar or Trendline).</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesBase">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesBase.addDataFormatCollectionChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataFormatCollection)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesBase.addLinkedDataCollectionChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLinkedDataCollection)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesBase.addLegendExceptionCollectionChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementLegendExceptionCollection)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesBase.replicate">
            <summary> Unlike copy or clone, this insidious little bit of code writes the tree
            rooted at this element out to bytes then feeds those bytes to the parser
            and returns you the new element, which should have the same state as 
            this one, minus any member variables holding state not replicated in the
            tree structure.
            </summary>
            <returns> a replicated (not copied or cloned) version of this file.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesBase.createDefaultElement(System.Collections.Generic.IList{SoftArtisans.OfficeWriter.ExcelWriter.Records.Record})">
            <summary> Uses the parser and a stream of records to create a default version of
            this element.
            </summary>
            <param name="aTypeRecords">a Vector of records that determine the type of 
            ElementSeries (SERTOCRT, SERPARENT-SERAUXERRBAR, SERPARENT-SERAUXTREND).
            </param>
            <returns> a default version of this element.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesBase.getXDataFormula(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel,System.Boolean)">
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesBase.setXDataFormula(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel,System.Boolean)">
            <param name="fmla">
            </param>
            <param name="worksheetModel">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesBase.getYDataFormula(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel,System.Boolean)">
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesBase.setYDataFormula(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel,System.Boolean)">
            <param name="fmla">
            </param>
            <param name="worksheetModel">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesBase.ValueCount">
            <summary> Returns the number of values in this series.</summary>
            <returns> the number of values in this series.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesBase.Name">
            <summary> Returns the text of the name stored in the file</summary>
            <returns> the text of the name stored in the file
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeries.getName(System.Boolean)">
            <summary> Returns the name of this series as text.  If the series has neither a 
            text or formula value specified for the name, it will default to 
            Series{seriesNumber}.
            </summary>
            <returns> the name of this series as text.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeries.getNameFormula(SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup,System.Boolean)">
            <summary> Returns the formula specifying the name of this series.</summary>
            <returns> the formula specifying the name of this series.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeries.setNameFormula(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup,System.Boolean)">
            <summary> Sets the formula specifying the name of this series</summary>
            <param name="aFormula">the new formula for this series name
            </param>
            <param name="aWorksheet">the worksheet or chartsheet this series' chart 
            is on.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeries.createDefaultElement">
            <summary> Construct a new version of the default ElementSeries.  Before using this
            element be sure to set the ChartGroupIndex.
            </summary>
            <returns> a new instance of the default ElementSeries.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeries.getBubbleSizeFormula(SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup,System.Boolean)">
            <summary> Sets the formula for this Series bubble sizes.</summary>
            <param name="aLookup">the worksheet or chartsheet this series' chart
            </param>
            <returns> the formula specifying the bubble sizes of this series.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeries.setBubbleSizeFormula(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup,System.Boolean)">
            <summary> Sets the formula for this Series' bubble sizes.</summary>
            <param name="aFormula">the formula specifying the bubble sizes of this series.
            </param>
            <param name="aLookup">the worksheet or chartsheet this series' chart
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeries.ChartGroupIndex">
            <summary> Returns the index of the chart group this series is associated with.  </summary>
            <returns> the index of the chart group
            </returns>
            <summary> Sets the index of the chart group this series is associated with</summary>
            <param name="aIndex">the index of the chart group this series is associated
            with
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesChild">
            <summary> <p>ElementSeriesChild holds all the common functionality of series objects
            in the file which are really children of series (Trendlines and ErrorBars).
            It may not be instanciated.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesChild.ParentSeriesIndex">
            <summary> Returns the index of the series this child refers to.  </summary>
            <returns>
            </returns>
            <summary> Sets the index of the series this child refers to.</summary>
            <param name="aIndex">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesCollection">
            <summary> <p>ElementSeriesCollection holds all the series in the chart.  Because
            series trendlines and series errorbars are stored as series, this class
            has seperate accessors for each type of series.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Observers.SeriesUpdateSubject">
            <summary> <p>This interface marks any implementers as sources of SeriesUpdateEvents</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesCollection.getTrendlines(System.Int32)">
            <summary> Returns all the series representing Trendlines for the series with the
            specified index.  The index must be the entry in the SERPARENT record
            for the specified series.
            </summary>
            <param name="aSeriesIndex">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesCollection.getErrorBars(System.Int32)">
            <summary> Returns all the series representing ErrorBars for the series with the
            specified index.  The index must be the entry in the SERPARENT record
            for the specified series.
            </summary>
            <param name="aSeriesIndex">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesCollection.addSeries(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesBase)">
            <summary> Adds the specified series to the end of this collection and updates its
            index approprately.  This method must be used after parse time to
            ensure that series indices are correctly maintained.
            </summary>
            <param name="aSeries">the new series to add to this collection.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesCollection.removeSeries(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesBase)">
            <summary> Removes the specified series and all dependent series from this
            collection and return an event containing fixup information
            </summary>
            <param name="aSeries">the series to remove
            </param>
            <returns> an event containing fixup information.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesCollection.removeSeries(System.Collections.Generic.ICollection{SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element})">
            <summary> Removes the specified collection of ElementSeriesBase from this
            series collection.
            </summary>
            <param name="aSeriesList">a list of all the series to remove
            </param>
            <returns> the removed series
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesCollection.fireSeriesUpdateEvent(SoftArtisans.OfficeWriter.ExcelWriter.Observers.SeriesUpdateEvent)">
            <summary> Helper method to fire the series update event to other parts of the
            document that this element does not control.  All items under its control
            are handled with a special walker.
            </summary>
            <param name="event">the event to fire
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesCollection.Series">
            <summary> Returns all the actual series in the chart (excludes ErrorBars and
            Trendlines).
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesErrorBar">
            <summary> <p>ElementSeriesErrorBar holds a series structure that is actually the
            description of an error bar for a series.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesErrorBar.addRecordHandlerChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesErrorBar.getCustomFormula(SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup,System.Boolean)">
            <summary> Returns the value of the formula specifying custom error bar data.  This
            method only has an effect if {@link #getValueType} returns 
            {@link ErrorBar#CellValueType#Custom}.  Otherwise this method 
            returns null.
            </summary>
            <returns> the custom formula for this error bar or null if its type is 
            not Custom.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesErrorBar.setCustomFormula(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup,System.Boolean)">
            <summary> Sets the value of the formula specifying custom error bar data.  This
            method only has an effect if {@link #getValueType} returns 
            {@link ErrorBar#CellValueType#Custom}.  Otherwise this method 
            does nothing.
            </summary>
            <param name="aFormula">the new formula to set.
            </param>
            <throws>  IllegalArgumentException if the specified formula is invalid </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesErrorBar.createDefaultElement">
            <summary> Construct a new version of the default ElementSeriesErrorBar.  Before
            using the return value from this method, be sure to set the proper
            series index, number and parent index.
            </summary>
            <returns> a new instance of the default ElementSeriesErrorBar.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesErrorBar.BarType">
            <summary> Returns the type of error bar held by this unwidley series like construct</summary>
            <returns> the type of error bar held by this unwidley series like construct
            </returns>
            <summary> Sets the type of error bar held by this element.</summary>
            <param name="aType">the new type of error bar
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesErrorBar.TShaped">
            <summary> Returns whether the error bars shoudl have a T shape.</summary>
            <returns> whether the error bars shoudl have a T shape.
            </returns>
            <summary> Sets whether the error bars shoudl have a T shape.</summary>
            <param name="aFlag">whether the error bars shoudl have a T shape.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesErrorBar.ValueType">
            <summary> Returns the type of value held in this ErrorBar</summary>
            <returns> the type of value held in this ErrorBar
            </returns>
            <summary> Sets the type of value held in this ErrorBar</summary>
            <param name="aType">the type of value held in this ErrorBar
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesErrorBar.Value">
            <summary> Returns the value corresponding to the CellValueType of this 
            ErrorBar.  If the type is CellValueType.Custom, this method returns
            0.  Use getCustomFormula instead
            </summary>
            <returns> the value corresponding to the CellValueType
            </returns>
            <summary> Sets the value corresponding to the CellValueType of this 
            ErrorBar.  If the type is CellValueType.Custom, this method does
            nothing.  Use setCustomFormula instead.
            </summary>
            <param name="aValue">the new value.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesErrorBar.ErrorBarRec">
            <summary> Helper method to get the SERAUXERRBAR record for this ErrorBar.</summary>
            <returns> the SERAUXERRBAR record for this ErrorBar.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesIndex">
            <summary> <p>Contrary to both its name and record description, the SIINDEX record
            does not appear to have anything to do to series index.  Instead it marks
            different sections of a Chart's data cache.  This element should contain
            a SIINDEX record and one of the following: a ElementNumberCollection, 
            a ElementLabelCollection, or nothing.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesIndex.SiIndexType">
            <summary> Returns the type of SIINDEX record stored here</summary>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesIndex.SeriesIndex">
            <summary> Sets the type of SIINDEX record stored here</summary>
            <param name="aIndex">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesIndexCollection">
            <summary> <p>ElementSeriesIndexCollection holds all the SIINDEX and associated records
            in a chart stream.  The order of the records in the file determines how
            the series they are linked to should appear in a list of series.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesIndexCollection.getSeriesIndex(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSIINDEX.SiIndexType)">
            <summary> Returns the ElementSeriesIndex in this collection with the specified 
            SiIndex type or null if no such ElementSeriesIndex exists.
            </summary>
            <param name="aType">the type of ElementSeriesIndex to retrieve
            </param>
            <returns> the ElementSeriesIndex having the specified type or null if no
            such element exists. 
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesTrendline">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesTrendline.addRecordHandlerChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesTrendline.createDefaultElement">
            <summary> Construct a new version of the default ElementSeriesErrorBar.  Before
            using the return value from this method, be sure to set the proper
            series index, number and parent index.
            </summary>
            <returns> a new instance of the default ElementSeriesErrorBar.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesTrendline.TrendRec">
            <summary> Helper method to get the SERAUXTREND record for this Trendline.</summary>
            <returns> the SERAUXTREND record for this ErrorBar.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesTrendline.RegressionType">
            <summary> Returns the regression type for this trendline</summary>
            <returns> the regression type for this trendline
            </returns>
            <summary> Sets the regression type for this trendline</summary>
            <param name="aType">the regression type for this trendline
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesTrendline.ForecastPeriods">
            <summary> Returns the number of periods to forecast.</summary>
            <returns> the number of periods to forecast.
            </returns>
            <summary> Sets the number of periods to forecast.</summary>
            <param name="aNum">the number of periods to forecast.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesTrendline.BackcastPeriods">
            <summary> Returns the number of periods to forecast backwards</summary>
            <returns> the number of periods to forecast backwards
            </returns>
            <summary> Sets the number of periods to forecast backwards</summary>
            <param name="aNum">the number of periods to forecast backwards
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesTrendline.RegressionValue">
            <summary> Returns the value used in generating the regression equation.</summary>
            <returns> the value used in generating the regression equation.
            </returns>
            <summary> Sets the value used in generating the regression equation.</summary>
            <param name="value">the value used in generating the regression equation.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesTrendline.Intercept">
            <summary> Returns the intercept for the trendline</summary>
            <returns> the intercept for the trendline
            </returns>
            <summary> Sets the intercept for the trendline</summary>
            <param name="intercept">the intercept for the trendline
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesTrendline.ShowEquation">
            <returns>
            </returns>
            <param name="flag">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesTrendline.ShowRSquaredValue">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementText">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementText.addRecordHandlerChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementText.initializeNewText(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementTextCollection.LinkedObjectType,System.Int32,System.Int32,System.Boolean,SoftArtisans.OfficeWriter.ExcelWriter.Observers.GridSubject)">
            <param name="linkedObject">
            </param>
            <param name="linkedSeriesIndex">
            </param>
            <param name="linkedDataPointIndex">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementText.walkTree(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ITreeAction)">
            <seealso cref="!:Element#walkTree(ITreeAction)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementText.HasFontXRecord">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementTextCollection">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementTextCollection.hasUnknowns">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.TypesafeEnum">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;TypesafeEnum&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementValueAxis">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementValueAxis.addRecordHandlerChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementZAxis">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ITreeAction">
            <summary> Encapsulates an action on a tree.</summary>
            <author>  geoffk
            Jul 6, 2004 12:40:36 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TreeActionSeriesUpdate">
            <summary> <p>Tree walker to fire off SeriesUpdateEvents to applicable objects.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TreeActionSeriesUpdate.doActionPre(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <seealso cref="!:ITreeAction#doActionPre(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TreeActionSeriesUpdate.doActionPost(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <seealso cref="!:ITreeAction#doActionPost(Element)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.FontModel">
            <summary> Manages a Font record.
            
            </summary>
            <author>  geoffk
            Aug 4, 2004 5:34:09 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.FontModel.applyFont(SoftArtisans.OfficeWriter.ExcelWriter.Model.FontModel)">
            <param name="font">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.FontModel.Bold">
            <returns>
            </returns>
            <param name="isBold">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.FontModel.Italic">
            <returns>
            </returns>
            <param name="isItalic">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.FontModel.Strikethrough">
            <returns>
            </returns>
            <param name="isStrikethrough">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.FontModel.Name">
            <returns>
            </returns>
            <param name="name">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.FontModel.Size">
            <returns>
            </returns>
            <param name="fontsize">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.FontModel.Underline">
            <returns>
            </returns>
            <param name="style">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.FontModel.ScriptStyle">
            <returns>
            </returns>
            <param name="style">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.FontModel.Charset">
            <returns>
            </returns>
            <param name="charset">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.FontModel.FontIndex">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.FontModel.PropertyMask">
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartFontModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementIndexedRecord,SoftArtisans.OfficeWriter.ExcelWriter.Model.PaletteModel,SoftArtisans.OfficeWriter.ExcelWriter.Elements.IChartFontColor)">
            <param name="aElement">
            </param>
            <param name="aPalette">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.FormulaContainer">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartInteriorModel">
            <summary> <p>ChartInteriorModel is the model layer class for maniuplating area objects
            in a Chart.  Primarly, it wraps an AREAFORMAT record.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartInteriorModel.setAutoBackground(System.Boolean)">
            <summary>
            This is used by ChartInteriorForTextModel to set a property in its text element
            </summary>
            <param name="b"></param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartInteriorModel.Pattern">
            <summary>
            Returns the current chart fill pattern (or Solid or None)
            </summary>
            <value></value>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartInteriorForTextModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAREAFORMAT,SoftArtisans.OfficeWriter.ExcelWriter.Elements.IGelFrame,SoftArtisans.OfficeWriter.ExcelWriter.Model.PaletteModel,SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementText)">
            <param name="aAreaRec">
            </param>
            <param name="aGelFrame">
            </param>
            <param name="aPalette">
            </param>
            <param name="aTextElement">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartLineModel">
            <summary> <p>ChartLineModel is the model level class for the ChartLine interface.
            It operates over a LINEFORMAT record.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartLineModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLINEFORMAT,SoftArtisans.OfficeWriter.ExcelWriter.Model.PaletteModel)">
            <summary> Create a ChartLineModel to manage one record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartLineModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLINEFORMAT,SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLINEFORMAT,SoftArtisans.OfficeWriter.ExcelWriter.Model.PaletteModel)">
            <summary> Create a ChartLineModel to manage two records simultaniously.  Both 
            records are assumed to be identical and any updated will be applied to
            both records evenly.  This is needed for error bars.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartLineModel.Color">
            <returns>
            </returns>
            <param name="model">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartLineModel.LineWeight">
            <returns>
            </returns>
            <param name="weight">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartLineModel.LineType">
            <returns>
            </returns>
            <param name="type">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartLineModel.Visible">
            <returns>
            </returns>
            <param name="visible">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartModel">
            <summary> <p>
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartModel.AloneOnAxis">
            <summary> ChartType.ChartCategory's in this collection must be the only 
            Category on thir AxisGroup.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartModel.AloneOnChart">
            <summary> ChartType.ChartCategory's in this collection must be the only 
            Category on the entire chart.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartModel.linkSeries(System.Int32)">
            <summary> Registers that a Series is linked to the ChartGroup at the specified
            index.  If the index is invalid, an exception will be thrown
            </summary>
            <param name="aChartGroupIndex">the index of the ChartGroup the Series is linked
            to
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartModel.linkSeries(SoftArtisans.OfficeWriter.ExcelWriter.ChartType,SoftArtisans.OfficeWriter.ExcelWriter.AxisType)">
            <summary> Returns the index of the ChartGroup having the specified ChartType on 
            the specified AxisType.  If no such ChartGroup exists, a new one will 
            be created and marked as linked to a Series.  If 
            creating the specified ChartGroup would invalidate the chart 
            configuration, an exception will be thrown.
            </summary>
            <param name="aType">the desired ChartType for the ChartGroup
            </param>
            <param name="aAxisType">the desired AxisType for the ChartGroup
            </param>
            <returns> the index to the ChartGroup with the specified ChartType and
            AxisType
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartModel.unlinkSeries(System.Int32)">
            <summary> Unregisters a Series as being linked to the ChartGroup at the specified
            index.  Do not store ChartGroup indices during calls to this method as
            this method may trigger a re-index and fixup of ChartGrops
            </summary>
            <param name="aChartGroupIndex">the index of the ChartGroup the Series is linked
            to
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartModel.changeSeriesLink(System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.ChartType,SoftArtisans.OfficeWriter.ExcelWriter.AxisType)">
            <summary> This method is used to report that a Series wishes to change its link 
            from the specified ChartGroup index to a ChartGroup with the specified
            type on the specified Axis.  If this is not possible, an exeption will be
            thrown.  If it is possible, the Series will be unlinked from the old 
            ChartGroup and a new link reported to the new ChartGroup.  To
            ensure the proper order of operations, this method should be called 
            rather than unlinkSeries then linkSeries.
            </summary>
            <param name="aOldChartGroupIndex">the index of the old ChartGroup the series
            was linked to.
            </param>
            <param name="aNewType">the new ChartType of the ChartGroup the series 
            should be linked to
            </param>
            <param name="aNewAxisType">the new Series.AxisType of the ChartGroup the 
            series should be
            </param>
            <returns> the index of the ChartGroup having the specified ChartType
            and AxisType
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartModel.getGroupChartType(System.Int32)">
            <summary> Returns the ChartType for the ChartGroup at the specified index.  If
            the index is invalid, an exception will be thrown.
            </summary>
            <param name="aChartGroupIndex">the index of the ChartGroup holding the reqested
            type information
            </param>
            <returns> the ChartType of the specified ChartGroup.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartModel.getGroupAxisType(System.Int32)">
            <summary> Returns the Series.AxisType of the ChartGroup with the specified index.  
            If the index is invalid, an exception will be thrown.
            </summary>
            <param name="aChartGroupIndex">the index of the ChartGroup holding the 
            requested AxisType information
            </param>
            <returns> the AxisType of the specified ChartGroup
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartModel.assertValidConfiguration(System.Int32[],SoftArtisans.OfficeWriter.ExcelWriter.ChartType,SoftArtisans.OfficeWriter.ExcelWriter.AxisType)">
            <summary> Ensures that if the ChartGroups have the reference counts described
            by aRefCountMap and a ChartGroup with the specified ChartType and
            AxisType were added, the Chart would still be valid.  Any ChartGroups
            with a reference count of 0 will be ignored.  This method makes no 
            changes to the current configuration.  This method will throw an 
            exception if the proposed configuration were invalid. 
            </summary>
            <param name="aRefCountMap">a mapping of ChartGroup index -> reference count 
            </param>
            <param name="aChartType">the ChartType of the ChartGroup to be
            </param>
            <param name="aAxisType">the AxisType of the ChartGroup to be
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartModel.getChartGroupByType(SoftArtisans.OfficeWriter.ExcelWriter.ChartType)">
            <param name="chartType">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartModel.Height">
            <returns>
            </returns>
            <param name="height">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartModel.Position">
            <returns>
            </returns>
            <param name="model">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartModel.Width">
            <returns>
            </returns>
            <param name="width">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartModel.SeriesCollection">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartModel.Title">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartModel.ChartType">
            <summary> Returns the ChartType of this chart.  If the Chart has no ChartGroups,
            but a default type has been set, that will be returned.  If the Chart
            has multiple ChartGroups, ChartType.Custom.Custom will be returned.
            Otherwise, the type of the one and only ChartGroup will be returned.
            </summary>
            <returns> the ChartType for this chart.
            </returns>
            <summary> Sets the ChartType for this Chart.  This removes all existing 
            ChartGroups then creates a new ChartGroup on the primary axis of the
            specified type and links all series to that ChartGroup.
            </summary>
            <param name="aType">the new ChartType of this Chart.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartModel.DataTable">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.PageSetupModel.DefaultRowHeight">
            <summary> Returns the default row height for this sheet in points.</summary>
            <returns>
            </returns>
            <summary> Sets the default row height for this sheet in points.</summary>
            <param name="aHeight">the new default row height for this sheet in points
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartPageSetupModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementPageSetup,SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel)">
            <param name="aPageSetupElem">
            </param>
            <param name="aWorksheetModel">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartRegionModel">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartShapeModel">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.ShapeModel">
            <summary> ShapeModel is the base model layer class for shapes.
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ShapeModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Model.DrawingModel,SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShape)">
            <summary> Construct a new ShapeModel backed by the specified MsoSubelementShape</summary>
            <param name="shapeSubelement">the backing structure for this shape
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ShapeModel.initializeNewShape(SoftArtisans.OfficeWriter.ExcelWriter.ShapeType,System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Model.AnchorModel)">
            <summary> This method should be called after a new (i.e. not in the file) shape is 
            constructed in order to setup the approprate subrecords.  This method
            should be overridden by children of ShapeModel to setup subrecords
            and options specific to each particular type of shape.
            </summary>
            <param name="type">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ShapeModel.handleGridEvent(SoftArtisans.OfficeWriter.ExcelWriter.Observers.GridEvent)">
            <seealso cref="!:GridObserver#handleGridEvent(GridEvent)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ShapeModel.Type">
            <summary> Returns the type of this shape.</summary>
            <returns> the type of this shape.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartShapeModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Model.DrawingModel,SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShape)">
            <param name="aDrawingModel">
            </param>
            <param name="aShapeSubelement">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartShapeModel.Interface">
            <seealso cref="!:ShapeModel#getInterface()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartShapesModel">
            <summary> <p>The model level class for the Charts collection.  This is an escher 
            shapes collection becase charts are stored inside of escher shapes.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.ShapeFilter">
            <summary> <p>ShapeFiter is used by ShapesModel to determine what shapes are
            aplicable to a particular operation.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartShapesModel.Accept(SoftArtisans.OfficeWriter.ExcelWriter.Model.ShapeModel)">
            <seealso cref="!:ShapeFilter#accept(ShapeModel)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartShapesModel.createChart(SoftArtisans.OfficeWriter.ExcelWriter.ChartType,SoftArtisans.OfficeWriter.ExcelWriter.Model.AnchorModel)">
            <param name="aType">
            </param>
            <param name="aPosition">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartShapesModel.addChart(SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartModel,SoftArtisans.OfficeWriter.ExcelWriter.Model.AnchorModel)">
            <param name="model">
            </param>
            <param name="model2">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartShapesModel.remove(SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartModel)">
            <param name="aModel">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartShapesModel.remove(System.Int32)">
            <param name="aIndex">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartShapesModel.getChart(System.Int32)">
            <param name="aIndex">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartShapesModel.Count">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartTextModel">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.DataPointMarkerModel">
            <summary> <p>
            DataPointMarkerModel wraps series formatting options affecting data point
            markers.  This involves accessing both the MARKERFORMAT and SERFMT records.
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.DataPointMarkerModel.getDefaultMarkerType(System.Int32)">
            <param name="seriesIndex">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.DataPointMarkerModel.HasShadow">
            <param name="hasShadow">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.DataPointMarkerModel.Has3DBubbles">
            <param name="hasShadow">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.DataPointMarkerModel.Size">
            <summary> Returns the size of the data marker in points.</summary>
            <returns>
            </returns>
            <summary> Sets the size of the data marker in points. Value must be between 2 and
            72 inclusive.
            </summary>
            <param name="size">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.DataPointMarkerModel.Type">
            <returns>
            </returns>
            <param name="type">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.DataPointMarkerModel.BackgroundColor">
            <returns>
            </returns>
            <param name="model">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.DataPointMarkerModel.ForegroundColor">
            <returns>
            </returns>
            <param name="model">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.DataPointModel.Marker">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.ErrorBarModel">
            <summary> <p>
            Model level class for ErrorBar.  This class manages both the positive and
            negative bars simultaniously.
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ErrorBarModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesCollection,SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel,SoftArtisans.OfficeWriter.ExcelWriter.Model.ErrorBarModel.ErrorBarAxis)">
            <summary>  Construct a new ErrorBarModel</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ErrorBarModel.loadErrorBars">
            <summary> Loads the existing error bars and initializes the direction attribute.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ErrorBarModel.initLineFor(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesErrorBar,SoftArtisans.OfficeWriter.ExcelWriter.Model.PaletteModel)">
            <summary> Initializes the line and area records for the specified error bar.</summary>
            <param name="aBar">the bar to initialize
            </param>
            <param name="aPalette">the color palette for the document
            </param>
            <returns> the LINEFORMAT record for the specified error bar.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ErrorBarModel.linkErrorBar(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesErrorBar)">
            <summary> Helper method to attach an ElementSeriesErrorBar to the file.</summary>
            <param name="aBar">the bar to attach
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ErrorBarModel.unlinkErrorBar(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesErrorBar)">
            <summary> Helper method to detach the specified ElementSeriesErrorBar from 
            the file.
            </summary>
            <param name="aBar">the bar to detach.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ErrorBarModel.Line">
            <summary> Return the ChartLineModel for the plus and minus error bars.  The two
            lines are managed simultaniously.
            </summary>
            <returns> the ChartLineModel for this ErrorBarModel
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ErrorBarModel.CustomMinusFormula">
            <summary> Returns the formula for the error bar's custom minus value.</summary>
            <returns> the formula for the error bar's custom minus value.
            </returns>
            <summary> Sets the formula for the error bar's custom minus value.</summary>
            <param name="aFormula">the formula for the error bar's custom minus value.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ErrorBarModel.CustomPlusFormula">
            <summary> Returns the formula for the error bar's custom plus value.</summary>
            <returns> the formula for the error bar's custom plus value.
            </returns>
            <summary> Sets the formula for the error bar's custom plus value.</summary>
            <param name="aFormula">the formula for the error bar's custom plus value.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ErrorBarModel.TShaped">
            <summary> Returns whether or not the bar is T shaped.</summary>
            <returns> true if the error bar will have a T shape and false otherwise
            </returns>
            <summary> Sets whether the bar is T shaped.</summary>
            <param name="shaped">true if the bar shoudl be T shaped and false otherwise.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ErrorBarModel.Value">
            <summary> Returns the value for this error bar.  The value has meaning in the 
            context of the CellValueType for this error bar.
            </summary>
            <returns> the value for this error bar.
            </returns>
            <summary> Sets the value for this error bar.  The value has meaning in the context
            of the CellValueType for this error bar.
            </summary>
            <param name="value">the new value for this bar
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ErrorBarModel.ValueType">
            <summary> Returns the type of value specified by this error bar.</summary>
            <returns> the type of value specified by this error bar.
            </returns>
            <summary> Sets the type of value held by this error bar.</summary>
            <param name="valueType">the type of value held by this error bar.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ErrorBarModel.Direction">
            <summary> Returns the direction of this error bar.  The direction controls whether
            positive, minus, both, or niether bars are displayed.
            </summary>
            <returns> the direction of this error bar.
            </returns>
            <summary> Sets the direction of this error bar.  This method handles linking or
            unlinking the different bars as approprate.
            </summary>
            <param name="aDirection">the new direction of this bar.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.ErrorBarModel.ErrorBarAxis">
            <summary> <p>ErrorBarAxis specifies whether this ErrorBar model should handle
            X or Y error bars for a given series.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ErrorBarModel.ErrorBarAxis.#ctor(System.String,System.Int16,SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXERRBAR.BarType,SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXERRBAR.BarType)">
            <summary> Private constructor</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesCollectionModel">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesCollectionModel.createSeries(System.String,SoftArtisans.OfficeWriter.ExcelWriter.ChartType,SoftArtisans.OfficeWriter.ExcelWriter.AxisType)">
            <param name="formula">
            </param>
            <param name="aType">
            </param>
            <param name="aAxisType">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesCollectionModel.createSeries(System.String)">
            <param name="formula">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesCollectionModel.getCategoryData(SoftArtisans.OfficeWriter.ExcelWriter.AxisType)">
            <seealso cref="!:SeriesCollection#getCategoryData(Series.AxisType)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesCollectionModel.setCategoryData(System.String,SoftArtisans.OfficeWriter.ExcelWriter.AxisType)">
            <seealso cref="!:Series.AxisType)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesCollectionModel.getSeriesAt(System.Int32)">
            <param name="index">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesCollectionModel.remove(System.Int32)">
            <param name="index">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesCollectionModel.remove(SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel)">
            <param name="series">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesCollectionModel.updateChartGroupLinks(System.Int32[])">
            <summary> Updates all Series in the SeriesCollection with the new ChartGroup 
            index information specified.
            </summary>
            <param name="aIndexMap">a mapping (key=oldIndex) -> (value=newIndex) for
            ChartGroup indices
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesCollectionModel.Count">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesDataLabelModel">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel">
            <summary> <p>
            SeriesModel is the model level representation of a single data series on a 
            chart.  It is one of the central objects in a chart.
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartModel,SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeries)">
            <summary> Constructs a new SeriesModel from the specified arguments</summary>
            <param name="aChartModel">the ChartModel that is the parent of this series
            </param>
            <param name="aSeriesEl">the Element representation of this series
            </param>
            <param name="aAxesEl">the AxisGroup collection for the chart. 
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartModel,SoftArtisans.OfficeWriter.ExcelWriter.ChartType,SoftArtisans.OfficeWriter.ExcelWriter.AxisType)">
            <summary> Constructs a new SeriesModel in the specified ChartModel having the 
            specified ChartType on the specified Axis.  However, this Series will 
            be isolated from the rest of the document until it is linked to the
            ElementSeriesCollection and SeriesCollectionModel.  This constructor
            should only be used from SeriesCollectionModel.  If the specified
            ChartType-AxisType combination would invalidate the Chart configuration,
            an Exception will be thrown.
            </summary>
            <param name="aChartModel">the ChartModel holding this Series
            </param>
            <param name="aType">the ChartType for this Series
            </param>
            <param name="aAxisType">the AxisType for this Series
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.initAreaLineFormatting">
            <summary> Helper method to load both the line and area models for this series. 
            Its important that both get loaded and written because neither will
            take effect without the other.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.getDefaultFillColor(System.Int32)">
            <summary> Returns the default fill color for the series.  This
            color should be the same as the color Excel would use.  To calculate 
            this value, Excel begins with color 16 in the palette.  It then adds the
            series index (order in which the series was created) and reduces mod 56
            (max number of palette colors).
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.getDefaultLineColor(System.Int32)">
            <summary> Returns the default line color for the series.  This
            color should be the same as the color Excel would use.  To calculate 
            this value, Excel begins with color 24 in the palette.  It then adds the
            series index (order in which the series was created) and reduces mod 56
            (max number of palette colors).  If the series is a filled series, 
            the above calculation will not be used.  Instead, the default border
            color will be used.
            </summary>
            <returns> the default line color for the specified point and for this
            series's ChartType
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.getDefaultColor(System.Int32,System.Int32)">
            <summary> Helper method to calculate the default series color for the specified
            point index and start value.  This method should only be called from 
            the getDefaultXXXXColor methods.
            </summary>
            <param name="aPointIndex">the index of the point for the color.
            </param>
            <param name="aStartValue">the start value for the color lookup
            </param>
            <returns> the ColorModel holding the default color based on the specified
            parameters
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.changeConfiguration(SoftArtisans.OfficeWriter.ExcelWriter.ChartType,SoftArtisans.OfficeWriter.ExcelWriter.AxisType)">
            <param name="aType">
            </param>
            <param name="aAxisType">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.updateChartTypeAttributes(SoftArtisans.OfficeWriter.ExcelWriter.ChartType)">
            <summary> Should be called only after the ChartType has been changed.  This will
            update any attributes of the ChartType stored in the Series.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.addDataFormats(System.Collections.Generic.IList{SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataFormat})">
            <param name="dataFormat">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.Interface">
            <summary> Returns the API level construct for this Series. </summary>
            <returns> the API level construct for this series.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.Interior">
            <summary> Returns the ChartInteriorModel object that allows access to the filled area
            of this series.  
            </summary>
            <returns> the ChartInteriorModel for this series.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.Line">
            <summary> The ChartLineModel object that allows access to the filled area of this
            series.
            </summary>
            <returns> the ChartLineModel for this series.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.DataPointMarker">
            <summary> Returns the master DataPointMarker for this </summary>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.ChartType">
            <summary> Returns the ChartType for this series based on the information stored
            in its associated chart group and the series wide DataFormat block.  
            The return value will never have a category of 
            {@link ChartType#ChartCategory#Custom}
            </summary>
            <returns> the ChartType for this series.  
            </returns>
            <param name="aType">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.AxisType">
            <summary> Returns the AxisType for this Series.</summary>
            <returns> the AxisType for this Series.
            </returns>
            <param name="aAxisType">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.SeriesDataFormat">
            <summary> Helper method to get the DataFormat block for a series.</summary>
            <returns> the DataFormat block for the series.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.HasSmoothedLine">
            <summary> Returns whether this series should show a smooth (interpolated) line 
            rather than just connecting the data points.
            </summary>
            <returns> true if a smooth line should be displayed and false otherwise
            </returns>
            <summary> Sets whether this series shoudl show a smooth line rather than just
            a line connecting the data points.
            </summary>
            <param name="hasSmoothedLine">true if a smooth line should be displayed and
            false otherwise
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.Name">
            <summary> Returns the name of this series or an approprate default</summary>
            <returns> the name of this series or an approprate default
            </returns>
            <summary> Sets the name of this series</summary>
            <param name="aName">the name of this series
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.NameFormula">
            <summary> Returns the name of this series as a formula or "" if the name is
            specified as directly entered text
            </summary>
            <returns> the formula representation of this series' name.
            </returns>
            <summary> Sets the name of this series as a formula.</summary>
            <param name="aFormula">the name of this series as a formula.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.DataLabels">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.ErrorBarX">
            <summary> Returns the ErrorBarModel to manage the X error bars.</summary>
            <returns> the ErrorBarModel to manage the X error bars.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.ErrorBarY">
            <summary> Returns the ErrorBarModel to manage the Y error bars.</summary>
            <returns> the ErrorBarModel to manage the Y error bars.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.Trendlines">
            <summary> Returns the Trendlines collection for this series.  If this series
            does not support Trendlines an exception will be thrown.
            </summary>
            <returns> the Trendlines collection for this series.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.SeriesNumber">
            <summary> Return the series number for this series.  The number is the original
            index of the series in the file.  Used for determining default color.
            </summary>
            <returns> the number for this series.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.SeriesIndex">
            <summary> Returns the series index for this series.  The index is the index of the
            series within the chart stream.
            </summary>
            <returns> the index of the series within the chart stream.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.YDataFormula">
            <summary> Returns the Formula for the data for this series Y values.</summary>
            <returns> the formula for the y data.
            </returns>
            <summary> Sets the formula for the Y data.  </summary>
            <param name="aFmla">the formula to set
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.HasShadow">
            <returns>
            </returns>
            <param name="aHasShadow">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.ChartModel">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.DataFormats">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.Has3DBubbles">
            <summary> Helper method for getChartType to determine if the series DataFormat 
            block will display 3d bubbles.  We can't use the ChartLineModel object 
            because that object needs the information in getChartType to be 
            initialized.
            </summary>
            <returns> true if 3dBubbles should be displayed and false otherwise
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.Values">
            <summary> Return a String representation of the formula specifying the value data
            for this series.
            </summary>
            <returns> a String representation of the value data for this series
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.ScatterValues">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.BubbleSizes">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel.XDataFormula">
            <summary> Returns the Formula for the data for this series X values.  This is the
            category data on anything except a scatter or bubble chart.
            </summary>
            <returns> the formula for the x data.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SettingsLineAreaScatterModel.HighLowLine">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SettingsLineAreaScatterModel.DropLine">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SettingsLineAreaScatterModel.UpDownBar">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.TrendlineModel">
            <summary> <p>
            Model level class for Trendline
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.TrendlineModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSeriesTrendline,SoftArtisans.OfficeWriter.ExcelWriter.Model.SeriesModel)">
            <summary> Construct a new Trendline model</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.TrendlineModel.Name">
            <summary> Returns the name of this Trendline. If no name is specified, a default
            name will be generated.
            </summary>
            <returns> the name of this trendline.
            </returns>
            <summary> Sets the name of htis trendline.</summary>
            <param name="name">the new name for this trendline.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.TrendlineModel.ForecastPeriods">
            <summary> Return the number of periods to forecast past the data set</summary>
            <returns> the number of periods to forecast past the data set
            </returns>
            <summary> Sets the number of periods to forecast past the data set</summary>
            <param name="periods">the number of periods to forecast past the data set
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.TrendlineModel.BackcastPeriods">
            <summary> Returns the number of periods to forecast before the data set</summary>
            <returns> the number of periods to forecast before the data set
            </returns>
            <summary> Sets the number of periods to forecast before the data set</summary>
            <param name="periods">the number of periods to forecast before the data set
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.TrendlineModel.Intercept">
            <summary> Returns the intercept of the trendline</summary>
            <returns> the intercept of the trendline
            </returns>
            <summary> Sets the intercept of the trendline</summary>
            <param name="intercept">the intercept of the trendline
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.TrendlineModel.TrendlineLabel">
            <summary> Returns a model class allowing the label for this trendline to be
            formatted.
            </summary>
            <returns> a model class allowing the label for this trendline to be
            formatted.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.TrendlineModel.Line">
            <summary> Returns the ChartLineModel representing the line of this Trendline</summary>
            <returns> the ChartLineModel representing the line of this Trendline
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.TrendlineModel.RegressionValue">
            <summary> Returns the value used to build the regression equation for polynomial
            and moving average regression types.
            </summary>
            <returns> the value used to build the regression equation
            </returns>
            <summary> Sets the value used to build the regression equation for polynomial
            and moving average regression types.
            </summary>
            <param name="value">the value used to build the regression equation
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.TrendlineModel.RegressionType">
            <summary> Returns the type of regression used in this trendline.</summary>
            <returns> the type of regression used in this trendline.
            </returns>
            <summary> Sets the type of regression used in this trendline.</summary>
            <param name="type">the type of regression used in this trendline.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.TrendlineModel.ShowEquation">
            <summary> Returns whether the label will show the Equation of the trendline.</summary>
            <returns> whether the label will show the Equation of the trendline.
            </returns>
            <summary> Sets whether the label will show the Equation of the trendline.</summary>
            <param name="aFlag">whether the label will show the Equation of the trendline.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.TrendlineModel.ShowRSquaredValue">
            <summary> Returns whether the label will show the R-Squared value for this 
            trendline
            </summary>
            <returns> whether the label will show the R-Squared value for this 
            trendline
            </returns>
            <summary> Sets whether the label will show the R-Squared value for this 
            trendline
            </summary>
            <param name="aFlag">whether the label will show the R-Squared value for this 
            trendline
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.TrendlinesModel">
            <summary> <p>Model level class for the collection of Trendlines associated with a 
            Series</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.TrendlinesModel.loadTrendlines">
            <summary> Helper method to load all the trendlines from the file and create models
            from them.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.TrendlinesModel.createTrendline(SoftArtisans.OfficeWriter.ExcelWriter.Trendline.Regression)">
            <param name="aType">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.TrendlinesModel.getTrendlineAt(System.Int32)">
            <param name="index">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.TrendlinesModel.remove(System.Int32)">
            <param name="index">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.TrendlinesModel.remove(SoftArtisans.OfficeWriter.ExcelWriter.Model.TrendlineModel)">
            <param name="model">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.TrendlinesModel.Count">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.UpDownBarModel">
            <author>  johnv
            </author>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.UpDownBarModel.UpBarInterior">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.UpDownBarModel.UpBarBorderLine">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.UpDownBarModel.DownBarBorderLine">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.UpDownBarModel.GapBetweenBars">
            <returns>
            </returns>
            <param name="aGap">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Observers.SeriesUpdateEvent">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.FrtHeader">
            <summary>
            See 2.5.135 in MS-XLS. Most of the comments here come from that
            
            This is a 12 byte block of data, a FrtHeader, seen in some records like RecordCRTMLFRT and
            RecordCRTLAYOUT12
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.FrtHeader.fFrtAlertFlag">
            <summary>
            A bit that specifies whether the containing record species a range of cells:
            0 - The containing record does not specify a range of cells. The containing record's
            ref8.rwFirst, ref8.rwLast, ref8.colFirst, and ref8.colLast fields SHOULD all be zero.
            1 - The containing record specifies a range of cells
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.FrtHeader.fFrtRefFlag">
            <summary>
            A bit that specifies whether to alert the user of possible problems
            when saving the file without having recognized this record
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.FrtHeader.grbitFrt">
            <summary>
            An FrtFlags that specifies attributes for this record. The value of grbitFrt.fFrtRef
            MUST be zero. The value of grbitFrt.fFrtAlert MUST be zero
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.FrtHeader.reserved">
            <summary>
            MUST be zero, and MUST be ignored
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.FrtHeader.rt">
            <summary>
            An unsigned integer that specifies the record type identifier. MUST be identical to the record type
            identifier of the containing record
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.FrtHeader.FrtRef">
            <summary>
            A bit that specifies whether to alert the user of possible problems
            when saving the file without having recognized this record
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.FrtHeader.FrtAlert">
            <summary>
            A bit that specifies whether the containing record species a range of cells:
            0 - The containing record does not specify a range of cells. The containing record's
            ref8.rwFirst, ref8.rwLast, ref8.colFirst, and ref8.colLast fields SHOULD all be zero.
            1 - The containing record specifies a range of cells
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.FrtHeader.Rt">
            <summary>
            An unsigned integer that specifies the record type identifier. MUST be identical to the record type
            identifier of the containing record
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.Record">
            <summary> <p>
            Title: Record
            </p>
            <p>
            Description: Holds a record size, type, and its associated data and offset
            from the beginning of the file in memory, and acts as the parent abstraction
            class for all other records.
            </p>
            <p>
            Copyright: Copyright (c) 2002 SoftArtisans
            </p>
            <p>
            Company: SoftArtisans
            </p>
            
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.Record.mFactory">
            <summary> 
            We use the more permissive version of RecordFactory here because if we're
            using it then we probably know exactly what type we want to create.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.Record.read(System.SByte[])">
            <summary>
            Builds a record from a given byte buffer.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.Record.read(System.SByte[],System.Int32,System.Int32)">
            <summary> 
            Builds a record from a given byte buffer at a given offset while respecting the length constraint.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.Record.encode">
            <summary> 
            This method is called by the write() methods to copy the variable data
            into the internal buffer. When extending this class with a new record
            field, make sure that this class is implemented. The RecordType and
            RecordSize should NOT be copied!!
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.Record.decode">
            <summary>
            This method is called by the read() methods to copy the variable data
            into the internal buffer. When extending this class with a new record
            field, make sure that this class is implemented. The RecordType and
            RecordSize should NOT be copied!!
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.Record.updateHeader">
            <summary>
            Called after pack(), designed to update the size field.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.Record.writeBiff8String(System.String,System.Boolean)">
            <summary>
            A method to write a BIFF8 string into a record (usually the cch/rgch
            stuff). Ripped enthusiastically from the BOUNDSHEET record. This method
            handles: - The max length (cuts to max length if needed) - Writing the
            cch (length) out if aWriteLength == true - Checking to see if the string
            is Unicode or ASCII - Writing the first byte out which determines if it
            is compressed or not - Writing the string out.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.Record.calcBIFF8StringSize(System.String,System.Boolean)">
            <summary> 
            Calculates the length of a BIFF8 string. Does not include cch or grbit!!!!
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.Record.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <param name="">
            From analyzing the code this seems to be used extensively from derived objects' ToString()
            implementations. It's not clear whether this works correctly in .NET since the refelction
            API's work slightly differently than in JAVA (for example: no getters and setters, only properties)
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.Record.Equals(System.Object)">
            <summary>
            Flow:
                Is input of type Record? no, return false
                Is record type matching? no, return false
                Is record size matching? no, return false
            Return: Is the data identical?
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.Record.GetHashCode">
            <summary>
            "Implement the GetHashCode method whenever you implement the Equals method"
            http://msdn.microsoft.com/en-us/library/7h9bszxx(VS.80).aspx
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.Record.Type">
            <summary> 
            Returns/Sets the 16-bit type of this record.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.Record.AllBytes">
            <summary>
            Return a COPY of the WHOLE record as bytes.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.Record.DataBuffer">
            <summary> 
            Returns the data part of this record as the ByteDataBuffer.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.Record.Offset">
            <summary> 
            Returns the offset of the start of this record, in the stream or buffer
            it was gathered from.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.Record.Size">
            <summary>
            Returns the size, in bytes, of the data of this record. This is a 16-bit
            unsigned value returned as a 32-bit Java integer. This does not include
            the first four bytes used by the record type and size.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.Record.Data">
            <summary>
            Returns the data part of this record as a byte array.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.Record3D.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAI">
            <summary> <p>The AI record specified linked series data or text.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAI.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAI.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAI.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAI.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getinimumSize()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAI.ReferenceTypeClass">
            <summary> <p>The reference type enum specifies what type of reference is stored in the
            AI record.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAI.ReferenceTypeClass.#ctor(System.String,System.Int16)">
            <summary> Private constructor</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAI.LinkIdentifierClass">
            <summary> <p>The link identifier enum specifies what type of link is specified by an 
            AI record.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAI.LinkIdentifierClass.#ctor(System.String,System.Int16)">
            <summary> Private constructor</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordALRUNS.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordALRUNS.RunCount">
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAREA.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAREAFORMAT">
            <summary> <p>The AREAFORMAT record holds color and pattern info about an area of the
            chart.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAREAFORMAT.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAREAFORMAT.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAREAFORMAT.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAREAFORMAT.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAREAFORMAT.AutomaticFormat">
            <returns> Returns the mGrbitAutomaticFormatMask.
            </returns>
            <param name="grbitAutomaticFormatMask">The mGrbitAutomaticFormatMask to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAREAFORMAT.InvertColorNeg">
            <returns> Returns the mGrbitInvertColorNegMask.
            </returns>
            <param name="grbitInvertColorNegMask">The mGrbitInvertColorNegMask to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAREAFORMAT.BackgroundColorIndex">
            <returns> Returns the mBackgroundColorIndex.
            </returns>
            <param name="backgroundColorIndex">The mBackgroundColorIndex to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAREAFORMAT.ForegroundColorIndex">
            <returns> Returns the mForegroundColorIndex.
            </returns>
            <param name="foregroundColorIndex">The mForegroundColorIndex to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAREAFORMAT.PatternIndex">
            <returns> Returns the mPattern.
            </returns>
            <param name="pattern">The mPattern to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAREAFORMAT.RgbBackground">
            <returns> Returns the mRgbBackground.
            </returns>
            <param name="rgbBackground">The mRgbBackground to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAREAFORMAT.RgbForeground">
            <returns> Returns the mRgbForeground.
            </returns>
            <param name="rgbForeground">The mRgbForeground to set.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordATTACHEDLABEL">
            <summary> <p>
            The attached label holds some option flags that apply to the label data
            contained within the parent DATAFORMAT record group of thget record.
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordATTACHEDLABEL.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordATTACHEDLABEL.doEncode">
            <seealso cref="!:com.softartgetans.excelwriter.records.Record#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordATTACHEDLABEL.doDecode">
            <seealso cref="!:com.softartgetans.excelwriter.records.Record#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordATTACHEDLABEL.MinimumSize">
            <seealso cref="!:com.softartgetans.excelwriter.records.Record#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordATTACHEDLABEL.ShowBubbleSizes">
            <returns> Returns the showBubbleSizes.
            </returns>
            <param name="showBubbleSizes">The showBubbleSizes to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordATTACHEDLABEL.ShowLabelAndValuePercent">
            <returns> Returns the showLabelAndValuePercent.
            </returns>
            <param name="showLabelAndValuePercent">The showLabelAndValuePercent to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordATTACHEDLABEL.ShowPercent">
            <returns> Returns the showPercent.
            </returns>
            <param name="showPercent">The showPercent to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordATTACHEDLABEL.ShowValue">
            <returns> Returns the showValue.
            </returns>
            <param name="showValue">The showValue to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordATTACHEDLABEL.SmoothedLine">
            <returns> Returns the smoothedLine.
            </returns>
            <param name="smoothedLine">The smoothedLine to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordATTACHEDLABEL.ShowLabel">
            <returns> Returns the smoothedLine.
            </returns>
            <param name="smoothedLine">The smoothedLine to set.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAXCEXT.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAXESUSED.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAXIS.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAXISLINEFORMAT.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAXISPARENT.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordBAR.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordBEGIN">
            <summary> <p>The begin record marks the beginning of an object.  It's data must
            consist of 10330000.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordBEGIN.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordBEGIN.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordBEGIN.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordBEGIN.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getMinimumSize()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordBOPPOP.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordBOPPOPCUSTOM.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCATSERRANGE.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCHART">
            <summary> <p>
            The CHART record marks the start of the chart data substream in the workbook
            BIFF stream. This record defines the size and position of the chart in points
            (1/72 in) relative to the top left corner of the sheet.
            </p>
            <p>
            The x and y position are stored in a <i>signed </i> fixed point format (2
            bytes int, 2 bytes fraction)?
            </p>
            <p>
            The width and height are stored in an <i>unsigned </i> fixed point format (2
            bytes int, 2 bytes fraction)?
            </p>
            TODO how do the size and position stored here relate to the size and position
            stored in the escher object representing the chart.
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCHART.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCHART.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCHART.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCHART.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCHART.Height">
            <summary> Returns the height of the chart in points</summary>
            <returns> the height of the chart in points
            </returns>
            <summary> Sets the height of the chart in points</summary>
            <param name="height">the height of the chart in points
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCHART.Width">
            <summary> Returns the width of the chart in points</summary>
            <returns> the width of the chart in points
            </returns>
            <summary> Sets the width of the chart in points</summary>
            <param name="width">the width of the chart in points
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCHART.XPosition">
            <summary> Returns the x coordinate of the chart's top left corner in points from
            the top left corner of the sheet.
            </summary>
            <returns> the x coordinate of the chart's top left corner in points from
            the top left corner of the sheet.
            </returns>
            <summary> Sets the x coordinate of the chart's top left corner in points from the
            top left corner of the sheet.
            </summary>
            <param name="position">the x coordinate of the chart's top left corner in points
            from the top left corner of the sheet.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCHART.YPosition">
            <summary> Returns the y coordinate of the chart's top left corner in points from
            the top left corner of the sheet.
            </summary>
            <returns>
            </returns>
            <summary> Sets the y coordinate of the chart's top left corner in points from the
            top left corner of the sheet.
            </summary>
            <param name="position">the y coordinate of the chart's top left corner in points
            from the top left corner of the sheet.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCHART3DDATAFORM">
            <summary> <p>RecordCHART3DDATAFORM defines what type of shape will be used for 3D bar 
            and column charts</p>
            <p>What follows is an ASCII art representation of the data for this record.
            The order of the bytes is as it appears in the file</p>
            <code>
            default to bar
            __|__     __|__
            |     |   |     |
            0000 0000 0000 0000 
            ||        ||
            ||        |pyramid
            ||        pyramid, cut
            |cylinder
            |causes no shape to be rendered
            |         | these two cause a cone
            |        | these two cause a cut cone
            </code>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCHART3DDATAFORM.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCHART3DDATAFORM.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCHART3DDATAFORM.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCHART3DDATAFORM.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCHART3DDATAFORM.DataForm">
            <returns> Returns the mDataForm.
            </returns>
            <param name="dataForm">The mDataForm to set.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCHARTFORMAT.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCHARTFORMATLINK">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCHARTFORMATLINK.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCHARTFORMATLINK.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCHARTFORMATLINK.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCHARTFORMATLINK.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getMinimumSize()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCHARTLINE.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12">
            <summary>
            NOTE: documentation copied from MS-XLS pdf, section 2.4.66
            
            This record specifies the layout information for attached label,
            when contained in the sequence of records that conforms to the
            ATTACHEDLABEL rule, or legend, when contained in the sequence
            of records that conforms to the LD rule.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.grbitAutolayouttype">
            <summary>
            An unsigned integer that specifies the automatic layout
            type of the legend. MUST be ignored when this record is
            in the sequence of records that conforms to the ATTACHEDLABEL rule. 
            MUST be a value from the following table:
            
            0 - align to the bottom
            1 - align to top right corner
            2 - align to the top
            3 - align to the right
            4 - align to the left
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.frtHeader">
            <summary>
            An FrtHeader structure. The frtHeader.rt field MUST be 0x08A7.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.dwCheckSum">
             <summary>
             An unsigned integer that specifies the checksum. MUST be a value from the following table:
            
             fManPlot field of ShtProps, fAlwaysAutoPlotArea field of ShtProps, dwCheckSum
             0, 0, 1
             0, 1, 0
             1, 0, 0
             1, 1, 1
             </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.dx">
            <summary>
            An Xnum value that specifies a width or an horizontal offset. 
            The meaning is determined by wWidthMode.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.dy">
            <summary>
            An Xnum value that specifies a height or an vertical offset. 
            The meaning is determined by wHeightMode.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.reserved2">
            <summary>
            MUST be zero, and MUST be ignored
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.wHeightMode">
            <summary>
            A CrtLayout12Mode structure that specifies the meaning of dy.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.wWidthMode">
            <summary>
            A CrtLayout12Mode structure that specifies the meaning of dx.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.wXMode">
            <summary>
            A CrtLayout12Mode structure that specifies the meaning of x.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.wYMode">
            <summary>
            A CrtLayout12Mode structure that specifies the meaning of y.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.x">
            <summary>
            An Xnum value that specifies a horizontal offset. The meaning is determined by wXMode.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.y">
            <summary>
            An Xnum value that specifies a vertical offset. The meaning is determined by wYMode.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.FrtHeader">
            <summary>
            An FrtHeader structure. The frtHeader.rt field MUST be 0x08A7 (or 0x089D for RecordCRTLAYOUT12)
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.DwCheckSum">
             <summary>
             For RecordCRTLAYOUT12A:
             An unsigned integer that specifies the checksum. MUST be a value from the following table:
            
             fManPlot field of ShtProps, fAlwaysAutoPlotArea field of ShtProps, dwCheckSum
             0, 0, 1
             0, 1, 0
             1, 0, 0
             1, 1, 1
             
             For RecordCRTLAYOUT12:
             An unsigned integer that specifies the checksum of the values in
             the order as follows, if the checksum is incorrect, the layout
             information specified in this record MUST be ignored.
             </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.Dx">
            <summary>
            An Xnum value that specifies a width or an horizontal offset. 
            The meaning is determined by wWidthMode.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.Dy">
            <summary>
            An Xnum value that specifies a height or an vertical offset. 
            The meaning is determined by wHeightMode.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.WHeightMode">
            <summary>
            A CrtLayout12Mode structure that specifies the meaning of dy.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.WWidthMode">
            <summary>
            A CrtLayout12Mode structure that specifies the meaning of dx.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.WXMode">
            <summary>
            A CrtLayout12Mode structure that specifies the meaning of x.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.WYMode">
            <summary>
            A CrtLayout12Mode structure that specifies the meaning of y.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.X">
            <summary>
            An Xnum value that specifies a horizontal offset. The meaning is determined by wXMode.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.Y">
            <summary>
            An Xnum value that specifies a vertical offset. The meaning is determined by wYMode.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.AutoLayoutTypeProp">
            <summary>
            An unsigned integer that specifies the automatic layout
            type of the legend. MUST be ignored when this record is
            in the sequence of records that conforms to the ATTACHEDLABEL rule. 
            MUST be a value from the following table:
            
            0 - align to the bottom
            1 - align to top right corner
            2 - align to the top
            3 - align to the right
            4 - align to the left
            
            Other bits must be 0 and are ignored
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.AutoLayoutType">
            <summary>
             An unsigned integer that specifies the automatic layout
             type of the legend. MUST be ignored when this record is
             in the sequence of records that conforms to the ATTACHEDLABEL rule. 
             </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.CrtLayout12Mode">
            <summary>
            This record specifies a layout mode. Each layout mode specifies a different meaning of the x,
            y, dx, and dy fields of CrtLayout12 and CrtLayout12A
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.CrtLayout12Mode.L12MAUTO">
            <summary>
            Position and dimension are determined by the application. x, y, dx and dy
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.CrtLayout12Mode.L12MFACTOR">
            <summary>
            x and y specify the offset of the top left corner, relative 
            to its default position, as a fraction of the chart area. 
            MUST be greater than or equal to -1.0 and MUST be less than 
            or equal to 1.0. dx and dy specify the width and height, as 
            a fraction of the chart area, MUST be greater than or equal 
            to 0.0, and MUST be less than or equal to 1.0.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12.CrtLayout12Mode.L12MEDGE">
            <summary>
            x and y specify the offset of the upper-left corner; dx and dy 
            specify the offset of the bottom-right corner. x, y, dx and dy 
            are specified relative to the upper-left corner of the chart 
            area as a fraction of the chart area. x, y, dx and dy MUST be 
            greater than or equal to 0.0, and MUST be less than or equal to 1.0.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12A">
            <summary>
            NOTE: documentation copied from MS-XLS pdf, section 2.4.67
            
            This record specifies the layout information for a plot area
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12A.fLayoutTargetInner">
            <summary>
            A bit that specfies the type of plot area for the layout target
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12A.xBR">
            <summary>
            A signed integer that specifies the width of the plot area, in SPRC.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12A.xTL">
            <summary>
            A signed integer that specifies the horizontal offset of the plot area‘s 
            upper-left corner, relative to the upper-left corner of the chart area, in SPRC.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12A.yBR">
            <summary>
            A signed integer that specifies the height of the plot area, in SPRC.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12A.yTL">
            <summary>
            A signed integer that specifies the vertical offset of the plot area‘s 
            upper-left corner, relative to the upper-left corner of the chart area, in SPRC.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12A.LayoutTargetInner">
            <summary>
            A bit that specfies the type of plot area for the layout target
            false (0) - Outer plot area - The bounding rectangle that includes the axis labels,
            axis titles, data table and plot area of the chart.
            true (1) - Inner plot area - The rectangle bounded by the chart axes
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12A.XBR">
            <summary>
            A signed integer that specifies the width of the plot area, in SPRC.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12A.XTL">
            <summary>
            A signed integer that specifies the horizontal offset of the plot area‘s 
            upper-left corner, relative to the upper-left corner of the chart area, in SPRC.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12A.YBR">
            <summary>
            A signed integer that specifies the height of the plot area, in SPRC.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTLAYOUT12A.YTL">
            <summary>
            A signed integer that specifies the vertical offset of the plot area‘s 
            upper-left corner, relative to the upper-left corner of the chart area, in SPRC.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTMLFRT">
            <summary>
            NOTE: documentation copied from MS-XLS pdf, section 2.4.70
            
            This record specifies additional properties for chart elements, as specified
            by the Chart Sheet Substream ABNF. These properties complement the record
            to which they correspond, and are stored as a structure chain defined in
            XmlTkChain. An application can ignore this record without loss of functionality,
            except for the additional properties. If this record is longer than 8224 bytes,
            it MUST be split into several records. The first section of the data appears in
            this record and subsequent sections appear in one or more CrtMlFrtContinue records
            that follow this record.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTMLFRT.frtHeader">
            <summary>
            A future record header
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTMLFRT.xmlTkChain">
            <summary>
            An XmlTkChain structure that specifies a chain of structures. 
            The size of the XmlTkChain is specified by the cb field.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTMLFRT.unused">
            <summary>
            Undefined, and MUST be ignored.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTMLFRT.XmlTkChainProperty">
            <summary>
            An XmlTkChain structure that specifies a chain of structures. 
            The size of the XmlTkChain is specified by the cb field.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTMLFRT.FrtHeader">
            <summary>
            A future record header
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRTMLFRT.XmlTkChain">
            <summary>
            See section 2.5.304
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDAT">
            <summary> <p>
            Thget record stores options for the chart data table.
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDAT.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDAT.doEncode">
            <seealso cref="!:com.softartgetans.excelwriter.records.Record#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDAT.doDecode">
            <seealso cref="!:com.softartgetans.excelwriter.records.Record#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDAT.MinimumSize">
            <seealso cref="!:com.softartgetans.excelwriter.records.Record#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDAT.HasHorizontalBorders">
            <summary> Returns whether or not horizontal borders will be displayed in the data
            table
            </summary>
            <returns> whether or not horizontal borders will be displayed in the data
            table
            </returns>
            <summary> Sets whether or not horizontal borders will be displayed in the data
            table
            </summary>
            <param name="aFlag">whether or not horizontal borders will be displayed in the
            data table
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDAT.HasOutlineBorders">
            <summary> Returns whether or not borders will be displayed around the data table</summary>
            <returns> whether or not borders will be displayed around the data table
            </returns>
            <summary> Sets whether or not borders will be displayed around the data table</summary>
            <param name="aFlag">whether or not borders will be displayed around the data
            table
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDAT.HasVerticalBorders">
            <summary> Returns whether or not vertical borders will be displayed in the data
            table
            </summary>
            <returns> whether or not vertical borders will be displayed in the data
            table
            </returns>
            <summary> Sets whether or not vertical borders will be displayed in the data table</summary>
            <param name="aFlag">whether or not vertical borders will be displayed in the
            data table
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDAT.ShowSeriesKeys">
            <summary> Returns whether series color keys will be displayed in the data table</summary>
            <returns> whether series color keys will be displayed in the data table
            </returns>
            <summary> Sets whether series color keys will be displayed in the data table</summary>
            <param name="aFlag">whether series color keys will be displayed in the data
            table
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDATAFORMAT">
            <summary> <p>The DATAFORMAT record marks the begining of a set of records describing 
            the data points of a series.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDATAFORMAT.mPointNumber">
            <summary> The point number this block of formatting info records describes or
            RecordDATAFORMAT.mEntireSeries if it pertains to the entire series
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDATAFORMAT.mSeriesIndex">
            <summary> The index of the series in the file</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDATAFORMAT.mSeriesNumber">
            <summary> The series number (series order in the ui).  This may be different from
            the series index if the series has been reordered
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDATAFORMAT.mGrbit">
            <summary> Option flags</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDATAFORMAT.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDATAFORMAT.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDATAFORMAT.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDATAFORMAT.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDATAFORMAT.UseExcel4Colors">
            <returns> Returns the mGrbit.
            </returns>
            <param name="grbit">The mGrbit to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDATAFORMAT.PointNumber">
            <returns> Returns the mPointNumber.
            </returns>
            <param name="pointNumber">The mPointNumber to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDATAFORMAT.SeriesIndex">
            <returns> Returns the mSeriesIndex.
            </returns>
            <param name="seriesIndex">The mSeriesIndex to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDATAFORMAT.SeriesNumber">
            <returns> Returns the mSeriesNumber.
            </returns>
            <param name="seriesNumber">The mSeriesNumber to set.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDEFAULTTEXT">
            <summary> <p>The DEFAULTTEXT record marks a following TEXT record as the default 
            text for a certain chart item, specified by its only field.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDEFAULTTEXT.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDEFAULTTEXT.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDEFAULTTEXT.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDEFAULTTEXT.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getMinimumSize()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDEFAULTTEXT_TextType">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDROPBAR">
            <summary> <p>
            This record defines drop bars on a line chart. If the chart contains drop
            bars, the chart BIFF will contain two DROPBAR records. The first DROPBAR
            record corresponds to the up bar and the second DROPBAR record corresponds to
            the down bar.
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDROPBAR.mGapWidth">
            <summary> Drop bar gap width (0 to 100%)</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDROPBAR.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDROPBAR.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDROPBAR.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDROPBAR.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDROPBAR.GapWidth">
            <summary> Returns the gap width (0-100%)</summary>
            <returns> the gap width (0-100%)
            </returns>
            <summary> Sets the gap width (0-100%)</summary>
            <param name="aWidth">the gap width (0-100%)
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordEND">
            <summary> <p>The END record represents the end of an object in a chart substream.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordEND.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordEND.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordEND.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordEND.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getMinimumSize()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFBI.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFONTX">
            <summary> <p>The FONTX record is a child of a TEXT record and links that text to
            a font in the font table.  The sole field is a font index.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFONTX.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFONTX.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFONTX.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFONTX.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getMinimumSize()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFRAME">
            <summary> <p>
            The FRAME record marks the start of an object describing the border around a
            label in a chart. It also contains some formatting flags.
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFRAME.mGrbit">
            <summary> Default to auto size/auto position</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFRAME.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFRAME.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFRAME.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFRAME.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFRAME.AutoPosition">
            <summary> Returns true if Excel should calculate the position of the object and
            false otherwise. If true, the x and y coordinates in the parent object
            will be ignored.
            </summary>
            <returns> true if Excel will calculate the position of the object and false
            if the x and y coordinates in the parent object should be used.
            </returns>
            <summary> Set to true if Excel should calculate the position of the object and
            false otherwise. If true, the x and y coordinates in the parent object
            will be ignored.
            </summary>
            <param name="aFlag">true if Excel will calculate the position of the object and
            false if the x and y coordinates in the parent object should
            be used.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFRAME.AutoSize">
            <summary> Returns true if Excel should calculate the size of the object and
            false otherwise. If true, the width and height in the parent object
            will be ignored.
            </summary>
            <returns> true if Excel will calculate the size of the object and false
            if the width and height in the parent object should be used.
            </returns>
            <summary> Set to true if Excel should calculate the size of the object and
            false otherwise. If true, the width and height in the parent object
            will be ignored.
            </summary>
            <param name="aFlag">true if Excel will calculate the position of the object and
            false if the width and height in the parent object should
            be used.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFRAME.FrameType">
            <summary> Returns the type of frame.</summary>
            <returns> the type of frame.
            </returns>
            <summary> Sets the type of frame.</summary>
            <param name="frameType">the new frame type
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFRAME_Type">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordIFMT.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLEGEND.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLEGENDXN" -->
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLEGENDXN.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLEGENDXN.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLEGENDXN.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLEGENDXN.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLEGENDXN.LegendIndex">
            <returns> Returns the mLegendIndex.
            </returns>
            <param name="legendIndex">The mLegendIndex to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLEGENDXN.EntryDeleted">
            <summary> Returns whether or not the entry specified by this record has been 
            deleted from the legend.
            </summary>
            <returns> true if the entry has been deleted and false otherwise
            </returns>
            <summary> Sets whether or not th entry specified by this record has been deleted
            from the legend
            </summary>
            <param name="aFlag">true if the entry has been deleted and false otherwise
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLEGENDXN.EntryFormatted">
            <summary> Returns whether or not the entry specified by this record has been 
            formatted
            </summary>
            <returns> true if the entry has been formatted and false otherwise
            </returns>
            <summary> Sets whether or not the entry specified by this record has been formatted</summary>
            <param name="aFlag">true if the entry has been formatted and false otherwise
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLINE.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLINEFORMAT">
            <summary> <p>The LINEFORMAT record is used in several places in charting to specify
            the appearance of lines.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLINEFORMAT.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLINEFORMAT.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLINEFORMAT.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLINEFORMAT.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLINEFORMAT.ColorRgb">
            <returns> Returns the mRgb.
            </returns>
            <param name="rgb">The mRgb to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLINEFORMAT.ColorIndex">
            <returns> Returns the mColorIndex.
            </returns>
            <param name="colorIndex">The mColorIndex to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLINEFORMAT.LineType">
            <returns> Returns the mLineType.
            </returns>
            <param name="lineType">The mLineType to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLINEFORMAT.LineWeight">
            <returns> Returns the mLineWeight.
            </returns>
            <param name="lineWeight">The mLineWeight to set.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordMARKERFORMAT">
            <summary> <p>The MARKERFORMAT record contains formatting and color informat for the 
            data markers in a series.</p>
            <p>The background color fields control the fill for the marker while the
            foreground color fields control the border for the marker.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordMARKERFORMAT.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordMARKERFORMAT.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordMARKERFORMAT.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordMARKERFORMAT.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordMARKERFORMAT.BackgroundColorIndex">
            <returns> Returns the mBackgroundColorIndex.
            </returns>
            <param name="backgroundColorIndex">The mBackgroundColorIndex to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordMARKERFORMAT.ForegroundColorIndex">
            <returns> Returns the mForegroundColorIndex.
            </returns>
            <param name="foregroundColorIndex">The mForegroundColorIndex to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordMARKERFORMAT.MarkerSize">
            <summary> Marker size is stored in twips (1/20 of a point).</summary>
            <returns> Returns the mMarkerSize.
            </returns>
            <summary> Marker size is stored in twips (1/20 of a point).</summary>
            <param name="markerSize">The mMarkerSize to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordMARKERFORMAT.MarkerType">
            <returns> Returns the mMarkerType.
            </returns>
            <param name="markerType">The mMarkerType to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordMARKERFORMAT.RgbBackground">
            <returns> Returns the mRgbBackground.
            </returns>
            <param name="rgbBackground">The mRgbBackground to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordMARKERFORMAT.RgbForeground">
            <returns> Returns the mRgbForeground.
            </returns>
            <param name="rgbForeground">The mRgbForeground to set.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordOBJECTLINK">
            <summary> <p>
            This record links a TEXT record to an object on the chart or to the entire
            chart.
            </p>
            <p>
            The wLinkObj field specifies which object the text is linked to. The
            wLinkVar1 and wLinkVar2 fields define the linked object as a specific series
            number and data point in the series. The wLinkVar1 and wLinkVar2 fields have
            meaning only if the wLinkObj field equals 4.
            </p>
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordOBJECTLINK.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordOBJECTLINK.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordOBJECTLINK.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordOBJECTLINK.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordOBJECTLINK.DataPointNumber">
            <summary> Returns the data point number the text is linked to. This only has
            meaning if the LinkType is DataLabel.
            </summary>
            <returns> the data point number the text is linked to. This only has
            meaning if the LinkType is DataLabel.
            </returns>
            <summary> Sets the data point number the text is linked to. This only has meaning
            if the LinkType is DataLabel.
            </summary>
            <param name="dataPointNumber">the data point number the text is linked to. This
            only has meaning if the LinkType is DataLabel.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordOBJECTLINK.LinkType">
            <summary> Specifies what type of object the text is linked to.</summary>
            <returns> what type of object the text is linked to.
            </returns>
            <summary> Sets what type of object the text is linked to.</summary>
            <param name="linkType">what type of object the text is linked to.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordOBJECTLINK.SeriesNumber">
            <summary> Returns the series number the text is linked to. This only has meaning if
            the LinkType is DataLabel.
            </summary>
            <returns> the series number the text is linked to. This only has meaning if
            the LinkType is DataLabel.
            </returns>
            <summary> Sets the series number the text is linked to. This only has meaning if
            the LinkType is DataLabel.
            </summary>
            <param name="seriesNumber">the series number the text is linked to. This only
            has meaning if the LinkType is DataLabel.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordOBJECTLINK_LinkType">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPIE.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPIEFORMAT">
            <summary> <p>The PIEFORMAT holds formatting information about a series in a pie chart
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPIEFORMAT.mDistanceFromCenter">
            <summary> Holds the distance of the slice from the center of an open pie chart 
            as a percentage of the diameter of the pie.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPIEFORMAT.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPIEFORMAT.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPIEFORMAT.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPIEFORMAT.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPIEFORMAT.DistanceFromCenter">
            <returns> Returns the mDistanceFromCenter.
            </returns>
            <param name="distanceFromCenter">The mDistanceFromCenter to set.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPLOTAREA.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPLOTGROWTH.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPOS.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPOS.PositionMode">
            <summary>
            See MS-XLS 2.5.205
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordRADAR.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordRADARAREA.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSCATTER.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSCATTER.BubbleSizeType">
            <summary> <p>The link identifier enum specifies what type of value the bubble
            size is.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSCATTER.BubbleSizeType.#ctor(System.String,System.Int32)">
            <summary> Private constructor</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXERRBAR">
            <summary> <p>
            This record defines the error bars for a series
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXERRBAR.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXERRBAR.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXERRBAR.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXERRBAR.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXERRBAR.ErrorBarType">
            <summary> Returns the direction of this error bar (x/y, plus/minus).</summary>
            <returns> the direction of this error bar (x/y, plus/minus).
            </returns>
            <summary> Sets the direction of this error bar (x/y, plus/minus).</summary>
            <param name="errorBarType">the direction of this error bar (x/y, plus/minus).
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXERRBAR.ErrorBarValueType">
            <summary> Returns the type of value represented by the error bar.</summary>
            <returns> the type of value represented by the error bar.
            </returns>
            <summary> Sets the type of value represented by the error bar.</summary>
            <param name="errorBarValueType">the type of value represented by the error bar.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXERRBAR.NumValues">
            <summary> Returns the number of values or cell references used for error bars.</summary>
            <returns> the number of values or cell references used for error bars.
            </returns>
            <summary> Sets the number of values or cell references used for error bars.</summary>
            <param name="numValues">the number of values or cell references used for error
            bars.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXERRBAR.TShaped">
            <summary> Returns whether or not the error bar has a T shape</summary>
            <returns> whether or not the error bar has a T shape
            </returns>
            <summary> Sets whether or not the error bar is T shaped.</summary>
            <param name="aFlag">whether or not the error bar is T shaped.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXERRBAR.Value">
            <summary> Returns the fixed value, percentage, or number of standard deviations
            used as the error bar values.
            </summary>
            <returns> the fixed value, percentage, or number of standard deviations
            used as the error bar values.
            </returns>
            <summary> Sets the fixed value, percentage, or number of standard deviations used
            as the error bar values.
            </summary>
            <param name="value">the fixed value, percentage, or number of standard
            deviations used as the error bar values.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXERRBAR.BarType">
            <summary> <p>
            The axis and direction of this error bar.
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXTREND">
            <summary> <p>
            The SERAUXTREND record defines the trendline for a series.
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXTREND.NaN">
            <summary> This special value of IEEE 754 NaN (Not a Number) is used by excel but
            automatically converted by java to Double.NaN.  So we store it here 
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXTREND.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXTREND.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXTREND.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXTREND.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXTREND.Backcast">
            <summary> Returns the number of periods to forcast before the data set.</summary>
            <returns> the number of periods to forcast before the data set.
            </returns>
            <summary> Sets the number of periods to forcast before the data set.</summary>
            <param name="forcastBackwards">the number of periods to forcast before the data
            set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXTREND.Forecast">
            <summary> Returns the number of periods to forcast after the data set.</summary>
            <returns> the number of periods to forcast after the data set.
            </returns>
            <summary> Sets the number of periods to forcast after the data set.</summary>
            <param name="forcastForwards">the number of periods to forcast after the data
            set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXTREND.InterceptUsed">
            <summary> Returns whether the intercept field is used.  If the intercept field is
            not used, Excel will write a specific value of IEEE 754 NaN (Not a Number).
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXTREND.Intercept">
            <summary> Returns the forced intercept</summary>
            <returns> the forced intercept
            </returns>
            <summary> Sets the forced intercept</summary>
            <param name="intercept">the forced intercept
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXTREND.RegressionType">
            <summary> Returns the type of regression used to generate the trendline</summary>
            <returns> the type of regression used to generate the trendline
            </returns>
            <summary> Sets the type of regression used to generate the trendline</summary>
            <param name="regressionType">the type of regression used to generate the
            trendline
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXTREND.RegressionValue">
            <summary> Returns the polynomial order or moving average period of the regression
            depending on the type of regression used.
            </summary>
            <returns> the polynomial order or moving average period of the regression
            depending on the type of regression used.
            </returns>
            <summary> Sets the polynomial order or moving average period of the regression
            depending on the type of regression used.
            </summary>
            <param name="regressionValue">the polynomial order or moving average period of
            the regression depending on the type of regression used.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXTREND.ShowEquation">
            <summary> Returns whether the Equation for the trendline should be displayed</summary>
            <returns> whether the Equation for the trendline should be displayed
            </returns>
            <summary> Sets whether the Equation for the trendline should be displayed </summary>
            <param name="showEquation">whether the Equation for the trendline should be displayed
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERAUXTREND.ShowRSquared">
            <summary> Returns whether the RSquared value for the regression should be displayed</summary>
            <returns> whether the RSquared value for the regression should be displayed
            </returns>
            <summary> Sets whether the RSquared value for the regression should be displayed</summary>
            <param name="showRSquared">whether the RSquared value for the regression should be displayed
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERFMT">
            <summary> <p>
            The SERFMT record controls certain formatting aspects of a series
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERFMT.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERFMT.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERFMT.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERFMT.get3DBubbles">
            <summary> Returns whether, if this series is on a bubble chart, the bubbles have
            a 3D effect.
            </summary>
            <returns> Returns whether, if this series is on a bubble chart, the bubbles have
            a 3D effect.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERFMT.set3DBubbles(System.Boolean)">
            <summary> Sets Returns whether, if this series is on a bubble chart, the bubbles have
            a 3D effect.
            </summary>
            <param name="aFlag">Returns whether, if this series is on a bubble chart, the bubbles have
            a 3D effect.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERFMT.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERFMT.HasShadow">
            <summary> Returns whether or not the series has a shadow</summary>
            <returns> whether or not the series has a shadow
            </returns>
            <summary> Sets whether or not the series has a shadow</summary>
            <param name="aFlag">whether or not the series has a shadow
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERFMT.SmoothedLine">
            <summary> Returns whether or not the series uses a smooth line</summary>
            <returns> whether or not the series uses a smooth line
            </returns>
            <summary> Sets whether or not the series uses a smooth line</summary>
            <param name="aFlag">whether or not the series uses a smooth line
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERIES">
            <summary> <p>
            The SERIES record describes one of the series in a chart. Specifically, the
            record contains information about the type and number of categories and
            values in the series.
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERIES.#ctor(System.Int16,System.Int32,System.Int64)">
            <summary> Should only be called from one of the RecordFactories!!!</summary>
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERIES.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERIES.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERIES.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERIES.BubbleValueCount">
            <returns> Returns the mBubbleValueCount.
            </returns>
            <param name="bubbleValueCount">The mBubbleValueCount to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERIES.CategoryCount">
            <returns> Returns the mCategoryCount.
            </returns>
            <param name="categoryCount">The mCategoryCount to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERIES.DataTypeBubbleSize">
            <returns> Returns the mDataTypeBubbleSize.
            </returns>
            <param name="dataTypeBubbleSize">The mDataTypeBubbleSize to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERIES.DataTypeCategory">
            <returns> Returns the mDataTypeCategory.
            </returns>
            <param name="dataTypeCategory">The mDataTypeCategory to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERIES.DataTypeValue">
            <returns> Returns the mDataTypeValue.
            </returns>
            <param name="dataTypeValue">The mDataTypeValue to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERIES.ValueCount">
            <returns> Returns the mValueCount.
            </returns>
            <param name="valueCount">The mValueCount to set.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERIES.DataType">
            <summary> <p>
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERIES.DataType.#ctor(System.String,System.Int32)">
            <summary> Private constructor</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERIESTEXT">
            <summary> <p>The SERIESTEXT record contains text that is linked to a series.  It looks 
            like it can only be used to hold the series name.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERIESTEXT.mTextId">
            <summary> According to book, must always be 0</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERIESTEXT.mText" -->
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERIESTEXT.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERIESTEXT.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERIESTEXT.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERIESTEXT.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getMinimumSize()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERPARENT">
            <summary> <p>
            This record indicates the series index for the series that the trendline or
            error bar is attached to. The series index is the number of the series in the
            BIFF (starting with series one).
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERPARENT.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERPARENT.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERPARENT.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERPARENT.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERPARENT.SeriesIndex">
            <summary> Returns the number of the series tha tthe trendline or error bar is
            attached to.
            </summary>
            <returns> the number of the series tha tthe trendline or error bar is
            attached to.
            </returns>
            <summary> Sets the number of the series tha tthe trendline or error bar is attached
            to.
            </summary>
            <param name="aNumber">the number of the series tha tthe trendline or error bar
            is attached to.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERTOCRT">
            <summary> <p>This record links a series to a chart group.  The sole field is the number
            (specified in the CHARTFORMAT record) for the chart group the series 
            containing this record belongs to.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERTOCRT.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERTOCRT.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERTOCRT.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERTOCRT.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSERTOCRT.ChartGroupIndex">
            <returns> Returns the mChartGroupNumber.
            </returns>
            <param name="chartGroupNumber">The mChartGroupNumber to set.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSHTPROPS">
            <summary> <p>
            The SHTPROPS record specifies chart sheet properties
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSHTPROPS.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSHTPROPS.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSHTPROPS.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSHTPROPS.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSHTPROPS.BlankBehavior">
            <summary> Returns what behavior shoudl be taken with blank cells.</summary>
            <returns>
            </returns>
            <summary> Sets what behavior shoudl be taken with blank cells.</summary>
            <param name="blankBehavior">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSHTPROPS.AlwaysAutoPlotArea">
            <summary> Returns whether the user has modified the chart enough that 
            UseManualPlotArea should be set to false
            </summary>
            <returns>
            </returns>
            <summary> Sets whether the user has modified the chart enough that 
            UseManualPlotArea should be set to false
            </summary>
            <param name="aFlag">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSHTPROPS.DoNotResizeWithWindow">
            <summary> Returns whether or not the chart should be resized with the window</summary>
            <returns> true if the chart should not be resized with the window and false
            otherwise
            </returns>
            <summary> Sets whether or not the chart should be resized with the window</summary>
            <param name="true">if the chart should not be resized with the window and false
            otherwise
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSHTPROPS.ManuallyFormatted">
            <summary> If the chart type has been manually formatted (changed from the default)</summary>
            <returns>
            </returns>
            <summary> Sets If the chart type has been manually formatted (changed from the default)</summary>
            <param name="aFlag">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSHTPROPS.PlotVisibleCellsOnly">
            <summary> Returns whether or not to plot only visible cells</summary>
            <returns> true if only visible cells shoudl be plotted and false otherwise
            </returns>
            <summary> Sets whether or not to plot only visible cells</summary>
            <param name="aFlag">true if only visible cells shoudl be plotted and false 
            otherwise
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSHTPROPS.UseManualPlotArea">
            <summary> Returns whether a POS record describes the plot area or whether the default
            plot area is used.
            </summary>
            <returns> true if the POS record describes the plot area and false if the
            default plot area is used
            </returns>
            <summary> Sets whether a POS record describes the plot area or whether the default
            plot area is used.
            </summary>
            <param name="aFlag">true if the POS record describes the plot area and false 
            if the default plot area is used
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSHTPROPS_BlankBehavior">
            <summary> <p>Enum class specifying the possible behaviors for blank cells.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSIINDEX">
            <summary> <p>This record marks different positions in the data cache of the chart.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSIINDEX.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSIINDEX.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSIINDEX.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSIINDEX.getSiIndexType">
            <summary> Returns Index into the series list.</summary>
            <returns> Index into the series list.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSIINDEX.setSiIndexType(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSIINDEX.SiIndexType)">
            <summary> Sets Index into the series list.</summary>
            <param name="index">Index into the series list.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSIINDEX.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getMinimumSize()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSURFACE.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT">
            <summary> <p>
            The TEXT record defines some of the formatting for some piece of chart text.
            It begins a group of records that further specify the appearance and content
            of a specific portion of chart text. The actual text controlled by this
            record depends on the parent record.
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.doEncode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.doDecode">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#doDecode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.getTextAlignment">
            <summary> Returns how the text is oriented</summary>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.setTextAlignment(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.TextAlignment)">
            <summary> Sets how the text is oriented</summary>
            <param name="aAlignment">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.MinimumSize">
            <seealso cref="!:SoftArtisans.OfficeWriter.ExcelWriter.Records.Records#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.BackgroundDisplayMode">
            <summary> Returns how the background for the text should be displayed</summary>
            <returns> how the background for the text should be displayed
            </returns>
            <summary> Sets how the background for the text should be displayed</summary>
            <param name="backgroundDisplayMode">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.Height">
            <summary> Returns the height of this text area in units of 1/4000 of the chart area</summary>
            <returns>
            </returns>
            <summary> Sets the height of this text area in units of 1/4000 of the chart area</summary>
            <param name="height">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.HorizontalAlignment">
            <summary> Returns the horizontal alignment of the text</summary>
            <returns> the horizontal alignment of the text
            </returns>
            <summary> Sets the horizontal alignment of the text</summary>
            <param name="horizAlignment">the horizontal alignment of the text
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.RgbText">
            <summary> Returns the color of the text as an RGB value</summary>
            <returns> the color of the text as an RGB value
            </returns>
            <summary> Sets the color of the text as an RGB value</summary>
            <param name="rgbText">the color of the text as an RGB value
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.TextColorIndex">
            <summary> Returns the color of the text as an index to the color palette</summary>
            <returns> the color of the text as an index to the color palette
            </returns>
            <summary> Sets the color of the text as an index to the color palette.</summary>
            <param name="textColorIndex">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.TextRotation">
            <summary> Returns the rotation angle of the text. It's not clear how this interacts
            with the TextAlignment field of the Grbit field.
            </summary>
            <returns>
            </returns>
            <summary> Sets the rotation angle of the text. It's not clear how this interacts
            with the TextAlignment field of the Grbit field.
            </summary>
            <param name="textRotation">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.VerticalAlignment">
            <summary> Returns the vertical alignment of the text</summary>
            <returns>
            </returns>
            <summary> Sets the vertical alignment of the text</summary>
            <param name="vertAlignment">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.Width">
            <summary> Returns the width of the text in units of 1/4000 of the chart area</summary>
            <returns>
            </returns>
            <summary> Sets the width of the text in units of 1/4000 of the chart area</summary>
            <param name="width">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.XPosition">
            <summary> Returns the x position of the text in units of 1/4000 of the chart area</summary>
            <returns>
            </returns>
            <summary> Sets the x position of the text in units of 1/4000 of the chart area</summary>
            <param name="position">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.YPosition">
            <summary> Returns the y position of the text in units of 1/4000 of the chart area</summary>
            <returns>
            </returns>
            <summary> Sets the y position of the text in units of 1/4000 of the chart area</summary>
            <param name="position">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.AutoBackground">
            <summary> Returns whether background is set to automatic</summary>
            <returns>
            </returns>
            <summary> Sets whether background is set to automatic</summary>
            <param name="aFlag">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.AutoText">
            <summary> Returns whether automatic text or user text is displayed.  Must be true
            for ShowValue to be meaningful.
            </summary>
            <returns>
            </returns>
            <summary> Sets whether automatic text or user text is displayed.  Must be true
            for ShowValue to be meaningful.
            </summary>
            <param name="aFlag">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.AutoColor">
            <summary> Returns whether automatic color is used.</summary>
            <returns>
            </returns>
            <summary> Sets whether automatic color is used.</summary>
            <param name="aFlag">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.Deleted">
            <summary> Returns whether an automatic text label has been deleted</summary>
            <returns>
            </returns>
            <summary> Sets whether an automatic text label has been deleted</summary>
            <param name="aFlag">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.Generated">
            <summary> Returns whether the generated text is default/unmodified or modified.</summary>
            <returns> true for default/unmodified and false if modified
            </returns>
            <summary> Returns whether the generated text is default/unmodified or modified.</summary>
            <param name="aFlag">true for default/unmodified and false if modified
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.ShowBubbleSizes">
            <summary> Whether the text contains bubble sizes</summary>
            <returns>
            </returns>
            <summary> Sets the text contains bubble sizes</summary>
            <param name="aFlag">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.ShowKey">
            <summary> If text is an attached data label, true means that the legend key should
            be drawn with the data label.
            </summary>
            <returns>
            </returns>
            <summary> If text is an attached data label, true means that the legend key should
            be drawn with the data label.
            </summary>
            <param name="aFlag">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.ShowLabel">
            <summary> Whether the text should contain the label</summary>
            <returns>
            </returns>
            <summary> Sets whether the text should contain the label</summary>
            <param name="aFlag">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.ShowLabelAndValuePercent">
            <summary> Whether show category label and value as a percentage (pie charts only)</summary>
            <returns>
            </returns>
            <summary> Sets show category label and value as a percentage (pie charts only)</summary>
            <param name="aFlag">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.ShowValue">
            <summary> Whether the text of the label is the value of a data point or the 
            category.  True if text of label is value of data point and false if
            text is category label
            </summary>
            <returns>
            </returns>
            <summary> Whether the text of the label is the value of a data point or the 
            category.  True if text of label is value of data point and false if
            text is category label
            </summary>
            <param name="aFlag">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.ShowValuePercent">
            <summary> Whether to show value as a percent. This bit applies only to pie charts</summary>
            <returns>
            </returns>
            <summary> Sets whether to show value as a percent. This bit applies only to pie charts</summary>
            <param name="aFlag">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.TextVertical">
            <summary> Returns whether the text is vertical or not.</summary>
            <returns>
            </returns>
            <summary> Sets whether the text is vertical or not.  It is not clear how this
            interacts with the TextAlignment property and the rotation property
            </summary>
            <param name="aFlag">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT.DataLabelPlacement">
            <summary> Returns how the data label is placed</summary>
            <returns>
            </returns>
            <summary> Sets how the data label is placed</summary>
            <param name="aPlacement">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT_DataLabelPlacement">
            <summary> <p>An enum holding the possible values for the DLP field inside the grbit2 
            field of the TEXT charting record.</p>
            <p>The meaning of the value(s) of this enum depends largely on the type of
            chart containing the TEXT record.</p>
            <pre>
            The dlp field specifies data label placement, as shown in the following table.
            
            dlp     Position   Used on these chart types
            
            1       Outside     Bar, 2d/3d pie
            2       Inside      Bar, 2d/3d pie
            3       Center      Bar, line, 2d/3d pie
            4       Axis        Bar
            5       Above       Line
            6       Below       Line
            7       Left        Line
            8       Right       Line
            9       Auto        2d/3d pie
            10      Moved (by user) various
            
            When dlp is equal to 0 (zero), it specifies the following positions:
            
            Chart type      Position
            
            2d/3d pie       Auto
            Line            Right
            Bar             Outside
            Stacked bar     Center
            </pre>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT_DataLabelPlacement.setDataLabelPlacementWithEnum(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT,SoftArtisans.OfficeWriter.ExcelWriter.DataLabelPlacementType,SoftArtisans.OfficeWriter.ExcelWriter.ChartType.ChartCategory)">
            <summary>
            Set the DataLabel placement using an enum. Checks that the enum is valid and appropriate for this type
            of chart.
            </summary>
            <param name="recordText"></param>
            <param name="dataLabelPlacement"></param>
            <param name="chartCategory"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT_DataLabelPlacement.isDataLabelPlacementTypeValidForChartCategory(SoftArtisans.OfficeWriter.ExcelWriter.DataLabelPlacementType,SoftArtisans.OfficeWriter.ExcelWriter.ChartType.ChartCategory)">
            <summary>
            Check that this is a valid DataLabel Placement for the chart using the following specification
            in Microsoft's Excel Binary format specification:
            
            dlp (4 bits): An unsigned integer that specifies the data label positioning of the text, 
             relative to the graph object item the text is attached to. For all data label text fields, 
             MUST be a value from the following table:  
             
               DataLabel Pos.  | Value | Value for chart group type 
               ------------------------------------------------------------------------------------
               Auto            | 0x0   | Pie chart group 
               Right           | 0x0   | Line, Bubble, or Scatter chart group 
               Outside         | 0x0   | Bar or Column chart group with fStacked equal to 0 
               Center          | 0x0   | Bar or Column chart group with fStacked equal to 1  
               Outside End     | 0x1   | Bar, Column, or Pie chart group   
               Inside End      | 0x2   | Bar, Column, or Pie chart group  
               Center          | 0x3   | Bar, Column, Line, Bubble, Scatter, or Pie chart group  
               Inside Base     | 0x4   | Bar or Column chart group 
               Above           | 0x5   | Line, Bubble, or Scatter chart group 
               Below           | 0x6   | Line, Bubble, or Scatter chart group 
               Left            | 0x7   | Line, Bubble, or Scatter chart group 
               Right           | 0x8   | Line, Bubble, or Scatter chart group 
               Auto            | 0x9   | Pie chart group 
               Moved by user   | 0xA   | All 
                
               For all non-data label text fields, it MUST be 0x0. 
            </summary>
            <param name="dataLabelPlacement"></param>
            <param name="chartCategory"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT_DataLabelPlacement.isValidDataLabelPlacementType(SoftArtisans.OfficeWriter.ExcelWriter.DataLabelPlacementType)">
            <summary>
            We use this method to ensure that the value for an enum is valid. This might not be true if
            a user casts an int to an enum and passes it in to us.
            </summary>
            <param name="dataLabelPlacement"></param>
            <returns></returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT_DataLabelPlacement.ValueAsEnum">
            <summary>
            Get the DataLabel PlacementType using enums
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTEXT_DisplayMode">
            <summary> <p>This enum describes the different types of display modes something can 
            have.  Currently this only applies to whether or not the background of
            some text is transparent or opaque.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTICK.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordVALUERANGE.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.INFNumber.ParseNumber(System.Double,System.Boolean,SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFNumber.ParseToExponent)">
            <summary>
            Uses number formatting to parse cellValue into a string
            </summary>
            <param name="cellValue"></param>
            <param name="writeNegativeSymbol">Write out the '-' if cellValue less than 0.
            Sometimes the user may want to skip this step,
            if they want to use parentheses for example</param>
            <param name="parseToExponent">If true, always include the exponent component</param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFDateTime">
            <summary>
            Represents a series of tokens which are replaced with date/time values
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFDateTime.Adjacent(System.Int32,System.Int32)">
            <summary>
            Returns the type adjacent to the StringPiece at index 'index' looking in 'directionToLook',
            continuing until reaching the end or beginning, or hitting something not in types
            </summary>
            <param name="index">Index within values to start looking</param>
            <param name="directionToLook">Iterate by this</param>
            <param name="types">skip over these, or stop for these, depending on skipOverItems</param>
            <param name="skipOverItems">If true, types is a list to skip over and anything not on the list
            will stop iteration. If false, types is a list to stop iteration at, and anything not on that list
            will be skipped over</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFDateTime.Format(System.DateTime,System.String)">
            <summary>
            Work around custom DateTime formatting which requires them to be at least 2 characters
            This looks like a hack but it's actually in the official documentation: 
            http://msdn.microsoft.com/en-us/library/8kb3ddd4%28VS.71%29.aspx
            </summary>
            <param name="dateTime"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFDateTime.Substring(System.String,System.Int32)">
            <summary>
            Return a string which is at most 'limit' chars
            </summary>
            <param name="input"></param>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFFraction">
            <summary>
            Represents the cell's value as a fraction (for example: # ??/88)
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFNumber">
            <summary>
            Represents a series of characters which are replaced with the cell number, roughly speaking.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFNumber.expHasDash">
            <summary>
            If there is a dash, don't write a '+' symbol if the exponent is positive
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFNumber.GetDigit(System.Double,System.Int32,System.Boolean@)">
            <summary>
            Gets a digit from the value. If place is 0, the digit is in the one's column
            If place is 1, it's in the ten's column, and if -1, it's on the other side of the decimal point
            </summary>
            <param name="value"></param>
            <param name="place"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFNumber.RunParseNumber(System.Double,System.Boolean,SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString,SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Uses number formatting to parse cellValue into a string
            </summary>
            <param name="cellValue"></param>
            <param name="writeNegativeSymbol">Write out the '-' if cellValue less than 0.
            Sometimes the user may want to skip this step,
            if they want to use parentheses for example</param>
            <param name="num">Number format string</param>
            <param name="expNum">Exponent number format string. May be null</param>
            <param name="expHasDash">If true, write a '+' if exponent is positive. (A minus is always written)</param>
            <param name="ignorePercent">If true, don't scale by percent</param>
            <param name="passAfterE">Extra text between E and exponent value</param>
            <param name="passAfterNum">Extra text after number and before E</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFNumber.ComputeFormattedNumber(System.Double,SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString,SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Replace '#', '?', and '0' in beforePiece and afterPiece with digits from cellValue. 
            </summary>
            <param name="ret">the output StringBuilder</param>
            <param name="cellValue">the value of the cell</param>
            <param name="beforePiece">the string format of the integer portion</param>
            <param name="afterPiece">the string format of the mantissa portion</param>
            <param name="usesComma">are we writing a thousands place comma?</param>
            <param name="firstSignificantPlace">the position of the most significant digit</param>
            <param name="writeNegativeSymbol">are we writing a '-' if cellValue is negative?</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFNumber.GetFirstSignificantPlace(System.Double)">
            <summary>
            Get the position of the most significant digit. This should be the number such that
            if cellValue = 123, it's also 1.23E+2 and this would return 2
            </summary>
            <param name="cellValue"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFNumber.ReplaceCommas(System.String)">
            <summary>
            Replaces a series of commas with one comma
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFNumber.Reverse(System.Text.StringBuilder@)">
            <summary>
            Reverse the StringBuilder. This may not be the fastest way to do it, see 
            http://weblogs.asp.net/justin_rogers/archive/2004/06/10/153175.aspx
            Number formatting isn't a bottleneck, though.
            </summary>
            <param name="ret"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFNumber.AppendDigit(System.Text.StringBuilder,System.Double,SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.Unit,System.Int32,System.Boolean)">
            <summary>
            Replaces a symbol with a digit or space (appends it to ret)
            </summary>
            <param name="ret">The output StringBuilder</param>
            <param name="cellValue">the original cell value</param>
            <param name="c">character being looked at</param>
            <param name="place">'x' where at the 10^x place in cellValue is the digit </param>
            <param name="printComma">If in the correct thousands place, print a comma</param>
            <param name="commaType">The type of the current character</param>
            <returns>True if we appended a digit or something like it where we need to increment the place value later</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFNumber.IsPlaceholder(System.Char)">
            <summary>
            Is c one of the characters that can be a placeholder?
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFNumber.Create(SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString,System.Boolean,SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString,Antlr.Runtime.IToken,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            A factory which creates either an NFNumber or an NFFraction, depending on whether num contains a '/'
            </summary>
            <param name="num"></param>
            <param name="expIsNegative"></param>
            <param name="expNum"></param>
            <param name="ampm"></param>
            <param name="passAfterNum"></param>
            <param name="passAfterE"></param>
            <param name="passAfterEverything1"></param>
            <param name="passAfterEverything2"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFPartColor">
            <summary>
            Corresponds to NFPartColor in ABNF in MS-XLS 2.4.126. This is pretty simple thankfully
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFPartColor.color">
            <summary>
            This is either one of the primary color strings (eg "Red", "Magenta", "Cyan"), or a string "Color33"
            where the number can be between 1 and 56, inclusive
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFPartCond">
            <summary>
            I think this is a conditional. Relatively simple
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFPartCondNum">
            <summary>
            This is a number which is described in separate pieces for the integer component, mantissa, and exponent
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFRoot">
            <summary>
            The top of the tree. This contains up to four sections, separated by semicolons.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFSection">
            <summary>
            Roughly corresponds to NFAny in the ABNF in MS-XLS, Format 2.4.126
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFSection.beforeEverything">
            <summary>
            The bric-a-brac before the main part. Will never be null
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFSection.ParseNumber(System.Double,System.Boolean,SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFNumber.ParseToExponent)">
            <summary>
            Returns the string representation of the number
            </summary>
            <param name="cellValue"></param>
            <param name="writeNegativeDash">If cellValue less than 0 and this is true, 
            write a dash beforehand</param>
            <param name="parseToExponent">Should number be written in exponent form?</param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString">
            <summary>
            A string which divides content into meaningful and not
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.commasForScaling">
            <summary>
            Number of commas used for scaling (divide by 1000 for each one)
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.commasForThousands">
            <summary>
            True if there's at least one comma for thousands place
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.percentCount">
            <summary>
            Number of percent signs
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.placeholderCount">
            <summary>
            Number of '#', '?', and '0'
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.closed">
            <summary>
            If true, appending will throw an exception
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.Count">
            <summary>
            Populate counting fields
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.Close">
            <summary>
            Does some useful calculations, and forbids any future appends
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.SplitAndFilter(System.Collections.Generic.IEnumerable{SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.Unit},SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.SplitFlag,System.Int32)">
            <summary>
            Split along boundaries when splitFlag switches values, and filter out where splitFlag == true
            </summary>
            <param name="splitFlag"></param>
            <param name="filterFlag"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.Split(System.Collections.Generic.IEnumerable{SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.Unit},SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.SplitFlag,System.Int32)">
            <summary>
            Split into an array of NFStrings based on splitFlag on each piece in pieces.
            Whenever the value of splitFlag toggles, a split happens
            NOTE: we do not remove any NFStrings here, use SplitAndFilter for that
            Example: Split(new NFString("abc.def"), x => x.c == '.') would return 'abc', '.', and 'def'
            </summary>
            <param name="pieces"></param>
            <param name="splitFlag"></param>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.SplitInTwain(System.Collections.Generic.IEnumerable{SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.Unit},System.Char)">
            <summary>
            Split at meaningful char c into at most 2 pieces. If c exists more than once, only the first instance
            is used to divide the string
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.SplitInTwain(System.Char)">
            <summary>
            Split at meaningful char c into at most 2 pieces. If c exists more than once, only the first instance
            is used to divide the string
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.IterateCommas(System.Int32)">
            <summary>
            Use this while iterating forward over a string to determine what the comma type of the current
            character is.
            
            The docs say that comma must be between two number formatting characters to divide the output number
            into thousands.
            If it's followed by something else and preceded by a number formatting character,
            it's a scaling comma.
            If the first comma is followed by something else, that series of commas is replaced with only one comma
            
            Excel is weird sometimes
            </summary>
            <param name="s">The string being iterated over</param>
            <param name="i">Index into 's'</param>
            <param name="prevCommaWasForScaling">This must be maintained over each function call. Should
            start off being false before first iteration</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.ToString">
            <summary>
            You should probably only use this to make debugging easier. The whole point of this class is to preserve
            other meaningful information, which the return value of this throws away
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.TrimBeforePass(System.String@)">
            <summary>
            Return an NFString which has the beginning unmeaningful characters removed. These characters are returned
            through beforePass
            </summary>
            <param name="beforePass"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.SplitLikeFraction(SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString@,System.String@,SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString@,System.String@,System.String@,SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString@)">
            <summary>
            This is kind of oddly specific to be placed in here,
            but it seems easier than placing it outside the class. It'[s also pretty ugly and needs refactoring
            down the road
            </summary>
            <param name="intPiece"></param>
            <param name="pass0"></param>
            <param name="numerator"></param>
            <param name="pass1"></param>
            <param name="pass2"></param>
            <param name="denominator"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.Unit">
            <summary>
            A string unit, with some extra descriptive fields
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.Unit.isMeaningful">
            <summary>
            If false, this character should just pass through
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.Unit.commaType">
            <summary>
            This is set later during Close(). Describes the type of comma this is
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.SplitFlag">
            <summary>
            A flag used with Split and SplitAndFilter that is true if c is part of the NFString to be split
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFString.Matches">
            <summary>
            A delegate for matching. TODO: Maybe we should merge this with SplitFlag?
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFText">
            <summary>
            The @ symbols are replaced with text from the cell
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.NFText.DoubleToString(System.Double)">
            <summary>
            Yoinked from old numberformatting code. A similar algorithm is used in NFNumber.GetDigit
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Pieces.StringPiece">
            <summary>
            Text that has a type. These are used to distinguish various text pieces from each other
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.AutoFitWidth.getCellWidthInChars(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Model.FontModel,System.Double,System.Boolean,System.Boolean)">
            <summary>
            NOTE: return value must be divided by 7 (ZeroWidth) to get the actual cell width
            I'm trying to avoid weird double division differences in output between my computer and achilles
            </summary>
            <param name="aStr"></param>
            <param name="aFontModel"></param>
            <param name="aCurrRowHeight"></param>
            <param name="aWrapText"></param>
            <param name="limitSize"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SoftArtisans.OfficeWriter.Shared.SAException" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.SAException.#ctor">
            <summary> Serialization constructor.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SAException.#ctor(System.String)">
            <summary> Simple constructor, allowing you to set the getMessage() text of the
            exception.
            </summary>
            <param name="message">Error message text to set.
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.SAException.#ctor(System.String,System.Exception)" -->
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.SAException.#ctor(System.Exception)" -->
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.NumberFormatterParserWrapper.#ctor(System.String)">
            <summary>
            NOTE: if we expose ITokenSource as a parameter input, the tests will have to link to the antlr library
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.NumberFormatting.NumberFormatterScanner">
            <summary>
            Summary Canonical example of GPLEX automaton
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.NumberFormatting.NumberFormatterScannerBase">
            <summary>
            Use this to add functionality to NumberFormatterScanner (which is autogenerated)
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.NumberFormatterScannerBase.yywrap">
            <summary>
            This is only used to say that multiple files should be processed at once. We won't do this
            with the number formatter
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.NumberFormatterScanner.MkBuffCtx">
            <summary>
            This method creates a buffer context record from
            the current buffer object, together with some
            scanner state values. 
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.NumberFormatterScanner.RestoreBuffCtx(SoftArtisans.OfficeWriter.Parser.NumberFormatting.NumberFormatterScanner.BufferContext)">
            <summary>
            This method restores the buffer value and allied
            scanner state from the given context record value.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.NumberFormatterScanner.SetSource(System.String,System.Int32)">
            <summary>
            Create and initialize a StringBuff buffer object for this scanner
            </summary>
            <param name="source">the input string</param>
            <param name="offset">starting offset in the string</param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Parser.NumberFormatting.NumberFormatterScanner.Buffer">
            <summary>
            The input buffer for this scanner.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.NumberFormatting.StringBuffer">
            <summary>
            This class reads characters from a single string as
            required, for example, by Visual Studio language services
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.BuildBuffer.Mark">
            <summary>
            Marks a conservative lower bound for the buffer,
            allowing space to be reclaimed.  If an application 
            needs to call GetString at arbitrary past locations 
            in the input stream, Mark() is not called.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.NumberFormatting.BuildBuffer.Read">
            <summary>
            Read returns the ordinal number of the next char, or 
            EOF (-1) for an end of stream.  Note that the next
            code point may require *two* calls of Read().
            </summary>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.NumberFormatting.Guesser">
            <summary>
            This class provides a simple finite state automaton that
            scans the file looking for (1) valid UTF-8 byte patterns,
            (2) bytes >= 0x80 which are not part of a UTF-8 sequence.
            The method then guesses whether it is UTF-8 or maybe some 
            local machine default encoding.  This works well for the
            various Latin encodings.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.NumberFormatting.NumberFormatterTokenSource">
            <summary>
            This stores all the tokens, splits by semicolon, and provides them through the interface. Use SwitchTo
            then run the parser 
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ArrayFormulaHandlerElement.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHeader)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ArrayFormulaHandlerElement.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <param name="aRec">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ArrayFormulaHandlerElement.#ctor(Antlr.Runtime.IToken)">
            <param name="aToken">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ColInfoRecordHandlerElement">
            <summary> <p>
            Type of RecordHandlerElement that deals with COLINFO records. This is needed
            to properly implementet XF optimization.
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.IXFReference">
            <summary> Any element which uses an XF Index reference should implement this interface.
            
            </summary>
            <author>  geoffk
            Dec 6, 2004 10:48:39 AM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ColInfoRecordHandlerElement.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHeader)">
            <summary> Construct a new ColInfoRecordHandlerElement from a RecordHeader.  If
            the header is not of type COLINFO an exception will be thrown
            </summary>
            <param name="aHeader">the header for the record
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ColInfoRecordHandlerElement.#ctor">
            <summary>  Construct an empty ColInfoRecordHandlerElement</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ColInfoRecordHandlerElement.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCOLINFO)">
            <summary> Construct a ColInfoRecordHandlerElement directly from a COLINFO record.</summary>
            <param name="aRec">the record this element is to hold
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ColInfoRecordHandlerElement.#ctor(Antlr.Runtime.IToken)">
            <summary> Construct a ColInfoRecordHandlerElement from a Antlr token.  If the 
            token is not of type COLINFO an exception will be thrown.
            </summary>
            <param name="aToken">the token this element is to hold.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ColInfoRecordHandlerElement.XFIndex">
            <seealso cref="!:IXFReference#getXFIndex()">
            </seealso>
            <seealso cref="!:IXFReference#setXFIndex(int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DbCellElement.incrementCellCount(System.Int32)">
            <param name="childCount">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DbCellElement.RowRecordOffset">
            <param name="l">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DbCellHandler.RowBlockSize">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DbCellHandler.DbCellElement">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DbCellHandler.Rows">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingElement">
            <summary> Element class holding a MSODRAWING - OBJ pairing of records.</summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingElement.addInitializedHFPicture(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <summary>
            Since this is a blank HFPicture, we need to set it to Uninitialized
            So it will be initialized in the DrawingModel (see there)
            NOTE: This function takes a newly created HFPicture record wrapped in a handler. 
            NOTE: It should not be called for anything else
            </summary>
            <param name="aChild">the blank HFPicture record handler</param>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingElement.mDrawSubelement">
            <summary> Holds the Subelement tree after its hydrated</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingElement.calcSize">
            <seealso cref="!:LeafElement#calcSize()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingElement.addDrawingSelection(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <param name="element">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingElement.superAddChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <summary> This method is a workaround because J# does not support the syntax of
            EnclosingType.super.methodName() from within an inner class.
            </summary>
            <param name="aChild">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingElement.Hydrated">
            <seealso cref="!:LeafElement#isHydrated()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingElement.DrawingElementState">
            <summary> <p>
            Base class defining methods of DrawingElement placed into a state
            pattern.
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingElement.DrawingElementState.calcSize">
            <seealso cref="!:LeafElement#calcSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingElement.DrawingElementState.Hydrated">
            <seealso cref="!:LeafElement#isHydrated()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingElement.DrawingElementStateUninitialized">
            <summary> <p>
            The default state for a newly created DrawingElement is Uninitialized.
            This state indicates that the DrawingElement is empty (ie. contains
            no children/drawing objects).  From Uninitialized, DrawingElement can
            transition to:</p>
            <ul>
            <li>Initialized: if a child is added</li>
            <li>Hydrated: if a new drawing is initialized</li>
            </ul>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingElement.DrawingElementStateInitialized">
            <summary> <p>
            A DrawingElement enters the Initialized state if it has children, but
            has not yet converted its children into an Escher substructure 
            representation.  From Initialized, a DrawingElement can transition 
            to:</p>
            <ul>
            <li>Hydrated: if the Escher substructure is hydrated</li>
            <li>Writing: if calcSize is called to prepare this element for 
            writing</li>
            </ul>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingElement.DrawingElementStateWriting">
            <summary> <p>
            The Writing state describes a DrawingElement that is prepared to be
            written.  The Writing state is important because it makes a 
            DrawingElement return false for isLeaf, allowing tree walkers to
            interact directly with its children. From Writing, DrawingElement can
            transition to:
            </p>
            <ul>
            <li>Initialized: if getDrawingSubelement is called</li>
            </ul>
            
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingElement.DrawingElementStateHydrated">
            <summary> <p>
            The Hydrated state indicates that the Escher substructre has been parsed
            into an object tree and that any other children have been rearranged into
            that substructure.  From Hydrated, a DrawingElement can transition 
            to:</p>
            <ul>
            <li>Initialized: if calcSize is called. This will dehydrate the tree</li>
            </ul>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingGroupElement">
            <summary> Element class representing the MSODRAWINGGROUP and its CONTINUE's from the
            GlobalStream. This element deals with the MSODRAWINGGROUP in all its wierd
            glory. The following structures are possible:
            <ul>
            <li>MSODRAWINGGROUP</li>
            <li>MSODRAWINGGROUP CONTINUE*</li>
            <li>MSODRAWINGGROUP MSODRAWINGGROUP CONTINUE*</li>
            </ul>
            In the last structure, the second MSODRAWINGGROUP appears to be just like a
            continue record.
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingGroupElement.addInitializedHFPicture(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <summary>
            Since this is a blank HFPicture, we need to initialize the the DrawingGroup
            and set it to Hydrated state (since there is no data to read in)
            NOTE: This function takes a newly created HFPicture record wrapped in a handler. 
            NOTE: It should not be called for anything else
            </summary>
            <param name="aChild">the blank HFPicture record handler</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingGroupElement.#ctor">
            <summary> Construct a new DrawingGroupElement for an Excel file that does not
            contain an existing MSODRAWINGGROUP record.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingGroupElement.initializeNewDrawingGroup">
            <summary> Construct a new set of records/subrecords for a blank but minimally
            writable MSODRAWINGGROUP record. This leaves the element hydrated but
            marked as unwritable. Only after some operation is performed will it be
            marked as writable. This will prevent blank MSODRAWINGGROUP records from
            being writen to the file.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingGroupElement.hydrate">
            <seealso cref="!:LeafElement#hydrate()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingGroupElement.write(System.IO.Stream)">
            <summary> Original pseudo-code for this method write() if(!hydrated()) :) else :(</summary>
            <param name="aOut">
            </param>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingGroupElement.superAddChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <summary> This method is a workaround because J# does not support the syntax of
            EnclosingType.super.methodName() from within an inner class.
            </summary>
            <param name="aChild">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingGroupElement.Hydrated">
            <seealso cref="!:LeafElement#isHydrated()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingGroupElement.DrawingGroupElementState">
            <summary> <p>
            Abstract base class for all the states of a DrawingGroupElement
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingGroupElement.DrawingGroupElementStateUninitialized">
            <summary> <p>
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingGroupElement.DrawingGroupElementStateInitialized">
            <summary> <p>
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingGroupElement.DrawingGroupElementStateHydrated">
            <summary> <p>
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingGroupElement.DrawingGroupElementStateWriting">
            <summary> <p>
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingRecordHandlerElement">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingRecordHandlerElement.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHeader)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingRecordHandlerElement.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <param name="aRec">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.DrawingRecordHandlerElement.Scanner">
            <seealso cref="!:ScannableElement#getScanner()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementBoundsheets">
            <author>  geoffk
            Jun 30, 2004 12:35:53 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementBoundsheets.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <param name="aOffset">
            </param>
            <param name="aLength">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementBoundsheets.moveBoundsheet(System.Int32,System.Int32)">
            <param name="aOrigPos">
            </param>
            <param name="aNewPos">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementBoundsheets.getBoundsheetIndex(System.String)">
            <param name="name">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementBoundsheets.getBoundsheetName(System.Int32)">
            <param name="firstTab">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementBoundsheets.WorksheetIndexes">
            <returns> a map of worksheet position to Worksheet offset (original). 
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellRecord">
            <summary> Handles a CellRecord.
            
            </summary>
            <author>  geoffk
            Jun 30, 2004 1:03:30 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellRecord.changeRecordType(System.Int16)">
            <param name="recType">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellRecord.ColNumber">
            <returns> Returns the mColNumber.
            </returns>
            <param name="colNumber">The mColNumber to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellRecord.RowNumber">
            <returns> Returns the mRowNumber.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellRecords">
            <author>  geoffk Jun 30, 2004 1:15:00 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellRecords.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementRows,SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCells,SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <summary> Transform to this: |- Rows[] |- CellData[]
            
            </summary>
            <param name="rows">
            </param>
            <param name="cells">
            </param>
            <param name="record">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCells">
            <summary> 
            </summary>
            <author>  geoffk
            Jun 30, 2004 1:14:23 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream">
            <summary> Handles all the cells. Also needs to know how to write rows out and the model
            needs to understand how to update INDEX (this should be pretty simple).
            
            </summary>
            <author>  geoffk Jul 2, 2004 3:49:35 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream.copy">
            <seealso cref="!:Element#copy()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream.#ctor">
            <summary> This is a constructor for an empty/missing cell block.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream.addCellRecords(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellRecords)">
            <summary> This is where we take CellRecords, and transform them into: CellStream |-
            Rows[] |- CellData[]
            
            </summary>
            <param name="cell">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream.hydrate">
            <seealso cref="!:LeafElement#hydrate()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream.write(System.IO.Stream)">
            <seealso cref="!:LeafElement#write(java.io.OutputStream)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream.calcSize">
            <seealso cref="!:LeafElement#calcSize()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream.addRow(System.Int32)">
            <param name="rowNumber">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream.deleteRow(System.Int32)">
            <param name="position">
            </param>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream.insertRows(System.Int32,System.Int32)">
            <param name="rowNumber">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler)">
            <seealso cref="!:Element#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream.initCellDataModel(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel)">
            <param name="model">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream.ChildEnum">
            <seealso cref="!:Element#getChildEnum()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream.IndexElement">
            <param name="record">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream.DbCellCount">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream.DbCellRecords">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream.DbCellHandlers">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream.FirstCol">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream.LastCol">
            <returns> The last populate column in the Worksheet, '-1' if no columns
            have been populated
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream.LastRow">
            <returns> The last populate row in the Worksheet, '-1' if no rows have been
            populated
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream.FirstRow">
            <returns> The first populate row in the Worksheet, '-1' if no rows have
            been populated
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCF">
            <summary> 
            
            </summary>
            <author>  geoffk
            May 23, 2005 3:03:17 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCF.calcSize">
            <seealso cref="!:RecordHandlerElement#calcSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCF.CFFormulaContainer.FormulaBytes">
            <seealso cref="!:FormulaContainer#setFormulaBytes(byte[])">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCF.CFFormulaContainer.TailBytes">
            <seealso cref="!:FormulaContainer#getTailBytes()">
            </seealso>
            <seealso cref="!:FormulaContainer#setTailBytes(byte[])">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCF.CFFormulaContainer.Type">
            <seealso cref="!:FormulaContainer#getType()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCF.CFFormulaContainer.AlwaysCalc">
            <seealso cref="!:FormulaContainer#getAlwaysCalc()">
            </seealso>
            <seealso cref="!:FormulaContainer#setAlwaysCalc(boolean)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCF.CFFormulaContainer.CalcOnLoad">
            <seealso cref="!:FormulaContainer#getCalcOnLoad()">
            </seealso>
            <seealso cref="!:FormulaContainer#setCalcOnLoad(boolean)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementColumns">
            <summary> <p>ElementColumns deals with the DEFCOLWIDTH and COLINFO records for
            a worksheet.  Because font information is essential to processing
            the values managed by this Element, it leaves all interperation up to
            the Model layer.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementColumns.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <summary> Constructs a new ElementColumns with the specified DEFCOLWIDTH record</summary>
            <param name="aDefColWidthRec">the DEFCOLWIDTH record for the worksheet
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementColumns.calcSize">
            <seealso cref="!:LeafElement#calcSize()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementColumns.hydrate">
            <seealso cref="!:LeafElement#hydrate()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementColumns.insertColumn(System.Int32,System.Int32)">
            <param name="index">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementColumns.write(System.IO.Stream)">
            <seealso cref="!:LeafElement#write(java.io.OutputStream)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementColumns.createDefaultInstance">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementColumns.Hydrated">
            <seealso cref="!:LeafElement#isHydrated()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementColumns.Leaf">
            <seealso cref="!:Element#isLeaf()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementConditionalFormat">
            <summary> Conditional formatting record and its associated CF records.
            
            Conditional formats are stored as:
            (CONDFMT (CF)+)*
            
            And occur after the PHONETIC record but before HYPERLINK in each Worksheet stream.
            
            </summary>
            <author>  geoffk May 19, 2005 4:27:22 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementConditionalFormat.registerSelfWithSubject(SoftArtisans.OfficeWriter.ExcelWriter.Observers.Subject)">
            <seealso cref="!:Observable#registerSelfWithSubject(Subject)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementConditionalFormat.handleGridEvent(SoftArtisans.OfficeWriter.ExcelWriter.Observers.GridEvent)">
            <seealso cref="!:GridObserver#handleGridEvent(GridEvent)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementConditionalFormat.createDefaultElement">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementConditionalFormat.UpdateableRange">
            <returns>
            </returns>
            <param name="updateableRange">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementConditionalFormatStream">
            <summary> 
            
            </summary>
            <author>  geoffk May 20, 2005 10:33:21 AM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementContinue">
            <summary> Continue records
            
            </summary>
            <author>  geoffk
            Jun 30, 2004 12:40:19 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementContinue.replaceContinues(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record[])">
            <summary> Replace the current continue records with new ones.
            We don't just drop and replace because we want to maintain the information
            in the element records when possible.
            </summary>
            <param name="aNewContinues">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCrn.FirstColumn">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCrn.LastColumn">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCrn.Row">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCrn.OperandType">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataValidation">
            <author>  ianr
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataValidation.registerSelfWithSubject(SoftArtisans.OfficeWriter.ExcelWriter.Observers.Subject)">
            <seealso cref="!:Observable#registerSelfWithSubject(Subject)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataValidation.hydrate">
            <seealso cref="!:RecordHandlerElement#hydrate()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataValidation.createDefaultElement">
            <summary> Creates and populates a default version of ElementDataValidation. This
            method should be used when creating an ElementDataValidation from
            anywhere except the parser
            
            </summary>
            <returns> the new ElementDataValidation
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataValidation.clear">
            <summary> Resets this ElementDataValidation and its child record to a
            base state.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataValidation.Hydrated">
            <seealso cref="!:RecordHandlerElement#isHydrated()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataValidation.FormulaContainerDV.FormulaBytes">
            <seealso cref="!:FormulaContainer#setFormulaBytes(byte[])">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataValidation.FormulaContainerDV.TailBytes">
            <seealso cref="!:FormulaContainer#getTailBytes()">
            </seealso>
            <seealso cref="!:FormulaContainer#setTailBytes(byte[])">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataValidation.FormulaContainerDV.Type">
            <seealso cref="!:FormulaContainer#getType()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataValidation.FormulaContainerDV.AlwaysCalc">
            <seealso cref="!:FormulaContainer#getAlwaysCalc()">
            </seealso>
            <seealso cref="!:FormulaContainer#setAlwaysCalc(boolean)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataValidation.FormulaContainerDV.CalcOnLoad">
            <seealso cref="!:FormulaContainer#getCalcOnLoad()">
            </seealso>
            <seealso cref="!:FormulaContainer#setCalcOnLoad(boolean)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataValidationStream">
            <author>  ianr
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataValidationStream.hydrate">
            <seealso cref="!:LeafElement#hydrate()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataValidationStream.registerSelfWithSubject(SoftArtisans.OfficeWriter.ExcelWriter.Observers.Subject)">
            <seealso cref="!:Observable#registerSelfWithSubject(Subject)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDataValidationStream.Hydrated">
            <seealso cref="!:LeafElement#isHydrated()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementDimensions.createDefaultInstance">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFonts">
            <summary> Represents the Fonts collections in an Excel file.
            
            </summary>
            <author>  geoffk
            Jun 30, 2004 10:12:42 AM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.IndexedElement">
            <summary> IndexedElements are elements that have children which are
            ElementIndexedRecords.
            
            
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.IndexedElement.optimizeChildren(System.Boolean[])">
            <summary> Removes unused children and returns a map of new offsets --> old offsets, 
            given a map of which offsets are used.
            
            Takes a boolean array of existing offsets and the values determine
            whether they are referenced in the rest of the document. The method then
            goes through the children, removes the ones which are not referenced, and
            returns an array with the index being the original index and the value
            being the new index.
            
            </summary>
            <param name="aReferencedOffsets">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.IndexedElement.findOffset(System.Int32,System.Boolean)">
            <summary> Offset is the physical offset in the child array.
            Index is the index refered to by anything using this array.
            </summary>
            <param name="aIndex">
            </param>
            <param name="aThrowOnOutOfBounds">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.IndexedElement.calcNextIndex">
            <summary> Calculates the next index to be used for an appended element.
            
            Fonts needs to override this, because they have this wierd gap.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.IndexedElement.getChildAt(System.Int32)">
            <seealso cref="!:Element#getChildAt(int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.IndexedElement.cloneElement(System.Int32)">
            <summary> Makes a clone of the given element, and adds the clone to the end of the list.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.IndexedElement.write(System.IO.Stream)">
            <summary> Generally, we only want to write these child elements directly out.
            
            This should only be called after optimizeChildren is called... we should probably enforce this somewhere.
            
            TODO: Enforce a state pattern for optimizeChildren()/write()?
            
            </summary>
            <seealso cref="!:LeafElement#write(java.io.OutputStream)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.IndexedElement.calcSize">
            <summary> Simply call down the tree to all the indexed elements.</summary>
            <seealso cref="!:LeafElement#calcSize()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.IndexedElement.hydrate">
            <summary> Simply call down the tree to hydrate</summary>
            <seealso cref="!:LeafElement#hydrate()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.IndexedElement.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler)">
            <seealso cref="!:Element#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.IndexedElement.Hydrated">
            <summary> Does this ever need to be false?</summary>
            <seealso cref="!:LeafElement#isHydrated()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFonts.addChild(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHeader)">
            <summary> Adds the header as an ElementIndexedRecord to the collection.
            
            We assume that this record is from the original file and thus must be retained.
            
            </summary>
            <seealso cref="!:IndexedElement#addChild(RecordHeader)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFonts.calcNextIndex">
            <summary> We have to have a special override here, because Fonts calculates things strangely.
            
            </summary>
            <seealso cref="!:IndexedElement#calcNextIndex()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFonts.calcIndexFromOffset(System.Int32)">
            <summary> We have to have a special override here, because Fonts calculates things strangely.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFonts.findOffset(System.Int32)">
            <summary> Again, we need to override because Fonts are calculated strangely.</summary>
            <seealso cref="!:IndexedElement#findOffset(int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFonts.optimizeChildren(System.Boolean[])">
            <seealso cref="!:IndexedElement#optimizeChildren(boolean[])">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFormats">
            <summary> Encapsulates the Number Format records.
            
            
            NOTE: This class need to be rewritten. Number formats are not stored/retieved by file index,
            but by the index stored in the Format record. So we need a map, not a vector to store/retieve them. 
            
            
            </summary>
            <author>  geoffk
            Jun 30, 2004 12:26:38 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFormats.addChild(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHeader)">
            <summary> Records added from the original file -- cannot be removed.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFormats.createFormat(System.String)">
            <param name="formatString">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementGlobalStream">
            <summary> The global stream; starts with BOF, ends with EOF, contains:
            {BOF}[Unknown][Fonts][Formats][XFs][Styles][Unknown][Boundsheets][StringTable]{EOF}
            
            </summary>
            <author>  geoffk Jun 28, 2004 1:01:33 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementGlobalStream.addChildSpecial(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <summary>
            Checks if aChild is a special case. If yes, handle it and return true; else 
            </summary>
            <param name="aChild"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementGlobalStream.addBoundsheetsChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementBoundsheets)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementGlobalStream.removePalette">
            <summary> Removes the Palette from the global stream if it exists and does nothing
            if the palette does not exist.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementGlobalStream.Palette">
            <summary> Returns the Pallete for the document or null if the document uses the
            standard palette.
            
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementGlobalStream.ExcludeMacros">
            <param name="excludeMacros">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementGlobalStream.ProtectionElement">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementGridset.WsBoolRecord">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementHFPicture">
            <summary>
            HFPicture is a wrapper around DGContainer, DGGContainers and their continuations,
            which makes them the same internally as MsoDrawing, MsoDrawingGroup and their Continue records. 
            This is determined by the isDrawing, isDrawingGroup and fContinue bits of the internal records.
            
            Therefore the ElementHFPicture is mostly a wrapper around Drawing and DrawingGroup and the purpose 
            of this class is to manage them.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementHFPicture.initializeNewHFPicture(System.Boolean)">
            <summary>
            Initializes a new RecordHFPicture and adds it as a child, thus initializing the innerElement appropriatly
            and adding it as an initialized child.
            </summary>
            <param name="isDG">is this a DrawingGroup?</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementHyperlink.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementHyperlinks,SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHLink)">
            <param name="hyperlinksElem">
            </param>
            <param name="hlinkRec">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementHyperlink.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <param name="element">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementHyperlink.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementHyperlinks,SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <param name="hyperlinks">
            </param>
            <param name="element">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementHyperlink.HLinkRecord">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementHyperlink.AreaStruct">
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementHyperlinks.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <param name="element">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementIndexedRecord">
            <summary> Extends the ElementRecord element to include indexing for elements that have
            indexes (such as XFs, Fonts, Styles, and Formats).
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementIndexedRecord.#ctor">
            <summary>
            ADDED: Default constructor needed for java cloning
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementIndexedRecord.Equals(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementIndexedRecord)">
            <summary> Compares the RECORD ONLY.</summary>
            <seealso cref="!:java.lang.Object#equals(java.lang.Object)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementIndexedRecord.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler)">
            <seealso cref="!:RecordHandlerElement#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementMultiXF">
            <summary> Handles both MultiRK and MultiBLANK records.
            
            </summary>
            <author>  geoffk
            Dec 15, 2004 12:26:03 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementMultiXF.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordMULBLANK)">
            <param name="mulBlankRec">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementMultiXF.#ctor(Antlr.Runtime.IToken)">
            <param name="header6">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementNotes">
            <summary> <p>The Notes element is responsible for managing all the notes (comments)
            within a particular sheet.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementNotes.getNote(System.Int32,System.Int32)">
            <summary> Return the NOTE record pointing to the specified row and column or 
            null if no such NOTE exists.
            </summary>
            <param name="aRow">the row to lookup
            </param>
            <param name="aCol">the column to lookup
            </param>
            <returns> the NOTE record pointing to the row and column or null if no
            such record exists.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementNotes.getNoteByObjId(System.Int32)">
            <summary> Finds the Note record using the shape with the specified ObjId.</summary>
            <param name="aObjId">the objid to look for
            </param>
            <returns> the NOTE record using that objid or null if no such record 
            exists
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementNotes.createNote(System.Int32,System.Int32,System.Int32)">
            <summary> Creates a new note with the specified row, column and objID.  This method
            does NOT check if a note already exists for the row and column.
            </summary>
            <param name="aRow">the row number (0 indexed)
            </param>
            <param name="aCol">the column number (0 indexed)
            </param>
            <param name="aObjId">the id of the obj that holds note properties
            </param>
            <returns> the newly created note
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementNotes.removeNote(System.Int32,System.Int32)">
            <summary> Removes the note at the specified row and column.  Returns the removed
            note or null if no note existed at the row and column.
            </summary>
            <param name="aRow">the row number (0 based)
            </param>
            <param name="aCol">the column number (0 based)
            </param>
            <returns> the removed note or null if no such note existed
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementNotes.getIndexOf(System.Int32,System.Int32)">
            <summary> Returns the index within the children collection of the note having 
            the specified row and col
            </summary>
            <param name="aRow">the row number
            </param>
            <param name="aCol">the column number
            </param>
            <returns> the index or -1 if no such note exists
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementPageSetup.handleGridEvent(SoftArtisans.OfficeWriter.ExcelWriter.Observers.GridEvent)">
            <seealso cref="!:GridObserver#handleGridEvent(GridEvent)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementPageSetup.PrintedChartSizeRecord">
            <seealso cref="!:GridOutlineObserver#handleGridOutlineEvent(GridOutlineEvent)">
            20051026 GeoffK unneccessary; we remove this event and handle it at pre-calcSize time. 
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementProtection.PasswordHash">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementRow">
            <summary> Lightweight class to hold a RowRecord and it's associated Cell data.
            
            </summary>
            <author>  geoffk Jul 29, 2004 11:30:38 AM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementRow.removeChild(System.Int32)">
            <summary> Removes a child with a particular column number. If it doesn't exist, the
            super class will handle nulls.
            
            </summary>
            <seealso cref="!:Element#removeChild(int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementRow.setFirstAndLastColumns">
            <summary> Updates the ROW record with the first and last columns in the row.
            Potentially we have a problem here if there are no cell records in this
            row.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementRow.flushMultiCells(System.Collections.Generic.List{SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element},System.Collections.Generic.IList{SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element})">
            <summary>
            Convert list of cells to MULBLANK or MULRK cells
            </summary>
            <param name="aMultiCells"></param>
            <param name="aNewChildren"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementRow.prepareMultiCells">
            <summary> Sorts through the list of cells, removes consecutive BLANKs/RKs, and
            replaces them with MULBLANK, MULRK records. We make a couple of
            assumptions: (1) we are only called when there will be no more changes to
            the child list. (2) we have control over the list, so no outstanding
            iterators or something. (3) The list exists, and has already been checked
            to not be empty. (optimization thing)
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementRow.isUniqueStyle(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellRecord)">
            <param name="cell">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementRow.setRowNumber(System.Int32)">
            <param name="i">
            </param>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementRow.updateCellRecordsRowNumber(System.Int32)">
            <param name="rowNumber">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementRow.insertColumn(System.Int32)">
            <param name="aColumnNumber">
            </param>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementRow.deleteColumn(System.Int32)">
            <param name="columnNumber">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementRow.putElementCellStream(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream)">
            <param name="stream">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementRow.getCell(System.Int32)">
            <summary> Looks for the cell at aColNumber; returns the existing cell record
            wrapped in an ICellModel if there, otherwise it creates the
            element/record, adds it to children, and returns the model for it.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementRow.createElementCellRecord(System.Int32)">
            <summary> Creates a new ElementCellRecord, complete with underlying record (as
            needed).
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementRow.hasCellAt(System.Int32)">
            <param name="cellNumber">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementRow.ChildRecordsSize">
            <returns>
            </returns>
            <throws>  SAException </throws>
            <throws>  IOException </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementRow.Model">
            <param name="model">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementRow.RowModel">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementRows">
            <summary> 
            </summary>
            <author>  geoffk
            Jun 30, 2004 1:14:43 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementRows.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <param name="record">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementRows.addRow(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <param name="record">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSelection">
            <summary> 
            </summary>
            <author>  geoffk
            Nov 12, 2004 1:41:28 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSelection.createDefaultInstance">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSharedFormula">
            <summary> 
            </summary>
            <author>  geoffk
            Dec 13, 2004 3:22:17 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSharedFormula.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHeader)">
            <param name="header">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSheets">
            <summary> Collection of page streams.
            
            </summary>
            <author>  geoffk
            Jun 30, 2004 1:48:13 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSheets.findSheetByOffset(System.Int64)">
            <param name="plyPos">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSST">
            <summary> Contains SST and maybe CONTINUE.
            
            </summary>
            <author>  geoffk
            Jun 30, 2004 12:50:00 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementStringTable">
            <summary> String table consists of an SST and an ExtSST.
            
            </summary>
            <author>  geoffk
            Jun 30, 2004 12:47:13 PM
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementStringTable.mExtSST">
            <summary>
            NOTE: the XLS 2008 docs say that the EXTSST record must always come after an SST one,
            but SSRS 2008 doesn't seem to obey that, so sometimes this variable will be null
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementStringTable.hydrate">
            <summary> Hydrate the underlying records, via the handler.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementStringTable.addString(SoftArtisans.OfficeWriter.ExcelWriter.Records.StringWrapperBIFF8)">
            <summary> Adds a new BIFF8 string (includes formatting) to the SST table.</summary>
            <param name="aString">the string wrapper to add.
            </param>
            <returns> the new index of the string.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementStringTable.addString(System.String)">
            <summary> Adds a new string (plain text, no formatting) to the SST table.</summary>
            <param name="aString">the string to add.
            </param>
            <returns> the new index of the string.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementStringTable.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler)">
            <seealso cref="!:Element#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementStyle.Name">
            <param name="name">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementStyle.XFIndex">
            <returns>
            </returns>
            <param name="xfIndex">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementStyles">
            <summary> Styles collection.
            
            </summary>
            <author>  geoffk Jun 30, 2004 12:33:38 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementStyles.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementStyle)">
            <param name="aOffset">
            </param>
            <param name="aLength">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementUnknown">
            <summary> A collection of unknown records (may be really unknown or just not handled
            yet).
            
            </summary>
            <author>  geoffk Jun 30, 2004 1:00:07 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementUnknown.addSibling(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementUnknown)">
            <seealso cref="!:Element#addChild(Element)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementWorkbook">
            <summary> The grandaddy of all elements (this is what we expect back from the parser)
            
            </summary>
            <author>  geoffk
            Jun 30, 2004 1:48:38 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementWorkbook.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementGlobalStream,SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSheets)">
            <param name="gs">
            </param>
            <param name="ps">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementWorksheetStream">
            <summary> 
            </summary>
            <author>  geoffk Jun 30, 2004 1:42:07 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementWorksheetStream.GetHyperlinks">
            <summary>
            Instantiates Hyperlinks if it wasn't already set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementWorksheetStream.GetOptionSettings">
            <summary>
            Sets option settings if they were null;
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementWorksheetStream.#ctor">
            <param name="cellStreamElement">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementWorksheetStream.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream)">
            <param name="cellStreamElement">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementWorksheetStream.walkTree(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ITreeAction)">
            <seealso cref="!:Element#walkTree(ITreeAction)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementWorksheetStream.addCellStreamChild(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCellStream)">
            <param name="cells">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementWorksheetStream.IndexRecord">
            <param name="vindex">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementXF">
            <summary> 
            </summary>
            <author>  geoffk Dec 3, 2004 1:01:44 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementXF.#ctor">
            <summary>
            ADDED: Default constructor needed for java cloning
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementXF.FontIndex">
            <seealso cref="!:IFontReference#getFontIndex()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementXF.XFIndex">
            <seealso cref="!:IXFReference#getXFIndex()">
            </seealso>
            <seealso cref="!:IXFReference#setXFIndex(int)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementXfs">
            <summary> 
            </summary>
            <author>  geoffk
            Jun 30, 2004 12:30:44 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementXfs.createElement(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHeader,System.Int32)">
            <summary> Creates ElementXF instead of ElementIndexedRecord.</summary>
            <seealso cref="!:int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementXfs.subscribeCellXf(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel,SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordXF)">
            <param name="cellXfRec">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementXfs.optimizeChildren_Original(System.Boolean[])">
            <seealso cref="!:IndexedElement#optimizeChildren(boolean[])">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementXfs.calcSize">
            <seealso cref="!:IndexedElement#calcSize()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ExternSheetElement">
            <author>tkiely</author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ExternSheetElement.getFirstSheetRef(System.Int32)">
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ExternSheetElement.getLastSheetRef(System.Int32)">
            <param name="xtiIndex">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ExternSheetElement.getSupbookIndex(System.Int32)">
            <param name="xtiIndex">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ExternSheetElement.addXTI(System.Int32,System.Int32,System.Int32)">
            <param name="sheetIndex">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ExternSheetElement.sheetInserted(System.Int32)">
            <summary> Updates all the existing XTIs, and creates a new XTI for the inserted sheet.</summary>
            <param name="aIndex">the position that the sheet is inserted into.
            </param>
            <returns> the new XTI index for the inserted sheet.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ExternSheetElement.XtiCount">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ExternSheetElement.DeleteComparator">
            <summary>
            Sorts by oldXTI
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.FontOptimizer">
            <summary> 
            </summary>
            <author>  geoffk Dec 3, 2004 1:22:15 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.IOptimizer">
            <summary> Interface for collecting data about an Element.</summary>
            <author>  geoffk
            Dec 3, 2004 1:20:31 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.FontOptimizer.collectData(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <seealso cref="!:IOptimizer#collectData(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.FontOptimizer.updateElement(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <seealso cref="!:IOptimizer#updateElement(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.FontOptimizer.getUpdatedIndex(System.Int32)">
            <seealso cref="!:IOptimizer#getUpdatedIndex(int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.FontOptimizer.ToString">
            <seealso cref="!:java.lang.Object#toString()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.FontOptimizer.Referenced">
            <summary> Set the appropriate index as referenced.</summary>
            <seealso cref="!:IOptimizer#setReferenced(int)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.FormulaHandler">
            <summary> Handles formula updates.
            
            </summary>
            <author>  geoffk Nov 2, 2004 1:55:15 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.FormulaHandler.doGridHandling(SoftArtisans.OfficeWriter.ExcelWriter.Observers.GridEvent,SoftArtisans.OfficeWriter.ExcelWriter.Records.FormulaContainer)">
            <seealso cref="!:GridObserver#handleGridEvent(GridEvent)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.FormulaHandlerElement">
            <summary> Handles a FORMULA record.</summary>
            <author>  geoffk
            Oct 29, 2004 1:33:55 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.IndexElement">
            <author>  tkiely
            
            Handles collation of DbCell record offsets through the addDbCellOffset method
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.IndexElement.addDbCellOffset(System.Int64)">
            <param name="newOffset">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.IndexElement.IndexRecord">
            <seealso cref="!:RecordHandlerElement#copy()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.IndexElement.FirstRow">
            <param name="rowNumber">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.IndexElement.LastRow">
            <param name="i">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.MergeCellsElement.addArea(SoftArtisans.OfficeWriter.ExcelWriter.AreaStruct)">
            <param name="retVal">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.MergeCellsElement.WorksheetModel">
            <param name="model">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.NameElement">
            <author>  tkiely
            </author>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.NameElement.WorksheetPos">
            <returns> 1-based position in EXTERNSHEET record
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.NameElement.Definition">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.NameElement.Description">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.NamesElement">
            <summary>
            A collection of NameElements. NOTE: EXTERNNAME elements are handled in separate collections in this
            class and aren't exposed through Children or Size (or write for that matter). Look for similarly named
            classes to handle this
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.NamesElement.getName(System.String)">
            <param name="rangeName">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.NamesElement.getChild(System.Int32)">
            <param name="externSheet">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.SSTElementHydrator">
            <author>  geoffk Jul 20, 2004 5:11:15 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.SSTElementHydrator.readNextBuffer">
            <seealso cref="!:SSTData#readNextBuffer()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.SSTElementHydrator.TotalStrings">
            <seealso cref="!:SSTData#getTotalStrings()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.SSTElementHydrator.UniqueStrings">
            <seealso cref="!:SSTData#getUniqueStrings()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.SSTElementHydrator.Buffer">
            <seealso cref="!:SSTData#getBuffer()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.SupbooksElement.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler)">
            <seealso cref="!:IndexedElement#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.SupbooksElement.addSupbook(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSUPBOOK)">
            <param name="supbookRec">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.SupbooksElement.getXTIIndex(System.String,System.Int32,System.Int32,System.Boolean)">
            <returns>-1 if aCreateIfMissing is false and XTI index doesn't exist</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.SupbooksElement.GetSupbook(System.String,System.Int32@)">
            <summary>
            Get the supbook element with the given filename, or create a new one.
            This also updates the EXTERNSHEET record
            
            NOTE: two filenames may have different paths but point to the same file. This just does
            a basic string comparison
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.SupbooksElement.Hydrated">
            <summary> Does this ever need to be false?</summary>
            <seealso cref="!:LeafElement#isHydrated()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TextObjectElement">
            <summary> TextObjectElement is responsible for handling the structure 
            TXO (CONTINUE CONTINUE)?.
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TextObjectElement.#ctor">
            <summary> Construct a new TextObjectElement and initialize its children to
            the minimal state from which it could sucessfully write to file.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TextObjectElement.initializeNewTextObject">
            <summary> Initialize a new TextObjectElement including basic string setup
            and record creation
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TextObjectElement.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement)">
            <summary> Construct a new TextObjectElement for a TXO record with no text 
            (no CONTINUE records)
            </summary>
            <param name="aTxo">the header for the TXO record
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TextObjectElement.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement,System.Collections.Generic.IList{SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement},System.Collections.Generic.IList{SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordHandlerElement})">
            <summary> Construct a new TextObjectElement for a TXO record with text, has 
            CONTINUE'S
            </summary>
            <param name="aTxo">the header for the TXO record
            </param>
            <param name="aTxtCont">the header for the CONTINUE record holding the text
            </param>
            <param name="aFormatCont">the header for the CONTINUE record holding the 
            formatting runs
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TextObjectElement.calcSize">
            <seealso cref="!:LeafElement#calcSize()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TextObjectElement.hydrate">
            <seealso cref="!:LeafElement#hydrate()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TextObjectElement.write(System.IO.Stream)">
            <seealso cref="!:LeafElement#write(java.io.OutputStream)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TextObjectElement.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler)">
            <summary> Constructs a structured representation of this object and its children</summary>
            <param name="aHandler">the handler to write to
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TextObjectElement.ToString">
            <seealso cref="!:java.lang.Object#toString()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TextObjectElement.Hydrated">
            <seealso cref="!:LeafElement#isHydrated()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TreeActionAddObservers">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TreeActionAddObservers.doActionPre(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <seealso cref="!:ITreeAction#doActionPre(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TreeActionAddObservers.doActionPost(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <seealso cref="!:ITreeAction#doActionPost(Element)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TreeActionCalcOffsets">
            <summary> Updates all elements and then calculates their offsets.
            
            </summary>
            <author>  geoffk Jul 8, 2004 6:56:23 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TreeActionCollectOptimizeData">
            <summary> Collects data for optimizers by walking the tree.
            
            </summary>
            <author>  geoffk Dec 3, 2004 1:24:47 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TreeActionCollectOptimizeData.doActionPre(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <seealso cref="!:ITreeAction#doActionPre(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TreeActionCollectOptimizeData.doActionPost(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <seealso cref="!:ITreeAction#doActionPost(Element)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TreeActionHydrate">
            <author>  geoffk Jul 6, 2004 1:13:30 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TreeActionPrint">
            <summary> 
            </summary>
            <author>  geoffk
            Jul 6, 2004 12:43:57 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TreeActionPrintXML">
            <summary> Prints out pretty XML.
            
            </summary>
            <author>  geoffk Jul 6, 2004 12:46:39 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TreeActionPrintXML.#ctor(System.IO.TextWriter)">
            <param name="aOut">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TreeActionUnwindSharedFormulas">
            <summary> 
            </summary>
            <author>  geoffk Dec 13, 2004 5:13:02 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TreeActionUpdateOptimizedRefs">
            <summary> 
            </summary>
            <author>  geoffk Dec 3, 2004 5:53:01 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TreeActionUpdateOptimizedRefs.doActionPre(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <seealso cref="!:ITreeAction#doActionPre(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TreeActionUpdateOptimizedRefs.doActionPost(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <seealso cref="!:ITreeAction#doActionPost(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TreeActionUpdateOptimizedRefs.addOptimizer(SoftArtisans.OfficeWriter.ExcelWriter.Elements.IOptimizer)">
            <param name="fontOpt">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TreeActionValidateSize">
            <summary>
            Make sure the Size getter matches the written output. This should be only used for debugging
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.TreeActionWriteRecords" -->
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.XctElement.addCrn(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementCrn)">
            <param name="header">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.XctElement.getCrn(System.Int32)">
            <param name="aIndex">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.XFOptimizer">
            <summary> Optimizes XF records.
            
             Object used during ExcelWriter save stage. See WorkbookModel.writeBytes or Eclipse find references.
             
            It's main task is to reorganize the XF list and leave only unique XF records. The object does not observe when 
            new XF's are added through ExcelWriter API or which ones were read in from the binary file. Instead, it gets
            passed a collection of all XF's that exist after processing.
            
            Only the referenced XF records stay alive. However, the hardcore optimization is actually done by the member ElementXfs object. 
            
            The order in which the methods are called is:
            		1. collectData
            		2. optimize
            		3. updateElement </summary>
            <author>  geoffk
            Dec 6, 2004 11:03:49 AM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.XFOptimizer.collectData(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <seealso cref="!:IOptimizer#collectData(Element)">
            </seealso>
            <summary>Sets 'true' flag on XF index that aElement parameter references</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.XFOptimizer.optimize">
            <seealso cref="!:IOptimizer#optimize()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.XFOptimizer.updateElement(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <seealso cref="!:IOptimizer#updateElement(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.XFOptimizer.getUpdatedIndex(System.Int32)">
            <seealso cref="!:IOptimizer#getUpdatedIndex(int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.XFOptimizer.ToString">
            <seealso cref="!:java.lang.Object#toString()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Elements.XFOptimizer.Referenced">
            <seealso cref="!:IOptimizer#setReferenced(int)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.IExcelApplicationBase.LicenseKeyAsString">
            <summary> The license key, and optionally the current date. Format
            is: XXXXXX-XXXX-XXXX-XXXXXX or: XXXXXX-XXXX-XXXX-XXXXXX DD MM YYYY
            
            </summary>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException"></exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.IRowModel.removeCell(System.Int32)">
            <summary> NOTE: this method only removed the cell from the map,
            the cell element remains so that an record will be written to 
            the output
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.IRowModel.Height">
            <summary> Returns the height in points</summary>
            <returns>
            </returns>
            <summary> Sets the height in points</summary>
            <param name="height">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup">
            <summary> This interface should be implemented by a class which will look up 
            extern sheet indexes (by name) and name/externname index by name and
            externsheet index.
            
            These are used for 3D References in the parser as well as NameX ptgs.
            
            </summary>
            <author>  geoffk
            Oct 6, 2004 10:57:26 AM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup.getDefaultExternSheetIndex(System.Boolean)">
            <summary> Return the index to the default (current) EXTERNSHEET XTI index for
            the sheet that created this lookup.
            
            </summary>
            <returns> the default XTI index of this lookup.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup.getSheetXtiIndex(System.String)">
            <summary> Return the index to the EXTERNSHEET XTI index for the given sheet.
            
            If the name does not exist, throw a SARuntimeException with a
            reasonable error message.
            
            </summary>
            <param name="aSheetName">the name of the sheet.
            </param>
            <returns> the XTI index of the sheet matching aSheetName.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup.getSheetXtiIndex(System.String,System.String)">
            <summary> Returns an index to the EXTERNSHEET XTI index for the given range of sheets.  
            The XTI may not exist.  In this case it must be created.
            
            XTI structures store iTabFirst and iTabLast, and this may require adding
            a new XTI to the EXTERNSHEET record.
            
            If either name does not exist, throw a SARuntimeException with a 
            reasonable error message.
            
            </summary>
            <param name="aSheet1">The name of the first sheet referenced.  This may include a
            file name in the case of an externally referenced sheet.
            </param>
            <param name="aSheet2">The name of the second sheet referenced.  This may include a
            file name in the case of an externally referenced sheet.
            </param>
            <returns> the index of the XTI structure referring to these sheets.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup.GetNameIndexOrThrowError(System.String)">
            <summary> Return the index of the NAME or EXTERNNAME record with the given name text,
            aName.
            
            If the name does not exist, throw a SARuntimeException with a reasonable error message.
            
            </summary>
            <param name="aName">the name to lookup.
            </param>
            <returns> the index of the NAME record.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup.GetNameIndex(System.String)">
            <summary>
            Return the name index, or -1 if not found
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup.GetNameAndXtiIndexForExternName(System.Int32,System.String,System.String,System.Int32@,System.Int32@)">
            <summary>
            Get the name and xti index for an EXTERN name. Create an EXTERNNAME record and SUPBOOK record
            if necessary
            </summary>
            <param name="tabIndex">worksheet index</param>
            <param name="name">the name</param>
            <param name="filename">the filename</param>
            <param name="nameIndex">name index</param>
            <param name="xtiIndex">index to an XTI element in an EXTERNSHEET record,
            which gives you the index to a SUPBOOK record. The relevant EXTERNNAME record
            is at index nameIndex from the group of EXTERNNAME record right after that SUPBOOK record</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup.getXtiAsString(System.Int32)">
            <summary> Return the string representation of an XTI structure in a EXTERNSHEET record.
            
            The result should be of the type "Sheet1" or, in the case
            of an XTI which references a range of sheets, "Sheet1:Sheet3".
            
            If the XTI references an external sheet, it should include the file
            name as needed.
            
            If the XTI is out of bounds, throw a SARuntimeException with a
            reasonable error message.
            
            </summary>
            <param name="aXtiIndex">an XTI index.
            </param>
            <returns> The String representation of the XTI.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup.getNameAsString(System.Int32)">
            <summary> Return the string for a NAME or EXTERNNAME reference.
            
            If the NAME index is out of bounds, throw a 
            SARuntimeException with a reasonable error message.
            
            </summary>
            <param name="aNameIndex">The index to the NAME or EXTERNNAME record.
            </param>
            <returns> the string for the NAME record.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup.getXtiIs3D(System.Int32)">
            <summary> Returns true if the XTI structure in the EXTERNSHEET record references more than one sheet.
            
            </summary>
            <param name="aXtiIndex">The XTI used.
            </param>
            <returns> true if the XTI structure in the EXTERNSHEET record references more than one sheet.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup.DefaultSheetPosition">
            <summary> Return the actual index to the sheet position for the sheet that
            created this lookup.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.IWorkbookModel.writeXLS(System.IO.Stream)">
            <summary>
            Writes an entire XLS compound storage to an output stream.
            </summary>
            <param name="stream">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.IWorkbookModel.Interface">
            <returns> an implementation of the Workbook that the user can use on their
            platform. (Java vs .NET)
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.IWorkbookModel.UseRCFormulaNotation">
            <summary>
            If a name is mentioned in a formula but it doesn't exist, create an extern name for it
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Observers.GridSubject">
            <summary> 
            </summary>
            <author>  geoffk
            Oct 29, 2004 1:50:48 PM
            </author>
        </member>
        <member name="E:SoftArtisans.OfficeWriter.ExcelWriter.Observers.GridSubject.OnGridEvent">
            <summary>
            Listeners should subscribe to this even whenever they need to
            know whenever a grid contained by this grid subject is altered.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.IWorksheetModel.sendGridEvent(SoftArtisans.OfficeWriter.ExcelWriter.Observers.GridEvent)">
            <summary> Sends this even to the dispatcher (aka, the WorksheetsModel)</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.IWorksheetsModel.updateOffsets">
            <summary> Updates all of the boundsheet records with the appropriate offsets.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.IWorksheetsModel.delete(System.Int32)">
            Methods which affect XTI/Position indexing
            <summary> TODO: On delete(), update non-existant calcs with supbook/externsheet
            TODO: On delete(), fix positioning
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.ExcelWriter.Model.IWorksheetsModel.moveSheet(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel,System.Int32)" -->
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.IWorksheetsModel.createWorksheet(System.String)">
            <summary>
            Creates a new worksheet at the end of the collection.
            </summary>
            <param name="aSheetName">
            the name of the sheet.
            </param>
            <returns> a new Worksheet.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.IWorksheetsModel.createWorksheet(System.String,System.Int32)">
            <summary>
            Creates a new worksheet at the specified position.
            </summary>
            <param name="aSheetName">
            </param>
            <param name="position">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.IWorksheetsModel.select(System.Object[])">
            <summary>JAVA</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.AnchorModel">
            <summary> <p>An anchor represents the position of a
            floating (i.e. non-cell data) object within a spreadsheet.  The position is
            maintained as a row number + a fraction of a row and a column number + 
            a fraction of a column.  Within the public anchor the fractional part is
            maintained as a percentage of the size of the row/column.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Model.AnchorModel.mRow">
            <summary> The Row for this anchor</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Model.AnchorModel.mColumn">
            <summary> The column of this anchor</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Model.AnchorModel.mOffsetX">
            <summary> The percentage of the column width representing the X offset</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Model.AnchorModel.mOffsetY">
            <summary> The percentage of the row height representing the Y offset.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.AnchorModel.#ctor(System.Int32,System.Int32,System.Double,System.Double)">
            <param name="rowNumber">
            </param>
            <param name="columnNumber">
            </param>
            <param name="percentX">
            </param>
            <param name="percentY">
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.ExcelWriter.Model.AnchorModel.validateOffsetParam(System.Double,System.String)" -->
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.AnchorModel.OffsetY">
            <summary> Return the Y offset as a percentage of row height.</summary>
            <returns> the Y offset as a percentage of row height.
            
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.AnchorModel.OffsetX">
            <summary> Returns the X offset as a percentage of the column width</summary>
            <returns> the X offset as a percentage of the column width
            
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.AnchorModel.Row">
            <summary> The row number of this anchor.</summary>
            <returns> the row number of this anchor
            
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.AnchorModel.Column">
            <summary> The column number of this anchor</summary>
            <returns> the column number of the anchor
            
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel">
            <summary>
            The model of a contiguous group of cells in the biff file format
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel.getCell(System.Int32,System.Int32)">
            <param name="row">
            </param>
            <param name="column">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel.applyStyle(SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel)">
            <param name="style">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel.createArea(System.Int32,System.Int32,System.Int32,System.Int32)">
            <seealso cref="!:int, int, int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel.createHyperlink(System.String)">
            <param name="href">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel.Iterator">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel.FirstCell">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel.Interface">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel.WorksheetIndex">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel.AreaStruct">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel.StyleModel">
            <param name="style">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel.BorderAround">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel.ArrayFormula">
            <seealso cref="!:Area#getValidationSourceFormula()">
            </seealso>
            <method>  property=true </method>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel.CellDataModel">
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel.IgnoreEmptyAreaEnumerator.adjustRow">
            <summary>
            Checks to insure that the row referenced by mCurRow exists in the area.
            If not, sets mCurRow to next existing row or to mRowCount if no more rows exist.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.BorderModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordXF,SoftArtisans.OfficeWriter.ExcelWriter.Model.PaletteModel)">
            <param name="aPaletteModel">TODO
            </param>
            <param name="recXF">
            
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.BorderModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel,SoftArtisans.OfficeWriter.ExcelWriter.Model.PaletteModel)">
            <param name="aPaletteModel">TODO
            </param>
            <param name="model">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.BorderModel.setLineStyle(SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle)">
            <param name="aLineStyle">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.BorderModel.setAreaBorderColor(SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel,SoftArtisans.OfficeWriter.ExcelWriter.Model.ColorModel)">
            <param name="areaModel">
            </param>
            <param name="borderColor">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.BorderModel.setLineStyle(SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle,SoftArtisans.OfficeWriter.ExcelWriter.Border.Part)">
            <param name="style">
            </param>
            <param name="part">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.BorderModel.setBorderLineStyle(SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel,SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle,SoftArtisans.OfficeWriter.ExcelWriter.Border.Part)">
            <param name="aLineStyle">
            </param>
            <param name="part">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.BorderModel.getColor(SoftArtisans.OfficeWriter.ExcelWriter.Border.Part)">
            <param name="aPart">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.BorderModel.getLineStyle(SoftArtisans.OfficeWriter.ExcelWriter.Border.Part)">
            <param name="part">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.BorderModel.Interface">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.BorderModel.CellLineStyle">
            <param name="lineStyle">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.BorderModel.Color">
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel.deleteRows(System.Int32,System.Int32)">
            <param name="aRowNumber">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel.deleteColumns(System.Int32,System.Int32)">
            <param name="aColumnNumber">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel.insertColumns(System.Int32,System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Style.ColumnInsertBehavior,SoftArtisans.OfficeWriter.ExcelWriter.Style.ColumnInsertBehavior)">
            <param name="aInsertBehavior">TODO
            </param>
            <param name="columnNumber">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel.validColumnIndex(System.Int32)">
            <param name="columnNumber">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel.insertRows(System.Int32,System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Style.RowInsertBehavior,SoftArtisans.OfficeWriter.ExcelWriter.Style.RowInsertBehavior)">
            <param name="aInsertBehavior">TODO
            </param>
            <param name="rowNumber">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel.hasPivotTableAtRows(System.Int32,System.Int32,System.Boolean)">
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel.formatRows(System.Int32,System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Style.RowInsertBehavior,SoftArtisans.OfficeWriter.ExcelWriter.Style.RowInsertBehavior)">
            <param name="newRow">
            </param>
            <param name="insertBehavior">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel.createArea(SoftArtisans.OfficeWriter.ExcelWriter.Elements.MergeCellsElement,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="firstRow">
            </param>
            <param name="firstColumn">
            </param>
            <param name="numRows">
            </param>
            <param name="numColumns">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel.createRange(SoftArtisans.OfficeWriter.ExcelWriter.Elements.MergeCellsElement,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="mergeCellsElement">
            </param>
            <param name="firstRow">
            </param>
            <param name="firstColumn">
            </param>
            <param name="numRows">
            </param>
            <param name="numColumns">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel.setColumnStyle(SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel,System.Int32)">
            <summary> This is sort of wierd.
            
            The CellStreamElement is the subject that everything registers with,
            but this object sends out all the events, because the Model layer 
            connects disparate pieces.  To maintain this hegemony, we implement
            GridObserver in both contexts (here and CellStreamElement) but other
            than addObserver, all the callbacks are implemented here.
            
            </summary>
            <seealso cref="!:GridSubject#addObserver(GridObserver)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel.createArea(SoftArtisans.OfficeWriter.ExcelWriter.Elements.MergeCellsElement,System.String)">
            <param name="mergeCellsElement">
            </param>
            <param name="areaFormula">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel.removeCell(SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel)">
            <summary> NOTE: this method only removed the cell from the map,
            the cell element remains so that an record will be written to 
            the output
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel.addCell(SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel)">
            <param name="cell">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel.DbCellRecords">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel.FirstRow">
            <returns> The first populate row in the Worksheet, '-1' if no rows have been populated
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel.RowMapValues">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel.LastPopulatedRow">
            <returns> The last populate row in the Worksheet, '-1' if no rows have been populated
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel.FirstCol">
            <summary> This could (and probably should) just be a call through to mCellStreamElement.getFirstCol().
            However, the ElementCellStream methods shouldn't be called until calcSize() is called,
            because the data isn't pushed down until then (I think).
            </summary>
            <returns> The first populate column in the Worksheet, '-1' if no columns have been populated
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel.LastCol">
            <returns> The last populate column in the Worksheet, '-1' if no columns have been populated 
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel.SourceXTIIndex">
            <summary> Looks up an XTI index for this sheet.
            
            </summary>
            <seealso cref="!:GridSubject#getSourceXTIIndex()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel.WorkbookModel">
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel.ColumnEnumerator.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel,System.Int32,System.Int32)">
            <param name="col">
            </param>
            <param name="row">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel">
            <author>  tkiely
            
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.applyStyle(SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel)">
            <param name="style">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.createHyperlink(System.String)">
            <param name="href">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.getCharacters(System.Int32,System.Int32)">
            <param name="startIndex">
            </param>
            <param name="length">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.changeState(SoftArtisans.OfficeWriter.ExcelWriter.Model.CellStateType,SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel,SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel)">
            <param name="firstCell">
            </param>
            <param name="model">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.setArrayFormula(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="formula">
            </param>
            <param name="lastCol">
            </param>
            <param name="lastRow">
            </param>
            <param name="startCol">
            </param>
            <param name="startRow">
            
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.setIsMergedCell(System.Boolean,SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel)">
            <param name="b">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.setValue(System.Boolean)">
            <param name="val">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.ColumnNumber">
            <param name="i">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.ColumnNumberSpecific">
            <summary> Helper for merged cells.  Returns the column number of the actual 
            merged cell component rather than for the merged cell as a whole.  For
            all other cell cases, this returns the same as getColumnNumber.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.RowNumber">
            <param name="rowNumber">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.RowNumberSpecific">
            <summary> Helper for merged cells.  Returns the row number of the actual 
            merged cell component rather than for the merged cell as a whole.  For
            all other cell cases, this returns the same as getRowNumber.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.Comment">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.HasComment">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.ValueType">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.WorksheetModel">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.WorkbookModel">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.RecordHandlerPosition">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.CellElementRecord">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.RowModel">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.MergedCell">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.PartofArray">
            <returns>
            
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.StyleSpecific">
            <summary> Method to return the style of this specific cell.  For components of 
            a merged cell, this method will return a different value from getStyle.  
            At all other time, this will return the same value as getStyle. 
            </summary>
            <returns> the StyleModel for this specific cell
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.ValueAsDate">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel.HasArrayFormula">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel.ColumnNumberSpecific">
            <seealso cref="!:ICellModel#getColumnNumberSpecific()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel.RowNumberSpecific">
            <seealso cref="!:ICellModel#getRowNumberSpecific()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel.StyleSpecific">
            <seealso cref="!:ICellModel#getStyleSpecific()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellMergedCellStateModel.ColumnNumberSpecific">
            <seealso cref="!:ICellModel#getColumnNumberSpecific()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellMergedCellStateModel.RowNumberSpecific">
            <seealso cref="!:ICellModel#getRowNumberSpecific()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellMergedCellStateModel.StyleSpecific">
            <seealso cref="!:ICellModel#getStyleSpecific()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellPartOfArrayStateModel.applyStyle(SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel)">
            <param name="style">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellPartOfArrayStateModel.createHyperlink(System.String)">
            <param name="href">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellPartOfArrayStateModel.getCharacters(System.Int32,System.Int32)">
            <param name="startIndex">
            </param>
            <param name="length">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellPartOfArrayStateModel.ColumnNumber">
            <param name="i">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellPartOfArrayStateModel.ColumnNumberSpecific">
            <seealso cref="!:ICellModel#getColumnNumberSpecific()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellPartOfArrayStateModel.RowNumberSpecific">
            <seealso cref="!:ICellModel#getRowNumberSpecific()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellPartOfArrayStateModel.StyleSpecific">
            <seealso cref="!:ICellModel#getStyleSpecific()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellPartOfArrayStateModel.Comment">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellPartOfArrayStateModel.HasComment">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellPartOfArrayStateModel.ValueType">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellPartOfArrayStateModel.WorksheetModel">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellPartOfArrayStateModel.WorkbookModel">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellPartOfArrayStateModel.RecordHandlerPosition">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellPartOfArrayStateModel.CellElementRecord">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellPartOfArrayStateModel.RowModel">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellStateModel">
            <summary>JSL
            import DateTimeToDateConverter;
            import System.Data.SqlTypes.*;
            JSL_END 
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellStateModel.mMergedCellsArea">
            <summary> When populated, this cell is the top left cell for a set of merged
            cells described by the specified area.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellStateModel.initializeCellElement(System.Int16)">
            <param name="recType">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellStateModel.createCellRecord(System.Int16)">
            <param name="recType">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellStateModel.applyStyle(SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel)">
            <param name="style">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellStateModel.createHyperlink(System.String)">
            <param name="href">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellStateModel.getCharacters(System.Int32,System.Int32)">
            <param name="startIndex">
            </param>
            <param name="length">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellStateModel.ColumnNumber">
            <param name="i">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellStateModel.ColumnNumberSpecific">
            <seealso cref="!:ICellModel#getColumnNumberSpecific()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellStateModel.RowNumberSpecific">
            <seealso cref="!:ICellModel#getRowNumberSpecific()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellStateModel.StyleSpecific">
            <seealso cref="!:ICellModel#getStyleSpecific()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellStateModel.Comment">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellStateModel.HasComment">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellStateModel.ValueType">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellStateModel.WorksheetModel">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellStateModel.WorkbookModel">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellStateModel.RecordHandlerPosition">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellStateModel.CellElementRecord">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_CellStateModel.RowModel">
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellModel_ErrorStrings.getErrorString(System.Int64)">
            <param name="errVal">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellsModel">
            <summary> This class is .NET only.
            
            </summary>
            <author>  geoffk
            Mar 16, 2005 4:12:40 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellsModel.getItem(System.Int32,System.Int32)">
            <param name="row">
            </param>
            <param name="column">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellStyleModel">
            <summary> Represents a Cell Style and the associated references.</summary>
            <author>  geoffk
            Aug 4, 2004 5:06:01 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel">
            <summary> All general functionality of a Style goes through here.</summary>
            <author>  geoffk
            Aug 4, 2004 5:07:00 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel.cloneStyle(System.Boolean)">
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel.copy(SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel,System.Int32)">
            <param name="srcStyle">The style from which we copy all settings.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel.applyFont(SoftArtisans.OfficeWriter.ExcelWriter.Model.FontModel)">
            <param name="val">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel.HideFormulas">
            <param name="hideFormulas">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel.VerticalAlignment">
            <param name="vtAlignment">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel.WrapText">
            <returns>
            </returns>
            <param name="wrapText">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel.Font">
            <param name="model">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel.NumberFormat">
            <param name="formatString">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel.ForegroundColor">
            <returns>
            </returns>
            <param name="fgColor">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel.BackgroundColor">
            <returns>
            </returns>
            <param name="bgColor">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel.Pattern">
            <returns>
            </returns>
            <param name="pattern">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel.XfRecord">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel.BorderModel">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel.BorderSpecific">
            <summary> Helper for dealing with merged cells.  Returns the border for the actual
            anchor cell in a merged cell rather than for the area of merged cells. 
            For all other cases, this return the same object as getBorder.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel.ShrinkToFit">
            <returns>
            </returns>
            <param name="shrinkToFit">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel.Orientation">
            <summary> Sets the orientation of the text, from 90 (up) through 0 (horizontal) to -90 (down).</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel.CellStyle">
            <returns>
            </returns>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellStyleModel.mMergedAreaModel">
            <summary> When not null, this holds the are of the merged cells this style controls
            the formatting for.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.CellStyleModel.BorderModel">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartsheetModel">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel">
            <summary> Model of a Sheet.
            
            </summary>
            <author>  geoffk Jul 7, 2004 6:00:35 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel,SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel,SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordBoundSheetBIFF8,SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSheet,System.Int32)">
            <param name="sheetBIFF8">
            </param>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.getDefaultExternSheetIndex(System.Boolean)">
            <seealso cref="!:IExternLookup#getDefaultExternSheetIndex(boolean)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.getSheetXtiIndex(System.String)">
            <seealso cref="!:IExternLookup#getSheetXtiIndex(java.lang.String)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.getSheetXtiIndex(System.String,System.String)">
            <seealso cref="!:IExternLookup#getSheetXtiIndex(java.lang.String,">
            java.lang.String)
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.GetNameIndexOrThrowError(System.String)">
            <seealso cref="!:IExternLookup#getNameIndex(int,">
            java.lang.String)
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.getXtiAsString(System.Int32)">
            <seealso cref="!:IExternLookup#getXtiAsString(int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.getNameAsString(System.Int32)">
            <seealso cref="!:IExternLookup#getNameAsString(int,">
            int)
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.getXtiIs3D(System.Int32)">
            <seealso cref="!:IExternLookup#is3D(int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.registerDrawings">
            <summary> Helper method to be used only after this sheet has been freshly copied.
            This will force any drawings, there could be more than one if the sheet
            contains a chart that contains a drawing, to get new IDs for themselves
            and for their shapes.  Calling this method will ensure that all
            reference counts are fully updated and all ID tracking is consistant.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.deleteRows(System.Int32,System.Int32)">
            <param name="rowNumber">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.deleteColumns(System.Int32,System.Int32)">
            TODO: correct documentation
            <param name="columnNumber">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.getColumn(System.Int32)">
            <param name="aIndex">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.createArea(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="firstRow">
            </param>
            <param name="firstColumn">
            </param>
            <param name="numRows">
            </param>
            <param name="numColumns">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.createRange(System.String)">
            <param name="rangeFormula">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.createRange(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <param name="firstRow">
            </param>
            <param name="firstColumn">
            </param>
            <param name="numRows">
            </param>
            <param name="numColumns">
            </param>
            <param name="rangeName">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.createNamedRange(System.String,System.String)">
            <param name="rangeFormula">
            </param>
            <param name="rangeName">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.getRange(System.String)">
            <param name="aRangeName">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.sendGridEvent(SoftArtisans.OfficeWriter.ExcelWriter.Observers.GridEvent)">
            <summary> Sends this even to the dispatcher (aka, the WorksheetsModel)</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.importData(SoftArtisans.OfficeWriter.Shared.DataSource,SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel,SoftArtisans.OfficeWriter.ExcelWriter.Model.DataImportPropertiesModel)">
            <param name="wrapper">
            </param>
            <param name="model">
            </param>
            <param name="model2">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.columnExists(System.Int32)">
            <param name="colNumber">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.createArea(SoftArtisans.OfficeWriter.ExcelWriter.AreaStruct)">
            <param name="areaStruct">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.Name">
            <returns>
            </returns>
            <param name="name">
            </param>
            <throws>  IOException </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.Position">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.Element">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.IndexRecord">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.ShapeGroups">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.Pictures">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.PageSetup">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.PopulatedCells">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.Hyperlinks">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.HLinksModel">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.Item(System.Int32,System.Int32)">
            <param name="row">
            </param>
            <param name="column">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.ExternFontCache">
            <summary>
            See ExternDataCopier for usage of this. Before, this value was stored in a static
            hashtable of WorksheetModels to FontCaches, which caused WorksheetModels to persist forever,
            preventing garbage collection
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.ExternStyleCache">
            <summary>
            See ExternDataCopier for usage of this. Before, this value was stored in a static
            hashtable of WorksheetModels to StyleCaches, which caused WorksheetModels to persist forever,
            preventing garbage collection
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.DefaultSheetPosition">
            <seealso cref="!:IExternLookup#getDefaultSheetPosition()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.IsDirectWorksheetModel">
            <summary>
            Return true if this is type WorksheetModel; false otherwise
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel.GridWrapper.createArea(System.Int32,System.Int32,System.Int32,System.Int32)">
            <seealso cref="!:int, int, int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartsheetModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel,SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel,SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordBoundSheetBIFF8,SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSheet,System.Int32)">
            <param name="aWorkbookModel">
            </param>
            <param name="aRec">
            </param>
            <param name="aSheet">
            </param>
            <param name="aPosition">
            </param>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartsheetModel.getDefaultExternSheetIndex(System.Boolean)">
            <seealso cref="!:IExternLookup#getDefaultExternSheetIndex(boolean)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartsheetModel.getSheetXtiIndex(System.String)">
            <seealso cref="!:IExternLookup#getSheetXtiIndex(java.lang.String)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartsheetModel.getSheetXtiIndex(System.String,System.String)">
            <seealso cref="!:IExternLookup#getSheetXtiIndex(java.lang.String,">
            java.lang.String)
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartsheetModel.pack">
            <seealso cref="!:WorksheetModel#pack()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartsheetModel.DisplayRCStyleReferences">
            <seealso cref="!:WorksheetModel#getDisplayRCStyleReferences()">
            </seealso>
            <seealso cref="!:WorksheetModel#setDisplayRCStyleReferences(boolean)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartsheetModel.DefaultSheetPosition">
            <seealso cref="!:IExternLookup#getDefaultSheetPosition()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColorModel">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColorModel.getRed">
            <summary> Returns the red component of the RGB value</summary>
            <returns> the red component of the RGB value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColorModel.getBlue">
            <summary> Returns the blue component of the RGB value</summary>
            <returns> the blue component of the RGB value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColorModel.getGreen">
            <summary> Returns the green component of the RGB value</summary>
            <returns> the green component of the RGB value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColorModel.isPaletteColor">
            <summary> Returns whether or not this color is stored in Excel's color palette.</summary>
            <returns> true if this color is stored in Excel's color palette and
            false otherwise.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColorModel.isSystemColor">
            <summary> Returns whether or not this color is a system color that cannot be 
            changed.
            </summary>
            <returns> true if this color is a system color and false otherwise
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColorModel.PaletteIndex">
            <summary> Returns the index of this color in Excel's color palette or if 
            {@link #isPaletteColor()} would return <code>false</code>
            </summary>
            <returns> the index of this color in Excel's color palette
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColorModel.CustomColor">
            <summary> Returns whether or not this color is a custom color that is <b>not</b>
            stored in Excel's color palette.
            </summary>
            <returns> true if this color is a custom color and false otherwise.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColumnModel">
            <summary> <p>Model layer class for Column.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColumnModel.createStyleModel">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColumnModel.NormalFontProperties">
            <summary> Sets the normal font properties for this column.  This will calculate the
            standard padding for the column and will recalculate the width of this
            column, if necessary.
            </summary>
            <param name="aFontProps">the new FontProperties object for the Normal font.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColumnModel.WidthInChars">
            <summary> Returns the width of this column in widths of the '0' character of the
            normal font.  This value has the 5px of padding removed before it is
            returned so it should be the value that appears in the column width
            dialog for this column.  This value will change if the normal font
            is changed.
            </summary>
            <returns> the width of this column in width of the '0' character of the
            normal font.
            </returns>
            <summary> Sets the width of this column in widths of the '0' character of the 
            normal font.  This value will have 5px of padding added to conform with
            the way excel handles column width. This value may be changed if the
            normal font is changed.
            </summary>
            <param name="aWidth">the width of this column in widths of the '0' character
            </param>
            <throws>  IllegalArgumentException if aWidth is not between 0 and 255  </throws>
            <summary> inclusive.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColumnModel.Width">
            <summary> Returns the width of this column in points.  This width does not have
            the 5px of padding striped from it.  This should be the actual width of
            the column as it will be displayed on the screen.
            </summary>
            <returns> the width of this column in points
            </returns>
            <summary> Sets the width of this column in points.  This width will not have the
            5px of padding added to it, so it will be the actual width of the column
            that will be displayed on the screen.
            </summary>
            <param name="aWidthInPoints">the new width of this column in points.
            </param>
            <throws>  IllegalArgumentException if aWidthInPoints is not between 0 and </throws>
            <summary> 255, inclusive, when converted to characters.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColumnModel.Style">
            <returns>
            </returns>
            <param name="model">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColumnModel.Hidden">
            <returns>
            </returns>
            <param name="hidden">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColumnModel.OutlineLevel">
            <returns>
            </returns>
            <param name="level">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColumnModel.OutlineCollapsed">
            <returns>
            </returns>
            <param name="collapsed">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColumnModel.XfIndex">
            <returns>
            </returns>
            <summary> Sets the style XF index for this column.
            It is the caller's responsibility to insure that the index is valid.
            
            </summary>
            <param name="index">Index to the XF style record to use for this column.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColumnsModel">
            <summary> <p>ColumnsModel manages the columns in a worksheet.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColumnsModel.mColumns">
            <summary>
            This is filled with nulls for backwards compatibility reasons
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColumnsModel.getColumn(System.Int32)">
            <summary> Retrieves the Column at the specified index.  If the column does not have
            any formatting information, that information will be created.
            </summary>
            <param name="aIndex">the index of the column to retrieve
            </param>
            <returns> the Column at the specified index
            </returns>
            <throws>  IndexOutOfBoundsException if aIndex is not a valid column index </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColumnsModel.removeColumns(System.Int32,System.Int32)">
            <summary> Removes the column with the specified index.  The ColumnModel for that
            column is returned if the column existed, otherwise null is returned.
            </summary>
            <param name="aIndex">the index of the column to remove
            </param>
            <returns> the ColumnModel for the specified column if the specified column
            existed and null otherwise.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColumnsModel.removeColumn(System.Int32)">
            <summary> Removes the column with the specified index.  The ColumnModel for that
            column is returned if the column existed, otherwise null is returned.
            </summary>
            <param name="aIndex">the index of the column to remove
            </param>
            <returns> the ColumnModel for the specified column if the specified column
            existed and null otherwise.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColumnsModel.validColumnIndex(System.Int32)">
            <summary> Returns whether the specified index is a valid column index</summary>
            <param name="aIndex">the index to validate
            </param>
            <returns> true if the index is valid and false otherwise
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColumnsModel.setupNormalFontProperties">
            <summary> Helper function to configure the normal font properties</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColumnsModel.computeDefaultColumnWidth">
            <summary> Helper function to compute the default width of a column in padded 
            256th's of a character
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.ColumnsModel.ElementColumns">
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ConditionalFormatModel.validateAccessIndex(System.Int32)">
            <param name="index">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.DataImport">
            <summary> 
            
            </summary>
            <author>  geoffk Jan 25, 2005 2:48:47 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.DataImport.AllRowIterator">
            <summary>
            Iterates through the cells in the row starting at mStartHoriz and aVertNum, hitting merged
            cells only once.
            </summary>
            <remarks>Once a merged cell is reached, it will return it once, and then skip after the merge.</remarks>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Model.DataImport.AllRowIterator.mMergedCells">
            <summary>
            This was changed to a stack during the conversion to C#; it was a set before.
            </summary>
            <remarks>I think this could probably just be a single cell, but am not certain enough 
            to remove the capability of remembering more than one merged cell. Using a stack should
            greatly increase performance to usually be O(1)</remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.DataImportPropertiesModel">
            <summary> 
            
            </summary>
            <author>  geoffk
            Jan 24, 2005 3:54:26 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.DataImportPropertiesModel.getColumnIndices(SoftArtisans.OfficeWriter.Shared.DataSource)">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.DataValidationModel.DataValidationElement">
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.GlobalStyleModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel,SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementXF,SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFonts,SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFormats,SoftArtisans.OfficeWriter.ExcelWriter.Model.PaletteModel)">
            <param name="aWorkbookModel">
            </param>
            <param name="aXfIndex">
            </param>
            <param name="aRecXF">
            </param>
            <param name="aFonts">
            </param>
            <param name="aFormats">
            </param>
            <param name="aPalette">
            </param>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Model.HeaderFooterSectionModel.mRecord">
            <summary>
            Reference to the Header or Footer record of the worksheet
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Model.HeaderFooterSectionModel.mSection">
            <summary>
            Which section of the header/footer are we working on
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Model.HeaderFooterSectionModel.mHFPictures">
            <summary>
            The element of the worksheet that represents pictures in headers and footers
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Model.HeaderFooterSectionModel.mGroupName">
            <summary>
            The Group name of the picture, which identifies it as belonging to this section
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.HeaderFooterSectionModel.getPicture">
            <summary>
            This function will re-fetch the picture every time in case it changed and will set the 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.HyperlinkModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel,SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementHyperlink)">
            <param name="area">
            </param>
            <param name="hlinkElem">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.HyperlinkModel.Interface">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.HyperlinkModel.Area">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.HyperlinkModel.Href">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.HyperlinkModel.Text">
            <returns>
            </returns>
            <param name="text">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.HyperlinksModel.createHyperlink(SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel,System.String,System.String)">
            <param name="range">
            </param>
            <param name="href">
            </param>
            <param name="text">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.HyperlinksModel.initRecord(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHLink,SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel,System.String,System.String)">
            <param name="hlinkRec">
            </param>
            <param name="range">
            </param>
            <param name="href">
            </param>
            <param name="text">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.HyperlinksModel.getItem(System.Int32)">
            <param name="index">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.HyperlinksModel.HLinks">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.HyperlinksModel.HyperlinksElement">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.HyperlinksModel.Interface">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.HyperlinksModel.Count">
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.NamedObjectContainer.addNamedObject(SoftArtisans.OfficeWriter.ExcelWriter.Model.NamedObjectModel)">
            <param name="aNameModel">
            </param>
            <param name="name">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.NamedObjectContainer.firePack">
            <summary> Helper method to allow subclasses to fire the pack event if they are 
            unable to call super.pack() due to inheritance issues.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.NamedObjectModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.ReturnType,SoftArtisans.OfficeWriter.ExcelWriter.Elements.NameElement,SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel)">
            <param name="name">
            </param>
            <param name="workbookModel">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.NamedObjectModel.changeNameType(SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.ReturnType)">
            <param name="newType">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.NamedObjectModel.Formula">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.NamedObjectModel.Name">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.NamedObjectModel.Value">
            <summary> This is one of the few cases where we must return the  (interface) rather than the model,
            because we're not sure what kind of object we're going to get back.  It is essential that any
            calling method that is internal cast appropriately.  (geoffk)
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.NamedObjectModel.Scope">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.NamedObjectModel.NamedObjectType">
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.NamedStyleModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel,SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementStyle,SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementXF,SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFonts,SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementFormats,SoftArtisans.OfficeWriter.ExcelWriter.Model.PaletteModel)">
            <param name="aXfIndex">
            </param>
            <param name="aRecXF">
            </param>
            <param name="aFonts">
            </param>
            <param name="aFormats">
            </param>
            <param name="aPalette">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.NamedStyleModel.Name">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.NamedStyleModel.StyleElement">
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.NamedStylesModel.findNamedStyle(System.String)">
            <param name="styleName">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.NamedStylesModel.applyDiff(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementXF,SoftArtisans.OfficeWriter.ExcelWriter.Model.NamedStyleModel)">
            <param name="model">
            </param>
            <param name="record">
            
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.NamedStylesModel.isNamedStyleXF(System.Int32)">
            <param name="styleXfIndex">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.NamedStylesModel.Count">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.NamedStylesModel.NamedStyles">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.NumberFormatModel">
            <summary> 
            
            </summary>
            <author>  geoffk Jan 31, 2005 5:20:23 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.NumberFormatModel.createNumber(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color)">
            <summary> Format is: {#,##}0{.0}*;[Color](same)
            
            </summary>
            <param name="numDecimalPlaces">
            </param>
            <param name="use1000Seperator">
            </param>
            <param name="negStyle">
            </param>
            <param name="color">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.NumberFormatModel.createCurrency(System.Int32,System.Boolean,System.Boolean,System.Boolean,SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color)">
            <param name="numDecimalPlaces">
            </param>
            <param name="useParensForNegatives">
            </param>
            <param name="color">
            </param>
            <returns>
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.ExcelWriter.Model.NumberFormatModel.createCurrency(System.Int32,System.Boolean,System.Boolean,SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color,System.String,System.String,System.Boolean,System.Boolean)" -->
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.NumberFormatModel.createAccounting(System.Int32,System.Boolean,SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color)">
            <summary> _($* #,##0.00_);_($* (#,##0.00);_($* "-"??_);_(@_)
            
            </summary>
            <param name="numDecimalPlaces">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.NumberFormatModel.createAccounting(System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color,System.String,System.String,System.Boolean,System.Boolean,System.String,System.String)">
            <summary> _($* #,##0.00_);_($* (#,##0.00);_($* "-"??_);_(@_)
            
            </summary>
            <param name="numDecimalPlaces">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.NumberFormatModel.createPercentage(System.Int32)">
            <param name="numDecimalPlaces">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.NumberFormatModel.createFraction(System.Int32)">
            <param name="numDigits">
            the number of digits to use in the numerator and denominator.
            Must be > 0.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.NumberFormatModel.createFraction(System.Int32,System.Int32)">
            <param name="numDigits">
            </param>
            <param name="denominator">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.NumberFormatModel.createScientific(System.Int32)">
            <param name="numDecimalPlaces">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.OthersheetModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel,SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel,SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordBoundSheetBIFF8,SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSheet,System.Int32)">
            <param name="aWorkbookModel">
            </param>
            <param name="aParentModel">
            </param>
            <param name="aRec">
            </param>
            <param name="aSheet">
            </param>
            <param name="aPosition">
            </param>
            <throws>  IOException </throws>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.PaletteModel">
            <summary> <p>PaletteModel manages color palette information for the document including
            interactions between custom colors and the standard palette.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.PaletteModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementGlobalStream)">
            <summary> Construct a new PaletteModel with a reference to the GlobalStream.
            This reference will be used to either retrieve the palette defined in
            the file or add a new palette to the file.
            </summary>
            <param name="aGlobalStream">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.PaletteModel.resetToStandardPalette">
            <summary> Resets this palette to the standard Excel palette.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.PaletteModel.getColor(System.Int32,System.Int32,System.Int32)">
            <param name="red">
            </param>
            <param name="green">
            </param>
            <param name="blue">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.PaletteModel.getColorAt(System.Int32)">
            <param name="index">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.PaletteModel.getColorFromRecord(System.Int32)">
            <summary> This is a helper method that should be used only within the internal
            object model to lookup colors by their index.  This method either
            returns the color from the Palette if it has an approprate index or
            returns the SystemColorModel with the specified index.
            </summary>
            <param name="index">the index to lookup
            </param>
            <returns> either the palette or system color with the specified index
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.PaletteModel.setColorAt(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="index">
            </param>
            <param name="red">
            </param>
            <param name="green">
            </param>
            <param name="blue">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.PaletteModel.setColor(SoftArtisans.OfficeWriter.ExcelWriter.Model.ColorModel,System.Int32,System.Int32,System.Int32)">
            <param name="color">
            </param>
            <param name="red">
            </param>
            <param name="green">
            </param>
            <param name="blue">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.PaletteModel.getClosestColor(System.Int32,System.Int32,System.Int32)">
            <param name="red">
            </param>
            <param name="green">
            </param>
            <param name="blue">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.PaletteModel.computeColorDistance(SoftArtisans.OfficeWriter.ExcelWriter.Model.ColorModel,System.Int32,System.Int32,System.Int32)">
            <summary> Returns the distance between the specified Color and the specified RGB
            value.  This distance is the sum of the absolute values of the 
            difference betwen the individual RGB values. 
            </summary>
            <param name="aColor">the color to check the distance of
            </param>
            <param name="aRed">the desired red component
            </param>
            <param name="aGreen">the desired green component
            </param>
            <param name="aBlue">the desired blue component
            </param>
            <returns> the distance between the color and the specified RGB value
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.PaletteModel.StandardPalette">
            <summary> Creates a new standard palette and returns a reference to it.</summary>
            <returns> a reference to the standard palette
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.RangeModel">
            <summary> 
            </summary>
            <author>  geoffk
            Jul 30, 2004 12:13:15 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.RangeModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel,SoftArtisans.OfficeWriter.ExcelWriter.Elements.MergeCellsElement,SoftArtisans.OfficeWriter.ExcelWriter.Model.CellDataModel,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="aWorkbookModel">
            </param>
            <param name="model">
            </param>
            <param name="firstRow">
            </param>
            <param name="firstColumn">
            </param>
            <param name="numRows">
            </param>
            <param name="numColumns">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.RangeModel.init(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel,SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgArea3D)">
            <param name="workbookModel">
            </param>
            <param name="ptgArea">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.RangeModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel,System.String,System.String,System.Int32)">
            <param name="aRangeFormula">
            </param>
            <param name="aRangeName">
            </param>
            <param name="workbookModel">
            </param>
            <param name="position">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.RangeModel.initArea3d(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel,System.String,System.Int32)">
            <param name="workbookModel">
            </param>
            <param name="aRangeFormula">
            </param>
            <param name="worksheetOffset">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.RangeModel.initArea(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel,System.String,System.Int32)">
            <param name="workbookModel">
            </param>
            <param name="ptg">
            </param>
            <param name="worksheetOffset">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.RangeModel.init(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel,SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgUnion)">
            <param name="workbookModel">
            </param>
            <param name="unionPtg">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.RangeModel.init(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel,SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgIsect)">
            <param name="workbookModel">
            </param>
            <param name="isect">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.RangeModel.joinRange(SoftArtisans.OfficeWriter.ExcelWriter.Model.RangeModel)">
            <param name="range">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.RangeModel.applyStyle(SoftArtisans.OfficeWriter.ExcelWriter.Model.StyleModel)">
            <param name="model">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.RangeModel.Interface">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.RangeModel.Areas">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.RangeModel.ColumnCount">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.RangeModel.RowCount">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.RangeModel.FirstColumn">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.RangeModel.FirstRow">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.RangeModel.Value">
            <returns>
            </returns>
            <param name="aValue">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.RangeModel.FirstCell">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.RangeModel.HasComment">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.RangeModel.NameElement">
            <param name="nameElem">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.RangeModel.BorderAround">
            <returns>
            </returns>
            <param name="border">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.RangeModel.NameRecord">
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.RowModel.deleteColumn(System.Int32)">
            <param name="aColumnNumber">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.RowModel.insertColumn(System.Int32)">
            <param name="aColumnNumber">
            </param>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.RowModel.removeCell(System.Int32)">
            <summary> NOTE: this method only removed the cell from the map,
            the cell element remains so that an record will be written to 
            the output
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.RowModel.addCell(SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel)">
            <param name="mergeCells">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.RowModel.hasStyleModel">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.RowModel.RowNumber">
            <param name="i">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.RowModel.ChildMap">
            <param name="tempCellMap">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.RowModel.ChildCount">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.RowModel.Height">
            <summary> Returns the height in points</summary>
            <returns>
            </returns>
            <summary> Sets the height in points</summary>
            <param name="height">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.RowModel.Style">
            <returns>
            </returns>
            <param name="model">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.RowModel.WorksheetModel">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.RowModel.WorkbookModel">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.RowModel.CellDataModel">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.RowModel.IsFormatted">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.SystemColorModel">
            <summary> <p>Holds all the fixed system colors that we know about.  They are
            indexed by their translated palette index.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.SystemColorModel.getRed">
            <seealso cref="!:ColorModel#getRed()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.SystemColorModel.getBlue">
            <seealso cref="!:ColorModel#getBlue()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.SystemColorModel.getGreen">
            <seealso cref="!:ColorModel#getGreen()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.SystemColorModel.isPaletteColor">
            <seealso cref="!:ColorModel#isPaletteColor()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.SystemColorModel.isSystemColor">
            <seealso cref="!:ColorModel#isSystemColor()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SystemColorModel.PaletteIndex">
            <seealso cref="!:ColorModel#getPaletteIndex()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.SystemColorModel.CustomColor">
            <seealso cref="!:ColorModel#isCustomColor()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.#ctor(System.IO.Stream,System.String,SoftArtisans.OfficeWriter.Shared.Configuration)">
            <summary> Creates a new navigator around the input stream and parses the stream for
            a "valid" workbook object and generates the Workbook tree.
            
            </summary>
            <param name="aStream">
            the XLS compound storage file.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.getDefaultExternSheetIndex(System.Boolean)">
            <seealso cref="!:IExternLookup#getDefaultExternSheetIndex(boolean)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.getSheetXtiIndex(System.String)">
            <seealso cref="!:IExternLookup#getSheetXtiIndex(java.lang.String)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.getSheetXtiIndex(System.String,System.String)">
            <seealso cref="!:java.lang.String)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.GetNameAndXtiIndexForExternName(System.Int32,System.String,System.String,System.Int32@,System.Int32@)">
            <summary>
            Find the name and xti index where EXTERNNAME.name == name and SUPBOOK.filename == filename
            </summary>
            <param name="tabIndex"></param>
            <param name="name"></param>
            <param name="filename"></param>
            <param name="nameIndex"></param>
            <param name="xtiIndex"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.CreateExternName(System.String,System.String,System.Int32@,System.Int32@)">
            <summary>
            Make an EXTERNNAME record (and a SUPBOOK if necessary) for the name given
            </summary>
            <param name="name"></param>
            <param name="filename"></param>
            <param name="nameIndex"></param>
            <param name="xtiIndex"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.GetNameIndexOrThrowError(System.String)">
            <seealso cref="!:java.lang.String)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.getXtiAsString(System.Int32)">
            <seealso cref="!:IExternLookup#getXtiAsString(int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.getNameAsString(System.Int32)">
            <seealso cref="!:int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.parseStream">
            <summary> 
            Parses the workbook stream into a parsed Workbook element; the tree is hydrated for now.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.writeXLS(System.IO.Stream)">
            <summary> Writes an entire XLS compound storage to an output stream.
            
            </summary>
            <param name="stream">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.prepareOffsets">
            <throws>  IOException </throws>
            <summary>  
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.createRange(System.String)">
            <param name="rangeFormula">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.getWorksheet(System.Int32)">
            <param name="sheetOffset">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.getFormulaLookup(System.Int32)">
            <param name="worksheetIndex">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.createNamedStyle(System.String)">
            <param name="styleName">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.getNamedStyle(System.String)">
            <param name="styleName">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.insertSplashSheet">
            <param name="workbook">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.createConditionalFormat">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.Interface">
            <returns> an implementation of the Workbook that the user can use on their
            platform. (Java vs .NET)
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.ShowVerticalScrollBar">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.FontsElement">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.NamedStyles">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.CreateExternNames">
            <summary>
            If a name is mentioned in a formula but it doesn't exist, create an extern name for it
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.IsSaving">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel.DefaultSheetPosition">
            <seealso cref="!:IExternLookup#getDefaultSheetPosition()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel">
            <summary> A model of a set of sheets.
            
            </summary>
            <author>  geoffk Jul 7, 2004 11:33:57 AM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorkbookModel,SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementBoundsheets,SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementSheets,SoftArtisans.OfficeWriter.ExcelWriter.Elements.SupbooksElement)">
            <param name="boundsheets">
            </param>
            <param name="sheets">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.handleGridEvent(SoftArtisans.OfficeWriter.ExcelWriter.Observers.GridEvent)">
            <summary> GridObserver method.
            
            </summary>
            <seealso cref="!:GridObserver#handleGridEvent(GridEvent)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.updateOffsets">
            <summary> Updates all of the boundsheet records with the appropriate offsets.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.getWorksheet(System.String)">
            <param name="name">
            </param>
            <returns>
            </returns>
            <throws>  Exception </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.delete(System.Int32)">
            Methods which affect XTI/Position indexing
            <summary> TODO: On delete(), update non-existant calcs with supbook/externsheet
            TODO: On delete(), fix positioning
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.delete(System.String)">
            <param name="name">
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.moveSheet(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel,System.Int32)" -->
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.copySheet(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel,System.Int32,System.String)">
            <param name="sheet">
            </param>
            <param name="position">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.addExternalSheet(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel,System.Int32)">
            <summary> Add a sheet from outside this workbook in the worksheet collection.
            
            </summary>
            <param name="aSheet">
            </param>
            <param name="aPos">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.createSheet(System.String)">
            <summary> Creates a WorksheetModel but does not insert it into the collection.
            
            </summary>
            <param name="aSheetName">
            Name of the new sheet.
            </param>
            <returns> a dangling sheet reference.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.createWorksheet(System.String)">
            <summary> Creates a new worksheet at the end of the collection.
            
            </summary>
            <param name="aSheetName">
            the name of the sheet.
            </param>
            <returns> a new Worksheet.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.createWorksheet(System.String,System.Int32)">
            <summary> Creates a new worksheet at the specified position.
            
            </summary>
            <param name="aSheetName">
            </param>
            <param name="position">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.select(System.Object[])">
            <summary>JAVA </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.insertSheet(System.String,System.Int32)">
            <param name="aName">
            </param>
            <param name="aPosition">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.insertSheet(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel,System.Int32)">
            <summary> Handles inserting a "dangling" new worksheetmodel into the collection.
            
            This method is responsible for firing the SheetInsertedEvent and updating
            the position collection, as well as XTIs if needed.
            
            </summary>
            <param name="aSheet">
            The dangling worksheet - we do not add styles or other things
            external to the sheet itself!
            </param>
            <param name="aPosition">
            The position that the sheet should be inserted at.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.notifyInsertSheetChange(System.Int32)">
            <summary>
            Need to notify the other sheets their position has been 
            changed due to the new sheet that was inserted.  This fix
            will update the print area and titles of all sheets after 
            the insertion point.
            </summary>
            <param name="aPosition"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.notifyMoveSheetChange(System.Int32,System.Int32)">
            <summary>
            Notify for move from oldPosition to newPosition
            </summary>
            <param name="oldPosition"></param>
            <param name="newPosition"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.adjustNamedObjects(System.Int32,System.Int32)">
            <summary>
            Iterate over names, telling them what their new worksheet index is
            </summary>
            <param name="oldWorksheetPosition"></param>
            <param name="newWorksheetPosition"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.updatePositions">
            <summary> Sets the position of every sheet in the correct current order.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.getXTIIndex(System.String,System.String)">
            <param name="aPath">TODO
            </param>
            <param name="sheetName">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.getXtiAsString(System.Int32)">
            <param name="xtiIndex">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.createChartsheet(SoftArtisans.OfficeWriter.ExcelWriter.ChartType,System.String,System.Int32)">
            <param name="aChartType">
            </param>
            <param name="aName">
            </param>
            <param name="aPosition">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.createChartsheet(SoftArtisans.OfficeWriter.ExcelWriter.ChartType,System.String)">
            <param name="aChartType">
            </param>
            <param name="aName">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.Interface">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetsModel.SheetModels">
            <summary> Create the model for sheets (hydrate as needed)</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Observers.GridEvent">
            <summary> Encapsulates all the information about a grid event.</summary>
            <author>  geoffk Nov 10, 2004 1:21:27 PM
            </author>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Observers.GridEvent.Result">
            <returns>
            </returns>
            <param name="i">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Observers.GridEvent.GridEventResult">
            <summary>this class is necessary because a GridEventHandler might need to pass data back up to a handler higher in the heirarchy,
             for instance, if the last row in a NamedRange is deleted, NamedRangeModel has to let WorksheetsModel to change the named range 
             into a named object</summary> 
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Observers.GridEvent.GridEventResult.#ctor(System.Object,SoftArtisans.OfficeWriter.ExcelWriter.Observers.GridEvent.EventResultType)">
            <param name="model">
            </param>
            <param name="range_deleted">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Observers.GridOutlineEvent">
            <summary> 
            </summary>
            <author>  geoffk Nov 10, 2004 2:36:58 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Observers.GridOutlineObserver">
            <summary> <p>GridOutlineObservers get notified when something changes about the
            outline of a worksheet's grid</p>
            Cameron's note: Nothing uses this.
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Observers.PreGridObserver">
            <summary> <p>PreGridObserver is used to notify an interested party that a GridObserver
            event is about to be fired, but that the change driving that event has not
            yet taken place.</p>
            <p>While this may have more general uses, this was created to facilitate
            fixups in Escher.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.BareToken">
            <summary>
            This is a carry-over from older 2.7.3 ANTLR java framework impl.
            Each Token has at least a token type
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.RecordCollectionLexer">
            <summary> 
            <p>RecordCollectionLexer allows the parser to operate over a collection of
            records rather than over a Stream-Navigator-RecordReader combination.</p>
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.RecordLexer">
            <summary> 
            <p>RecordLexer is the standard way to feed the parser with a stream of
            items from binary data using a InputStream-Navigator-RecordReader 
            combination</p>
            <p>As a sidenote, this is really more of a converter between RecordHeaders
            and Tokens than either a parser or scanner, but RecordConverter just 
            would'nt make sence. :)</p>
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordParser._defaultWidth">
            <summary>
            This variable will cache the DEFCOLWIDTH when we find it.
            because it's quite possible that the DEFCOLWIDTH comes well
            before the column records when it's supposed to be right
            before them.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.RecordParserWrapper">
            <summary>
            Allows user to mess with RecordParser without altering the automatically generated class
            
            See commented out sections below for useful debugging functions
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.TokenFactory">
            <p>
            TokenFactory is a singleton class that generates tokens (antlr concept) given a Record (excel) 
            instance or a RecordHeader (excel) instance.
            </p>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.AreaStruct">
            <author>  tkiely
            </author>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.AreaStruct.LastRow">
            <returns>
            </returns>
            <param name="val">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.AreaStruct.LastColumn">
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CellPair.#ctor(System.String,System.Boolean)">
            <summary> Takes a String-style cell ref ("A1") and converts to a pair. </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CellPair.ConvertToNumber(System.String)">
            <summary>Convert an alphabetic column to the corresponding
            1-indexed number. Updated to support an arbitrary
            number of digits for Office 2007 by johne. If
            we ever need to support over 2 billion columns,
            just toss in uints or longs and you'll be fine.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CellPair.ConvertToLetter(System.Int32)">
            <summary>
            Convert a 1-indexed column number to column letters.
            Updated to support an arbitrary number of digits for
            Office 2007 by johne. See above. </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplicationBase">
            <summary> Base class for the ExcelApplication open, save, etc. This is the engine.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplicationBase.xmlDump(System.IO.Stream,System.IO.Stream)">
            <summary>This used to be main() in 3.x, but it was renamed to xmlDump since that seems to be all it does </summary>
            
            @param args
            @throws Exception
            @throws FileNotFoundException
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplicationBase.LicenseReader">
            <param name="reader">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplicationBase.LicenseKeyAsString">
            <summary> The license key, and optionally the current date. Format
            is: XXXXXX-XXXX-XXXX-XXXXXX or: XXXXXX-XXXX-XXXX-XXXXXX DD MM YYYY
            
            </summary>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException"></exception>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ExcelConfiguration.UseRCFormulaNotation_KEY">
            <summary>
            Use a RC notation or not.  Boolean value.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ExcelConfiguration.LicenseKey_KEY">
            <summary>
            License key currently used.  String value.  Set by ExcelApplicationBase.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ExcelConfiguration.CreateExternNames_KEY">
            <summary>
            If a name is mentioned in a formula but it doesn't exist, create an extern name for it
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelConfiguration.CreateExternNames">
            <summary>
            If a name is mentioned in a formula but it doesn't exist, create an extern name for it
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier">
            <author>  ronaldm </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.m_mergedCells">
            <summary>
            NOTE: if you ever change this to a generic Dictionary, be prepared to reconcile a lot of test files
            The MergeCells record contains this data in order of its keys (which is essentially random, but
            deterministically so), so changing to generics will change the order of things in the MERGECELLS
            record, breaking some tests.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel)">
            <summary>
            
            </summary>
            <param name="sheet">The worksheet into which we will be copying data.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.copy(System.Int32,System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel,SoftArtisans.OfficeWriter.ExcelWriter.Model.CopyPastePropertiesModel)">
            <summary>
            This is the main method to do the actual copying of spreadsheet data items
            from the source to the destination.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.checkParameters(System.Int32,System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel,SoftArtisans.OfficeWriter.ExcelWriter.Model.CopyPastePropertiesModel)">
            <summary>
             Checks to make sure that the properties object specifies only data types that are supported
             and checks the source and destination areas to insure we are not violating any constraints.
            
             Side Effects
              Throws an error if any problems are detected.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.checkDestinationAreaBoundaries(System.Int32,System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel)">
            <summary>
            Checks to insure that the specified destination row and column are valid and that
            the size of the area being copied will fit within the bounds of the worksheet.
            Also checks to insure that merged cells and array formulas are fully contained 
            within the destination area.</summary>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.SARuntimeException">if an error condition is detected</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.checkMergedCellContainment(SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel,System.String)">
            <summary>
            Checks to insure that there are no merged cells that extend beyond the boundary
            of the given area.
            </summary>
            <param name="area"></param>
            <param name="areaType"></param>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.SARuntimeException">if there are any merged cells that cross the area boundary.</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.checkArrayFormulaContainment(SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel,System.String)">
            <summary>
            Checks to insure that there are no array formulas or array constants that extend
            beyond the boundary of the given area.
            </summary>
            <param name="area"></param>
            <param name="areaType"></param>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.SARuntimeException">if there is an array that crosses the area boundary.</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.checkPivotTableInArea(SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel,System.String)">
            <summary>
            Checks to see if the given area contains a pivot table.
            </summary>
            <param name="area"></param>
            <param name="areaType"></param>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.SARuntimeException">if there is a pivot table in the given area</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.initializeState(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reset the state to a known, clean condition.
            </summary>
            <param name="baseRow"></param>
            <param name="baseColumn"></param>
            <param name="rowCount"></param>
            <param name="columnCount"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.aggregateMergedCell(SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel,System.Boolean)">
            <summary> Check to see if we need to extend the range of a merged cell.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.setRowAttributes(System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel,System.Int32)">
            <summary>Sets the destination row height and row formatting, if necessary.
            We check first to see if we need to alter these values in the destination.
            This may prevent us from creating empty row records that do not need to exist.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.copyFormula(SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel,System.Int32,System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel,System.String,System.Boolean)">
            <summary>Copy a formula from the source cell to the destination cell.
            If there are any relative references, adjust the cells to which the formula refers, if necessary.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.copyValue(SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel,System.Int32,System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel,SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel,System.Boolean,System.Boolean)">
            <summary>
            Copy the value from the source cell to the destination cell.
            </summary>
            <param name="destCell"></param>
            <param name="destRow"></param>
            <param name="destCol"></param>
            <param name="srcCell"></param>
            <param name="srcArea"></param>
            <param name="copyMergedCells"></param>
            <param name="copyFormatting"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.isMergedCellRoot(SoftArtisans.OfficeWriter.ExcelWriter.Model.ICellModel)">
            <summary>
            Determines whether the specified cell is the upper left-most cell in a merged cell area.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.printCellLocation(System.Int32,System.Int32)">
            <summary>
            Simple method to return a string representation of a cell location on the grid.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.printAreaLocation(SoftArtisans.OfficeWriter.ExcelWriter.Model.AreaModel)">
            <summary>Simple method to return a string of the form "C1n1:C2n2"
            where,
              C1 is the column letter of the first (upper left most) cell in the range
              n1 is the row number of the first (upper left most) cell in the range
              C2 is the column letter of the last (lower right most) cell in the range
              n2 is the row number of the last (lower right most) cell in the range</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.Coordinate">
            <summary>Stores a row and column pair.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.UnbreakableContainmentCheck">
             <summary>
             Iterate over an area and make sure that non-breakable elements, such as merged cells
             and array formulas, are fully contained within the area.
             
             This class implements the template method pattern.  Sub-class are responsible for
             implementing the 3 methods to which the main algorithm delegates lookup features.
            
             </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.UnbreakableContainmentCheck.fullyContains">
            <summary>
            Main algorithm that checks for non-breakable items that cross the area boundaries.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.UnbreakableContainmentCheck.isEdgeCellOkay(System.Int32,System.Int32)">
            <summary>
             Helper method to check if the given cell exists and is of the unbreakable type.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.MergedCellContainmentCheck">
            <summary>
            Extends ABC UnbreakableContainmentCheck.  The template method in the base class
            delegates lookups to this subclass.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.ArrayContainmentCheck">
            <summary>Extends ABC UnbreakableContainmentCheck.  The template method in the base class
            delegates lookups to this subclass.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.FontCache">
            <summary>
            Implements the flyweight pattern. We want to cache fonts that we create as a result
            of copying cell values with rich text formatting so we don't end up creating multiple
            copies of the same style.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.StyleCache">
            <summary>Implements the flyweight pattern.  We want to cache styles that we use so that we don't
            end up creating many copies of the same style in the destination workbook.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.StyleCache.getStyleCache(SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel)">
            <summary>
             Get the one and only copy of the cache for the given worksheet.
            </summary>
            <param name="worksheet"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.StyleAccessor">
            <summary>
            Interface for adapters that will allow us to uniformly access the style of various objects.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.RowStyleAccessor">
            <summary>Class implementing the StyleAccessor interface.
            Allows us to get the style of a row model.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.ColumnStyleAccessor">
            <summary>Class implementing the StyleAccessor interface.
            Allows us to get the style of a column model.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.CellStyleAccessor">
            <summary> Class implementing the StyleAccessor interface.
            Allows us to get the style of a cell model.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ExternDataCopier.FormulaSheetNameParsingError">
            <summary>
            Used for signalling that the formula parsing went wrong somewhere
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.PatternHelper">
            <summary>
            See MS-XLS 2.4.3 for a vague description of how fill patterns work.
            
            Basically, there's an index in the AreaFormat record which informs which group of fill patterns you're
            using. If that index is 0 or 1 (None or Solid), that's all the information you need, but otherwise
            you need a GelFrame record afterwards, which contains an EscherSubrecordOPT, which contains a bunch
            of properties.
            
            One of those properties, Fill_Blip, contains a small image of the fill pattern you want to use. To set
            the pattern, you need to set both the index in AreaFormat and the fill pattern image (see OWD-775).
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Model.PatternHelper.numPatterns">
            <summary>
            The number of patterns
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Model.PatternHelper.patternBlips">
            <summary>
            These are ordered in the same order as the Pattern.InternalEnum enums are.
            NOTE: Solid and None will have null values here
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.PatternHelper.GetPatternIndex(SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern)">
            <summary>
            Get the pattern index used in AREAFORMAT for the particular pattern. See MS-XLS 2.4.3 for these values
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.PatternHelper.GetPattern(System.Int16,SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordBlipBitmap)">
            <summary>
            See MS-XLS 2.4.3 for information on possible values
            </summary>
            <param name="areaFormatIndex"></param>
            <param name="fillPattern"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.PatternHelper.SetPattern(SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern,SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordAREAFORMAT,SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementGelFrame)">
            <summary>
            Given the patternType, set the pattern index in AREAFORMAT and (if necessary) the blip in GELFRAME
            </summary>
            <param name="patternType"></param>
            <param name="recordAreaformat"></param>
            <param name="recordGelframe"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.PatternHelper.GetPatternName(System.SByte[])">
            <summary>
            Get the pattern name for the MD4 id
            </summary>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.PatternHelper.AreaFormatIndex">
            <summary>
            Possible values of fls field
            in AREAFORMAT
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.PatternHelper.MsoFillType">
            <summary>
            NOTE: the numbers here are significant, so these must remain in order
            
            Possible values of the Fill_Type Escher OPT entry
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.UpdateableRange.copy">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.CommentShapeModel">
            <summary> <p>
            CommentShapeModel is a type of ShapeModel that deals specifically with
            comments
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.CommentShapesModel">
            <summary> <p>Comments model is responsible for managing all the comments associated 
            with a worksheet.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CommentShapesModel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Model.ShapesModel,SoftArtisans.OfficeWriter.ExcelWriter.Elements.ElementNotes)">
            <summary> Create a new CommentShapesModel with the specified DrawingModel and 
            ElementNotes for the worksheet
            </summary>
            <param name="aDrawingModel">the drawing model for the worksheet
            </param>
            <param name="aElementNotes">the ElementNotes for the worksheet
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CommentShapesModel.Get(System.Int32,System.Int32)">
            <summary> Returns the CommentShapeModel at the specified Row and Column 
            coordinates.  If no such CommentShapeModel exists, a new 
            CommentShapeModel will be created and returned
            </summary>
            <param name="row">the Row of the comment (0 based)
            </param>
            <param name="col">the Column of the comment (0 based)
            </param>
            <returns> the comment at the row and column or a new comment if no such
            comment exists
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CommentShapesModel.getKey(System.Int32,System.Int32)">
            <summary> Returns the key used in mCommentModels for storing comments</summary>
            <param name="row">the row
            </param>
            <param name="col">the column
            </param>
            <returns> the key used to store or lookup items in mCommentModels
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CommentShapesModel.HasComment(System.Int32,System.Int32)">
            <summary> Returns whether a comment exists at the specified row and column 
            coordinates.
            </summary>
            <param name="row">the row to check (0 based)
            </param>
            <param name="col">the column to check (0 based)
            </param>
            <returns> true if a comment exists at the specified location and false 
            otherwise
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CommentShapesModel.CreateCommentModel(System.Int32,System.Int32)">
            <summary> Creates a comment at the specified location.  If a comment already
            exists at that location, a new IllegalArgumentException will be thrown 
            </summary>
            <param name="row">the row for the new comment (0 based)
            </param>
            <param name="col">the column for the new comment (0 based)
            </param>
            <returns> the newly created CommentShapeModel
            </returns>
            <throws>  IllegalArgumentException if a comment already exists for that </throws>
            <summary> row and column location.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.CommentShapesModel.Remove(System.Int32,System.Int32)">
            <summary> Removes the comment at the specified row and column coordinates.  If
            no such column exists, this method does nothing.
            </summary>
            <param name="aRow">the row coordinate
            </param>
            <param name="aCol">the column coordinate
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.DrawingModel">
            <summary> DrawingModel is a model level only construct that handles interaction 
            between API level constructs (such as Shapes or Groups) and the Element
            level constructs such as DrawingGroupElement and DrawingElement.
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.DrawingModel.Remove(SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherSubelementShapeGroup,SoftArtisans.OfficeWriter.ExcelWriter.Model.ShapeModel)">
            <summary> Reports the removal of a shape from this drawing.  This method must
            be called to fixup the ids in both the drawing and the MSODRAWINGGROUP
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.DrawingModel.registerDrawings">
            <summary> Method to be called only after a sheet is copied and inserted.  This
            method will traverse the entire escher layer managed by this 
            DrawingModel and regenerate the ID for each drawing and shape to ensure
            they are consistant with the data in the DrawingGroup 
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherAnchor">
            <summary> <p>Common model level representation of an anchor used to position an
            escher object on a worksheet grid, chart/chartsheet, or within another
            escher object.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherAnchor.createAnchor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecord,SoftArtisans.OfficeWriter.ExcelWriter.Model.WorksheetModel)">
            <summary> Factory method for EscherAnchors.  Based on the type of anchor subrecord
            and WorksheetModel, the approprate subclass of EscherAnchor will be
            created
            </summary>
            <param name="aAnchor">the anchor subrecord
            </param>
            <param name="aWorksheet">the worksheet/chartsheet model
            </param>
            <returns> an EscherAnchor of the approprate type
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherChildAnchor">
            <summary> <p>
            This class is a placeholder for now with no real functionality. If it later
            becomes necessary to support grouping, this class will have to be implemented
            fully.
            </p>
            <p>
            In excel, a ChildAnchor holds the top left and bottom right coordinates of
            the shape in pixels from the top left corner of the excel worksheet. However,
            these coordinates must be within the bounds of the group as defined in the
            SPGR subrecord of a SPCONTAINER.
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherChildAnchor.setPosition(SoftArtisans.OfficeWriter.ExcelWriter.Model.AnchorModel)">
            <seealso cref="!:EscherAnchor#setPosition(Anchor)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherChildAnchor.getPosition">
            <seealso cref="!:EscherAnchor#getPosition()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherChildAnchor.handleGridEvent(SoftArtisans.OfficeWriter.ExcelWriter.Observers.GridEvent)">
            <seealso cref="!:GridObserver#handleGridEvent(GridEvent)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherChildAnchor.Width">
            <seealso cref="!:EscherAnchor#getWidth()">
            </seealso>
            <seealso cref="!:EscherAnchor#setWidth(double)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherChildAnchor.Height">
            <seealso cref="!:EscherAnchor#getHeight()">
            </seealso>
            <seealso cref="!:EscherAnchor#setHeight(double)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherChildAnchor.ObjectPositioning">
            <seealso cref="!:EscherAnchor#getObjectPositioning()">
            </seealso>
            <seealso cref="!:EscherAnchor#setObjectPositioning(ObjectPositioning)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchor">
            <summary> Model level abstraction of the common functionality needed to interperte 
            CLIENTANCHOR subrecords on both Worksheet/Grid and Chart/Chartsheet. 
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchor.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.EscherSubrecordCLIENTANCHOR)">
            <summary> Constructs a new EscherClientAnchor</summary>
            <param name="aAnchorSubrec">the CLIENTANCHOR subrecord
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchor.ObjectPositioning">
            <seealso cref="!:EscherAnchor#getObjectPositioning()">
            </seealso>
            <seealso cref="!:EscherAnchor#setObjectPositioning(ObjectPositioning)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorChart">
            <summary> Manages size and position for an escher object that has a CLIENTANCHOR, but
            which resides on a CHARTSHEET (or chart).  Rather than using interperting
            the CLIENTANCHOR as grid references, this class interperts CLIENTANCHOR as
            coordinates in units of 1/4000th of the ChartArea.
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorChart.convertFromPercentage(System.Double)">
            <summary> Helper method to convert a percentage of the chart's area (0-100) into
            units of 1/4000ths of the chart area (0-4000).
            </summary>
            <param name="aPercentage">Percent of the chart's area 0-100
            </param>
            <returns> the percentage as units of 1/4000th of the chart area (0-4000)
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorChart.convertToPercentage(System.Int32)">
            <summary> Helper method to convert from units of 1/4000th of the chart area into
            a percentage of the chart area (0-100).  
            </summary>
            <param name="aFourThousandths">the value in 1/4000th (0-4000) of the chart area
            </param>
            <returns> the percentage
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorChart.handleGridEvent(SoftArtisans.OfficeWriter.ExcelWriter.Observers.GridEvent)">
            <seealso cref="!:GridObserver#handleGridEvent(GridEvent)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorChart.Width">
            <seealso cref="!:EscherAnchor#getWidth()">
            </seealso>
            <seealso cref="!:EscherAnchor#setWidth(double)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorChart.Height">
            <seealso cref="!:EscherAnchor#getHeight()">
            </seealso>
            <seealso cref="!:EscherAnchor#setHeight(double)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid">
            <summary>
            Controls how elements are resized relative to the grid under them
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.getPosition">
            <summary> Returns an Anchor representing the coordinates of the top left corner of
            this Shape.
            </summary>
            <returns> an Anchor representing the coordinates of the top left corner of
            this Shape.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.setPosition(SoftArtisans.OfficeWriter.ExcelWriter.Model.AnchorModel)">
            <summary>
            Set the position in two dimensions. Will also adjust end anchor positions according to Width and Height
            </summary>
            <param name="aPosition">new starting position</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.setPosition(System.Int32,System.Double,SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.DimensionIterator)">
            <summary>
            Set the position in one dimension. Will also adjust end anchor position according to Width or Height
            </summary>
            <param name="index">the column or row number</param>
            <param name="frac">the percent of the row or column. This is from 0 to 100</param>
            <param name="iterator">The DimensionIterator. This determines whether to
            treat it as a column or row</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.recalculateEndFromStartAndSize(SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.GridLocation,SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.DimensionIterator)">
            <summary>
            End position is relative to a column and percentage in the column. Recalculate to be
            some width or height from start
            </summary>
            <param name="start">starting position</param>
            <param name="iterator">either a RowIterator or ColumnIterator. 
            This determines whether to treat as a row or column</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.recalculateEndFromStartAndSize(SoftArtisans.OfficeWriter.ExcelWriter.Model.AnchorModel,SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.RowIterator,SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.ColumnIterator)">
            <summary>
            End position is relative to a column and percentage in the column. Recalculate to be
            some width and height from start. Do for both dimensions
            </summary>
            <param name="position"></param>
            <param name="rowIterator"></param>
            <param name="columnIterator"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.recalculateSizeFromStartAndEnd(SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.GridLocation,SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.GridLocation,SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.DimensionIterator)">
            <summary>
            Start and end are correct, but now the Width or Height is wrong. Recalculate
            that variable
            </summary>
            <param name="start">starting position</param>
            <param name="end">ending position</param>
            <param name="iterator">RowIterator or ColumnIterator. 
            Determines whether to treat as a column or row</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.addOrRemoveDimension(System.Int32,System.Int32,System.Double,SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.DimensionIterator)">
            <summary>
            See table on top for explanation of this. Information is also in confluence;
            search for EscherClientAnchorGrid
            
            Figure out what to do when a column or row is added or removed
            </summary>
            <param name="index">the index to add columns or rows</param>
            <param name="count">the number of rows added or subtracted. If subtracted, this is less than 0</param>
            <param name="distanceAdded">The number of points that were added 
            or removed. This should be greater than 0</param>
            <param name="iterator">a RowIterator or a ColumnIterator. This tells
            whiat kind of dimensions we are talking about</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.removeRow(SoftArtisans.OfficeWriter.ExcelWriter.Observers.GridSubject,System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Model.RowModel)">
            <seealso cref="!:RowModel)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.recalculateStartAndEndWithShift(SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.GridLocation,System.Double,SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.DimensionIterator)">
            <summary>
            We know how many points off the anchor is; adjust it back to its correct position
            </summary>
            <param name="oldPosition">The old incorrect position</param>
            <param name="distanceAdded">The correct position + this == old position</param>
            <param name="iterator">A ColumnIterator or a RowIterator</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.shiftGridLocation(SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.GridLocation,System.Double,SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.DimensionIterator)">
            <summary> Returns a GridLocation derived from shifting aStart by aOffset.  </summary>
            <param name="aStart">the starting point
            </param>
            <param name="aOffset">the amount to shift the starting point by in points
            </param>
            <param name="aDimIt">provides access to the width of grid items (Row or column)
            </param>
            <returns> a new GridLocation containing aStart shifted by aOffset
            </returns>
            <seealso cref="!:TestShiftGridLocation"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.calculateDistance(SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.GridLocation,SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.GridLocation,SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.DimensionIterator)">
            <summary> Calculates the distance between two coordinates on the grid using the
            specified DimensionIterator to supply the dimension of items (in points)
            making up the grid.
            </summary>
            <param name="coord1">the first coordinate
            </param>
            <param name="coord2">the second coordinate
            </param>
            <param name="dimIt">the DimensionIterator
            </param>
            <returns> the distance between coord1 and coord2 in points
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.Width">
            <summary>
            says whether to shift as if this was an autofilter. Usually autofilter shapes
            call handleGridEventWithMoveAndResizeEnabled()
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.GridLocation">
            <summary>
            An anchor location. Make sure fractional part is 0 to 1
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.GridLocation.mIntPart">
            <summary>
            The column number
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.GridLocation.mFractionPart">
            <summary>
            Percentage of a column, from 0.0 to 1.0
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.DimensionIterator">
            <summary>
            Something which describes how to convert columns or rows into points
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.DimensionIterator.getDimension(System.Int32)">
            <summary> Returns the dimension of the item with the specified index or -1
            if the specified index is invalid
            </summary>
            <param name="aIndex">the index of the item to dimension
            </param>
            <returns> the dimension of the item with the specified index or -1
            if the specified index is invalid
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.DimensionIterator.DefaultDimension">
            <summary> Returns the default dimension for this iterator </summary>
            <returns> the default demension for this iterator
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.RowIterator">
            <summary>
            Convert row number + percent to points
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.RowIterator.getDimension(System.Int32)">
            <seealso cref="!:ShapeModel.DimensionIterator#getDimension(int)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.ColumnIterator">
            <summary>
            Convert column number + percent into points
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherClientAnchorGrid.ColumnIterator.getDimension(System.Int32)">
            <seealso cref="!:ShapeModel.DimensionIterator#getDimension(int)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.EscherColorModel">
            <summary> <p>EscherColorModel is a wrapper for an MsoOptEntryColor that implements
            the Color interface defined in the ExcelWriter Application API</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.GroupShapeModel">
            <summary> A group model Manages a group of shapes.  Groups are themselves shapes, 
            but with a more limited property set.
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.GroupShapesModel">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.HeaderFooterPictureShapeModel">
            <summary>
            This class represents a picture in a header/footer section
            It inherits from the PictureShapeModel, but handles some specifics differently
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.PictureShapeModel">
            <summary> <p>Model level construct for Shapes containing BLIP (picture) data.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.HeaderFooterPictureShapeModel.initializeNewShape(SoftArtisans.OfficeWriter.ExcelWriter.ShapeType,System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Model.AnchorModel)">
            <summary>
            Initialize a new shape for HFPicture
            </summary>
            <param name="type"></param>
            <param name="id"></param>
            <param name="position">HFPicture have no anchor, so we will ignore this param</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.HeaderFooterPictureShapeModel.setGroupName(System.String)">
            <summary>
            Sets the group name OPT which ultimatly indicates which header/footer section this picture goes to
            </summary>
            <param name="groupName"></param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.HeaderFooterPictureShapeModel.Height">
            <summary>
            This is the Height in *pixels* not in twips like other pictures!
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Model.HeaderFooterPictureShapeModel.Width">
            <summary>
            This is the Width in *pixels* not in twips like other pictures!
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.PictureDataHandler">
            <summary> <p>PictureDataHandler provides a simple wrapper over a picture data stream
            to handle determining the type of picture from the contents of the stream.
            If the type is not a supported type, this class will attempt to convert it
            to a supported type.  If that doesn't work it just give up and ThingsGoBoom!
            </p>
            
            <p>The guts of this is happily (and shamelessly) stolen from Ryan's 
            PictureDescriptor.java.  While this is kind of cool, it stupid that we
            have to write this rather than just using a library...</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.PictureDataHandler.getBigEndian(System.SByte[],System.Int32,System.Int32)">
            <summary> Used to get a big endian number from a byte array
            
            </summary>
            <param name="buf">The byte array to read from.
            </param>
            <param name="offset">The offset in the byte array to starting reading from.
            </param>
            <param name="width">The integer width in bytes.
            </param>
            <returns> An integer representing the big endian number.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.PictureDataHandler.findSubArray(System.SByte[],System.SByte[],System.Int32)">
            <summary> Used to verify that the mImgData array contains the sub array 
            magicNum at the offset start 
            
            </summary>
            <param name="magicNum">The byte array to look for in mImgData.
            </param>
            <param name="start">The place to s
            </param>
            <returns> true if the magicNum exists at offset start in mImgData.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.PictureShapesModel">
            <summary> <p>PictureShapesModel manages the pictures within a workbook.</p>
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.PictureShapesModel.CreatePicture(System.IO.Stream,SoftArtisans.OfficeWriter.ExcelWriter.Model.AnchorModel)">
            <param name="aPictureStream">
            </param>
            <param name="aPosition">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.ShapesModel">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ShapesModel.Clear">
            <summary> Properly deletes all the shapes in this ShapesModel</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ShapesModel.Get(System.Int32)">
            <summary> Returns the shape in this collection having the specified ObjId or null
            if no shape has the specified objId
            
            </summary>
            <param name="aObjId">
            the objId to look for
            </param>
            <returns> the shape with the specified ObjId or null if no such shape
            exists
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Model.ShapesModel.Remove(System.Int32)">
            <summary> Removes the shape with the specified ObjID. The removed shape is
            returned, or null if no such shape existed.
            
            </summary>
            <param name="aObjId">
            the objId of the shape to remove
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.SimpleShapeModel">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Model.SimpleShapesModel">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ObjSubelement">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ObjSubelementRoot">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ObjSubelementRoot.#ctor">
            <summary> Default constructor.  Should only becalled from parser.
            
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ObjSubelementRoot.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjType,System.Int32)">
            <summary> Constructor to initialize a new set of ObjSubrecords using for the
            specified type and ObjId.
            </summary>
            <param name="aType">
            </param>
            <param name="aObjId">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ObjSubelementRoot.addCMO(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ObjSubelementSubrecordHandler)">
            <param name="object">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ObjSubelementRoot.addUnknown(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ObjSubelementUnknown)">
            <param name="unk">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ObjSubelementRoot.addEND(SoftArtisans.OfficeWriter.ExcelWriter.Elements.ObjSubelementSubrecordHandler)">
            <param name="end">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ObjSubelementRoot.calcSize">
            <seealso cref="!:EscherPlaceholder#calcSize()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ObjSubelementSubrecordHandler">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ObjSubelementSubrecordHandler.write(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:Subelement#write(TreeDehydrator)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.ObjSubelementUnknown">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecord">
            <summary> ObjSubrecord is the base class for all subrecords that may be found in an
            OBJ Excel record.
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecord.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordHeader)">
            <summary> Construct a new Subrecord from the specified header</summary>
            <param name="aHeader">the header
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecord.copy">
            <seealso cref="!:Subrecord#copy()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecord.copyDataTo(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecord)">
            <summary> Copies the body data of this ObjSubrecord into the specified 
            ObjSubrecord. 
            </summary>
            <param name="aSubrec">the ObjSubrecord to copy this subrecord's data into
            </param>
            <returns> aSubrec after this subrecord's data has been copied into it
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecord.write(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:Subrecord#write(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecord.writeData(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <summary> Writes the data in the body of this ObjSubrecord to the specified 
            buffer.
            </summary>
            <param name="aBuff">the buffer to write data to
            </param>
            <throws>  IOException if an exception occurs writing data </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecord.updateSubrecordHeader(System.Int32)">
            <seealso cref="!:Subrecord#updateSubrecordHeader(int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecord.initializeData(System.SByte[],System.Int32)">
            <summary> Initialize the data fields for the subrecord from the specified buffer
            starting at the specified offset.
            </summary>
            <param name="aBuff">the buffer to initialize data from
            </param>
            <param name="aOffset">the offset withing aBuff to start from.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecord.createObjSubrecord(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordHeader)">
            <summary> Factory method for creating ObjSubrecords.  An ObjSubrecord of the
            propert type will be created using the specified header.  If the
            type specified by the header is unknown or unimplemented, then 
            a new ObjSubrecordUnknown will be created.
            </summary>
            <param name="aHeader">the header to use when creating the ObjSubrecord
            </param>
            <returns> a new ObjSubrecord of the proper type for the specified header
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecord.Type">
            <summary> Returns the type of ObjSubrecord</summary>
            <returns> the type of ObjSubrecord
            </returns>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordTypes">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecord.HeaderSize">
            <seealso cref="!:Subrecord#getHeaderSize()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordCMO">
            <summary> The CMO record holds the common data for all Excel Obj records.
            It is always the first subrecord of an Obj record.
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordCMO.mObjType">
            <summary> The Object type the Excel Obj record represents.  This 
            should not be confused with the ObjSubrecordType in the header
            which describes the type of subrecord
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordCMO.mObjId">
            <summary> The ID of the object. </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordCMO.mGrbit">
            <summary>  Options fields.  See the bitmasks.</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordCMO.mReserved">
            <summary> Acording to the book, this should be all 0's.  However, its not.
            We'll have to see what it actually contains....
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordCMO.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordHeader)">
            <summary> Create a new CMO subrecord with the specified header.  The data fields
            will be blank, but will have invalid values.  Set each field manually
            using the setter methods or initialize the data from an array of
            bytes using the {@link #initalizeData(byte[], int)} method.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordCMO.initializeData(System.SByte[],System.Int32)">
            <summary> Extract member data from the specified buffer</summary>
            <param name="aBuff">the buffer to extract data from
            </param>
            <param name="aOffset">the starting offset for this subrecord's data
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordCMO.writeData(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:ObjSubrecord#writeData(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordCMO.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:Subrecord#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordCMO.Locked">
            <summary> Returns whether or not this object is locked when the sheet is 
            protected.
            </summary>
            <returns> whether or not this object is locked when the sheet is 
            protected.
            </returns>
            <summary> Sets whether or not this object is locked when the sheet is 
            protected. 
            </summary>
            <param name="aValue">whether or not this object is locked when the sheet is 
            protected.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordCMO.Printable">
            <summary> Returns whether or not this object is printable</summary>
            <returns> whether or not this object is printable
            </returns>
            <summary> Sets whether or not this object is printable</summary>
            <param name="aValue">whether or not this object is printable
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordCMO.AutoFill">
            <summary> Returns whether or not this object uses automatic fill style</summary>
            <returns> whether or not this object uses automatic fill style
            </returns>
            <summary> Sets whether or not this object uses automatic fill style</summary>
            <param name="aValue">whether or not this object uses automatic fill style
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordCMO.AutoLine">
            <summary> Returns whether or not this object uses automatic line style</summary>
            <returns> whether or not this object uses automatic line style
            </returns>
            <summary> Sets whether or not this object uses automatic line style</summary>
            <param name="aValue">whether or not this object uses automatic line style
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordEND">
            <summary> <p>ObjSubrecordEND marks the end of a series of ObjSubrecords within an Excel
            OBJ record. ObjSubrecordEND holds no data.</p>
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordEND.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordHeader)">
            <summary> Construct a new ObjSubrecordEND from the specified header</summary>
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordEND.copyDataTo(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecord)">
            <seealso cref="!:ObjSubrecord#copyDataTo(ObjSubrecord)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordEND.writeData(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:ObjSubrecord#writeData(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordEND.initializeData(System.SByte[],System.Int32)">
            <seealso cref="!:int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordEND.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:Subrecord#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordEND.DataSize">
            <seealso cref="!:Subrecord#getDataSize()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordHeader">
            <summary> <p>ObjSubrecordHeader encapsulates the standard header for subrecords within an
            OBJ Excel record.  This header is identical to the header used on regular
            Excel records.  The standard header class was not used so that this header
            could have specific methods to deal with the structure of subrecords and to
            prevent confusion.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordHeader.HEADER_SIZE">
            <summary> The size of an ObjSubrecordHeader in bytes.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordHeader.#ctor(System.SByte[],System.Int32)">
            <summary> Construct a new ObjSubrecordHeader and initialize it from the
            specified buffer begining at the specified offset.
            </summary>
            <param name="aBuff">the buffer containing the header data
            </param>
            <param name="aOffset">the offset within aBuff to begin reading header data
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordHeader.#ctor(System.Int32,System.Int32)">
            <summary> Construct a new ObjSubrecordHeader with the specified type and size.</summary>
            <param name="aType">the type of ObjSubrecord
            </param>
            <param name="aSize">the size of the ObjSubrecord
            </param>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordTypes">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordHeader.init(System.SByte[],System.Int32)">
            <summary> Initialize the data in this header from the specified buffer begining
            at the specified offset.
            </summary>
            <param name="aBuff">the buffer containing header data
            </param>
            <param name="aOffset">the offset to begin reading within aBuff
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordHeader.writeHeader(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <summary> Write the header to the specified buffer</summary>
            <param name="aBuff">the buffer to write to
            </param>
            <throws>  IOException if an exception occurs while writing the header </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordHeader.copy">
            <summary> Create an exact, deep clone of this header.</summary>
            <returns> a copy of this header
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordHeader.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <summary> Write a structured representation of this header to the specified
            StructuredOutputHandler
            </summary>
            <param name="aHandler">the handler to write structured output to
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordHeader.ToString">
            <seealso cref="!:java.lang.Object#toString()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordHeader.Type">
            <summary> Returns the type of ObjSubrecord this header is for</summary>
            <returns> the type of ObjSubrecord this header is for
            </returns>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordTypes">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordHeader.Size">
            <summary> Returns the size of the ObjSubrecord this header is for</summary>
            <returns> the size of the ObjSubrecord this header is for
            </returns>
            <summary> Sets the size of the ObjSubrecord this header is for</summary>
            <param name="aSize">the size of the ObjSubrecord this header is for
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordUnknown">
            <summary> <p>ObjSubrecordUnknown represents an ObjSubrecord that has not been 
            implemented or is unknown</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordUnknown.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordHeader)">
            <summary> Construct a new ObjSubrecordUnknown with the specified header.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordUnknown.initializeData(System.SByte[],System.Int32)">
            <seealso cref="!:int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordUnknown.writeData(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:ObjSubrecord#writeData(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordUnknown.copyDataTo(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecord)">
            <seealso cref="!:ObjSubrecord#copyDataTo(ObjSubrecord)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordUnknown.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:Subrecord#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordUnknown.DataSize">
            <seealso cref="!:Subrecord#getDataSize()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordReader">
            <summary> <p>ObjSubrecordReader is responsible for extracting a sequence of 
            ObjSubrecords from a byte[]</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordReader.#ctor(System.SByte[])">
            <summary> Construct a new ObjSubrecordReader to read subrecords from the specified
            buffer.
            </summary>
            <param name="aBuff">the byte[] containing subrecord data.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordReader.nextSubrecord">
            <summary> Returns the next subrecord from the buffer. {@link #hasNext()} should
            be called before calling this method to check if more subrecords are
            avaiable.
            </summary>
            <returns> the next subrecord from the buffer.
            </returns>
            <throws>  SARuntimeException if there are no more subrecords left </throws>
            <summary> in the buffer
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordReader.hasNext">
            <summary> Returns <code>true</code> if more {@link #nextSubrecord()} will return
            an ObjSubrecord rather than throw an exception and <code>false</code> 
            otherwise.
            </summary>
            <returns> <code>true</code> if the buffer contains more subrecords and
            <code>false</code> otherwise.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordScanner">
            <summary> <p>ObjSubrecordScanner takes a sequence of ObjSubrecords returned by an
            {@link ObjSubrecordReader} and translates them into a sequence of Symbols
            that Cup generated parsers can understand.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordScanner.#ctor(SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordReader)">
            <summary> Construct a new scanner to read from the specified reader.</summary>
            <param name="aReader">the reader to get subrecords from
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordScanner.next_token">
            <seealso cref="!:Scanner#next_token()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordScanner.LookupTable">
            <summary> <p>Handles mapping ObjSubrecordTypes onto EscherSymbols</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjSubrecordTypes">
            <summary> <p>Holds all the different types of ObjSubrecords.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjType">
            <summary> <p>Type safe enum class holding all the different types of Objects specified
            by Obj records</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherPlaceholderElement">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Elements.EscherPlaceholderElement.copy">
            <seealso cref="!:Element#copy()">
            </seealso>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.ObjSubrecordParser.ObjSubrecordParser.ErrorOutput">
            error output stream.
                  It should be changeable.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.ObjSubrecordParser.ObjSubrecordParser.yyerror(System.String)">
            simplified error message.
                  @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.ObjSubrecordParser.ObjSubrecordParser.yyerror(System.String,System.String[])">
            (syntax) error message.
                  Can be overwritten to control message format.
                  @param message text to be displayed.
                  @param expected vector of acceptable tokens, if available.
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.ObjSubrecordParser.ObjSubrecordParser.yyFinal">
            debugging support, requires the package jay.yydebug.
                  Set to null to suppress debugging messages.
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.ObjSubrecordParser.ObjSubrecordParser.yyExpectingState">
            index-checked interface to yyNames[].
                  @param token single character or %token value.
                  @return token name or [illegal] or [unknown].
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.ObjSubrecordParser.ObjSubrecordParser.yyExpectingTokens(System.Int32)">
            computes list of expected tokens on error by tracing the tables.
                  @param state for which to compute the list.
                  @return list of token names.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.ObjSubrecordParser.ObjSubrecordParser.yyparse(SoftArtisans.OfficeWriter.ExcelWriter.ParserBase,System.Object)">
            the generated parser, with debugging messages.
                  Maintains a state and a value stack, currently with fixed maximum size.
                  @param yyLex scanner.
                  @param yydebug debug message writer implementing yyDebug, or null.
                  @return result of the last reduction, if any.
                  @throws yyException on irrecoverable parse error.
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.ObjSubrecordParser.ObjSubrecordParser.yyMax">
            initial size and increment of the state/value stack [default 256].
                  This is not final so that it can be overwritten outside of invocations
                  of yyparse().
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.ObjSubrecordParser.ObjSubrecordParser.yyDefault(System.Object)">
            executed at the beginning of a reduce action.
                  Used as $$ = yyDefault($1), prior to the user-specified action, if any.
                  Can be overwritten to provide deep copy, etc.
                  @param first value for $1, or null.
                  @return first.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.ObjSubrecordParser.ObjSubrecordParser.yyparse(SoftArtisans.OfficeWriter.ExcelWriter.ParserBase)">
            the generated parser.
                  Maintains a state and a value stack, currently with fixed maximum size.
                  @param yyLex scanner.
                  @return result of the last reduction, if any.
                  @throws yyException on irrecoverable parse error.
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.ObjSubrecordParser.yyParser.yyException">
            thrown for irrecoverable syntax errors and stack overflow.
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.TreeActionMaxObjId">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.TreeActionMaxObjId.doActionPre(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <seealso cref="!:ITreeAction#doActionPre(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.TreeActionMaxObjId.doActionPost(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <seealso cref="!:ITreeAction#doActionPost(Element)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.TreeActionReallocateIds">
            <author>  johnv
            
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.TreeActionReallocateIds.mIdMap">
            <summary> Map[OldId->NewId]</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.TreeActionReallocateIds.doActionPre(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <seealso cref="!:ITreeAction#doActionPre(Element)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.TreeActionReallocateIds.doActionPost(SoftArtisans.OfficeWriter.ExcelWriter.Elements.Element)">
            <seealso cref="!:ITreeAction#doActionPost(Element)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.XLWEscherTreeDehydrator">
            <summary> <p>
            TreeDehydrator is responsible for taking a Tree of MsoSubelements and
            converting it back into Excel records. The strange nature of the Escher
            records (ie. a 'continuous' MSODRAWING record broken up by ClientData excel
            records) means that the tree of MsoSubelements contains hetrogenious data
            (data that should be in an MSODRAWING record is side by side with data that
            should be in an OBJ record or data that is a TXO record). The situation is
            further complicated because the MsoSubrecords have no knowledge that they are
            in seperate records. Specifically, container MsoSubrecords may span multiple
            excel MSODRAWING records.
            </p>
            <p>
            In order to take this data and convert it back into records, the tree must be
            traversed twice. First, each subrecord (or TXO record) must register both its
            presence and size with the TreeDehydrator. This allows the TreeDehydrator to
            setup the proper sequence of records and their respective sizes. Second, each
            subrecord must request a buffer for the proper type of Subrecord from the
            TreeDehydrator. Additionally, any other records that fall into the sequence
            of records must be added during this phase to preserve record order. During
            the second phase, records that are too large will be broken up into CONTINUE
            records
            </p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.XLWEscherTreeDehydrator.mOutputElements">
            <summary> Holds the finished elements in the correct order</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.XLWEscherTreeDehydrator.mCurRecord">
            <summary> Holds the current record being writen to or sized</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.XLWEscherTreeDehydrator.#ctor(System.Int16)">
            <summary> Construct a new TreeDehydrator.</summary>
            <param name="aMsoRecId">the Excel record if of the MSO record that will be
            handled by this dehydrator (either MSODRAWINGGROUP or
            MSODRAWING)
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.XLWEscherTreeDehydrator.doReadContextSwitch(System.Int16)">
            <summary> Helper method to handle context switches (switches between different
            record types) during the reading, or size reporting, phase.
            </summary>
            <param name="aContextId">the context Id to switch to. This must be a registered
            contextId. -1 may also be passed to switch to an invalid
            context if an entire record is being reported.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.XLWEscherTreeDehydrator.doWriteContextSwitch(System.Int16)">
            <summary> Helper method to handle context switches during the write phase.</summary>
            <param name="aContextId">the context Id to switch to
            </param>
            <throws>  IOException if there is a problem setting up the write state </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.XLWEscherTreeDehydrator.prepCurrentRecordForOutput">
            <summary> This method prepares the current record for output by associating the
            buffer with the record, chopping the record into continue records if its
            too long, and adding the resulting records to the output records.
            </summary>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.XLWEscherTreeDehydrator.initializeHFPicture(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHFPicture,System.Boolean)">
            <summary>
            We need to set to the HFPicture that it is of type MsoDrawing and is a continue 
            (since the HFPicture record is the same for MsoDrawing, MsoDrawingGroup and Continue)
            </summary>
            <param name="rec"></param>
            <param name="fContinue"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.XLWEscherTreeDehydrator.reportSubrecordSize(System.Int16,System.Int32)">
            <summary> Reports the size of a subrecord for a given context.</summary>
            <param name="aContext">the context the size is being reported for
            </param>
            <param name="aSize">the size being reported
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.XLWEscherTreeDehydrator.reportEscherSubrecordSize(System.Int16,System.Int32)">
            <summary> Tells the Dehydrator the size of an MsoSubrecord and returns the total
            size of all MsoSubrecords seen by this Dehydrator.
            </summary>
            <param name="aSize">the size of a MsoSubrecord
            </param>
            <returns> the size of all MsoSubrecords seen by this Deyhdrator so far.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.XLWEscherTreeDehydrator.getEscherStructureBuffer(System.Int16)">
            <summary> Returns a ByteDataBuffer approprate for writing a MsoSubrecord.</summary>
            <returns> a ByteDataBuffer approprate for writing a MsoSubrecord.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.XLWEscherTreeDehydrator.reportPlaceholder">
            <summary> Reports the size of a full record that appears in the sequence of Escher
            records.
            </summary>
            <param name="aSize">the size being reported
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.XLWEscherTreeDehydrator.addPlaceholder(SoftArtisans.OfficeWriter.Shared.EscherPlaceholder)">
            <summary> Adds a record that appears in the sequence of Escher records.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.XLWEscherTreeDehydrator.Elements">
            <summary> Returns the Elements collected by the dehydrator.</summary>
            <returns> the Elements collected by the dehydrator.
            </returns>
            <throws>  IOException </throws>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.ArrayBool">
            <summary> 
            </summary>
            <author>  geoffk
            Oct 8, 2004 5:18:13 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.ArrayValue.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <param name="handler">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.ArrayBool.write(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:ArrayValue#write(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.ArrayBool.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:ArrayValue#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.ArrayError">
            <summary> 
            </summary>
            <author>  geoffk
            Oct 8, 2004 5:18:13 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.ArrayError.write(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:ArrayValue#write(ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.ArrayError.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:ArrayValue#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.ArrayNum.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:ArrayValue#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.ArrayStr.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:ArrayValue#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgNode">
            <summary> Acts as a tree node; has children.
            
            </summary>
            <author>  geoffk
            Sep 29, 2004 3:19:46 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBase">
            <summary> The base class for all Parse Things. Similar to the Record class, but without
            the complicated mechanics.
            
            </summary>
            <author>  geoffk Sep 21, 2004 12:42:27 PM
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBase.mToken">
            <summary>
             Actually an unsigned byte, but we're going to use Hex values anyway
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBase.mFixedSize">
            <summary>
            fixed size, total size if not variable
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBase.mHasTail">
            <summary>
            determines if this Ptg can have a tail
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBase.mClass">
            <summary>
            Class of the Ptg
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBase.mType">
            <summary>
            Type of the Ptg
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBase.mBuffer">
            <summary>
            everything but the token
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBase.mTailBuffer">
            <summary>
            the tail
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBase.mAttr">
            <summary>
            any attributes applied to this token
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBase.fill(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer,SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <summary> This will work for fixed length; after that you will need to fill any
            variable size data.
            
            </summary>
            <param name="aBuf">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBase.fillTail(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <summary> Methods which have tails should override this.
            
            </summary>
            <param name="aTailSource">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBase.write(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer,SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <summary> Handles writing out the entire ptg, including ptg token, data, and tail.
            
            </summary>
            <param name="aMainBuf">
            </param>
            <param name="aTail">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBase.PtgName">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBase.Err">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBase.Buffer">
            <summary>
            everything but the token
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBase.Attr">
            <summary>
            any attributes applied to this token
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgNode.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:PtgBase#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgNode.TokenClassProperty">
            <seealso cref="!:PtgBase#setTokenClass(PtgBase.TokenClass)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.BinaryOperatorRef">
            <summary> Abstract class for reference type binary operators.
            
            </summary>
            <author>  geoffk
            Oct 25, 2004 12:14:17 PM
            </author>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.BinaryOperatorRef.ArgumentType">
            <seealso cref="!:BinaryOperator#getArgumentType()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.BinaryOperatorValue">
            <summary> Abstract type for value binary operators.
            
            </summary>
            <author>  geoffk
            Oct 25, 2004 12:18:03 PM
            </author>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.BinaryOperatorValue.ArgumentType">
            <seealso cref="!:BinaryOperator#getArgumentType()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.FuncDef">
            <summary> Encapsulates the function table and it's lookup methods.
            
            This currently uses a static lookup table, but it could easily be different
            classes, etc.
            
            </summary>
            <author>  geoffk Dec 7, 2004 4:14:29 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.FuncDef.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <param name="handler">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.FuncDef.Arg.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <param name="handler">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.FunctionFactory">
            <summary> Creates a PtgFunc based on arguments.
            
            </summary>
            <author>  geoffk
            Dec 8, 2004 4:23:38 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.GridReference">
            <summary> 
            </summary>
            <author>  geoffk
            Nov 1, 2004 10:03:34 AM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgAdd.printRep">
            <seealso cref="!:BinaryOperator#printRep()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgArea">
            <summary> Represents an area reference.
            
            </summary>
            <author>  geoffk Oct 4, 2004 10:28:33 AM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgArea.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:PtgBase#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgArea.print(System.Boolean)">
            <seealso cref="!:PtgBase#print()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgArea.gridUpdate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <seealso cref="!:GridReference#gridUpdate(int,">
            int, int, int)
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgArea3D">
            <summary> Represents a 3-dimensional reference to an area, depending on the value of
            the XTI index.
            
            </summary>
            <author>  geoffk Oct 6, 2004 5:21:05 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgArea3D.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:PtgBase#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgAreaN">
            <summary> Shared Formula implementation for PtgArea.
            Unlike the standard PtgArea, PtgAreaN uses signed row and column values.
            
            </summary>
            <author>  geoffk
            Dec 14, 2004 2:32:57 PM
            </author>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgAreaN.RowFirst">
            <summary> Returns the signed value of the row.</summary>
            <seealso cref="!:PtgArea#getRowFirst()">
            </seealso>
            <summary> Sets the value of the row.  The value will be cast from a 32-bit signed int 
            to a 16-bit signed int.
            </summary>
            <seealso cref="!:PtgArea#setRowFirst(int)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgAreaN.RowLast">
            <summary> Returns the signed value of the row.</summary>
            <seealso cref="!:PtgArea#getRowLast()">
            </seealso>
            <summary> Sets the value of the row.  The value will be cast from a 32-bit signed int 
            to a 16-bit signed int.
            </summary>
            <seealso cref="!:PtgArea#setRowLast(int)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgAreaN.ColFirst">
            <summary> Gets the value of the column.  Instead of using a 14-bit signed value,
            Excel uses a 8-bit signed value, so we cast to a (signed) byte before returning.
            </summary>
            <seealso cref="!:PtgArea#getColFirst()">
            </seealso>
            <summary> Sets the value of the column.  This will be cast to a 8-bit signed value.</summary>
            <seealso cref="!:PtgArea#setColFirst(int)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgAreaN.ColLast">
            <summary> Gets the value of the column.  Instead of using a 14-bit signed value,
            Excel uses a 8-bit signed value, so we cast to a (signed) byte before returning.
            </summary>
            <seealso cref="!:PtgArea#getColLast()">
            </seealso>
            <summary> Sets the value of the column.  This will be cast to a 8-bit signed value.</summary>
            <seealso cref="!:PtgArea#setColLast(int)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgArray">
            <summary> Array has a tail... and 7 undocumented bytes which appear to have no meaning.
            
            </summary>
            <author>  geoffk Oct 8, 2004 3:56:08 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgArray.print(System.Boolean)">
            <seealso cref="!:PtgBase#print()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgArray.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:PtgBase#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgAttr">
            <summary> 
            </summary>
            <author>  geoffk
            Dec 9, 2004 3:21:34 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBool">
            <summary> This ptg represents a boolean value.
            
            </summary>
            <author>  geoffk
            Sep 29, 2004 2:31:41 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBool.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:PtgBase#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBool.print(System.Boolean)">
            <seealso cref="!:PtgBase#print()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgErr.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:PtgBase#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgErr.print(System.Boolean)">
            <seealso cref="!:PtgBase#print()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgExp">
            <summary> 
            </summary>
            <author>  geoffk
            Dec 13, 2004 3:32:01 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgExp.GetHashCode">
            <seealso cref="!:java.lang.Object#hashCode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgExp.Equals(System.Object)">
            <seealso cref="!:java.lang.Object#equals(java.lang.Object)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgExtend">
            <summary>
            NOTE: much of this class throws "Not implemented" exceptions
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgExtend.createEPtg(System.SByte,SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <summary>
            Creates an extended ptg
            </summary>
            <param name="eptgType"></param>
            <param name="buf"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgExtend.PtgExtended.write(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <param name="mainBuf">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgFunc">
            <summary> Function support.  This one uses mChildren; PtgFuncVar uses a Vector instead and
            overrides the defaults.
            
            </summary>
            <author>  geoffk Dec 7, 2004 4:07:53 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgFunc.fill(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer,SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <seealso cref="!:ByteDataBuffer)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgFunc.print(System.Boolean)">
            <seealso cref="!:PtgBase#print()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgFunc.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:PtgNode#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgFunc.NumChildren">
            <seealso cref="!:PtgNode#getNumChildren()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgFunc.TokenClassProperty">
            <seealso cref="!:PtgNode#setTokenClass(PtgBase.TokenClass)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgFuncVar">
            <summary> Ptg that holds a function with variable arguments.
            
            </summary>
            <author>  geoffk
            Dec 8, 2004 4:28:30 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgFuncVar.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:PtgNode#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgInt">
            <summary> Represents an unsigned integer.
            
            </summary>
            <author>  geoffk
            Sep 29, 2004 2:36:14 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgInt.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:PtgBase#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgInt.print(System.Boolean)">
            <seealso cref="!:PtgBase#print()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgMemFunc.print(System.Boolean)">
            <seealso cref="!:PtgBase#print()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgMissArg.#ctor">
            <param name="aToken">
            </param>
            <param name="aFixedSize">
            </param>
            <param name="aIsVariableSize">
            </param>
            <param name="aHasTail">
            </param>
            <param name="aClass">
            </param>
            <param name="aType">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgName">
            <summary> Implements the ptgName token, a reference to a Name.
            
            </summary>
            <author>  geoffk
            Oct 6, 2004 3:41:00 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgName.#ctor(System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup)">
            <summary> Constructor; handles looking up the name and creating the appropriate Ptg.</summary>
            <param name="aName">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgName.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:PtgBase#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgName.print(System.Boolean)">
            <seealso cref="!:PtgBase#print()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgName.NameIndex">
            <returns> the ilbl value.  Note this should be 1-based.
            This is a 1-based value, but we expect to use 0-based in our
            calculations, so we fix it up here.
            </returns>
            <summary> Cutely, this is 1-based and they never tell us anywhere.</summary>
            <param name="aValue">the ilbl value, 1-based.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgNameX">
            <summary> ptgNameX, for references to External Names.</summary>
            <author>  geoffk
            Sep 21, 2004 5:37:16 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgNameX.#ctor(System.Int32,System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup)">
            <summary> Constructor; handles looking up the name and creating the appropriate Ptg.</summary>
            <param name="aName">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgNameX.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:PtgBase#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgNameX.XTIIndex">
            <returns> the ixti value.  
            </returns>
            <param name="aValue">the ixti value. 
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgNameX.NameIndex">
            <summary>
            The name index. NOTE: this is not necessarily the index into our name collection. For EXTERNNAMEs
            it's the index into the EXTERNNAME record of that particular SUPBOOK, and thus two PtgNameX's
            can have the same NameIndex and different XTIIndexes and point to completely different names
            </summary>
            <returns> 
            the ilbl value.  Note this should be 1-based.
            </returns>
            <param name="aValue">the ilbl value, 1-based.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgNull.#ctor">
            <param name="aToken">
            </param>
            <param name="aFixedSize">
            </param>
            <param name="aIsVariableSize">
            </param>
            <param name="aHasTail">
            </param>
            <param name="aClass">
            </param>
            <param name="aType">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgNum">
            <summary> Represent an IEEE floating-point number.
            
            </summary>
            <author>  geoffk
            Sep 29, 2004 2:37:37 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgNum.print(System.Boolean)">
            <seealso cref="!:PtgBase#print()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgNum.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:PtgBase#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgParen">
            <summary> 
            </summary>
            <author>  geoffk
            Oct 8, 2004 3:27:42 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgRef">
            <author>  geoffk Sep 28, 2004 5:25:59 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgRef.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:PtgBase#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgRef.print(System.Boolean)">
            <seealso cref="!:PtgBase#print()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgRef.gridUpdate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <seealso cref="!:GridObserver#removeRow(int,">
            RowModel)
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgRef3D">
            <summary> ptgRef3d represents a 3D Cell reference (or a cell ref 
            on another sheet, depending on the ixti).
            
            </summary>
            <author>  geoffk
            Oct 6, 2004 5:15:43 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgRef3D.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:PtgBase#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgRef3D.print(System.Boolean)">
            <seealso cref="!:PtgBase#print()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgRef3D.gridUpdate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <seealso cref="!:int, int, int)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgRefN">
            <summary> Shared Formula implementation for PtgRef.
            Unlike the standard PtgRef, PtgRefN uses signed row and column values.
            
            </summary>
            <author>  geoffk
            Dec 14, 2004 10:51:21 AM
            </author>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgRefN.Row">
            <summary> Returns the signed value of the row.</summary>
            <seealso cref="!:PtgRef#getRow()">
            </seealso>
            <summary> Sets the value of the row.  The value will be cast from a 32-bit signed int 
            to a 16-bit signed int.
            </summary>
            <seealso cref="!:PtgRef#setRow(int)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgRefN.Column">
            <summary> Gets the value of the column.  Instead of using a 14-bit signed value,
            Excel uses a 8-bit signed value, so we cast to a (signed) byte before returning.
            </summary>
            <seealso cref="!:PtgRef#getColumn()">
            </seealso>
            <summary> Sets the value of the column.  This will be cast to a 8-bit signed value.</summary>
            <seealso cref="!:PtgRef#setColumn(int)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgStr">
            <summary> Implements PtgStr, the only real variable length ptg in Excel. (besides tails)
            
            </summary>
            <author>  geoffk Sep 21, 2004 4:24:55 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgStr.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:PtgBase#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgStr.print(System.Boolean)">
            <seealso cref="!:PtgBase#print()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens">
            <summary> 
            </summary>
            <author>  geoffk
            Sep 21, 2004 2:24:51 PM
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgNull">
            <summary> DYL -- added for // matching // array index to ptg!</summary>      
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgExp">
            <summary> control .</summary>   
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgTbl">
            <summary> control .</summary>  
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgAdd">
            <summary> operator .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgSub">
            <summary> operator .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgMul">
            <summary> operator .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgDiv">
            <summary> operator .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgPower">
            <summary> operator .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgConcat">
            <summary> operator .</summary>   
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgLT">
            <summary> operator .</summary>    
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgLE">
            <summary> operator .</summary>  
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgEQ">
            <summary> operator .</summary>  
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgGE">
            <summary> operator .</summary>  
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgGT">
            <summary> operator .</summary>  
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgNE">
            <summary> operator .</summary>  
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgIsect">
            <summary> operator .</summary>  
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgUnion">
            <summary> operator .</summary>   
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgRange">
            <summary> operator .</summary>   
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgUplus">
            <summary> operator .</summary>   
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgUminus">
            <summary> operator .</summary>   
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgPercent">
            <summary> operator .</summary>    
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgParen">
            <summary> control .</summary>      
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgMissArg">
            <summary> operand .</summary>    
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgStr">
            <summary> operand .</summary>      
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgExtend">
            <summary> ??? .</summary>      
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgAttr">
            <summary> control .</summary>     
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgSheet">
            <summary> (ptg DELETED) .</summary>     
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgEndSheet">
            <summary> (ptg DELETED) .</summary>      
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgErr">
            <summary> operand .</summary>       
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgBool">
            <summary> operand .</summary>  
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgInt">
            <summary> operand .</summary>   
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgNum">
            <summary> operand .</summary>  
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgArray">
            <summary> operand, reference        // class        // .</summary>   
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgFunc">
            <summary> operator .</summary>   
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgFuncVar">
            <summary> operator .</summary>  
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgName">
            <summary> operand, reference        // class        // .</summary>   
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgRef">
            <summary> operand, reference        // class .</summary>     
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgArea">
            <summary> operand, reference        // class        // .</summary>   
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgMemArea">
            <summary> operand, reference        // class .</summary>     
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgMemErr">
            <summary> operand, reference        // class .</summary>     
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgMemNoMem">
            <summary> control .</summary>     
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgMemFunc">
            <summary> control .</summary>       
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgRefErr">
            <summary> operand, reference        // class .</summary>     
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgAreaErr">
            <summary> operand, reference        // class .</summary>     
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgRefN">
            <summary> operand, reference        // class        // .</summary>   
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgAreaN">
            <summary> operand, reference        // class        // .</summary>   
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgMemAreaN">
            <summary> control .</summary>    
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgMemNoMemN">
            <summary> control .</summary>       
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgUnknown_30">
            <summary> ???</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgUnknown_31">
            <summary> ???</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgUnknown_32">
            <summary> ???</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgUnknown_33">
            <summary> ???</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgUnknown_34">
            <summary> ???</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgUnknown_35">
            <summary> ???</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgUnknown_36">
            <summary> ???</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgUnknown_37">
            <summary> ???</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgUnknown_38">
            <summary> ???</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgNameX">
            <summary> operand, reference        // class        // .</summary>   
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgRef3d">
            <summary> operand, reference        // class        // .</summary>   
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgArea3d">
            <summary> operand, reference        // class .</summary>     
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgRefErr3d">
            <summary> operand,        // reference        // class .</summary>   
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgAreaErr3d">
            <summary> operand,        // reference        // class .</summary>   
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgUnknown_3E">
            <summary> ???</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgUnknown_3F">
            <summary> ???</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgArrayV">
            <summary> operand, value        // class .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgFuncV">
            <summary> operator .</summary>    
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgFuncVarV">
            <summary> operator .</summary>   
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgNameV">
            <summary> operand, value class        // .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgRefV">
            <summary> operand, value class        // .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgAreaV">
            <summary> operand, value class        // .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgMemAreaV">
            <summary> operand, value        // class        // .</summary>       
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgMemErrV">
            <summary> operand, value        // class .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgMemNoMemV">
            <summary> control .</summary>      
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgMemFuncV">
            <summary> control .</summary>        
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgRefErrV">
            <summary> operand, value        // class .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgAreaErrV">
            <summary> operand, value        // class        // .</summary>       
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgRefNV">
            <summary> operand, value class        // .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgAreaNV">
            <summary> operand, value        // class .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgMemAreaNV">
            <summary> control .</summary>     
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgMemNoMemNV">
            <summary> control .</summary>        
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgFuncCEV">
            <summary> operator .</summary>        
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgNameXV">
            <summary> operand, value        // class .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgRef3dV">
            <summary> operand, value        // class .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgArea3dV">
            <summary> operand, value        // class .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgRefErr3dV">
            <summary> operand, value        // class        // .</summary>       
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgAreaErr3dV">
            <summary> operand, value        // class .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgArrayA">
            <summary> operand, array        // class .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgFuncA">
            <summary> operator .</summary>    
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgFuncVarA">
            <summary> operator .</summary>   
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgNameA">
            <summary> operand, array class        // .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgRefA">
            <summary> operand, array class        // .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgAreaA">
            <summary> operand, array class        // .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgMemAreaA">
            <summary> operand, array        // class        // .</summary>       
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgMemErrA">
            <summary> operand, array        // class .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgMemNoMemA">
            <summary> control .</summary>      
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgMemFuncA">
            <summary> control .</summary>        
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgRefErrA">
            <summary> operand, array        // class .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgAreaErrA">
            <summary> operand, array        // class        // .</summary>       
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgRefNA">
            <summary> operand, array class        // .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgAreaNA">
            <summary> operand, array        // class .</summary> 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgMemAreaNA">
            <summary> control .</summary>     
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgMemNoMemNA">
            <summary> control .</summary>        
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgFuncCEA">
            <summary> operator .</summary>        
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgNameXA">
            <summary> operand, array        // class        // (NEW ptg) .</summary>     
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgRef3dA">
            <summary> operand, array        // class        // (NEW ptg) .</summary>     
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgArea3dA">
            <summary> operand, array        // class        // (NEW ptg) .</summary>     
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgRefErr3dA">
            <summary> operand, array        // class        // (NEW ptg) .</summary>     
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgTokens.ptgAreaErr3dA">
            <summary> operand, array</summary>   
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.CupBasedFormulaParser">
            <summary> Traverses a Ptg tree.
            
            </summary>
            <author>  geoffk Sep 29, 2004 5:40:25 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.IFormulaParser">
            <summary> An internal interface into the formula parser (Text --> PtgTree)
            
            </summary>
            <author>  geoffk
            Oct 6, 2004 11:17:31 AM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.FormulaParserBase.buildXML(SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler)">
            <seealso cref="!:IFormulaParser#buildXML()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.FormulaParserBase.FormulaBytes">
            <seealso cref="!:IFormulaParser#getFormulaBytes()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.FormulaParserBase.TailBytes">
            <seealso cref="!:IFormulaParser#getTailBytes()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.FormulaParserBase.Text">
            <seealso cref="!:IFormulaParser#getText()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.FormulaParserBase.AllBytes">
            <seealso cref="!:IFormulaParser#getAllBytes()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.FormulaParserBase.Tree">
            <seealso cref="!:IFormulaParser#getTree()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.MockLookup">
            <summary> 
            </summary>
            <author>  geoffk
            Oct 7, 2004 9:45:15 AM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.MockLookup.getDefaultExternSheetIndex(System.Boolean)">
            <seealso cref="!:IExternLookup#getDefaultExternSheetIndex()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.MockLookup.getSheetXtiIndex(System.String)">
            <seealso cref="!:IExternLookup#getExternSheetIndex(java.lang.String)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.MockLookup.getSheetXtiIndex(System.String,System.String)">
            <seealso cref="!:java.lang.String)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.MockLookup.GetNameIndexOrThrowError(System.String)">
            <seealso cref="!:IExternLookup#getNameIndex(java.lang.String)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.MockLookup.getXtiAsString(System.Int32)">
            <seealso cref="!:IExternLookup#getXtiAsString(int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.MockLookup.getNameAsString(System.Int32)">
            <seealso cref="!:int)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.MockLookup.DefaultSheetPosition">
            <seealso cref="!:IExternLookup#getDefaultSheetPosition()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.ParserUtils.parseExpressionToBytes(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup,System.Int32,System.Int32)">
            <seealso cref="!:IFormulaParser#parseExpressionToBytes(java.lang.String)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.ParserUtils.parseExpressionToText(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup,System.Int32,System.Int32)">
            <seealso cref="!:IFormulaParser#parseExpressionToText(java.lang.String)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.ParserUtils.parseExpressionToTree(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup,System.Int32,System.Int32)">
            <seealso cref="!:IFormulaParser#parseExpressionToTree(java.lang.String)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.ParserUtils.parseExpressionToXML(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Formula.IExternLookup,System.Int32,System.Int32,SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler)">
            <seealso cref="!:IFormulaParser#parseExpressionToXML(java.lang.String)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.ParserUtils.walkTreeClearSeen(SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBase)">
            <param name="newTree">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.ParserUtils.walkTreeChangeTokenClassIgnoreOperators(SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBase,SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBase.TokenClass)">
            <param name="tree">
            </param>
            <param name="reference">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg2TreeParser">
            <summary> Parses a Ptg stream from a PtgPump into a Ptg tree.
            
            </summary>
            <author>  geoffk
            Oct 18, 2004 4:17:55 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.PtgPump">
            <summary> Takes an array of bytes and returns ptg tags </summary>
            <author>  geoffk
            Oct 18, 2004 3:07:52 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.PtgPump.nextToken">
            <summary> Returns the next token in the buffer.</summary>
            <returns> the next token in the buffer.
            </returns>
            <throws>  Exception if there are no more tokens, or the token is not a recognized type, or the token </throws>
            <summary> is invalid (not long enough).
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Formula.PtgPump.HasNext">
            <summary> Returns true if there are bytes left.  This does not check to see if 
            the remaining bytes are valid Ptg tokens.
            
            </summary>
            <returns> True if there are any bytes left in the buffer.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.ReplaceSharedAction">
            <summary> 
            </summary>
            <author>  geoffk Dec 13, 2004 5:37:22 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.ReplaceSharedAction.doActionPost(SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBase)">
            <seealso cref="!:IAction#doActionPost(PtgBase)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Formula.ReplaceSharedAction.doActionPre(SoftArtisans.OfficeWriter.ExcelWriter.Formula.Ptg.PtgBase)">
            <seealso cref="!:IAction#doActionPre(PtgBase)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Formula.SymbolPair">
            <summary> 
            
            </summary>
            <author>  geoffk
            Feb 24, 2005 9:58:24 AM
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.Txt2Ptg.Txt2PtgParser.ErrorOutput">
            error output stream.
                  It should be changeable.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.Txt2Ptg.Txt2PtgParser.yyerror(System.String)">
            simplified error message.
                  @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.Txt2Ptg.Txt2PtgParser.yyerror(System.String,System.String[])">
            (syntax) error message.
                  Can be overwritten to control message format.
                  @param message text to be displayed.
                  @param expected vector of acceptable tokens, if available.
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.Txt2Ptg.Txt2PtgParser.yyFinal">
            debugging support, requires the package jay.yydebug.
                  Set to null to suppress debugging messages.
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.Txt2Ptg.Txt2PtgParser.yyExpectingState">
            index-checked interface to yyNames[].
                  @param token single character or %token value.
                  @return token name or [illegal] or [unknown].
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.Txt2Ptg.Txt2PtgParser.yyExpectingTokens(System.Int32)">
            computes list of expected tokens on error by tracing the tables.
                  @param state for which to compute the list.
                  @return list of token names.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.Txt2Ptg.Txt2PtgParser.yyparse(SoftArtisans.OfficeWriter.ExcelWriter.ParserBase,System.Object)">
            the generated parser, with debugging messages.
                  Maintains a state and a value stack, currently with fixed maximum size.
                  @param yyLex scanner.
                  @param yydebug debug message writer implementing yyDebug, or null.
                  @return result of the last reduction, if any.
                  @throws yyException on irrecoverable parse error.
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.Txt2Ptg.Txt2PtgParser.yyMax">
            initial size and increment of the state/value stack [default 256].
                  This is not final so that it can be overwritten outside of invocations
                  of yyparse().
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.Txt2Ptg.Txt2PtgParser.yyDefault(System.Object)">
            executed at the beginning of a reduce action.
                  Used as $$ = yyDefault($1), prior to the user-specified action, if any.
                  Can be overwritten to provide deep copy, etc.
                  @param first value for $1, or null.
                  @return first.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.Txt2Ptg.Txt2PtgParser.yyparse(SoftArtisans.OfficeWriter.ExcelWriter.ParserBase)">
            the generated parser.
                  Maintains a state and a value stack, currently with fixed maximum size.
                  @param yyLex scanner.
                  @return result of the last reduction, if any.
                  @throws yyException on irrecoverable parse error.
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.Txt2Ptg.yyParser.yyException">
            thrown for irrecoverable syntax errors and stack overflow.
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.Txt2PtgR1C1.Txt2PtgR1C1Parser.ErrorOutput">
            error output stream.
                  It should be changeable.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.Txt2PtgR1C1.Txt2PtgR1C1Parser.yyerror(System.String)">
            simplified error message.
                  @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.Txt2PtgR1C1.Txt2PtgR1C1Parser.yyerror(System.String,System.String[])">
            (syntax) error message.
                  Can be overwritten to control message format.
                  @param message text to be displayed.
                  @param expected vector of acceptable tokens, if available.
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.Txt2PtgR1C1.Txt2PtgR1C1Parser.yyFinal">
            debugging support, requires the package jay.yydebug.
                  Set to null to suppress debugging messages.
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.Txt2PtgR1C1.Txt2PtgR1C1Parser.yyExpectingState">
            index-checked interface to yyNames[].
                  @param token single character or %token value.
                  @return token name or [illegal] or [unknown].
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.Txt2PtgR1C1.Txt2PtgR1C1Parser.yyExpectingTokens(System.Int32)">
            computes list of expected tokens on error by tracing the tables.
                  @param state for which to compute the list.
                  @return list of token names.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.Txt2PtgR1C1.Txt2PtgR1C1Parser.yyparse(SoftArtisans.OfficeWriter.ExcelWriter.ParserBase,System.Object)">
            the generated parser, with debugging messages.
                  Maintains a state and a value stack, currently with fixed maximum size.
                  @param yyLex scanner.
                  @param yydebug debug message writer implementing yyDebug, or null.
                  @return result of the last reduction, if any.
                  @throws yyException on irrecoverable parse error.
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.Txt2PtgR1C1.Txt2PtgR1C1Parser.yyMax">
            initial size and increment of the state/value stack [default 256].
                  This is not final so that it can be overwritten outside of invocations
                  of yyparse().
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.Txt2PtgR1C1.Txt2PtgR1C1Parser.yyDefault(System.Object)">
            executed at the beginning of a reduce action.
                  Used as $$ = yyDefault($1), prior to the user-specified action, if any.
                  Can be overwritten to provide deep copy, etc.
                  @param first value for $1, or null.
                  @return first.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.Txt2PtgR1C1.Txt2PtgR1C1Parser.yyparse(SoftArtisans.OfficeWriter.ExcelWriter.ParserBase)">
            the generated parser.
                  Maintains a state and a value stack, currently with fixed maximum size.
                  @param yyLex scanner.
                  @return result of the last reduction, if any.
                  @throws yyException on irrecoverable parse error.
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.Txt2PtgR1C1.yyParser.yyException">
            thrown for irrecoverable syntax errors and stack overflow.
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.Txt2PtgR1C1.Txt2PtgR1C1Scanner">
            <summary>
            Summary Canonical example of GPLEX automaton
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.Txt2PtgScannerBase.convertToNum(System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.Parser.Txt2PtgR1C1.Txt2PtgR1C1Scanner.MkBuffCtx">
            <summary>
            This method creates a buffer context record from
            the current buffer object, together with some
            scanner state values. 
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.Txt2PtgR1C1.Txt2PtgR1C1Scanner.RestoreBuffCtx(SoftArtisans.OfficeWriter.Parser.Txt2PtgR1C1.Txt2PtgR1C1Scanner.BufferContext)">
            <summary>
            This method restores the buffer value and allied
            scanner state from the given context record value.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.Txt2PtgR1C1.Txt2PtgR1C1Scanner.SetSource(System.String,System.Int32)">
            <summary>
            Create and initialize a StringBuff buffer object for this scanner
            </summary>
            <param name="source">the input string</param>
            <param name="offset">starting offset in the string</param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Parser.Txt2PtgR1C1.Txt2PtgR1C1Scanner.Buffer">
            <summary>
            The input buffer for this scanner.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.Txt2PtgR1C1.StringBuffer">
            <summary>
            This class reads characters from a single string as
            required, for example, by Visual Studio language services
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.Txt2PtgR1C1.BuildBuffer.Mark">
            <summary>
            Marks a conservative lower bound for the buffer,
            allowing space to be reclaimed.  If an application 
            needs to call GetString at arbitrary past locations 
            in the input stream, Mark() is not called.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.Txt2PtgR1C1.BuildBuffer.Read">
            <summary>
            Read returns the ordinal number of the next char, or 
            EOF (-1) for an end of stream.  Note that the next
            code point may require *two* calls of Read().
            </summary>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.Txt2PtgR1C1.Guesser">
            <summary>
            This class provides a simple finite state automaton that
            scans the file looking for (1) valid UTF-8 byte patterns,
            (2) bytes >= 0x80 which are not part of a UTF-8 sequence.
            The method then guesses whether it is UTF-8 or maybe some 
            local machine default encoding.  This works well for the
            various Latin encodings.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.Txt2Ptg.Txt2PtgScanner">
            <summary>
            Summary Canonical example of GPLEX automaton
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.Txt2Ptg.Txt2PtgScanner.str">
            JFlex scanner for English --> Ptg parser 
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Parser.Txt2Ptg.Txt2PtgScanner.isAfterRange">
            <summary>This is true if it's the second element in a range (after the colon.) This is used to help
            separate the OP_RANGE colons from the COLON colons (which actually act like commas).</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.Txt2Ptg.Txt2PtgScanner.MkBuffCtx">
            <summary>
            This method creates a buffer context record from
            the current buffer object, together with some
            scanner state values. 
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.Txt2Ptg.Txt2PtgScanner.RestoreBuffCtx(SoftArtisans.OfficeWriter.Parser.Txt2Ptg.Txt2PtgScanner.BufferContext)">
            <summary>
            This method restores the buffer value and allied
            scanner state from the given context record value.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.Txt2Ptg.Txt2PtgScanner.SetSource(System.String,System.Int32)">
            <summary>
            Create and initialize a StringBuff buffer object for this scanner
            </summary>
            <param name="source">the input string</param>
            <param name="offset">starting offset in the string</param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Parser.Txt2Ptg.Txt2PtgScanner.Buffer">
            <summary>
            The input buffer for this scanner.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Parser.Txt2Ptg.Txt2PtgScanner.Str">
            <summary>
            A temporary string containing the contents of the last quoted or unquoted string.
            If another token is read, it may wipe out this variable.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.Txt2Ptg.StringBuffer">
            <summary>
            This class reads characters from a single string as
            required, for example, by Visual Studio language services
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.Txt2Ptg.BuildBuffer.Mark">
            <summary>
            Marks a conservative lower bound for the buffer,
            allowing space to be reclaimed.  If an application 
            needs to call GetString at arbitrary past locations 
            in the input stream, Mark() is not called.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Parser.Txt2Ptg.BuildBuffer.Read">
            <summary>
            Read returns the ordinal number of the next char, or 
            EOF (-1) for an end of stream.  Note that the next
            code point may require *two* calls of Read().
            </summary>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Parser.Txt2Ptg.Guesser">
            <summary>
            This class provides a simple finite state automaton that
            scans the file looking for (1) valid UTF-8 byte patterns,
            (2) bytes >= 0x80 which are not part of a UTF-8 sequence.
            The method then guesses whether it is UTF-8 or maybe some 
            local machine default encoding.  This works well for the
            various Latin encodings.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.TxtSymbol">
            <summary>CUP generated class containing symbol constants. </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.TxtSymbol.description(System.Int32)">
            <summary>
            This function is only used for debugging purposes
            
            It is not generated by cup, and is not necessary
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.TxtSymbolR1C1">
            <summary>CUP generated class containing symbol constants. </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.WhitespaceFilter">
            <summary> Scans a token stream for whitespace, aggregates it, and attaches it to the following token.
            
            The value in the symbol object is replaced with SymbolPair, which contains that value instead.
            So, every token that's read from a WhiteSpaceFilter should have a SymbolPair in its value field.
            
            This avoids some of the horrendous shift/reduce errors we have when trying to deal
            with whitespace and preserve it in the parser, and greatly simplifies the grammar.
            
            </summary>
            <author>  geoffk
            Feb 23, 2005 5:59:04 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.WhitespaceFilter.next_token">
            <seealso cref="!:Scanner#next_token()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.XMLDump">
            <summary> Dumps an XLS file to an XML output.
            
            </summary>
            <author>  geoffk
            Nov 3, 2004 10:07:15 AM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.FontLookupBehavior">
            <summary> <p>FontLookupBehavior describes the how FontProperties should lookup 
            font metrics.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.FontLookupType">
            <summary> <p>Describes the different types of lookups that can be done to
            find font metrics in the font properties class</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.FontProperties">
            <summary> <p>The FontProperties class manages access to the font metrics required for 
            Excelwriter.  This class should be used rather than the AWT FontMetrics
            class because this class is capable of functioning without AWT by using
            a cache of font metrics information.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.FontProperties.#ctor(System.String,System.Double,SoftArtisans.OfficeWriter.ExcelWriter.FontLookupBehavior)">
            <summary> Constructs a new FontProperties for the given font name/size combination</summary>
            <param name="aFontName">the name of the desired font
            </param>
            <param name="aFontSize">the size of the desired font
            </param>
            <throws>  SARuntimeException if the a FontProperties for the specified </throws>
            <summary> combination cannot be created.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.FontProperties.getStringWidth(System.String)">
            <summary> Returns the width of the specified String in pixels.  </summary>
            <param name="aString">the string to measuer
            </param>
            <returns> the length of the string in pixels.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.FontProperties.getFontProperties(System.String,System.Double,SoftArtisans.OfficeWriter.ExcelWriter.FontLookupBehavior)">
            <summary> Factory method for FontProperties.  Returns the FontProperties object
            that handles the specified font name/size combination.  If font metrics
            cannot be located for the specified combination, 
            </summary>
            <param name="aFontName">
            </param>
            <param name="aFontSize">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.FontProperties.getPropertyKey(System.String,System.Double)">
            <summary> Utility method to ensure that all property/hashtable keys are uniformly
            constructed.
            </summary>
            <param name="aFontName">the name to generate the key for
            </param>
            <param name="aFontSize">the size to generate the key for
            </param>
            <returns> the key made from the font name and size
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.FontPropertiesSource">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.FontPropertiesSourceFile">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.FontPropertiesSourceFile.getStringWidth(System.String)">
            <seealso cref="!:FontPropertiesSource#getStringWidth(java.lang.String)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.FontPropertiesSourceFile.initialize">
            <summary> Initializes the FontProperties object using the font information stored
            in the basic properties file and returns whether it was sucessful or not.
            </summary>
            <param name="aFontName">the name of the font to load
            </param>
            <param name="aFontSize">the size of the font to load.
            </param>
            <returns> true if the properties of this object were initialized and 
            false otherwise
            </returns>
            <throws>  SARuntimeException if the value contained in the property </throws>
            <summary> file for the specified font was malformed.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.FontPropertiesSourceFile.loadFontMetrics">
            <summary> Load the font metrics properties file.  This should only be done once</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.FontPropertiesSourceFile.ZeroWidth">
            <seealso cref="!:FontPropertiesSource#getZeroWidth()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.FontPropertiesSourceSystem">
            <p></p>
            
            @author johnv
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.FontPropertiesSourceSystem.#ctor(System.String,System.Double)">
            
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.FontPropertiesSourceSystem.getStringWidth(System.String)">
            @see FontPropertiesSource#getStringWidth(java.lang.String)
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.FontPropertiesSourceSystem.initialize">
            Uses the system to load font properties.  Returns whether or not it
            sucessfully loaded the properties. This method should not throw any
            exceptions or errors resulting from a failed lookup.
            @param aFontName the name of the font to look for
            @param aFontSize the size of the font to look for
            @return true if the properties on this object were sucessfully 
            initialized and false otherwise
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.FontPropertiesSourceSystem.ZeroWidth">
            @see FontPropertiesSource#getZeroWidth()
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.SubRecordDXF.Populated">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.SubRecordDXFFNT.CustomBoldStyle">
            <summary> Bold style must be between 100 and 1000; if it's outside of those bounds,
            we set to the nearest bound.  Default is 190h for regular, 2BCh for bold.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.SubRecordDXFFNT.Bold">
            <returns> true if the bold setting is the normal bold value.
            </returns>
            <summary> Sets the default boldness level.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.SubRecordDXFFNT.UseFontName">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.SubRecordDXFPAT">
            <summary>
            From MS-XLS 2.5.102: The DXFPat structure specifies the fill pattern and color within a containing
            DXFN structure.
            
            From MS-XLS 2.5.95: The DXFN structure specifies differential formatting.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer" -->
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.reset">
            <summary> Moves the internal pointer to the beginning of the buffer.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.extendBuffer(System.Int32)">
            <summary> If this buffer is extensible (which is false by default) this function
            will double its size. This should only be used by checkWritable.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.checkWritable(System.Int32)">
            <summary> Returns true if: 
            1) There is enough room in the buffer for aSize bytes.
            2) The buffer can be extended to accomodate those bytes, and was successfully extended.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.read(System.SByte[],System.Int32,System.Int32)">
            <summary> Reads data from the current position in the internal buffer into the
            supplied byte array, starting at StartPos in the byte array and copying
            up to aMaxCopy. Returns the number of bytes copied.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.read(System.IO.Stream)">
            <summary> Reads data from the current position in the internal buffer into the
            supplied output stream.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.read(System.IO.Stream,System.Int32)">
            <summary> Reads data from the internal buffer starting at the current position into
            the supplied output stream, up to aMaxCopy bytes.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.readByte">
            <summary> Reads a single byte from the internal buffer.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.readByteU">
            <summary> Reads and returns an 8-bit unsigned byte as a short.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.readShort">
            <summary> Reads and returns a 16-bit short from the internal buffer.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.readShortU">
            <summary> Reads and returns a 16-bit short as a 32-bit integer from the internal
            buffer.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.readInt">
            <summary> Reads and returns a 32-bit integer from the internal buffer.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.readIntU">
            <summary> Reads and returns a 32-bit integer as a 64-bit long from the internal
            buffer.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.readLong">
            <summary> Reads and returns a 64-bit long from the internal buffer.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.useSpace(System.Int32)">
            <summary>************************************************************************
            WRITE FUNCTIONS
            ************************************************************************
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.write(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer,System.Int32)">
            <summary> Writes from the supplied ByteDataBuffer argument to the internal buffer.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.write(System.SByte[],System.Int32,System.Int32)">
            <summary> Writes from the supplied byte array to the internal buffer.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.write(System.SByte[])">
            <summary> Writes from the supplied byte array to the internal buffer.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.write(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <summary> Writes from the supplied ByteDataBuffer to the internal buffer.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.write(System.IO.Stream,System.Int32)">
            <summary> Writes from the supplied InputStream to the internal buffer.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.writeByte(System.SByte)">
            <summary> Writes a single byte to the internal buffer.
            
            </summary>
            <throws>  IOException </throws>
            <summary>             if the buffer has been exceeded and cannot be extended.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.writeByteU(System.Int16)">
            <summary> Writes a single byte to the internal buffer.
            
            </summary>
            <throws>  IOException </throws>
            <summary>             if the buffer has been exceeded and cannot be extended.
            </summary>
            <throws>  IOException </throws>
            <summary>             if the short passed is larger than the maximum unsigned value
            of a byte.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.writeShort(System.Int16)">
            <summary> Writes a 16-bit short to the internal buffer.
            
            </summary>
            <throws>  IOException </throws>
            <summary>             if the buffer has been exceeded and cannot be extended.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.writeShortU(System.Int32)">
            <summary> Writes an integer as a 16-bit short to the internal buffer.
            
            </summary>
            <throws>  IOException </throws>
            <summary>             if the buffer has been exceeded and cannot be extended.
            </summary>
            <throws>  IOException </throws>
            <summary>             if the integer passed is larger than the maximum unsigned
            value of a short.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.writeInt(System.Int32)">
            <summary> Writes a 32-bit integer to the internal buffer.
            
            </summary>
            <throws>  IOException </throws>
            <summary>             if the buffer has been exceeded and cannot be extended.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.writeIntU(System.Int64)">
            <summary> Writes a long as a 32-bit integer to the internal buffer.
            
            </summary>
            <throws>  IOException </throws>
            <summary>             if the buffer has been exceeded and cannot be extended.
            </summary>
            <throws>  IOException </throws>
            <summary>             if the long passed is larger than the maximum unsigned value
            of an integer.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.writeLong(System.Int64)">
            <summary> Writes a 64-bit long to the internal buffer.
            
            </summary>
            <throws>  IOException </throws>
            <summary>             if the buffer has been exceeded and cannot be extended.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.writeFloat(System.Single)">
            <summary> Writes a float as a 32-bit IEEE floating-point little EndianHelper value
            to the internal buffer.
            
            </summary>
            <throws>  IOException </throws>
            <summary>             if the buffer has been exceeded and cannot be extended.
            </summary>
            <throws>  IOException </throws>
            <summary>             if the long passed is larger than the maximum unsigned value
            of an integer.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.writeDouble(System.Double)">
            <summary> Writes a double as a 64-bit IEEE floating-point little EndianHelper value
            to the internal buffer.
            
            </summary>
            <throws>  IOException </throws>
            <summary>             if the buffer has been exceeded and cannot be extended.
            </summary>
            <throws>  IOException </throws>
            <summary>             if the long passed is larger than the maximum unsigned value
            of an integer.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.readHLinkString(System.Int32,System.Boolean)">
            <summary>
            Read a hyperlink string
            </summary>
            <param name="charCount"></param>
            <param name="compressed"></param>
            <returns></returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.Position">
            <summary> Returns current position in the buffer</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.CanExtend">
            <summary> Sets the extendable property of this buffer.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.Size">
            <summary> Returns the size of the internal buffer. This is used space, not maximum
            space. If the buffer is not extensible, this value will never change.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer.Available">
            <summary> Returns a number of bytes available in the buffer</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.ContainerRecord">
            <summary> ContainerRecord is a generic record that contains subrecords in its data
            portion. This does not map directly to an Excel record, but is capable of
            representing any Excel record that had no specific fields such as MSODRAWING,
            MSODRAWINGGROUP, and OBJ.
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.ContainerRecord.#ctor(System.Int16,System.Int32,System.Int64)">
            <summary> Builds a new ContainerRecord
            
            </summary>
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.ContainerRecord.doEncode">
            <summary> Simply writes the contents buffer back to the data buffer
            
            </summary>
            <seealso cref="!:Record#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.ContainerRecord.doDecode">
            <summary> Simply copies the data buffer to be the content buffer
            
            </summary>
            <seealso cref="!:Record#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.ContainerRecord.MinimumSize">
            <summary> Returns 0, there is no fixed minimum size for MSORecords. TODO there is a
            minimum size for OBJ records. Is it worth it to subclass this for that?
            
            </summary>
            <seealso cref="!:Record#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.ContainerRecord.Data">
            <summary> Returns the content buffer for this container
            
            </summary>
            <returns> the content buffer for this container
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.ContiguousPieceContinueWriter">
            <summary> Implementation of a contiguous piece write.  When you give it a piece,
            it will keep it together, breaking the record to a CONTINUE if needed.  If it's
            larger than a single CONTINUE then it will break it over multiple CONTINUEs.
            
            </summary>
            <author>  geoffk
            Jul 13, 2005 9:43:57 AM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.ContinueWriterBase">
            <summary> A relatively simple base class for the ContinueWriter interface, it implements
            the basic record flushing. 
            
            </summary>
            <author>  geoffk
            Jul 13, 2005 10:38:06 AM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.ContinueWriter.addPiece(System.SByte[])">
            <summary> Writes a piece of data to the output.  
            
            Note this won't neccessarily write until flush() is called.
            
            </summary>
            <param name="aDataPiece">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.ContinueWriter.flush">
            <summary> Indicates that we are done adding pieces to the output record and
            can flush the current record to the stream.
            </summary>
            <returns> the number of records, total, that were written out to the stream.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.ContinueWriterBase.flush">
            <summary> flush current buffer and reset.</summary>
            <seealso cref="!:ContinueWriter#flush()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.ContinueableRecord`1.recombineRecords">
            <summary>
            default implementation is to just concatenate records.
            
            This is currently only used when decoding a record
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.DefaultContinueWriter">
            <summary> Default implementation of a continue writer.  This simply write to a max data value of      
            0x2020 and then creates a new continue record with the remainder of the data piece.
            
            i.e., No smart breaking.  Implement your own smart breaking!
            
            </summary>
            <author>  geoffk
            Jul 13, 2005 9:43:57 AM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.DefaultRowHeightRecord">
            <summary> <p>Record that holds information about the default row height on a sheet.  
            The value in this record should be used for the row height of all undefined
            or newly created rows in the sheet.  It also holds option flags that modify
            its value.</p>
            <p>The height stored in this record, like the height value stored in the
            ROW record, is in twips (1/20 of a point).</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.DefaultRowHeightRecord.#ctor(System.Int16,System.Int32,System.Int64)">
            <summary> Standard record constructor.</summary>
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.DefaultRowHeightRecord.doEncode">
            <seealso cref="!:Record#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.DefaultRowHeightRecord.doDecode">
            <seealso cref="!:Record#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.DefaultRowHeightRecord.MinimumSize">
            <seealso cref="!:Record#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.DefaultRowHeightRecord.DefRowHeight">
            <summary> Returns the default row height in twips (1/20 of a point)</summary>
            <returns> the default row height in twips (1/20 of a point)
            </returns>
            <summary> Sets the default row height in twips (1/20 of a point)</summary>
            <param name="aHeight">the default row height in twips (1/20 of a point)
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.DefaultRowHeightRecord.Unsynched">
            <summary> Returns whether all undefined rows have an incompatibility between
            row height and font height.
            </summary>
            <returns> whether all undefined rows have an incompatibility between
            row height and font height.
            </returns>
            <summary> Sets whether all undefined rows have an incompatibility between
            row height and font height.
            </summary>
            <param name="aValue">whether all undefined rows have an incompatibility between
            row height and font height.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.DefaultRowHeightRecord.ZeroHeight">
            <summary> Returns whether all undefined rows have a zero height.</summary>
            <returns> whether all undefined rows have a zero height.
            </returns>
            <summary> Sets whether all undefined rows have a zero height.</summary>
            <param name="aValue">whether all undefined rows have a zero height.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.DefaultRowHeightRecord.ExtraSpaceAbove">
            <summary> Sets whether all undefined rows have an extra space above them</summary>
            <returns> whether all undefined rows have an extra space above them
            </returns>
            <summary> Sets whether all undefined rows have an extra space above them</summary>
            <param name="aValue">whether all undefined rows have an extra space above them
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.DefaultRowHeightRecord.ExtraSpaceBelow">
            <summary> Sets whether all undefined rows have an extra space below them</summary>
            <returns> whether all undefined rows have an extra space below them
            </returns>
            <summary> Sets whether all undefined rows have an extra space below them</summary>
            <param name="aValue">whether all undefined rows have an extra space below them
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.EofRecord.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.FormatRun">
            <summary> <p>Title: FormatRun</p>
            <p>Description: Class for storing formatting runs.</p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.FormatRun.#ctor(System.Int32,System.Int32)">
            <summary> Constructor for FormatRun.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.FormatRunTXO">
            <summary> <p>FormatRunTXO handles the format runs associated with the TXO record.
            Unlike normal format runs, which are 4 bytes long, TXO format runs are
            8 bytes long.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.FormatRunTXO.#ctor">
            <summary> Create a new blank FormatRunTXO</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.GridSetRecord.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.GutsRecord">
            <summary> Holds information about the row and column gutters, the areas between the 
            edge of the sheet and the row and column headings which hold outline 
            symbols.  Specifically, this record holds the size of the row and column
            gutters in pixels and the maximum outline level for both rows and columns. 
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.GutsRecord.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.GutsRecord.doDecode">
            <seealso cref="!:Record#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.GutsRecord.MinimumSize">
            <seealso cref="!:Record#getinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.GutsRecord.ColumnGutterSize">
            <summary> Return the size of the column gutter in pixels</summary>
            <returns> Returns the mColumnGutterSize.
            </returns>
            <summary> Sets the size of the column gutter in pixels</summary>
            <param name="columnGutterSize">The mColumnGutterSize to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.GutsRecord.ColumnMaxOutlineLevel">
            <returns> Returns the mColumnMaxOutlineLevel.
            </returns>
            <param name="columnMaxOutlineLevel">The mColumnMaxOutlineLevel to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.GutsRecord.RowGutterSize">
            <summary> Return the size of the row gutter in pixels</summary>
            <returns> Returns the mRowGutterSize.
            </returns>
            <summary> Sets the size of the row gutter in pixels</summary>
            <param name="rowGutterSize">The mRowGutterSize to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.GutsRecord.RowMaxOutlineLevel">
            <returns> Returns the mRowMaxOutlineLevel.
            </returns>
            <param name="rowMaxOutlineLevel">The mRowMaxOutlineLevel to set.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.HCenterRecord.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.HeaderFooterRecord.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.HPageBreaksRecord.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.IMultiXFReference">
            <summary> Interface that both MULRK and MULBLANK implement for multiple XF references.
            
            </summary>
            <author>  geoffk
            Dec 15, 2004 12:36:07 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.MergeCellsRecord.calcNumRecords(System.Int32)">
            <summary>
            Figure out how many MERGECELLS records will be needed to store all the areas
            </summary>
            <param name="aNumAreas"></param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.MergeCellsRecord.AllAreas">
            <summary>
            Get AreaStructs from this and continuing records
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.PhoneticRecord.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.PrintGridLinesRecord.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.PrintHeadersRecord.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.Record0862.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordBlank">
            <summary> <p>Title: RecordBlank.java</p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Oct 21, 2002
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCellBase">
            <summary> <p>
            Title: CellBase.java
            </p>
            <p>
            Description:
            </p>
            <p>
            Copyright: Copyright (c) 2002 SoftArtisans
            </p>
            <p>
            Company: SoftArtisans
            </p>
            
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Oct 22, 2002
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCellBase.#ctor(System.Int16,System.Int32,System.Int64)">
            <summary> Constructor for RecordBlank.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCellBase.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:Record#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordBOF">
            <summary> <p>Title: BOF</p>
            <p>Description: Excel record indicating the Beginning of File record.</p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, ${date}
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordBOOLERR">
            <summary> <p>Title: RecordBOOLERR.java</p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Oct 21, 2002
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordBoundSheetBIFF8">
            <summary> <p>Title: BoundSheet</p>
            <p>Description: BIFF8 Excel record indicating a work sheet.</p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, ${date}
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordBoundSheetBIFF8.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:Record#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordBoundSheetBIFF8.LbPlyPos">
             <summary>The offset to the BOF record of the sheet</summary>
            
            
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordBoundSheetBIFF8.Grbit">
            <summary>Some flags (2 bytes). The first 2 bits specify the hidden state, the next 6 are unused,
            and the next byte is the type of sheet.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordBoundSheetBIFF8.Rgch">
            <summary>
            The name of the sheet
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordBoundSheetBIFF8.Dt">
            <summary>
            The type of the sheet: (from 2008 documentation)
            "0x00 -- Worksheet or dialog sheet
              The sheet substream that starts with the BOF record specified in lbPlyPos
              MUST contain one WsBool record. If the fDialog field in that WsBool is 1
              then the sheet is dialog sheet otherwise the sheet is a worksheet.
            0x01 -- Macro sheet
            0x02 -- Chart sheet
            0x06 -- VBA module"
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordBoundSheetBIFF8.HsState">
            <summary>
            The hidden state. From 2008 docs:
            
            "0x00 -- Visible
            0x01 -- Hidden
            0x02 -- Very Hidden; the sheet is hidden and cannot be displayed using the user interface."
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCellBaseSingleCell.#ctor(System.Int16,System.Int32,System.Int64)">
            <summary> Constructor for RecordBlank.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCF">
            <summary> 
            
            </summary>
            <author>  geoffk
            May 23, 2005 11:59:41 AM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCF.doEncode">
            <seealso cref="!:Record#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCF.doDecode">
            <seealso cref="!:Record#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCF.MinimumSize">
            <seealso cref="!:Record#getMinimumSize()">
            </seealso>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCOLINFO" -->
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCOLINFO.#ctor(System.Int16,System.Int32,System.Int64)">
            <summary> Constructs a new COLINFO record
            
            </summary>
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCOLINFO.doEncode">
            <seealso cref="!:Record#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCOLINFO.doDecode">
            <seealso cref="!:Record#doDecode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCOLINFO.containsColumn(System.Int32)">
            <summary> Returns whether or not this COLINFO record contains information about
            the column with the specified index.
            </summary>
            <param name="aColIndex">the index of the column to check
            </param>
            <returns> true if this record contains the specified column and false 
            otherwise
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCOLINFO.intersects(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCOLINFO)">
            <summary> Returns whether or not this COLINFO record intersects the specified
            COLINFO record.
            </summary>
            <param name="aRec">the record to check for intersection
            </param>
            <returns> true if this COLINFO record shares columns with the specified
            COLINFO record and false otherwise.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCOLINFO.canMerge(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCOLINFO)">
            <param name="aCol">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCOLINFO.MinimumSize">
            <seealso cref="!:Record#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCOLINFO.FirstColumn">
            <summary> Returns the first formatted column dealt with by this record (0-based).</summary>
            <returns> the first formatted column dealt with by this record (0-based).
            </returns>
            <summary> Sets the first formatted column dealt with by this record (0-based).</summary>
            <param name="aCol">the first formatted column dealt with by this record 
            (0-based).
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCOLINFO.LastColumn">
            <summary> Returns the last formatted column dealt with by this record (0-based).</summary>
            <returns> the last formatted column dealt with by this record (0-based).
            </returns>
            <summary> Sets the last formatted column dealt with by this record (0-based).</summary>
            <param name="aCol">the last formatted column dealt with by this record 
            (0-based).
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCOLINFO.ColumnWidth">
            <summary> Returns the width of the column(s).  See the class javadoc for more
            on this.
            </summary>
            <returns> the width of the column(s).
            </returns>
            <summary> Sets the width of the column(s).  See the class javadoc for more on 
            this.
            </summary>
            <param name="aColWidth">the width of the column(s)
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCOLINFO.XFIndex">
            <summary> Returns the index to the XF record for the column(s).</summary>
            <returns> the index to the XF record for the column(s).
            </returns>
            <summary> Sets the index to the XF record for the column(s).</summary>
            <param name="aIndex">the index to the XF record for the column(s).
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCOLINFO.Hidden">
            <summary> Returns whether or not this column has been hidden</summary>
            <returns> whether or not this column has been hidden
            </returns>
            <summary> Sets whether or not this column has been hidden</summary>
            <param name="aFlag">whether or not this column has been hidden
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCOLINFO.Collapsed">
            <summary> Returns whether or not this column has been hidden</summary>
            <returns> whether or not this column has been hidden
            </returns>
            <summary> Sets whether or not this column has been hidden</summary>
            <param name="aFlag">whether or not this column has been hidden
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCOLINFO.OutlineLevel">
            <summary> Returns the outline level of the column(s)</summary>
            <returns> the outline level of the column(s)
            </returns>
            <summary> Sets the outline level of the column(s)</summary>
            <param name="aLevel">the outline level of the column(s)
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCONDFMT">
            <summary> 
            
            </summary>
            <author>  geoffk
            May 19, 2005 3:47:31 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordContinue">
            <summary> <p>Title: RecordContinue.java</p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Oct 1, 2002
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRN.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRN.decode">
            <summary>  Override the default implementation but do not nullify the data buffer</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRN.encode">
            <summary>  Override the default implementation but do not nullify the data buffer</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRN.FirstColumn">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRN.Row">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordCRN.OperandType">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDBCELL">
            <summary> <p>
            Title: RecordDBCELL.java
            </p>
            <p>
            Description:
            </p>
            <p>
            Copyright: Copyright (c) 2002 SoftArtisans
            </p>
            <p>
            Company: SoftArtisans
            </p>
            
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Oct 22, 2002
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDBCELL.incrementCellCount(System.Int32)">
            <param name="cellCount">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDBCELL.NewSize">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDCONREF">
            <summary> Copyright (c) 2002 SoftArtisans
            
            This record shows where a pivot table gets its data. SXVIEW (pivot table view) has iCache which is an index to a SXIDSTM
            (SXStreamID in the 2008 docs), and a few records that record after this should appear. That's how SXVIEW knows how
            to find this.
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Oct 28, 2002
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDCONREF.#ctor">
            <summary>
            This is only used when we are going to fill the record with data immediately afterwards
            
            For technical reasons, this needs to be a parameterless constructor. When using generics,
            you can specify that T is a type of some class, and you can also say, new(), which means 'has a default constructor'
            There is no way to specify that a non-default constructor exists
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDEFCOLWIDTH">
            <summary> <p>The DEFCOLWIDTH record specifies the width of all columns not 
            explicitly defined with a COLINFO record.  The record specifies
            the width as a number of characters in the normal font.  However,
            the value stored in this record is not the actual default width
            Excel will display for the columns.</p>
            <p>According to MS KB article 214123, Excel begins with a default column
            width of 8 characters (presumably as specified in this record).  It then
            converts this value to pixels based on the font in the Normal style and
            then rounds up to the nearest multiple of 8 pixels.  This is the actual
            default width...</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDEFCOLWIDTH.#ctor(System.Int16,System.Int32,System.Int64)">
            <summary> Construct a new DEFCOLWIDTH record
            
            </summary>
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDEFCOLWIDTH.doEncode">
            <seealso cref="!:Record#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDEFCOLWIDTH.doDecode">
            <seealso cref="!:Record#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDEFCOLWIDTH.MinimumSize">
            <seealso cref="!:Record#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDEFCOLWIDTH.Width">
            <summary> Returns the default column width for the worksheet in characters</summary>
            <returns> the default column width for the worksheet in characters
            </returns>
            <summary> Sets the default column width for the worksheet in characters</summary>
            <param name="aWidth">the new default column width
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDimensionsBIFF8">
            <summary> <p>Title: RecordDimensionsBIFF8.java</p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Oct 24, 2002
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDV.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aType">
            </param>
            <param name="aSize">
            </param>
            <param name="aOffset">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordExcelLABEL">
            <summary>
            From 2.4.159 in MS-XLS:
            This record specifies a label range for natural language formulas
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNameBase.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNameBase.Rgch">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNameBase.Rgce">
            <returns>
            </returns>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordEXTERNNAME.ixals">
            <summary>
            See 2.5.106 in MS-XLS. We assume it's 0 for now
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordEXTERNNAME.reserved">
            <summary>
            A field that is always zero
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordEXTERNNAME.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordEXTERNNAME.#ctor(System.String)">
            <summary>
            Create an EXTERNNAME record with the given name
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordEXTERNNAME.Ixals">
            <summary>
            See 2.5.106 in MS-XLS. We assume it's 0 for now
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordEXTERNNAME.Reserved">
            <summary>
            A field that is always zero
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordExternSheetBIFF8">
            <summary> <p>Title: ExternSheet (BIFF8)</p>
            <p>Description: Excel BIFF8 record that indicates a reference to an external sheet.</p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, ${date}
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordExternSheetBIFF8.addXTI(System.Int32,System.Int32,System.Int32)">
            <summary> Adds an external reference to this sheet.</summary>
            <returns> the new index for the XTI.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordExternSheetBIFF8.XtiCount">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordExternSheetBIFF8.CXTI">
            <summary> Returns the m_cXTI.</summary>
            <returns> int
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordExternSheetBIFF8.RgXTI">
            <summary> Returns the m_rgXTI.</summary>
            <returns> XTI[]
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordExternSheetBIFF8.XTI">
            <summary>
            From 2.5.344
            This structure specifies a supporting link and scope information about that supporting link. 
            
            From 2.2.7.2
            Each formula element which references external data refers to a XTI.
            
            From me:
            Usually itabs are worksheet indexes, a range from first to last, inclusive. Otherwise
            it's 0xffff or 0xfffe (-1 and -2 for 16 bit numbers) and it means something special
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordEXTSST">
            <summary>
            See 2.4.107 in MS-XLS.
            
            This record specifies the location of sets of strings within the shared string table, specified in the
            SST record. This record is used to perform a quick lookup of a string within the shared string table,
            given the string‘s index into the table (as specified in LabelSst). To do that, first use the string‘s
            index and the value of dsst to find the set the string is in, then use the corresponding element in
            rgISSTInf to find the beginning of that set, and finally search incrementally forward in that set to
            locate the string.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordEXTSST.dsst">
            <summary>
            An unsigned integer that specifies the number of strings in each set specified by
            ISSTInf. Numbers of strings in each set except the last set MUST be equal to the value
            specified by the following formula:
            
            max(((SST.cstUnique / 128) + 1), 8)
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordEXTSST.rgISSTInf">
            <summary>
            An array of ISSTInf structures. Each array element specifies the location
            of a set of strings within the SST record.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordEXTSST.calculateSize(System.Collections.Generic.List{SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordEXTSST.ISSTInf})">
            <summary>
            Recalculate the EXTSST record using information from the SSTHandler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordEXTSST.calculateOffsets(System.Collections.Generic.List{SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordEXTSST.ISSTInf})">
            <summary>
            NOTE: the first time calculateSize is called, we didn't have the correct file offset information
            so we have to do it again
            </summary>
            <param name="offsets"></param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordEXTSST.ISSTInf">
            <summary>
            This structure is the array element used in the rgISSTinf field of the ExtSST record. ib and
            cbOffset provide a way to access the first string in the set of strings specified by this structure.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordEXTSST.ISSTInf.ib">
            <summary>
            A FilePointer as specified in [MS-OSHARED] section 2.2.1.5 that specifies the zero-
            based offset into the workbook stream where the first string in the set of strings starts.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordEXTSST.ISSTInf.cbOffset">
            <summary>
            An unsigned integer that specifies the zero-based offset into the SST or
            Continue record, in which the first string in the set of strings starts. MUST be less than ib. The
            size of the SST or Continue record is determined by reading the record header at the location
            specified by the following formula:
            
            ib – cbOffset
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordEXTSST.ISSTInf.reserved">
            <summary>
            must be zero
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordEXTSST.ISSTInf.write(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer,System.Int32,System.Int32)">
            <summary>
            NOTE: start and len refer to the data in this class, not locations in buffer
            </summary>
            <param name="buffer"></param>
            <param name="start"></param>
            <param name="len"></param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFactory">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFactoryApplication">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFactoryApplication.createRecord(System.Int16,System.Int32,System.Int64)">
            <seealso cref="!:RecordFactory#createRecord(RecordHeader)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFactoryTemplate">
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFactoryTemplate.createRecord(System.Int16,System.Int32,System.Int64)">
            <seealso cref="!:RecordFactory#createRecord(RecordHeader)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFILEPASS">
            <summary> Created by IntelliJ IDEA.
            User: ianr
            Date: Jun 18, 2004
            Time: 4:55:02 PM
            To change this template use File | Settings | File Templates.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFont">
            <summary> A FONT record represents a font and its associated styles.
            
            </summary>
            <author>  geoffk Jul 29, 2004 4:56:30 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFont.Equals(System.Object)">
            <summary> Override of Record.equals, because encoding this many many times is
            expensive.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFont.CustomBoldStyle">
            <summary> Bold style must be between 100 and 1000; if it's outside of those bounds,
            we set to the nearest bound. Default is 190h for regular, 2BCh for bold.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFont.Bold">
            <returns> true if the bold setting is the normal bold value.
            </returns>
            <summary> Sets the default boldness level.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFormat.doEncode">
            <seealso cref="!:Record#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFormat.doDecode">
            <seealso cref="!:Record#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFormat.MinimumSize">
            <seealso cref="!:Record#getMinimumSize()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFORMULA">
            <summary> <p>Title: RecordFORMULA.java</p>
            <p>Description: Implementation incomplete</p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Nov 11, 2002
            </version>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFORMULA.m_grbit_fAlwaysCalc">
            <summary>  00: unsigned __int16 Row;
            02: unsigned __int16 Col;
            04: unsigned __int16 XFIndex;
            
            06:  union
            {
            unsigned __int64 ieee;                  // Current value of the formula (see text)
            struct
            {
            unsigned __int8  fieldType; 1
            unsigned __int8  reserved1; 1
            unsigned __int8  value    ; 1
            unsigned __int8  reserved3; 1
            unsigned __int8  reserved4; 1
            unsigned __int8  reserved5; 1
            unsigned __int16 fExprO   ; 2
            } boolerr;
            } num;
            
            14:  struct                                 // Option flags:
            {
            unsigned __int16 fAlwaysCalc : 1;   //      Always calculate the formula
            unsigned __int16 fCalcOnLoad : 1;   //      Calculate the formula when the file is opend
            unsigned __int16 Reserved1   : 1;   //      (Reserved)
            unsigned __int16 fShrFmla    : 1;   //      =1 if the formula is part of the shared formula group
            unsigned __int16 Unused1     : 4;   //      (Unused)
            unsigned __int16 Unused2     : 8;   //      (Unused)
            } grbit;
            
            16:  unsigned __int32 chn;                  // Ignore. When writing a file _must_ be 0x0000000000h
            20:  unsigned __int16 cce;                  // Length of the parsed expression
            22:  unsigned __int8[] rgce;              // Parsed expression (variable length)
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFORMULA.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFORMULA.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:RecordCellBase#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFRT">
            <summary> <p>Future Record Types allow backwards compatibility between verions of
            Excel.  These records have a special extended header structure.  Verions
            of excel that do not recoginze FRT records will preserve them through
            modifications.</p>
            
            NOTE: nothing uses this class yet
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFRT.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFRT.doExtendedDecode">
            <summary> Specific FRT records should implement this method to read record 
            specific fields.  This is equivilant to doDecode for normal records.
            </summary>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFRT.doExtendedEncode">
            <summary> Specific FRT records should implement this method to write record 
            specific fields.  This is equivilant to doEncode for normal records.
            </summary>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFRT.getRef">
            <summary> The Ref structure specifies what rows/cols this record applys to.  It is
            only present if the bitfFrtRef is set in the grbit field.
            </summary>
            <returns> the ref structure for this record or null if this record 
            does not have a ref structure.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFRT.setRef(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFRT.Ref)">
            <summary> Sets the ref structure for this record.  The flag in the grbit field
            will automatically be maintained.
            </summary>
            <param name="aRef">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFRT.MinimumSize">
            <summary> Returns the minimum size of the record specific data plus the extended
            FRT header.
            </summary>
            <seealso cref="!:Record#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFRT.ExtendedMinimumSize">
            <summary> Specific FRT records should implement this method to return the minimum
            size of record specific data.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFRT.IsVolitile">
            <summary> Returns whether Excel should pop up an anoying warning message if it
            detects this record but does not understand it.
            </summary>
            <returns> true for the anoying message and false otherwise.
            </returns>
            <summary> Sets the whether excel should display an anoying error message if it
            detects this record but does not understand it.
            </summary>
            <param name="aFlag">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFRT.Ref">
            <summary> <p>The Ref structure describes what rows and columns a FRT record
            applies to.  It is only present in some FRT records.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordGELFRAME.initializeForChartFillPattern">
            <summary>
            Creates default properties for the GELFRAME record.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordGELFRAME.FillBackgroundColor">
            <summary>
            This returns an EscherColorModel because it wraps the escher color property evilness.
            Use the setColor function on it to alter the color.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordGELFRAME.FillForegroundColor">
            <summary>
            This returns an EscherColorModel because it wraps the escher color property evilness.
            Use the setColor function on it to alter the color.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHeader">
            <summary> <p>Title: RecordHeader.java</p>
            <p>Description: Contains the type and size of a record.</p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Sep 30, 2002
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHeader.uninit">
            <summary> Constructors for RecordHeader.
            Assume Little Endian data format.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHFPicture">
            <summary>
            HFPicture record is simply a wrapper around DGContainer or DGGContainer
            and their continue records, depanding on the flags
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHFPicture.mFlag">
            <summary>
            OK to save this as a short since it's upper 13 bits are ignored
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHFPicture.frtHeader">
            <summary>
            The HFPicture starts with a FutureHeader
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHFPicture.MinimumSize">
            <summary>
            Minimum size is 14 bytes since we have 2 for flag + 12 for frtHeader
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHLink">
            <summary>
            Record HLink from 2.4.140 in MS-XLS, and mostly 2.3.7.1 in MS-OSHARED. Describes a hyperlink
            
            NOTE: some items may be null. Check appropriate bools in flags before messing with fields
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHLink.classIdentifier">
            <summary>
            hlinkClsid in docs, 16 bytes. Seems unimportant
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHLink.streamVersion">
            <summary>
            Must be 2
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHLink.flags">
            <summary>
            Technically this is flags and a reserved field, but the reserved field is 0
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHLink.reserved">
            <summary>
            Must be 0
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHLink.WriteUnicodeString(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer,System.String)">
            <summary>
            Writes an array of unicode bytes, followed by a 16-bit null terminator
            </summary>
            <param name="str"></param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHLink.HyperlinkMoniker">
            <summary>
            These are described on the pages following 2.3.7.1 in MS-OSHARED
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHLink.HyperlinkMoniker.classId">
            <summary>
            16 byte array describing what kind of moniker this is.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHLink.UrlMonikerStruct.#ctor(System.String)">
            <summary>
            NOTE: this is currently unused, we use the moniker string instead to do hyperlinks
            if we create them from scratch
            </summary>
            <param name="url"></param>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHLink.AntiMonikerStruct.count">
            <summary>
            should be less than 1048576
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordHLink.HyperlinkFlags">
            <summary>
            See 2.3.7.1 in MS-OSHARED for definition of flags
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordINDEXBIFF8">
            <summary> <p>Title: RecordINDEXBIFF8.java</p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Oct 22, 2002
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordINDEXBIFF8.addOffset(System.Int32)">
            <param name="i">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLABEL">
            <summary> <p>Title: RecordLABEL.java</p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Nov 8, 2002
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordLabelSST">
            <summary> <p>Title: LabelSST.java</p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Oct 15, 2002
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordMargin.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordMULBLANK">
            <summary> <p>Title: RecordMULBLANK.java</p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Oct 22, 2002
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordMULBLANK.GetChildBlanks">
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordMULBLANK.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:RecordCellBase#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordMULRK">
            <summary> <p>Title: RecordMULRK.java</p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Oct 22, 2002
            </version>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordMULRK.XFRefs">
            <seealso cref="!:IMultiXFReference#getXFRefs()">
            </seealso>
            <seealso cref="!:IMultiXFReference#setXFRefs(int[])">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNAME">
            <summary>
            In the MS-XML docs, this is called LBL (2.4.150)
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNAME.m_chKey">
            <summary>
            Keyboard shortcut
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNAME.m_ixals">
            <summary>
            Index to the sheet that contains this name, if the name is a local name (see text)
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNAME.m_itab">
            <summary>
            1-based index into the sheets in the current book, where 
            the list is arranged by the visible order of the tabs.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNAME.m_rgchCustMenu">
            <summary>
            Custom menu text
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNAME.m_rgchDescr">
            <summary>
            Description text
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNAME.m_rgchHelptopic">
            <summary>
            Help topic text
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNAME.m_rgchStatusText">
            <summary>
            Status bar text
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNAME.RgchDesc">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNAME.Itab">
            <summary>
            1-based index into the sheets in the current book, where 
            the list is arranged by the visible order of the tabs.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNoDecode.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aType">
            </param>
            <param name="aSize">
            </param>
            <param name="aOffset">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNOTE">
            <summary> <p>The NOTE record associates comment information with a particular cell.
            The record really dosen't hold much of value besides associating a 
            drawing (Msodrawing stuff and an OBJ record) with a particular cell.</p>
            <p>The NOTE record is a little strange because each record holds the
            name of the original author of the comment.  This is not the bold author
            name that excel automatically inserts into the text of the comment (that
            is stored in the text of the comment and is editable). This author
            field does not appear to be editable in excel, but we can ....</p>
            <p>The record has the following structure:</p>
            <code>
            Offset   Name        Size    Comments
            4        rw          2       Row of comment
            6        col         2       Column of comment
            8        grbit       2       Options Flags
            10       idobj       2       Object id for OBJ record
            12       stAuthor    var     Name of original author
            
            stAuthor consists of the following (it is almost a standard Excel BIFF str)
            Offset   Size    Comments
            10       2       Count of characters in string
            12       1       grbit field for string
            13       var     The string bytes
            -        1       A mysterious byte that follows the string...
            
            grbit contains the following
            Bits     Mask        Name        Contents
            0        0001h       (Reserved)  Reserved Must be 0
            1        0002h       fShow       =0 if comment is hidden (default)
            2-15     FFFCh       (Reserved)  Reserved Must be 0
            </code>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNOTE.#ctor(System.Int16,System.Int32,System.Int64)">
            <summary> Construct a new RecordNOTE with the specified header
            
            </summary>
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNOTE.doEncode">
            <seealso cref="!:Record#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNOTE.doDecode">
            <seealso cref="!:Record#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNOTE.MinimumSize">
            <seealso cref="!:Record#getinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNOTE.ShowComment">
            <summary> Returns whether or not this comment should be hidden.</summary>
            <returns> whether or not this comment should be hidden.
            </returns>
            <summary> Sets whether or not this comment should be hidden.</summary>
            <param name="whether">or not this comment should be hidden.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNOTE.Author">
            <summary> Returns the original author for the comment</summary>
            <returns> the original author for the comment
            </returns>
            <summary> Sets the original author for the comment</summary>
            <param name="author">the original author for the comment
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNOTE.Column">
            <summary> Returns the column of the cell </summary>
            <returns> Returns the mColumn.
            </returns>
            <summary> Sets the column of the cell</summary>
            <param name="aColumn">the column of the cell
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNOTE.ObjId">
            <summary> Returns the ID of the OBJ record associated with this NOTE</summary>
            <returns> the ID of the OBJ record associated with this NOTE
            </returns>
            <summary> Sets the ID of the OBJ record associated with this NOTE</summary>
            <param name="objId">the ID of the OBJ record associated with this NOTE
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNOTE.Row">
            <summary> Returns the row for this comment</summary>
            <returns> the row for this comment.
            </returns>
            <summary> Sets the row for this comment</summary>
            <param name="row">the row for this comment
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordNumber">
            <summary> <p>Title: RecordNum.java</p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Oct 21, 2002
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordOBJPROTECT.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPALETTE">
            <summary> <p>The Palette record holds information about the custom color palette
            used in a spreasheet.  This record is only writen if the default palette is
            not used.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPALETTE.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPALETTE.doEncode">
            <seealso cref="!:Record#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPALETTE.doDecode">
            <seealso cref="!:Record#doDecode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPALETTE.fillWithColors">
            <summary>
            Some PALETTE records have fewer than 56 (the maximum number) of colors. Set the other colors
            to their defaults according to 2.5.161 in MS-XLS
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPALETTE.MinimumSize">
            <seealso cref="!:Record#getMinimumSize()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPALETTE_Color">
            <summary> <p>Class to hold the values of Red, Green, and Blue that make up a 
            color definition.  Each of these values is represented by an unsigned
            byte.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPALETTE_Color.#ctor(System.Int32,System.Int16,System.Int16,System.Int16)">
            <summary> Construct a new color from the specified RGB value</summary>
            <param name="aRed">the red value
            </param>
            <param name="aGreen">the green value
            </param>
            <param name="aBlue">the blue value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPALETTE_Color.getBlue">
            <returns> Returns the mBlue.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPALETTE_Color.setBlue(System.Int16)">
            <param name="blue">The mBlue to set.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPALETTE_Color.getGreen">
            <returns> Returns the mGreen.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPALETTE_Color.setGreen(System.Int16)">
            <param name="green">The mGreen to set.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPALETTE_Color.getRed">
            <returns> Returns the mRed.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPALETTE_Color.setRed(System.Int16)">
            <param name="red">The mRed to set.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPASSWORD">
            <summary> <p>Title: RecordPASSWORD.java</p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Jean Renard Ward
            </author>
            <version>  1.0, April 27, 2003
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPRINTEDCHARTSIZE.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPROT4REV.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPROT4REVPASS.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordPROTECT.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordReader.hasMore">
            <summary> Returns true if there are more records available. Currently only checks
            to see if there are at least four more bytes available.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordReader.readNoSideEffects(System.Int64,System.SByte[],System.Int32,System.Int32)">
            <summary>
            Reads in some bytes from a specific location and seeks to the location before this method was called.
            </summary>
            <param name="aStartOffset">the location within the stream to start reading</param>
            <param name="aBuf">the array to store the data read in</param>
            <param name="aOff">the location in <code>aBuf</code> to start writing data</param>
            <param name="aMaxLength">the max number of bytes to read in</param>
            <returns>the actual number of bytes read in</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordReader.next">
            <summary> Advances to the next record in the stream.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordReader.reread">
            <summary> Rereads the current record. Useful if the underlying Navigator has been
            written to since the current record was read.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordReader.seek(System.Int64)">
            <summary> Locates a position aSkip bytes in the stream from the beginning of the
            stream; this gets the next record from that position.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordReader.skip(System.Int32)">
            <summary> Skips aDiff bytes from the current position, attempts to read a record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordReader.skipRecords(System.Int32)">
            <summary> Skips up to aSkip records in the stream.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordReader.reset">
            <summary> Resets the stream to the beginning.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordReader.findRecord(System.Int16)">
            <summary> Finds a record from the current position, using 0xFFFF as the final
            record to look at.
            
            </summary>
            <returns> True if the record was found (record will be available with
            getHeader() and getRecord()).
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordReader.findRecord(System.Int16,System.Int16)">
            <summary> Finds a record from the current position. It will stop when it finds the
            record, aRecToStop, 0xFFFF, or the end of the stream.
            
            </summary>
            <returns> True if the record was found (record will be available with
            getHeader() and getRecord()).
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordReader.Header">
            <summary> Returns the header (type, size, and offset) of the current record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordReader.Record">
            <summary> Returns the current record, including the header and the data associated
            with it.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordRK">
            <summary> <p>
            Title: RecordRK.java
            </p>
            <p>
            Description:
            </p>
            <p>
            Copyright: Copyright (c) 2002 SoftArtisans
            </p>
            <p>
            Company: SoftArtisans
            </p>
            
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Oct 21, 2002
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordRow">
            <summary> <p>Title: RecordRow.java</p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Oct 16, 2002
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSCENPROTECT.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSCL.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSHRFMLA">
            <summary> <p>Title: RecordSHRFMLA.java</p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Nov 21, 2002
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSST">
            <summary> <p>Title: SST (Structured Storage Table)</p>
            <p>Description: Excel (BIFF8) record that represents a Structured Storage table.</p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, ${date}
            </version>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSST.m_cstTotal">
            <summary>
             Total number of strings in the shared string table and extended string table (EXTSST)
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSST.m_cstUnique">
            <summary>
            Number of unique strings in the shared string table.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSST.m_rgb">
            <summary>
            Array of unique strings, but not an array because it could be larger than what it should be...
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSTANDARDWIDTH.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSTRING.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSTRING.Value">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordStyle">
            <summary> Parent Style record -- handles ixfe's.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordStyle.MinimumSize">
            <seealso cref="!:Record#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordStyle.BuildIn">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordStyle.Rgch">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSUPBOOK">
            <summary> SUPBOOK records contains information about external workbooks referenced
            in this workbook. 
            
            </summary>
            <author>  tkiely
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSUPBOOK.SelfReferencingLinkType">
            <summary>
            See 2.4.271 for definition of this number
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSUPBOOK.AddInReferencingLinkType">
            <summary>
            See 2.4.271 for definition of this number.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSUPBOOK.mCtab">
            <summary>
            number of tabs. Should be ignored if mPlen is SelfReferencingLinkType
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSUPBOOK.mPlen">
            <summary> len of encoded path - defaults to 0x0401 (SelfReferencingLinkType) if path is not set
            This is really the cch field of the string.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSUPBOOK.mIsExplicitSelf">
            <summary> This will be true when this SUPBOOK record represents an explicit 
            reference to the workbook containing it.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSUPBOOK.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSUPBOOK.doEncode">
            <seealso cref="!:Record#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSUPBOOK.doDecode">
            <seealso cref="!:Record#doDecode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSUPBOOK.decodePath(System.String)">
            <summary> Given a String containing an encoded path, this method returns the 
            the encoded string.  The result should be identical or as close to 
            the string Excel would generate as possible.
            </summary>
            <param name="aString">the String to decode
            </param>
            <returns> the decoded string.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSUPBOOK.getTabName(System.Int32)">
            <summary> Returns the tab name at the specified index.  </summary>
            <param name="aIndex">the index of the tab to get the name for.  This must be
            between 0 (inclusive) and getTabCount() (exclusive);
            </param>
            <returns> the name of the tab at the specifed index
            </returns>
            <throws>  IndexOutOfBoundsException if aIndex is invalid </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSUPBOOK.MinimumSize">
            <seealso cref="!:Record#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSUPBOOK.FileName">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSUPBOOK.SupbookTypeOrLength">
            <summary> len of encoded path - defaults to 0x0401 (SelfReferencingLinkType) if path is not set
            or 0x3a01 if it refers to addin functions
            This is really the cch field of the string.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSXVIEW.#ctor">
            <summary>
            This is only used when we are going to fill the record with data immediately afterwards
            
            For technical reasons, this needs to be a parameterless constructor. When using generics,
            you can specify that T is a type of some class, and you can also say, new(), which means 'has a default constructor'
            There is no way to specify that a non-default constructor exists
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTXO">
            <summary> <p>The TXO record stores a text object.  This appears as the content of
            the CLIENTTEXTBOX area in a sequence of MSODRAWING records.  If the 
            text object represented by this record actually contains text, this record
            will be followed by two CONTINUE records.  The first will hold the text
            itself and the second will hold the formatting runs for the text</p>
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTXO.#ctor(System.Int16,System.Int32,System.Int64)">
            <summary> Constructs a new RecordTXO from the specified header</summary>
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTXO.doEncode">
            <seealso cref="!:Record#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTXO.doDecode">
            <seealso cref="!:Record#doDecode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTXO.MinimumSize">
            <seealso cref="!:Record#getinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTXO.HorizontalAlign">
            <summary> Returns the horizontal alignment of the text</summary>
            <returns> the horizontal alignment of the text
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTXO.HorizontalAlignment">
            <summary> Sets the horizontal alignment of the text</summary>
            <param name="aAlign">the horizontal alignment of the text
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTXO.VerticalAlignment">
            <summary> Return the vertical alignment of the text</summary>
            <returns> the vertical alignment of the text
            </returns>
            <summary> Sets the vertical alignment of the text</summary>
            <param name="aAlign">the vertical alignment of the text
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTXO.LockText">
            <summary> Returns whether the text is locked</summary>
            <returns> whether the text is locked
            </returns>
            <summary> Sets whether the text is locked</summary>
            <param name="aValue">whether the text is locked
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTXO.FormatRunsLen">
            <returns> Returns the mFormatRunsLen.
            </returns>
            <param name="formatRunsLen">The mFormatRunsLen to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTXO.Rotation">
            <returns> Returns the mRotation.
            </returns>
            <param name="rotation">The mRotation to set.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTXO.TextLen">
            <returns> Returns the mTextLen.
            </returns>
            <param name="textLen">The mTextLen to set.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTXO_HorizontalAlign">
            <summary> <p>Type-safe enum class holding the values for the Horizontal Alignment 
            field in RecordTXO</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTXO_Rotation">
            <summary> <p>Typesafe enum class holding options for the rotation field in the
            TXO record</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordTXO_VerticalAlign">
            <summary> <p>Typesafe enum class holding the values for the Vertical align field
            of the TXO record</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordWindow1">
            <summary> <p>Title: Window1</p>
            <p>Description: BIFF8 Excel record indicating the workbook level window attributes.</p>
            <p>Copyright: Copyright (c) 2004 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Ian Roof
            </author>
            <version>  1.0, ${date}
            </version>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordWindow1.someTabIdChanged">
            <summary>
            NOTE: if one of the setters sets this to true, we need to call EnsureTabIdsAreValid afterwards
            
            There may be a way to call EnsureTabIdsAreValid when saving instead, but it seems more
            complicated to implement it that way, given that we need access to RecordRRTABID
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordWindow1.EnsureTabIdsAreValid(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordRRTABID,System.Int32)">
            <summary>
            Make sure tabids we use here exist in record RRTABID
            </summary>
            <param name="recordRrtabid"></param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordWindow2">
            <summary> Created by IntelliJ IDEA.
            User: ianr
            Date: Jan 19, 2004
            Time: 4:01:40 PM
            To change this template use Options | File Templates.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordWINDOWPROTECT.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordWriter">
            <summary> 
            
            </summary>
            <author>  geoffk
            Feb 22, 2005 5:16:34 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordWriter.insertRecord(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <summary> Inserts the record into the buffer. The record is inserted after the
            current record. Following this operation, the current record will be the
            next record in the stream.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordWriter.replaceRecord(System.SByte[],System.Int32)">
            <summary> Inserts a record into the buffer, replacing aBytesToReplace in the
            underlying stream, starting from the beginning of this record. Following
            this operation, the current record will be null; you must call next to
            get the next record in the stream.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordWriter.replaceRecord(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <summary> Replaces the current record. Following this operation, the current record
            will be the next record in the stream.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordWriter.replaceRecordBytes(System.SByte[],System.Int32)">
            <summary> Inserts a record data into the buffer, replacing aBytesToReplace in the
            underlying stream, starting from the beginning of the data potion of the record.
            Following this operation, the current record will be null;
            you must call next to get the next record in the stream.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordXCT.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordXF.copy(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFactory)">
            
            <seealso>SoftArtisans.OfficeWriter.ExcelWriter.Record#copy()</seealso>
            
            <summary>Overrides the Record.copy() method.  When creating lots of styles, it's
            likely that the parent XF index value will be greater than 4095 (the maximum
            addressable value in a 12-bit field).  Calling encode() on the XF record before
            the optimization step will cause an exception to be thrown.  So, instead,
            we do a bit-wise copy of all of the XF record's fields.  (Except we do create
            a copy of the mData buffer.) </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordXF.doEncode">
            <seealso cref="!:Record#doEncode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordXF.doDecode">
            <seealso cref="!:Record#doDecode()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordXF.addCellXf(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordXF)">
            <param name="cellXfRec">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordXF.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:Record#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordXF.Equals(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordXF)">
            <returns> true, if this and the target XF record are semantically equal.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordXF.MinimumSize">
            <seealso cref="!:Record#getMinimumSize()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordXF.StyleXF">
            <returns> true if this is a StyleXF; false if this is a CellXF.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordXF.IsStyleXF">
            <param name="aIsStyle">if true, this is a StyleXF; otherwise, a CellXF.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordXF.CellXfsSet">
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordXF.Rotation">
            <param name="aRotation">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordXF_BorderStyle">
            <summary> 
            </summary>
            <author>  geoffk
            Aug 2, 2004 3:37:46 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RKEncoder">
            <summary> <p>Title: RKEncoder.java</p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Jean Renard Ward
            </author>
            <version>  1.0, April 4, 2003
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RKEncoder.encodeRK(System.Double)">
            <summary> Constructor for RKEncoder.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RKEncoder.double2RK(System.Double,System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Records.RKStruct)">
            <summary> Performs the first (type 0x0) or the third (type 0x1) step of the RK conversion algorithm
            
            Are lower 34 bits of the IEEE number equal to 0?
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.RKEncoder.longint2RK(System.Double,System.Int64,SoftArtisans.OfficeWriter.ExcelWriter.Records.RKStruct)">
            <summary> Performs the second (type 0x1) or the forth (type 0x3) step of the RK conversion algorithm.
            
            Can this number be represented by a30 bit integer?
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.RKStruct">
            <summary>Encode as RK value.
            returns "true"  if the value fits.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.SelectionRecord.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.SetupRecord">
            <summary>
            From MS-XLS, 2010 2.4.257:
            The Setup record specifies the page format settings used to print the current sheet.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.SetupRecord.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.SSTHandler">
            <summary> <p>Title:SSTHandler</p>
            <p>Description: Utility class for dealing with the SST.</p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SSTHandler.WriteOrCalculateSize(System.IO.Stream)">
            <summary>
            Writes SST to stream, or calculates its size if aOut is null and returns result
            
            TODO: this should be refactored. This class calculates record sizes for SST and CONTINUE,
            writes out those records, and maintains a list of stringOffsets for use in creating EXTSST,
            and these things have to happen in a certain order (first calculate sizes, then write to a record.
            stringOffsets is updated during the writing step.)
            </summary>
            <param name="aOut">null if we calculate for mRecordSizes, otherwise we're writing to a stream</param>
            <returns></returns>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.SSTHandler.stringOffsets">
            <summary>
            This is populated so that EXTSST can be created using its info. It contains
            the WORKBOOK stream offset of the SST (or CONTINUE) record 
            and of each string in it, so we can't just create this inside EXTSST 
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.SSTHandler.startRecordPosition">
            <summary>
            When writing to an output stream, this keeps track of the start of the current SST or CONTINUE
            record. This is a WORKBOOK stream offset. If this is not the same as the stream position in
            WriteOrCalculateSize(aOut), then we have a problem
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SSTHandler.#ctor">
            <summary> Constructor for SSTHandler.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SSTHandler.isFieldMarker(System.Int32)">
            <summary> Returns true if this offset for this SST contains a FieldMarkerPrefix.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SSTHandler.addString(System.String)">
            <summary>
            Adds the given string to the shared string table, and constructs a BIFF8 wrapper around it.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SSTHandler.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler)">
            <param name="handler">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SSTHandler.cloneString(System.Int32)">
            <param name="aIndex">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SSTHandler.TotalStrings">
            <summary> Returns the total number of strings (non unique) in this worksheet.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SSTHandler.UniqueStrings">
            <summary> Returns the total number of strings stored in this string table.
            This is by definition the unique strings.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SSTHandler.Strings">
            <summary> Returns an enumeration of the unique strings in the table, in order.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.SSTReader">
            <summary> Reads records to generate a continue. 
            WARNING: This advances the RecordReader passed in the constructor!
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.SSTReader.skipString">
            <summary> Skips a single string in the SST.
            Returns false if there is no more data.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.SSTReader.readString">
            <summary> Reads a single BIFF8 string from the SST and returns it.
            Returns null(?) if there is no more data.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.SSTReader.totalStrings">
            <summary> Returns the total number of strings in the SST as reported by the record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.SSTReader.uniqueStrings">
            <summary> Returns the number of unique strings in the SST as reported by the record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.SSTReader.skip(System.Int32)">
            <summary> Moves the current offset forward until it reaches the end of the array, then resets it and continues
            moving it through the next.  Returns false if we run out of data.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.SSTReader.read(System.SByte[],System.Int32,System.Int32)">
            <summary> Reads data into a byte array; returns false if the internal buffers run out.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.SSTReader.readNoFill(System.SByte[],System.Int32,System.Int32)">
            <summary> Reads data into a byte array without refilling the internal buffer.  Returns number of bytes read.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.SSTReader.moreAvailable">
            <summary> Returns true if there is more data in the record buffer;
            false if all data has been accumulated.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.SSTReader.StrHeader">
            <summary> Obtains the header for a BIFF8 string in the SST.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.SSTRecordData.readNextBuffer">
            <summary> Reads the next record into the buffer, returns false if it is not an xlrecCONTINUE or xlrecSST.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.StringWrapperBIFF8">
            <summary> <p>
            Title: StringWrapper for BIFF8 Strings
            </p>
            <p>
            Description: Reads BIFF8 Unicode and ASCI strings appropriately, including
            Far East dara.
            </p>
            <p>
            Copyright: Copyright (c) 2002 SoftArtisans
            </p>
            <p>
            Company: SoftArtisans
            </p>
            
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.StringWrapperBIFF8.mRunsMap">
            <summary>Map used to hold formatting runs
             The key will be the character index and the value is the font index</summary> 
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.StringWrapperBIFF8.#ctor(System.Int32,System.SByte,System.Int32,System.Int64)">
            <summary> Construct a String Wrapper with no data but setting the header data from
            the given parameters.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.StringWrapperBIFF8.attachDataBuffer(SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer)">
            <summary> Sets the character, formatting runs, and far east data for this string
            from a byte buffer. The byte buffer must not include the header
            information.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.StringWrapperBIFF8.getGrbit(System.Boolean)">
            <summary> Returns the flag bits in this string.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.StringWrapperBIFF8.calculateGrBit(System.Boolean)">
            <summary> Calculate the flag bits for this string.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.StringWrapperBIFF8.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler)">
            <param name="handler">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.StringWrapperBIFF8.optimizeRuns">
            <summary>
            Removes character runs that don't need to be written to the shared string table
            
            NOTE: When you add a string, it uses the character run list mRunsMap in addition to everything else to determine equality. 
            After this function executes and you remove that information, you may have many strings which are exactly equal. However,
            the shared string table will still write them out individually because there is no step to refresh the hash table
            and eliminate differences.
            
            If you try to fix that, be aware of any stray indexes to the old string table
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.StringWrapperBIFF8.DataSize">
            <summary> Returns the size of the data (including characters, far east runs, and
            formatting runs) for this string.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.StringWrapperBIFF8.FinalDataSize">
            <summary> Returns the size of the final data (formatting runs and far east runs).</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.StringWrapperBIFF8.FormatRunsDataSize">
            <summary> Returns the size of the formatting runs.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.StringWrapperBIFF8.FarEastDataSize">
            <summary> Returns the size of the far east runs.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.StringWrapperBIFF8.Size">
            <summary> Returns the number of bytes in this wrapper.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.StringWrapperBIFF8.HeaderSize">
            <summary> Get the size of the header for this string.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.StringWrapperBIFF8.String">
            <summary> Return the string for this wrapper.</summary>
            <summary> Set the string for this wrapper. Flag bits are updated when calling this
            method.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.StringWrapperBIFF8.Cch">
            <summary> Returns the count of characters (not bytes!!) in this string.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.StringWrapperBIFF8.Grbit">
            <summary> Returns the flag bits in this string.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.StringWrapperBIFF8.Rgb">
            <summary> Return the string for this wrapper.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Records.StringWrapperTXO">
            <summary> <p>StringWrapperTXO handles content and formatting runs for the strings
            associated with the TXO (CONTINUE CONTINE)? record structure.  These strings
            are sufficently different from the standard BIFF8 strings found in other
            places in the Excel document that StringWrapperBIFF8 could not be used
            or subclassed.  Some of these differences are:</p>
            <ul>
            <li>Formatting runs are 4 byte structures in standard strings and 8 byte
            structures (4 are reported unused) in TXO strings.</li>
            <li>All TXO strings have at least two formatting runs bookending the
            string contents</li>
            <li>TXO strings do not <i>appear</i> to support extended far eastern text
            data</li>
            <li>TXO strings grbit field does not include the 0x08 bit marking them as
            having formatting runs because the all have formatting runs by 
            definition</li>
            <li>The length of formatting runs in a TXO string is specified as a number
            of bytes.  In a standard string it is the number of runs</li>
            <li>The maximum length of a TXO string is 8099 bytes</li>
            </ul>
            
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Records.StringWrapperTXO.mRunsMap">
            <summary>Map used to hold formatting runs
             The key will be the character index and the value is the font index</summary> 
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.StringWrapperTXO.#ctor">
            <summary> Initialize a new StringWrapperTXO to have a zero length string and the
            minimal formatting runs.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.UnhandledRecord.buildStructuredOutput(SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler)">
            <seealso cref="!:Record#buildStructuredOutput(StructuredOutputHandler)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Records.UnhandledRecord.MinimumSize">
            <seealso cref="!:Record#getMinimumSize()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.VCenterRecord.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.VPageBreaksRecord.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Records.WsBoolRecord.#ctor(System.Int16,System.Int32,System.Int64)">
            <param name="aHeader">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedConditionalFormatting">
            <summary>
            Stores the Xml of a conditionalFormatting element in a worksheet
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedConditionalFormatting.sqref">
            <summary>
            The bounds of the condition
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedConditionalFormatting.pivot">
            <summary>
            A flag indicating if it's associated with a pivot table.
            See ECMA-376, second edition, section 18.3.1.18
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedConditionalFormatting.conditionalFormattingNamespaceURI">
            <summary>
            The NamespaceURI to apply to the conditionalFormatting element
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedConditionalFormatting.formulas">
            <summary>
            The contents of element formula in crRule
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedConditionalFormatting.GetRowAndColumn(System.String,System.String@,System.Int32@)">
            <summary>
            parse the reference into its component columns and rows
            </summary>
            <param name="reference">some reference or range, like A4 or B5:D6</param>
            <param name="column"></param>
            <param name="row"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedConditionalFormatting.#ctor(System.Xml.XmlReader,System.Int32@)">
            <summary>
            Create a representation of a conditionalFormatting element using the XmlReader as input.
            </summary>
            <param name="reader">This should start on the starting element named conditionalFormatting</param>
            <param name="elementCounter">We must iterate this so the calling function knows
            how many elements we passed</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedConditionalFormatting.Write(System.Xml.XmlWriter,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Write out conditionalFormatting XML with a different sqref
            </summary>
            <param name="writer"></param>
            <param name="newSqref"></param>
            <param name="newFormula">an updated formula.
            This is null if there was no formula element to begin with</param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedConditionalFormatting.BeginningRow">
            <summary>
            The upper row bound of the condition
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedConditionalFormatting.Formulas">
            <summary>
            The contents of element formula in crRule
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedConditionalFormatting.XmlPiece">
            <summary>
            An Xml piece, in the form presented to us by the XmlReader
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedMergeCells">
            <summary>
            Stores the data for the mergeCells xml element and writes it out
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedMergeCells.UpdateReferences(SoftArtisans.OfficeWriter.ExcelWriter.Template.IWorksheet,SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdateTable)">
            <summary>
            Update references list based on worksheet formula updates (rows expanded or contracted)
            </summary>
            <param name="worksheet"></param>
            <param name="workbook"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedMergeCells.SplitMergeCellAt(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Split merge cells if they occupy the column col and row row
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <param name="oldReferences"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedMergeCells.SplitMergeCellAt(System.String,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Make sure that merge cells which occur in the grouping block and at column col are split so that we
            have room to put a new merge cell only at column col
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <param name="beginGroupRow"></param>
            <param name="endGroupRow"></param>
            <param name="oldReferences"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedMergeCells.GetRangeInfo(System.String,System.String@,System.Int32@,System.String@,System.Int32@)">
            <summary>
            Split a range into its component pieces
            </summary>
            <param name="reference"></param>
            <param name="firstCol"></param>
            <param name="firstRow"></param>
            <param name="lastCol"></param>
            <param name="lastRow"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedMergeCells.GetReferenceInfo(System.String,System.String@,System.Int32@)">
            <summary>
            Split a reference into its component pieces
            </summary>
            <param name="cellRef"></param>
            <param name="col"></param>
            <param name="row"></param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedXmlCell">
            <summary>
            A condensed representation of the XML of a cell
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedXmlCell.#ctor(System.Xml.XmlReader,System.Int32@)">
            <summary>
            Used in WorksheetXmlFilter to turn some Xml into these objects
            </summary>
            <param name="reader">Used as a data source to populate object.
            reader starts and ends on 'c' </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedXmlCell.WriteTo(System.Xml.XmlWriter,System.String,System.String,System.String)">
            <summary>
            Write out the object model's XML
            </summary>
            <param name="writer">The output XmlWriter</param>
            <param name="currentRowNumberAsString"></param>
            <param name="rowStyle"></param>
            <param name="namespaceURI">Namespace URI of the reader. If null, we should
            ignore namespaces</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedXmlGroupingBlock">
            <summary>
            This processes the XML in a grouping block, from the beginning %%group row to the %%endgroup row
            
            Only the MarkerRow CondensedXmlRow is exposed. To get at the headers/footers,
            look into MarkerRowXML.HeaderRow[ ? ].Rows
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedXmlGroupingBlock.#ctor(System.Xml.XmlReader,System.Int32@,SoftArtisans.OfficeWriter.ExcelWriter.Template.IGroupRow,SoftArtisans.OfficeWriter.ExcelWriter.Template.ReadOnlySharedStringTable,System.Boolean)">
            <summary>
            Iterate through XML for grouping block. This in turn creates CondensedXmlHeaderRow objects and a
            CondensedXmlRow object for markers
            </summary>
            <param name="reader">an XmlReader</param>
            <param name="uniqueElementCount">increment this for each element so calling code
            knows how far we've iterated through</param>
            <param name="markerRow">the grouping block's marker row</param>
            <param name="sharedStringTable">Used to parse %%value markers</param>
            <param name="writeNamespacePrefix">If true, write with the namespace URI.
            If false, ignore namespaces (faster)</param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedXmlGroupingBlock.MarkerRow">
            <summary>
            The Xml Data from the marker row
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedXmlHeaderFooterRow">
            <summary>
            Store header or footer XML data in a compact form. Also parses %%value markers in these rows
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedXmlRow">
            <summary>
            A condensed representation of the XML of a row
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedXmlRow.#ctor(System.Int32,System.Xml.XmlReader,System.Int32@,System.Boolean)">
            <summary>
            Reads from reader to create an object model,
            like XmlDocument but specifically for rows in Excel 2007 files
            </summary>
            <param name="rowNumber">the row number. This is also int.Parse(reader.GetAttribute("r")), but
            we've already calculated that before construction, so we just take that value instead of
            calculating it again</param>
            <param name="reader">The data source which populates this object model. This should start on 'row'
            and end on 'row'</param>
            <param name="elementCounter">Used to let caller know how many element nodes we iterated over</param>
            <param name="writeNamespacePrefix">If true, write with the namespace URI.
            If false, ignore namespaces (faster)</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdateFilter">
            <summary>
            Update a formula to stretch it or push it down 
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaFilter">
            <summary>
            This class inputs a formula string and outputs a new formula string which is modified somehow. The base class
            should output everything it receives, if things are working correctly
            
            NOTE: some virtual methods were removed for performance reasons. Add them back if you need them
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaFilter.initialFormula">
            <summary>
            Starting formula
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaFilter.scanner">
            <summary>
            Token scanner for the formula
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaFilter.afterRangeSeparator">
            <summary>
            Are we after the ":" in a range (A3:B4)?
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaFilter.cellRefPartNumber">
            <summary>
            Keeps track of which part of a cell reference it is. 1 = column, 2 = row
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaFilter.inRowRange">
            <summary>
            A TxtSymbol.ROW_RANGE token was hit. It basically only says that, the first part of the cell 
            reference is the row instead of the column
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaFilter.isAbsoluteReference">
            <summary>
            Is this an absolute reference?
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaFilter.lastSheet">
            <summary>
            The last sheet number. Used to keep track of sheet number so it's not reset after
            the first cell reference in a range
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaFilter.updatedFormula">
            <summary>
            This is updated with the newly created formula
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaFilter.#ctor(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Template.IWorksheet,SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdateTable,System.Boolean)">
            <summary>
            You should know what you're doing if you use this constructor directly
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaFilter.Process">
            <summary>
            Calculates an updated formula string based on the input fed to the constructor
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaFilter.HandleLitInt">
            <summary>
            This is a normal number
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaFilter.HandleName">
            <summary>
            Handle name.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaFilter.EndOfFormula">
            <summary>
            Handle end of formula
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaFilter.HandleOpRange">
            <summary>
            This is the ':' in a range.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaFilter.HandleAbsolute">
            <summary>
            This is an absolute cell reference part. After this function is called, HandleRelative() is called, which
            does the bulk of the work
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaFilter.HandleRelative">
            <summary>
            Figure out if it's a row or a column, and call the respective functions
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaFilter.HandleRowPiece">
            <summary>
            This is a row reference. This is overridden in FormulaUpdateFilter to get a different row number
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaFilter.HandleColumnPiece">
            <summary>
            This is a column reference. ExcelTemplate doesn't usually do much with columns
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdateFilter.HandleRowPiece">
            <summary>
            Write out a stretched or pushed down row number
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdateFilter.ComputeUpdatedRowNumber(System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Template.IWorksheet,System.Boolean)">
            <summary>
            Do basic row update computation
            </summary>
            <param name="originalRowNumber"></param>
            <param name="outputRowOffset"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaCellReferenceUpdateFilter.Process">
            <summary>
            Calculates an updated formula string based on the input fed to the constructor.
            This is overridden for performance reasons; only specific input should be handled
            for cell references in cell attributes in a worksheet file
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaReferenceToRangeFilter">
            <summary>
            Convert any references into ranges of that reference repeated twice. This is used with
            FormulaUpdateFilter so, for instance, E23 becomes E23:E23, which can be stretched to
            E23:E25 if there is a marker row at row 23. In FormulaUpdateFilter, references are not stretched,
            only pushed down if they're below an expanding marker row
            
            Basically, this processes the formula without changing it, but keeps track of
            references which need changing. In EndOfFormula() the processed formula is modified with these changes
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaReferenceToRangeFilter.currentPosition">
            <summary>
            Keep track of beginning of a reference
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaReferenceToRangeFilter.currentReference">
            <summary>
            Keep track of current reference
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaReferenceToRangeFilter.EndOfFormula">
            <summary>
            Use lists of references and ranges to change the outputted formula
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdateMarkerRowFilter">
            <summary>
            This should act just like FormulaUpdateFilter, except when the marker row number is the same
            as the end of a range to be stretched. In this case we don't stretch the range
            
            This is done to match the behavior of the binary template.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdateMarkerRowFilter.ComputeUpdatedRowNumberInMarkerRow(System.Int32,System.Int32)">
            <summary>
            Do basic row update, ignoring any grouping work. Assumes that formula is inside marker row and is pointing to itself
            </summary>
            <param name="originalRowNumber"></param>
            <param name="outputRowOffset"></param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdateMergeCellFilter">
            <summary>
            This updates a formula, but any stretching of formulas will only add new formulas to updatedFormulas, where each
            one has its rows in the stretched area incremented by one. This is used with mergeCell elements in worksheets, where
            we have to add a new element for each extra row created
            
            ie: A2:A4 becomes A2:A2 A3:A3 A4:A4
            
            Grouping blocks should be updated in a logical manner (if it's defined in a header block, it gets repeatedly
            printed out in header blocks, etc).
            
            %%group(merge) is handled partly in CondensedMergeCells.WriteTo() and partly here
            cells
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdateMergeCellFilter.updatedFormulas">
            <summary>
            The list of formulas to return
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdateMergeCellFilter.updatedRowNumberOffsets">
            <summary>
            Store positions to replace row numbers in a string
            
            This is a stack so we can go from beginning to end of string,
            and then iterate backwards so that no previous offsets change when forward offsets change
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdateMergeCellFilter.AddMergeCellsForNonGroupingMarkerRow(SoftArtisans.OfficeWriter.ExcelWriter.Template.IMarkerRow)">
            <summary>
            Write one merge cell block per output row (merge cell block starting at height = 1)
            </summary>
            <param name="markerRow"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdateMergeCellFilter.AddMergeCellsForUsualCase(System.Int32)">
            <summary>
            Just expand range like we do in FormulaUpdateFilter
            </summary>
            <param name="originalRowNumber"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdateMergeCellFilter.AddMergeCellForGroupingMarkerRow(SoftArtisans.OfficeWriter.ExcelWriter.Template.IMarkerRow)">
            <summary>
            Add a merge cell for each outputed data row, or once per block if %%group(merge) is used
            </summary>
            <param name="markerRow"></param>
            <param name="block"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdateMergeCellFilter.AddMergeHeaderFooterCell(SoftArtisans.OfficeWriter.ExcelWriter.Template.IMarkerRow,SoftArtisans.OfficeWriter.ExcelWriter.Template.BoundingBlock,SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupHeaderFooterRows,System.Boolean)">
            <summary>
            Helper method to add a merge cell for each header or footer output row
            </summary>
            <param name="markerRow"></param>
            <param name="block"></param>
            <param name="groupHeaderFooterRows"></param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdateMergeCellFilter.UpdatedFormulas">
            <summary>
            After Process is called, gets the list of formulas
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdateNoStretchingFilter">
            <summary>
            Update a formula to increase its row numbers if needed
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdatingReferenceToRangeFilter">
            <summary>
            This is a combination of FormulaUpdateFilter and FormulaReferenceToRangeFilter
            
            Update row numbers if the previous rows have been expanded. If the row
            referenced is the one expanded, make it a range (if it isn't already)
            and push down the end of the reference
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingFormulaUpdateFilter">
            <summary>
            Handle formula updates where formula is in header/footer rows
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingFormulaUpdateFilter.groupIndex">
            <summary>
            Index into the column being grouped (of the list of columns being grouped)
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingFormulaUpdateFilter.outputDataRowIndex">
            <summary>
            the output data row number
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingFormulaUpdateFilter.HandleRowPiece">
            <summary>
            Write out a stretched or pushed down row number
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedFormulaFilter">
            <summary>
            This is used to convert a shared formula to a regular formula, adjusting the column and row
            depending on where the shared boundary started and what the current row and column are
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedFormulaFilter.#ctor(System.String,System.String,System.Int32,System.String,SoftArtisans.OfficeWriter.ExcelWriter.Template.IWorksheet,SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdateTable)">
            <summary>
            Given the shared formula range and the current row/column, figure out how columns/rows should
            be adjusted
            </summary>
            <param name="sharedRange"></param>
            <param name="formula"></param>
            <param name="rowNumber"></param>
            <param name="column"></param>
            <param name="worksheet"></param>
            <param name="formulaUpdateTable"></param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.ChartXmlFilter">
            <summary>
            Filters xl/charts/chart*.xml
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.CommentsXmlFilter">
            <summary>
            Filters xl/comments*.xml
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.DrawingsXmlFilter">
            <summary>
            Filters xl/drawings/drawing*.xml
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.PivotCacheDefinitionXmlFilter">
            <summary>
            Filters xl/pivotCache/pivotCacheDefinition*.xml
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.PivotCacheRecordsXmlFilter">
            <summary>
            Filters xl/pivotCache/pivotCacheRecords*.xml
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.PivotTableDefinitionXmlFilter">
            <summary>
            Filters xl/pivotTables/pivotTable*.xml
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringsXmlFilter">
            <summary>
            Filters xl/sharedStrings.xml
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.VmlDrawingsXmlFilter.Process">
            <summary>
            This filter is radically different, so it'll use the dom
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorkbookXmlFilter">
            <summary>
            Filters xl/workbook.xml
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetCreatorXmlFilter">
            <summary>
            Gets important information (like the location of data markers) from the input worksheet XML
            
            This class isn't technically a filter; it doesn't write anything, it just processes. Look at
            WorksheetXmlFilter for a class which writes out the output worksheet XML
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetCreatorXmlFilter.GetMarkerName(SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetCreatorXmlFilter.RowType)">
            <summary>
            Return the string of the marker which is used in a RowType. Used for generating informative exceptions
            </summary>
            <param name="rowType"></param>
            <returns></returns>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetCreatorXmlFilter.cellCount">
            <summary>
            Used to figure out cell indexes
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetCreatorXmlFilter.currentRowElementID">
            <summary>
            we keep track of a count of elements processed. This is the number of the last processed row element
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetCreatorXmlFilter.isSSTIndex">
            <summary>
            is an index to the SST
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetCreatorXmlFilter.isStrText">
            <summary>
            is a directly written string cell with t="str". Uncommon
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetCreatorXmlFilter.isInlineStrText">
            <summary>
            is a directly written string cell with t="inlineStr". Uncommon
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetCreatorXmlFilter.rowNumString">
            <summary>
            The current row number as a string, read from the current cell's reference
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetCreatorXmlFilter.licenseKey">
            <summary>
            We only do grouping if the license key is an enterprise edition one
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetCreatorXmlFilter.lastRowType">
            <summary>
            The type of the last row. Used to validate the order of markers in the worksheet
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetCreatorXmlFilter.currentRowType">
            <summary>
            The type of the current row. Used to validate the order of markers in the worksheet
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetCreatorXmlFilter.isGroupingBlock">
            <summary>
            true if currently in a grouping block
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetCreatorXmlFilter.inFormula">
            <summary>
            this cell is a formula; treat accordingly
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetCreatorXmlFilter.textValue">
            <summary>
            The cell's 'v' value (directly from XML). null if it doesn't exist.
            
            We only store this if it has something special, like a marker
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetCreatorXmlFilter.CheckAndSetRowType(SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetCreatorXmlFilter.RowType)">
            <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetCreatorXmlFilter.CheckAndSetRowType(SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetCreatorXmlFilter.RowType,System.Int32)"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetCreatorXmlFilter.CheckAndSetRowType(SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetCreatorXmlFilter.RowType,System.Int32)">
            <summary>
            Make sure we don't have two markers of different types on the same row
            
            When a marker is encountered, this function should be called so we can validate that
            the marker is in the correct location
            </summary>
            <param name="value">if no validation errors, set the current row type to this</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetCreatorXmlFilter.#ctor(System.Xml.XmlReader,SoftArtisans.OfficeWriter.ExcelWriter.Template.Worksheet,SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable,SoftArtisans.OfficeWriter.Shared.ILicenseKey)">
            <param name="xmlReader">The input xmlReader</param>
            <param name="worksheet">The worksheet object to populate</param>
            <param name="sharedStringsTable">The shared string table to populate</param>
            <param name="excelTemplate">Used for license key validation</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetCreatorXmlFilter.RowType">
            <summary>
            Types of marker rows (or Unknown indicating, not a marker row)
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetXmlFilter">
            <summary>
            Handles processing and writing out of the worksheet, filling it with output data. 
            TODO: break this up into smaller pieces, if possible. It seems a little long
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetXmlFilter.currentRowElementID">
            <summary>
            we keep track of a count of elements processed. This is the number of the last processed row element
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetXmlFilter.lastAttribute">
            <summary>
            The most recent attribute value iterated over
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetXmlFilter.wroteConditionalFormatting">
            <summary>
            This becomes true when the conditionalFormatting elements have been written out,
            so we make sure we only do it once
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetXmlFilter.mergeCellsInsertPoint">
            <summary>
            The uniqueElementId, element right before where mergeCells should be inserted, or mergeCells itself
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetXmlFilter.ProcessIterator">
            <summary>
            This is like Process, but it's an iterator over a bunch of streams of XML output.
            
            
            There are two XMLWriters: a repeated row writer, and the regular writer
            input goes to the repeated row writer when that data should be manipulated by a DOM
            (ie, we transform an input marker row to an output row using DOM, and tweak it for each row
            before writing it out)
            the input is rows with marker cells in them
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetXmlFilter.WriteEndElement(System.Xml.XmlWriter)">
            <summary>
            Write out the end tag. If we just processed a marker row, we need to replace it with
            the output row data. This yield return's a stream containing one output row (or some other XML),
            in order to be able to cut down memory requirements by processing on the fly
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetXmlFilter.WriteConditionalFormattingRules(System.Xml.XmlWriter)">
            <summary>
            We previously put the conditional formatting rules from the bottom of this worksheet in 
            ConditionalFormattingRules. If they refer to areas which are inside a grouping block,
            we may need to change the rule to refer to each individual row or set of rows
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetXmlFilter.WriteHeaderFooterRules(SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedConditionalFormatting,System.Xml.XmlWriter,SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupHeaderFooterRows,SoftArtisans.OfficeWriter.ExcelWriter.Template.IGroupRow,System.Boolean)">
            <summary>
            Write conditional formatting rules for headers or footers
            </summary>
            <param name="rule"></param>
            <param name="writer"></param>
            <param name="rows"></param>
            <param name="markerRow"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetXmlFilter.WriteMarkerRowRules(SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedConditionalFormatting,System.Xml.XmlWriter,SoftArtisans.OfficeWriter.ExcelWriter.Template.IGroupRow)">
            <summary>
            Write a marker rule for each output row. (Only necessary when output rows aren't contiguous)
            </summary>
            <param name="conditionalFormatting"></param>
            <param name="writer"></param>
            <param name="markerRow"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetXmlFilter.WriteOutputRows(SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedXmlRow,SoftArtisans.OfficeWriter.ExcelWriter.Template.MarkerRow)">
            <summary>
            Does the bulk of work in this class. Outputs all the output rows for markerRow. repeatedRow
            contains the formatting info; it is altered with the output data and then written out
            </summary>
            <param name="repeatedRow"></param>
            <param name="markerRow"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetXmlFilter.ComputeCurrentOutputRow(System.Int32,System.Int32,System.Int32)">
            <summary>
            This function is syntactic sugar to sum up the parameters in an easy to read way, and supply
            explanation in the function itself. I think this function should get optimized away by the
            compiler or runtime.
            </summary>
            <param name="startingOutputRow">the row number where we started writing output rows
            for this MarkerRow</param>
            <param name="previousOutputRowTotal">the running total for output rows created previous to this function,
            which includes previous headers and footers as well as previous regular output rows.</param>
            <param name="currentOutputRowTotal">the running total for only this function</param>
            <returns>the sum of the parameters</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetXmlFilter.ProduceHeaderOrFooterXML(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupHeaderFooterRows,System.Int32,System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Template.IGroupRow,System.Int32,SoftArtisans.OfficeWriter.Shared.MarkerData[],System.Collections.Generic.IEnumerable{SoftArtisans.OfficeWriter.ExcelWriter.Template.BindingInfo})">
            <summary>
            Write header rows to memoryStream, altered for rows and %%value if necessary
            
            NOTE: header is used in place of header/footer. Both are treated identically at this level
            
            TODO: refactor to use fewer parameters, or at least make it less confusing
            </summary>
            <param name="memoryStream">ResettableMemoryStream to write to</param>
            <param name="headerFooterRows">header row information and XML</param>
            <param name="outputRowIndex">the number of the output row currently written out</param>
            <param name="outputRowDataIndex">the number of the data row we're on</param>
            <param name="markerRow">the marker row which the header rows act on</param>
            <param name="headerIndex">the index which specifies which column (and therefore
            which header rows) we're talking about</param>
            <param name="bindingToIndex">a mapping of bindings/column number to output cell index</param>
            <param name="rowData">the data in the current row</param>
            <returns>The number of rows written out</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetXmlFilter.ProduceOutputXML(SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedXmlRow,System.Collections.Generic.IDictionary{System.Int32,System.Int32},System.Int32,System.Int32,SoftArtisans.OfficeWriter.Shared.MarkerData[],System.Xml.XmlWriter,System.Collections.Generic.IDictionary{System.String,System.String},SoftArtisans.OfficeWriter.ExcelWriter.Template.IMarkerRow,SoftArtisans.OfficeWriter.ExcelWriter.Template.IWorksheet,SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdateTable,SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable)">
            <summary>
            This inputs a CondensedXmlRow (condensedRow) and the cell data (outputCells),
            loads and manipulates the XML, then writes it out again
            </summary>
            <param name="condensedRow">A clone of the marker row, which information is put into,
            which is then written out to XML</param>
            <param name="columnNames">a list of column names</param>
            <param name="markerCellIndexes">contains information about which cell indexes are marker rows</param>
            <param name="outputRowIndex">which output row we're on, starting from 0</param>
            <param name="outputCells">the data that goes into each cell for this row</param>
            <param name="writer">an XmlWriter. Might be better off as a local variable</param>
            <param name="writerStream">a ResettableMemoryStream. Might be better off as a local variable</param>
            <param name="sharedFormulaReferences">keeps track of references for array formulas 
            and shared formulas so that they're only written out once</param>
            <param name="currentMarkerRow">The marker row</param>
            <param name="worksheet">Current sheet number (for use in formula updating)</param>
            <param name="workbook">Workbook</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorksheetXmlFilter.SetXmlCellValue(SoftArtisans.OfficeWriter.ExcelWriter.Template.CondensedXmlCell,SoftArtisans.OfficeWriter.Shared.MarkerData,SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable)">
            <summary>
            Changes a cell in a piece of XML to have the right data type and data
            </summary>
            <param name="cell">The cell as Xml</param>
            <param name="data">That data that's going into the cell</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.FakeGroupRow">
            <summary>
            Used for testing GroupRow
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.IGroupRow.GetHeaderFooterRowFromRowNumber(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Figure out if the given rowNumber is one of the header or footer rows surrounding this marker row
            </summary>
            <param name="rowNum">the row number of the header/footer row</param>
            <param name="groupIndex">the group index for the group the row belongs to</param>
            <param name="rowOffset">the row number's offset from the beginning of the header/footer rows</param>
            <returns>true if a header/footer row was found, false if not</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.IGroupRow.AdjustGroupingPriorities(SoftArtisans.OfficeWriter.ExcelWriter.Template.ITemplateBindings,System.String)">
            <summary>
            Grouping cells may reference other markers. Adjust priorities accordingly
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.IGroupRow.GetIndexForColumn(System.String)">
            <summary>
            Get the marker cell index for the marker cell that is at colName
            
            NOTE: this will throw an exception if column doesn't exist. Use ContainsColumn to check first
            </summary>
            <param name="colName">the column name</param>
            <returns>an index in the list of marker cells in this row</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.IGroupRow.GetGroupingCellAtIndex(System.Int32)">
            <summary>
            Returns a GroupMarkerCell object given the group Index
            
            TODO: GroupingCellsByIndex is very similarly named but gets the MarkerCell object. Change this name maybe?
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.IGroupRow.ContainsColumn(System.String)">
            <summary>
            Returns true if the column is a grouping column for this grouping block
            </summary>
            <param name="column"></param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.IGroupRow.StartGroupRow">
            <summary>
            Row with %%group. EndGroupRow is last row
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.IGroupRow.EndGroupRow">
            <summary>
            Row with %%endgroup. RowNumber is beginning row
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.IGroupRow.HasValueMarkers">
            <summary>
            Are there any value markers in the headers or footers that we need to worry about?
            NOTE: this caches the return value, so make sure we only call this after the object model is fully
            initialized
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.IGroupRow.MarkerRow">
            <summary>
            The grouping block's marker row
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.IGroupRow.GroupingBlockUniqueID">
            <summary>
            The element's place in the input XML. This is different from MarkerRow.UniqueID, since the
            grouping block starts slightly before the marker row
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.IGroupRow.GroupingCellsByIndex">
            <summary>
            A list of marker cells sorted by index
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.IGroupRow.GroupingCellsByPriority">
            <summary>
            A list of marker cells sorted by priority
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.IGroupRow.FooterRow">
            <summary>
            NOTE: unlike HeaderRow, this may be null
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.FakeMarkerRow">
            <summary>
            Used for testing MarkerRow
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.IMarkerRow.OutputRowCount">
            <summary>
            The number of output data rows
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.IMarkerRow.GroupRow">
            <summary>
            The grouping block. If this is null, this is a regular marker row
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.IMarkerRow.MarkerUniqueID">
            <summary>
            The element's place in the input XML. This is different from the GroupRow.UniqueID since the
            grouping block starts slightly before the marker row
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.IMarkerRow.UpdatedOutputRowNumber">
            <summary>
            The updated output row number that starts this marker row's output
            
            NOTE: make sure we don't call UpdatedOutputRowNumber until all markerRows in sheet are processed
            not too big of a danger of that; we don't write anything out until we read everything in
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerXml">
            <summary>
            FieldMarkerInfo plus cell reference, for OpenXML files
            </summary>
            <seealso cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.IFieldMarkerCell">
            <summary>
            This allows access to field marker information, plus what cell it came from
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdateTable">
            <summary>
            An interface that only exposes formula updating parts of WorkbookXML
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdateTable.mAttributesToFixUp">
            <summary>
            FixUpAttribute() uses this variable to figure out if an
            attribute is a formula that should be updated
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdateTable.FixUpAttribute(System.String,System.String,System.String,System.String,SoftArtisans.OfficeWriter.ExcelWriter.Template.IWorksheet)">
            <summary>
            Updates an attribute formula if the given attribute name, element name,
            and file name are listed in mAttributesToFix. Otherwise,
            return the attribute value unchanged.
            </summary>
            <param name="aFileName"></param>
            <param name="anElementName"></param>
            <param name="anAttributeName"></param>
            <param name="anAttributeValue"></param>
            <param name="aCurrentSheetNumber"></param>
            <param name="anOutputRowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdateTable.GetUpdatedRowNumber(System.Collections.Generic.IEnumerable{SoftArtisans.OfficeWriter.ExcelWriter.Template.IMarkerRow},System.Int32)">
            <summary>
            Returns an updated row number, accounting for expansion by marker rows. 
            
            Performance note: this iterates over every marker row in the worksheet (up to the one we want to be at)
            Since there are very few marker rows in comparison to anything else, we should be fine
            </summary>
            <param name="sheetNumber"></param>
            <param name="rowNumber"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.FormulaUpdateTable.GetSheetFromTable(System.String)">
            <summary>
            Get an rId from the sheetName, get the sheet filename from the rId,
            and get the sheet index from the sheet filename
            </summary>
            <param name="sheetName"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupDataMarkerCell">
            <summary>
            The %%value marker cell
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupDataMarkerCell.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constructor for GroupDataMarkerCell
            </summary>
            <param name="markerText">the marker text</param>
            <param name="colName">column marker cell is in</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupDataMarkerCell.BindGroupingDataMarkers(SoftArtisans.OfficeWriter.ExcelWriter.Template.ReadOnlyTemplateBindings,System.String)">
            <summary>
            Use the marker text to get a binding and a field marker index
            </summary>
            <param name="bindings"></param>
            <param name="worksheetName"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupDataMarkerCell.ApplyModifiers(SoftArtisans.OfficeWriter.Shared.MarkerData,SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable,System.Boolean)">
            <summary>
            Transform input into the return value using the modifiers in the %%value marker
            </summary>
            <param name="input"></param>
            <param name="sharedStringTable"></param>
            <param name="templateReaderPreserveStrings"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupHeaderFooterRows">
            <summary>
            Stores data about grouping header or footer rows (this includes the marker row and rows directly under it)
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupHeaderFooterRows.markerColumn">
            <summary>
            Cell reference of marker cell
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupHeaderFooterRows.rowCount">
            <summary>
            Number of rows under this marker (not including this header/footer marker row)
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupHeaderFooterRows.startingRowNumber">
            <summary>
            Row number of marker row
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupHeaderFooterRows.rowElementUniqueId">
            <summary>
            Position in XML file as element number
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupHeaderFooterRows.dataMarkerCells">
            <summary>
            %%value marker cells
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupHeaderFooterRows.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor for GroupHeaderRows
            </summary>
            <param name="startingRowNumber">row number of %%header or %%footer markers</param>
            <param name="rowElementUniqueId">unique id for the element in the input XML</param>
            <param name="rowCount">how many header rows are under this marker row</param>
            <param name="markerColumn">which column the %%header or %%footer marker is in (ie, 
            which to group by)</param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupHeaderFooterRows.RowCount">
            <summary>
            Number of rows under this marker (not including this header/footer marker row)
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupHeaderFooterRows.ColName">
            <summary>
            Cell reference of marker cell
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupHeaderFooterRows.StartingRowNumber">
            <summary>
            Row number of row with %%header or %%footer
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupHeaderFooterRows.Rows">
            <summary>
            Return the rows under the %%header marker row. If the row does not exist in XML (it's blank),
            this will return null for that value. So there should be rowCount number of items returned by this
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingFieldMarkerInfo">
            <summary>
            Parses marker text into components for %%group markers
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingFieldMarkerInfo.GetWithin(System.String)">
            <summary>
            Extract and return insides from within()
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingOffsets">
            <summary>
            Manage grouping offset information so that we can update formulas which point to marker rows
            but which get expanded to cover individual groups
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingOffsets.groupCellsByIndex">
            <summary>
            Mapping of output row cell data indexes (in OutputCellXML[]) to group cells for the same data marker
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingOffsets.groupIndexesOrderedByPriority">
            <summary>
            A list of group indexes ordered by priority. Used for determining the order of headers and footers,
            and when duplicates occur
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingOffsets.groupingOffsets">
            <summary>
            For each output row, where the output row index is the key, the value is some information about
            that row, like what headers/footers it has, increment information,
            and what grouping values would be duplicates
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingOffsets.footerIncrements">
            <summary>
            key is an index into an OutputCellXML[] array; value is the number of footers when grouping
            In order of rows printed out
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingOffsets.headerIncrements">
            <summary>
            key is an index into an OutputCellXML[] array; value is the number of headers when grouping
            In order of rows printed out
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingOffsets.headerIncrementsLookup">
            <summary>
            Used in initializing and computing the grouping increment table. You can safely discard this after
            the last ComputeCurrentRowOffsets() was called
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingOffsets.footerIncrementsLookup">
            <summary>
            Used in initializing and computing the grouping increment table. You can safely discard this after
            the last ComputeCurrentRowOffsets() was called
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingOffsets.AddRow(SoftArtisans.OfficeWriter.Shared.MarkerData[],SoftArtisans.OfficeWriter.Shared.MarkerData[])">
            <summary>
            Indicate a change in the output rows; a break in grouping for instance
            </summary>
            <param name="current">The current row's data</param>
            <param name="previous">The previous row's data</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingOffsets.InitComputeRowOffsets(SoftArtisans.OfficeWriter.ExcelWriter.Template.IGroupRow)">
            <summary>
            Start calculating a lookup table for grouping header and footer increments.
            See ComputeCurrentRowOffsets
            </summary>
            <param name="groupRow"></param>
            <param name="headerIncrementsLookup"></param>
            <param name="footerIncrementsLookup"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingOffsets.ComputeCurrentRowOffsets(System.Int32)">
            <summary>
            Compute the increments for the last added row 
            </summary>
            <param name="headerIncrementsLookup"></param>
            <param name="footerIncrementsLookup"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingOffsets.GetGroupingOffsets(System.Int32)">
            <summary>
            For each output row, where the output row index is the key, the value is some information about
            that row, like what headers/footers it has, increment information,
            and what grouping values would be duplicates
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingOffsets.GetUpdatedOutputIndexAtHeaderFooter(System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            look for closest relevant header/footer row in output so we can update the row number logically
            </summary>
            <param name="outputRowIndex"></param>
            <param name="isFooter"></param>
            <param name="groupIndex"></param>
            <param name="inHeaderOffset"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingOffsets.GetDataOffsetRows(System.Int32)">
            <summary>
            Returns an IEnumerable which has each output group block. Pair.first is the offset to the first 
            row, and Pair.last is the offset to the last row. The offset starts at 0, so adjust for this when
            converting to real rows
            </summary>
            <param name="groupIndex"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingOffsets.GetHeaderOffsetRows(System.Int32,System.Boolean)">
            <summary>
            Returns offsets to header or footer rows, based on groupIndex.
            </summary>
            <param name="groupIndex"></param>
            <param name="isFooter"></param>
            <param name="inHeaderOffset"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingOffsets.RemoveLastRow">
            <summary>
            We went over the max row limit, try to inch back
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingOffsets.GroupingOffsetsRow">
            <summary>
            For a given output row, show headers, footers, duplicate items, and increments
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingOffsets.GroupingOffsetsRow.footers">
            <summary>
            If footers exist, they would be these indexes in the OutputCellXML[] array
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingOffsets.GroupingOffsetsRow.headers">
            <summary>
            If headers exist, they would be these indexes in the OutputCellXML[] array
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingOffsets.GroupingOffsetsRow.Headers">
            <summary>
            If headers exist, they would be these indexes in the OutputCellXML[] array
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingOffsets.GroupingOffsetsRow.Footers">
            <summary>
            If footers exist, they would be these indexes in the OutputCellXML[] array
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupingOffsets.GroupingOffsetsRow.TotalIncrement">
            <summary>
            The total number of header and footer rows before this one produced by the grouping block.
            For example, if this was the second row, and the first row had one header row and one footer row,
            and the second row had one header row and one footer row also, then this number would be 3.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupMarkerCell">
            <summary>
            Represents the cell with a %%group marker
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupMarkerCell.colName">
            <summary>
            Column Name
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupMarkerCell.markerInfo">
            <summary>
            The marker info. The marker text is now contained inside this object
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupMarkerCell.priority">
            <summary>
            List of groups which this group cell is lower priority than:
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupMarkerCell.SetPriorityWithin(SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupMarkerCell)">
            <summary>
            Add a cell which is a higher priority than this
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupMarkerCell.CompareTo(SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupMarkerCell)">
            <summary>
            Compare by priority list. This isn't that robust, but it mirrors what the user can specify, so it's
            up to the user to make sure their syntax makes sense (ie, no circular dependencies)
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupMarkerCell.ColName">
            <summary>
            Column Name
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupMarkerCell.MarkerText">
            <summary>
            The marker text in this group cell
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupRow">
            <summary>
            The group marker row
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupRow.SetHeaderRow(System.Collections.Generic.IEnumerable{SoftArtisans.OfficeWriter.ExcelWriter.Template.GroupHeaderFooterRows})">
            <summary>
            TODO: encapsulate this into the constructor somehow
            </summary>
            <param name="rows"></param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.MarkerCell">
            <summary>
            This stores a binding and other information for a marker cell
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.MarkerRow">
            <summary>
            Stores the marker row and the output rows
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.MarkerRow.groupRow">
            <summary>
            NOTE: if this is null, there is no grouping in this marker row
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.MarkerRow.markerRows">
            <summary>
            Collection of marker rows in this sheet (which eventually includes this one);
            used for updating formulas. May not be up to date at construction time
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.MarkerRow.RewindBindings">
            <summary>
            Rewind all bindings which a MarkerRow references, if they can be rewound.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.MarkerRow.OutputRows">
            <summary>
            This is an iterator function which returns an IEnumerator that yields each output row
            
            NOTE: this deallocates the memory stream as it's being read, in order to save on memory
            Therefore this cannot be called twice
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.MarkerRow.Count">
            <summary>
            Number of marker cells
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.MarkerRow.GroupRow">
            <summary>
            NOTE: if this is null, there is no grouping in this marker row
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.OutputRowsHandlerHelper.StringCellData(SoftArtisans.OfficeWriter.ExcelWriter.Template.MarkerCell,System.String)">
            <summary>
            Creates the data, updating the string table, if necessary
            </summary>
            <param name="marker"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.OutputRowsHandlerHelper.ProcessModifiers(SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable,System.String,System.Boolean,SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo)">
            <summary>
            Process modifiers on field markers in %%value markers
            </summary>
            <param name="sharedStringTable"></param>
            <param name="content"></param>
            <param name="templateReaderPreserveStrings"></param>
            <param name="fieldMarkerInfo"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.OutputRowsHandlerHelper.ApplyStringModifiers(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo,System.Boolean,SoftArtisans.OfficeWriter.Shared.MarkerData.Types@,System.Object@)">
            <summary>
            Use the field marker modifiers on the content
            </summary>
            <param name="content"></param>
            <param name="markerInfo"></param>
            <param name="templateReaderPreserveStrings"></param>
            <param name="sharedStringTable"></param>
            <param name="type"></param>
            <param name="value">NOTE: if type is SST, this will be a string type. 
            You must change this to an SST index in the calling function</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.OutputRowsHandlerHelper.DateCellData(SoftArtisans.OfficeWriter.ExcelWriter.Template.MarkerCell,System.Nullable{System.DateTime})">
            <summary>
            Converts the Date into a double for storing (since it's a double in the excel file).
            </summary>
            <param name="marker"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.OutputRowsHandlerHelper.RunApplyModifiers(SoftArtisans.OfficeWriter.Shared.MarkerData,SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable,System.Boolean,SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo,SoftArtisans.OfficeWriter.ExcelWriter.Template.IBinding)">
            <summary>
            Transform input into the return value using the modifiers
            </summary>
            <param name="input"></param>
            <param name="sharedStringTable"></param>
            <param name="templateReaderPreserveStrings"></param>
            <returns></returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.OutputRowsHandlerHelper.ZeroRows">
            <summary>
            No matter what ExcelWriter will output the row that contained the markers, so always
            return <c>false</c>.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable">
            <summary>
            Contains all the different (unique) strings in the spreadsheet.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable.sstReorganizingSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="isNew">true if this is a newly created table,
            false if it existed in the file previously</param>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable.newStrings">
            <summary>
            The strings in order that they were added
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable.allStrings">
            <summary>
            A list of all the strings
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable.optimizedStringDictionary">
            <summary>
            When we write out the string table, we optionally filter out the unused strings
             (except for the ones already in the SST when we read the file in)
            
            This is only useful currently if a customer uses a modifier like uppercase or lowercase
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable.optimizedStringList">
            <summary>
            The inverse of optimizedStringDictionary
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable.allSharedStrings">
            <summary>
            A mapping of string to string index. The inverse mapping of newStrings
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable.mLastStringIndex">
            <summary>
            One below the string count
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable.FindString(System.String)">
            <summary>
            Get the shared string table index to a string. If string doesn't exist, add it.
            </summary>
            <param name="aString">the string</param>
            <returns>the index</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable.IsDataMarker(System.String)">
            <summary>
            Is the string a data marker?
            </summary>
            <param name="text">NOTE: this must be lowercase for this to work properly</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable.IsGroupMarker(System.String)">
            <summary>
            Is the string a grouping marker?
            </summary>
            <param name="text">NOTE: this must be lowercase for this to work properly</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable.IsHeaderMarker(System.String)">
            <summary>
            Is the string a header marker?
            </summary>
            <param name="text">NOTE: this must be lowercase for this to work properly</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable.IsFooterMarker(System.String)">
            <summary>
            Is the string a footer marker?
            </summary>
            <param name="text">NOTE: this must be lowercase for this to work properly</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable.IsValueMarker(System.String)">
            <summary>
            Is the string a grouping value marker?
            </summary>
            <param name="text">NOTE: this must be lowercase for this to work properly</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable.IsEndGroupMarker(System.String)">
            <summary>
            Is the string an end group marker?
            </summary>
            <param name="text">NOTE: this must be lowercase for this to work properly</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable.CreateDefaultXml">
            <summary>
            If the shared string document does not exist, we need to create some default Xml
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable.WritingOut(System.Int32)">
            <summary>
            Optimize the shared string table as it's being written out, if we want
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderXML">
            <summary>
            Read through an XLSX Excel spreadsheet, bind data sources, and write out the result as a compressed zip file
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReader">
            <summary> <p>
            Title: TemplateReader
            </p>
            <p>
            Description: Read a template file into memory and initialize the data structures we need for the ExcelTemplate.
            </p>
            <p>
            Copyright: Copyright (c) 2002 SoftArtisans
            </p>
            <p>
            Company: SoftArtisans
            </p>
            
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReader.process(SoftArtisans.OfficeWriter.ExcelWriter.Template.ITemplateBindings,System.IO.Stream)">
            <summary> ProcessTemplate
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReader.CreateBlankCell(SoftArtisans.OfficeWriter.ExcelWriter.Template.IFieldMarkerCell,System.Int32)">
            <summary>
            Create a blank cell
            </summary>
            <param name="aInfo"></param>
            <param name="aSourceRow"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReader.makeErrorTooManyRows(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Create the error string for too many rows being created for a worksheet
            </summary>
            <param name="aRowNumber">a given row number</param>
            <param name="aRowIncrement">The additional rows to be added after row number</param>
            <param name="aSheetName">worksheet name</param>
            <param name="maxRowsInWorksheet">maximum rows in a worksheet. This differs whether this is a BIFF8 or XML file</param>
            <returns>error string</returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReader.ExcludeMacros">
            <summary> Sets the reader to exclude macro references.
            
            </summary>
            <param name="aVal">
            if true, remove any VBA references. (False by default)
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReader.MaxRowsInWorksheet">
            <summary> Sets the maximum number of rows in the worksheet that license key allows for this edition. By default this value
            is set to maximum number of rows allowed by BIFF8 file format. Free edition limits number of rows to 500
            (Constants.MAX_ROWS_IN_WORKSHEET_FREE_EDITION)
            
            </summary>
            <param name="aMaxRows">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReader.RemoveExtraDataMarkers">
            <summary> Sets the reader to ignore and remove unbound data markers.
            
            </summary>
            <param name="aVal">
            if true, removes and ignores data markers (false by default).
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReader.EncryptSpreadsheet">
            <summary> Tells the reader the spreadsheet will be encrypted, so it will add the appropriate
            record and update the correct offsets.
            
            </summary>
            <param name="aVal">
            if true, the appropriate records will be inseted and offsets updated.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReader.PreserveStrings">
            <summary> Returns whether or not data should be inserted into the new sheet as strings or if an appropriate conversion to
            data types (numbers, dates, etc) should be attempted.
            </summary>
            <summary> Sets whether or not data should be inserted into the new sheet as strings or if an appropriate conversion to data
            types (numbers, dates, etc) should be attempted.
            
            </summary>
            <param name="aPreserveStrings">
            if true, inserted data will be inserted as strings.
            </param>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderXML.hasMacros">
            <summary>
            NOTE: we don't set this until we save the file, since the user may want to ExcludeMacros
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderXML.WriteZipOutput(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.IO.Stream}},System.IO.Stream,SoftArtisans.OfficeWriter.ExcelWriter.Template.SharedStringTable)">
            <summary>
            Write the contents of fileMap as a ZIP stream to outputStream
            </summary>
            <param name="fileMap">a Dictionary matching a filename to the Stream with its data</param>
            <param name="outputStream">the output stream</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderXML.OpenTemplateStream(SoftArtisans.OfficeWriter.ExcelWriter.Template.ExcelTemplateBase)">
            <summary>
            Try opening the file. If it works (looks valid at a glance), create a new TemplateReaderXML from it
            </summary>
            <param name="aExcelTemplate">we get the input data from here</param>
            <returns>a new TemplateReaderXML, or null if things didn't work</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.Workbook">
            <summary>
            This represents the workbook in the XML template
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.Workbook.drawingRelationships">
            <summary>
            A mapping of a drawing filename to a worksheet fileName
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.Workbook.vmlDrawingRelationships">
            <summary>
            A mapping of a vml drawing  to a worksheet filename
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.Workbook.mFileMap">
            <summary>
            A mapping of file names to streams with the file data
            
            IMPORTANT NOTE: do not read from two strings in this file map at once! They may be pointing to the same
            stream internally, and working with two at once will not work.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.Workbook.mSheetNamesMap">
            <summary>
            A mapping of sheet names to rId values. rId values are used with workbookRelationships
            to find the worksheet xml file
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.Workbook.sheetNamesMapByRId">
            <summary>
            A mapping of rId values to sheet names. rId values are used with workbookRelationships to find the worksheet
            xml file
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.Workbook.worksheets">
            <summary>
            A mapping of a sheet index (0 based) to a worksheet. '
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.Workbook.pivotTableRelationships">
            <summary>
            A mapping of a pivot table filename to a worksheet filename
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.Workbook.pivotCacheToPivotTable">
            <summary>
            A mapping of a pivot cache definition filename to pivot table filename
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.Workbook.pivotCacheDefToWorksheet">
            <summary>
            A mapping of a pivot cache definition filename to a worksheet name
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.Workbook.workbookRelationships">
            <summary>
            A mapping of rId values to WorkbookRelationships, which contain the filename of the sheet
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.Workbook.workbookRelationshipsByTarget">
            <summary>
            A mapping of target (file path) values to WorkbookRelationships, which contain the rId of the sheet
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.Workbook.mSST">
            <summary>
            All strings are stored in here
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.Workbook.tableRelationships">
            <summary>
            A mapping of a table filename to a worksheet filename
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.Workbook.commentRelationships">
            <summary>
            A mapping of a comment filename to a worksheet filename
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Workbook.FixUpFiles(System.Boolean)">
            <summary>
            Go through all the files and update them if they need updating
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Workbook.ParseWorksheetRelationships(System.String,System.IO.Stream)">
            <summary>
            Get pivot table information from a relationship file
            </summary>
            <param name="aWorksheetNumber"></param>
            <param name="aWorksheetRelationshipsFile"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Workbook.ParseWorkbookRelationships(System.IO.Stream)">
            <summary>
            Parse a workbook relationship file to populate workbookRelationships
            </summary>
            <param name="workbookRelationshipsStream"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Workbook.AdjustGroupingPriorities(SoftArtisans.OfficeWriter.ExcelWriter.Template.ITemplateBindings)">
            <summary>
            Grouping marker cells may reference other data sources. Adjust priorities for grouping accordingly
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.Workbook.FileMap">
            <summary>
            A mapping of filenames to file streams
            
            Do not use multiple streams from this Dictionary concurrently; two streams may share the same source,
            and seeking one may seek the other
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.WorkbookRelationship">
            <summary>
            Stores a relationship between a sheet (or something else) and its id.
            
            See xl/_rels/workbook.xml.rels
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.Worksheet">
            <summary>
            Contains information about a worksheet
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.Worksheet.topLevelElements">
            <summary>
            A mapping of the element unique id (count) to the element name (for instance, sheetData)
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.Worksheet.elementNamesInOrder">
            <summary>
            From ECMA-376, CT_Worksheet
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.Worksheet.condensedMergeCells">
            <summary>
            This stores the information for the mergeCells xml element right after sheetData
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.Worksheet.conditionalFormattingRules">
            <summary>
            Stores the conditionalFormatting elements at the bottom of this Xml file
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Worksheet.Open(System.IO.Stream,SoftArtisans.OfficeWriter.Shared.ILicenseKey)">
            <summary>
            Populate this object with information from the file
            </summary>
            <param name="aSheetData">the input stream</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Worksheet.AdjustGroupingPriorities(SoftArtisans.OfficeWriter.ExcelWriter.Template.ITemplateBindings)">
            <summary>
            Grouping cells may reference other markers. Adjust priorities accordingly
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Worksheet.FindMergeCells">
            <summary>
            Return point where mergeCells was located in the input sheet, or return the element
            after which we should insert mergeCells
            </summary>
            <returns></returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.Worksheet.IndexedName">
            <summary>
            For example, 'sheet1'
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.Worksheet.CondensedMergeCells">
            <summary>
            This stores the information for the mergeCells xml element right after sheetData
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.BindingInfo">
            <summary>
            Stores a mapping of a binding and the index into the binding to an output cell index
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.BoundingBlock">
            <summary>
            Used to do calculations where an area touches a grouping block (or a single marker row)
            
            TODO: rename to something merge cell specific
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.BoundingBlock.Validate">
            <summary>
            Throw an exception if the merge cell is 
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.Correction">
            <summary> <p>Title: Correction.java</p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Oct 18, 2002
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties">
            <Doc>
      <summary>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties"/> object contains the properties information necessary to bind data to an ExcelWriter template.</summary>
      <remarks>
        <para>The <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.MaxRows"/>, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.Transpose"/>, and <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.WorksheetName"/> properties, which had been set as parameters in the <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/> methods of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate"/>, are now bundled into the <c>DataBindingProperties</c> object and can be applied to multiple discrete data binding calls in a single application.</para>
        <para>The <c>DataBindingProperties</c> object must be created using the <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.CreateDataBindingProperties"/> method:<br/><code>
            DataBindingProperties dbp = xlt.CreateDataBindingProperties();
</code><br/><code>
            Dim dbp As DataBindingProperties = xlt.CreateDataBindingProperties()
</code></para>
      </remarks>
    </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.maxRows">
            <summary>
            The maximum rows to allow
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.transpose">
            <summary>
            If true, transpose 2D object before using
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.worksheetName">
            <summary>
            The name of a worksheet where the data marker is. If this is empty or null, the binding will match
            all markers of the marker name given, in any worksheet. Otherwise, it will only match the marker of the marker name given,
            in the worksheet with the worksheet name given.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.#ctor">
            <summary>
            Set the values to defaults
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.MaxRows">
            <Doc>
        <summary>
          <para>Sets or returns the maximum number of rows to be bound to the template file when the <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindData(System.Data.DataSet,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/> or <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindColumnData(System.Object[],System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/> methods are called.  </para>
        </summary>
        <remarks>
          <para>Any rows in the data source after the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.MaxRows"/> value will not be added to the template.</para>
          <para>
            <c>MaxRows</c> is a <b>Read/Write</b> property.</para>
        </remarks>
        <example>
          <para>
            <code>

          DataBindingProperties dbp = xlt.CreateDataBindingProperties();
          dbp.MaxRows = 20;
          xlt.BindData(twodim, names, "TwoDimArray", dbp);
          xlt.Save(Page.Response, "output.xls", false);
        </code>
            <br/>
            <code>

          Dim dbp As DataBindingProperties = xlt.CreateDataBindingProperties()
          dbp.MaxRows = 20
          xlt.BindData(twodim, names, "TwoDimArray", dbp)
          xlt.Save(Page.Response, "output.xls", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.Transpose">
            <Doc>
        <summary>Sets or returns whether the data being bound to a template file should be transposed before being bound to the template using the <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindData(System.Data.DataSet,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/> method.  </summary>
        <remarks>
          <para>If this property is set to <c>true</c>, the rows and columns of the data source will be flipped so that the first row of data is inserted in the first column, the second row of data into the second column, and so on.  The default value for this property is <c>false</c>.</para>
          <para>
            <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.Transpose"/> is a <b>Read/Write</b> property.</para>
        </remarks>
        <example>
          <para>
            <code>

          DataBindingProperties dbp = xlt.CreateDataBindingProperties();
          dbp.Transpose = true;
          xlt.BindData(twodim, names, "TwoDimArray", dbp);
          xlt.Save(Page.Response, "output.xls", false);
        </code>
            <br/>
            <code>

          Dim dbp As DataBindingProperties = xlt.CreateDataBindingProperties()
          dbp.Transpose = False
          xlt.BindData(twodim, names, "TwoDimArray", dbp)
          xlt.Save(Page.Response, "output.xls", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.WorksheetName">
            <Doc>
        <summary>Sets or returns the name of the worksheet to which the data will be bound during an <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindData(System.Data.DataSet,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindCellData(System.Object,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindColumnData(System.Object[],System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, or <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindRowData(System.Data.DataView,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/> method call. </summary>
        <remarks>
          <para>By specifying the worksheet name, you can import from different data sources for the same data marker in different worksheets within the same workbook.  The default value for <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.WorksheetName"/> is <c>null</c> (<c>Nothing</c> in VB.NET), meaning that the data source will be applied to the data marker for the entire workbook.</para>
          <para>
            <c>WorksheetName</c> is a <b>Read/Write</b> property.</para>
        </remarks>
        <example>
          <para>
            <code>

          DataBindingProperties dbp = xlt.CreateDataBindingProperties();
          dbp.WorksheetName = "first worksheet";
          xlt.BindData(twodim, names, "TwoDimArray", dbp);
          xlt.Save(Page.Response, "output.xls", false);
        </code>
            <br/>
            <code>

          Dim dbp As DataBindingProperties = xlt.CreateDataBindingProperties()
          dbp.WorksheetName = "first worksheet"
          xlt.BindData(twodim, names, "TwoDimArray", dbp)
          xlt.Save(Page.Response, "output.xls", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.DataSourceBinding">
            <summary> 
            Binding implementation.
            </summary>
            <author>  Originally Geoff Krapf
            </author>
            <version>  1.0, Oct 15, 2002
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.IBinding">
            <summary>
            A binding. This represents a data source without specifying any particular column.
            Bindings.findDSNFromField should return the same binding to a unique data source,
            no matter what the syntax of the data marker is
             </summary>
            <author>  geoffk
            Nov 19, 2003 11:42:59 AM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.IBinding.resetPerMarkerRowCount">
            <summary> Resets the number of rows read for the current marker.
            This affects only hasMoreData(), which checks both the number of rows
            left in the data source as well as the max number of rows that can be
            inserted.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.IBinding.incrementUseCount">
            <summary> Increments the number of field marker rows this binding has been used on.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.IBinding.UseCount">
            <summary> Returns the number of field marker rows this binding has been used on.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.IBinding.Rewindable">
            <summary> Returns true if rewind() can be called without throwing an exception.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.IBinding.CanCacheDataType">
            <summary> Returns true if the data type is constant in columns and the transformation can be cached;
            returns false if the data type can change on columns.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.IBinding.HasMultipleFieldnamesPerColumn">
            <summary> Returns true if the data for this data source will return multiple values for
            a FIELDNAME bound data marker. 
            </summary>
            <returns>
            </returns>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.DataSourceBinding.mDataSource">
            <summary>
            SQL or other ResultSet we fetch data
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.DataSourceBinding.mName">
            <summary>
             Name of the data source we are binding to.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.DataSourceBinding.mCurrentRow">
            <summary>
            Which row we are currently on
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.DataSourceBinding.mMaxRows">
            <summary>
            Row limit set by user
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.DataSourceBinding.mUseCount">
            <summary>
             Number of field marker rows this data source has been read from.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.DataSourceBinding.#ctor(System.String,System.String,SoftArtisans.OfficeWriter.Shared.DataSource,System.Int32)">
            <summary> Constructor for TemplateBindings.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.DataSourceBinding.resetPerMarkerRowCount">
            <seealso cref="!:IBinding#resetPerMarkerRowCount()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.DataSourceBinding.incrementUseCount">
            <seealso cref="!:IBinding#incrementUseCount()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.DataSourceBinding.GetBytes(System.Int32)">
            <summary>
            ExcelWriter does not do anything with bytes, so we can just return null.
            </summary>
            <param name="columnNumber"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.DataSourceBinding.getFieldType(SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo)">
            <summary>
            Returns OleDbType for the given marker
            </summary>
            <param name="aMarkerInfo"></param>
            <returns>the data type for the field marker, or OleDbType.IUnknown 
            if the marker is not in the data source</returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.DataSourceBinding.UseCount">
            <seealso cref="!:IBinding#getUseCount()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.DataSourceBinding.Rewindable">
            <seealso cref="!:IBinding#isRewindable()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.DataSourceBinding.CanCacheDataType">
            <seealso cref="!:IBinding#canCacheDataType()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.DelayedRecordPile">
            <summary>
            A record pile that stores records. This doesn't immediately convert them for bytes because in some cases they still need
            to be altered (for instance, in pushing down rows from pivot tables.) 
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.RecordPile">
            <summary>
            This stores a list of records, or a byte stream of records, for output. Records may be grouped into blocks
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.RecordPile.Serialize">
            <summary>
            Convert all records to bytes
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.RecordPile.AddToPile(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <summary>
            Add record to pile
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.RecordPile.GetRecordReader">
            <summary>
            Convert pile to bytes, create a RecordReader around it, and return it
            </summary>
            <returns>the new RecordReader</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.RecordPile.AddSourceRow(SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateSourceRow,System.Int32,System.Int32)">
            <summary>
            Add a TemplateSourceRow to the record pile, and add a TemplateOutputRow object to the list for access by Sheet
            </summary>
            <param name="aSourceRow"></param>
            <param name="aOutputRowNumber"></param>
            <param name="aRowIncrement"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.RecordPile.AddOutputRow(SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateOutputRow)">
            <summary>
            Add output row to list for access by Sheet
            </summary>
            <param name="aOutputRow"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.DelayedRecordPile.IncrementRowReferences(System.Collections.Generic.IDictionary{System.Int32,System.Int32},SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet)">
            <summary>
            Iterate through the records in the pile, and increment the row references in them if they are cell records
            </summary>
            <param name="rowIncrementMapping">a mapping of rows to increment values.
             See sheet.getIncrementForRow for implementation</param>
            <param name="sheet">The sheet all the records belong to</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.ExcelTemplateBase">
            <summary> The actual workhorse of the ExcelWriter product.
            
            This class is not available outside of this package, and all "external"
            calls should be made via ExcelTemplate.
            
            </summary>
            <author>  geoffk Nov 25, 2003 2:02:30 PM
            </author>
        </member>
        <!-- Badly formed XML comment ignored for member "F:SoftArtisans.OfficeWriter.ExcelWriter.Template.ExcelTemplateBase.mMaxRows" -->
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.ExcelTemplateBase.mContentTypeHeader">
            <summary>
            This is not set unless the user sets this manually in ExcelTemplate. If not set,
            requests for the ContentType go to TemplateReader
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.ExcelTemplateBase.saveExtension">
            <summary>
            This is not set unless the user sets this manually in ExcelTemplate. If not set,
            requests for the SaveExtension go to TemplateReader
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.ExcelTemplateBase.closeStreamAfterUse">
            <summary>
            This informs Dispose() that it should dispose mTemplateInputStream
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ExcelTemplateBase.addBinding(SoftArtisans.OfficeWriter.ExcelWriter.Template.IBinding)">
            <returns> The number of sheets generated today by the XLT object.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ExcelTemplateBase.open(System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ExcelTemplateBase.internalOpenTemplateFile">
            <summary> This is the internal method that (re-)opens a File Template for the
            process() method.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ExcelTemplateBase.open(System.IO.Stream,System.Boolean)" -->
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ExcelTemplateBase.internalOpenTemplate">
            <summary> This internal method is called by process(...) to (re-)open the template
            file or stream.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ExcelTemplateBase.process">
            <summary> Enters datasource values into a new spreadsheet, based on the data
            marker values in the template.
            
            </summary>
            <throws>  SAException </throws>
            <summary>             if there is a problem processing the data into the template
            or writing to the stream.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ExcelTemplateBase.save(System.IO.Stream)">
            <summary> Returns the processed spreadsheet to a specified output stream.
            
            </summary>
            <param name="oStream">
            the output stream to write a copy of the currently processed
            spreadsheet to.
            
            </param>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">
            If a problem arises in the template object or in the
            processed spreadsheet.
            
            </exception>
            <exception cref="T:System.IO.IOException">
            If an exception occured while writing to the output
            stream.
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ExcelTemplateBase.save(System.String)">
            <summary> Writes the processed spreadsheet to a specified output file, by path
            name.
            
            </summary>
            <param name="aFileName">
            The name of a file to write the currently processed
            spreadsheet to. Any current contents of the file will be
            overwritten.
            
            </param>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">
            If a problem arises while processing template, data
            sources, or file.
            
            </exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.ExcelTemplateBase.PreserveStrings">
            <summary> Returns the current setting of PreserveStrings.
            
            </summary>
            <returns> the current value.
            </returns>
            <summary> Determines whether data inserted into a template is kept as a string or
            if an attempt to convert to an Excel data type is made. By default,
            ExcelWriter attempts to use the data type defined by the DataSource, and
            defaults to strings if the conversion fails.
            
            </summary>
            <param name="aPreserveStrings">
            If true, ExcelWriter will insert all data into the template
            as strings. If false, ExcelWriter attempts to convert the
            data to Excel types (numbers, dates, etc).
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.ExcelTemplateBase.RemoveExtraDataMarkers">
            <summary> Sets whether ExcelWriter should ignore and remove data markers in the
            template which don't bind to data sources. If a data marker does not
            match a data source, by default ExcelWriter will throw an exception. In
            some cases it can be useful to have ExcelWriter remove such data markers
            and continue working. This value is set to false by default; set it to
            true to remove extraneous data markers silently.
            
            </summary>
            <param name="aRemoveDataMarkers">
            if set to true, ExcelWriter skips extra data markers, does
            not render them.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.ExcelTemplateBase.ExcludeMacros">
            <summary> Return the current setting of ExcludeMacros.
            
            </summary>
            <returns> the current value.
            </returns>
            <summary> Sets whether ExcelWriter should remove macros from the resulting
            template or leave them in. When ExcludeMacro is set to true, buttons
            associated with macros may produce the error "Data may have been lost."
            Therefore, when excluding macros, remove all associated buttons from the
            spreadsheet. ... ExcelWriter, by default, will include macros in the
            resulting spreadsheet.
            
            </summary>
            <param name="aExcludeMacros">
            if set to true, macros in the template will be excluded from
            the generated spreadsheet.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.ExcelTemplateBase.StretchCellReferencesInCharts">
            <summary>Set whether ExcelWriter should expand and stretch single cell reference formulas inside 
            charts.  When set to true, cell references like (=Sheet!$A$1) formulas may be expanded 
            into cell area references (=Sheet!$A$1:$A$1) and strech when multiple rows are inserted 
            from the datasource.  When set to false, ExcelWriter will only strech formula with cell 
            area references.  
            
            The default setting for this is true, but previous versions of ExcelWriter behaves as if 
            this value was set to false.   </summary>
            
            @param aStretchCellReferencesInCharts
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.ExcelTemplateBase.LicenseKeyAsString">
            <summary> Attempt to set a license key, and optionally the current date. Format
            is: XXXXXX-XXXX-XXXX-XXXXXX or: XXXXXX-XXXX-XXXX-XXXXXX DD MM YYYY
            
            </summary>
            <throws>  SAException </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.ExcelTemplateBase.LicenseKey">
            <summary>
            Retrieves the license key from the reader.
            </summary>
            <returns>The license key appropriate for excel template</returns>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">If their is no valid key</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo.parseModifierPart(System.String,System.Int32,System.Int32@,SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo.FieldMarkerModifier)">
            <summary>
            Parse modifier string of the form ",mod1,mod2," ...
            </summary>
            <param name="strModifierPart"></param>
            <param name="len"></param>
            <returns>null if nothing to parse, otherwise a collection of bools</returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo.OrdinalDSN">
            <summary>
            Datasource is by number
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo.OrdinalFld">
            <summary>
            Column/field is by number
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo.SourcePositionField">
            <summary>
            Column/field name
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo.SrcPositionFld">
            <summary>
            Column/field name
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo.Continue">
            <summary> Returns true if this marker has a "Continue" modifier: data source should not be rewound.</summary>
            <returns>
            </returns>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo.FieldMarkerModifier.convert">
            <summary>
            Has "convert" modifier -- do string interpretation
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo.FieldMarkerModifier.lowercase">
            <summary>
            Has "lowercase" modifier
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo.FieldMarkerModifier.mContinue">
            <summary>
            Has "continue" modifier
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo.FieldMarkerModifier.optional">
            <summary>
            Has "optional" modifier
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo.FieldMarkerModifier.preserve">
            <summary>
            Has "preserve" modifier -- don't do string interpretation
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo.FieldMarkerModifier.unbound">
            <summary>
            Isn't bound to changing rows
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo.FieldMarkerModifier.uppercase">
            <summary>
            Has "uppercase" modifier.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo.FieldMarkerModifier.useFieldName">
            <summary>
            Display field name, not data.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo.FieldMarkerModifier.hide">
            <summary>
            Don't write out any data from this data marker. Useful for grouping when you use %%value to
            display data instead and don't want to see the data written out twice
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo.FieldMarkerName.mDSNFld">
            <summary>
            Datasource name
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo.FieldMarkerName.mIsOrdinalDSN">
            <summary>
            Datasource is by number
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo.FieldMarkerName.mIsOrdinalFld">
            <summary>
            Column/field is by number
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo.FieldMarkerName.mSrcPositionFld">
            <summary>
            Column/field name.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerRecord">
            <summary>
            Field marker parsing code was abstracted out to FieldMarkerInfo. This handles BIFF-specific
            things regarding field markers (mostly the cell reference)
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Oct 23, 2002
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.Helper">
            <summary> <p>Title: Helper.java</p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Oct 18, 2002
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.ImmediateRecordPile">
            <summary>
            A recordpile which writes all records to the internal byte array immediately
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.ITransformation">
            <summary> 
            </summary>
            <author>  geoffk
            May 19, 2004 11:48:50 AM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.ParsedExpressionReader">
            <summary> <p>Title: ParsedExpressionReader.java</p>
            <p>Description: Parses an expression and updates row references, given a Correction.</p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Oct 17, 2002
            </version>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.ParsedExpressionReader.ptgNull">
             Ptg definitions
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.ParsedExpressionReader.getSizeSimple">
                             Token Length Interfaces
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ParsedExpressionReader.#ctor">
            <summary> Constructor for ParsedExpressionReader.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ParsedExpressionReader.next">
            <summary> Moves the internal pointer to the next ParseThing (ptg).</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ParsedExpressionReader.getPtgBase(System.SByte)">
            <summary> Returns the base class for a Ptg.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ParsedExpressionReader.incrementTokenRow(SoftArtisans.OfficeWriter.ExcelWriter.Template.Correction,System.Boolean)">
            <summary> Updates the row references of the current parse thing, given a correction.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.ParsedExpressionReader.Eof">
            <summary> Returns true if we have reached the end of the expression.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ParsedExpressionReader.FixArea3d_BIFF7.fixFormulaArgument(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Template.Correction)">
            <summary>    __uint8    ptg;
            __uint16   ixals;            // The index to the EXTERNSHEET records. If ixals is negative (for example, FFFFh), the name is in the current workbook.
            __uint8    reserved1[8];     // Reserved; must be 0 (zero)
            __uint16   itabFirst;        // The index to the first sheet in the 3 D reference (0-based); see the text.
            __uint16   itabLast;         // The index to the last sheet in the 3 D reference (0-based); see the text.
            GRBITR16 grbitRwFirst;     // First row number/offset and abs/rel flags
            GRBITR16 grbitRwLast;      // Last  row number/offset and abs/rel flags
            __uint8    colFirst;         // First column of the reference (0-based)
            __uint8    colLast;          // Last column of the reference (0-based)
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ParsedExpressionReader.FixArea3d_BIFF8.fixFormulaArgument(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Template.Correction)">
            <summary>   __uint8    ptg;
            __uint16   ixti;             // Index into the EXTERNSHEET record
            __uint16   rwFirst;          // First row of the reference (0-based)
            __uint16   rwLast;           // Last row of the reference (0-based)
            GRBITC16 grbitColFirst;    // First column number/offset and abs/rel flags
            GRBITC16 grbitColLast;
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ParsedExpressionReader.FixAreaN_BIFF7.fixFormulaArgument(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Template.Correction)">
            <summary>   __uint8    ptg;
            GRBITR16 grbitRwFirst;     // First row number/offset and abs/rel flags
            GRBITR16 grbitRwLast;      // Last  row number/offset and abs/rel flags
            __uint8    colFirst;         // First column of the reference (0-based)
            __uint8    colLast;          // Last column of the reference (0-based)
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ParsedExpressionReader.FixAreaN_BIFF8.fixFormulaArgument(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Template.Correction)">
            <summary>   __uint8    ptg;
            __uint16   rwFirst;          // First row of the reference (0-based)
            __uint16   rwLast;           // Last row of the reference (0-based)
            GRBITC16 grbitColFirst;    // First column number/offset and abs/rel flags
            GRBITC16 grbitColLast;     // Last column number/offset and abs/rel flags
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ParsedExpressionReader.FixRef3d_BIFF7.fixFormulaArgument(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Template.Correction)">
            <summary>   __uint8    ptg;
            __uint16   ixals;            // The index to the EXTERNSHEET records. If ixals is negative (for example, FFFFh), the name is in the current workbook.
            __uint8    reserved1[8];     // Reserved; must be 0 (zero)
            __uint16   itabFirst;        // The index to the first sheet in the 3 D reference (0-based); see the text.
            __uint16   itabLast;         // The index to the last sheet in the 3 D reference (0-based); see the text.
            GRBITR16 grbitRw;          // The row of the reference and abs/rel flags
            __uint16   col;              // The column of the reference  (0-based)
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ParsedExpressionReader.FixRef3d_BIFF8.fixFormulaArgument(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Template.Correction)">
            <summary>  __uint8    ptg;
            __uint16   ixti;             // Index into the EXTERNSHEET record
            __uint16   rw;               // The row of the reference  (0-based)
            GRBITC16 grbitCol;
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ParsedExpressionReader.FixRefN_BIFF7.fixFormulaArgument(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Template.Correction)">
            <summary>   __uint8    ptg;
            GRBITR16 grbitRw;          // The row of the reference and abs/rel flags
            __uint16   col;              // The column of the reference  (0-based)
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ParsedExpressionReader.FixRefN_BIFF8.fixFormulaArgument(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Template.Correction)">
            <summary>  __uint8    ptg;
            __uint16   rw;               // The row of the reference  (0-based)
            GRBITC16 grbitCol;
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ParsedExpressionReader.FixTblRow.fixFormulaArgument(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Template.Correction)">
            <summary>  __uint8    ptg;
            __uint16   rwFirst;          // The row number of the upper-left corner (0-based)
            __uint16   rwLast;           // The column number of the upper-left corner (0-based)
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ParsedExpressionReader.GetSizeAttr.getTokenLength(System.SByte[],System.Int32)">
            <summary>  __uint8    ptg;
            struct
            {
            __uint8 bitFAttrSemi:1;   // = 1 if the formula contains a volatile function
            __uint8 bitFAttrIf:1;     // = 1 to implement an optimized IF function
            __uint8 bitFAttrChoose:1; // = 1 to implement an optimized CHOOSE function
            __uint8 bitFAttrGoto:1;   // = 1 to jump to another location within the parsed expression
            __uint8 bitFAttrSum:1;    // = 1 to implement an optimized SUM function
            __uint8 bitFAttrBaxcel:1; // = 1 if the formula is a BASIC-style assignment statement
            __uint8 bifFAttrSpace:1;  // = 1 if the macro formula contains spaces after the equal sign (BIFF3 and BIFF4 only)
            }        grbit;
            
            __uint16   w;                // Data word
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ParsedExpressionReader.GetSizeStr_BIFF7.getTokenLength(System.SByte[],System.Int32)">
            <summary>   __uint8    ptg;
            __uint8    cch;              // The length of the string
            byte[]     rgch[]            // The string
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ParsedExpressionReader.GetSizeStr_BIFF8.getTokenLength(System.SByte[],System.Int32)">
            <summary>   __uint8    ptg;
            __uint8    cch;   // The length of the string, in characters!
            __uint8    grbit;
            byte[]     rgb;
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet">
            <summary> <p>Title: Sheet</p>
            <p>Description: Desription and utility classes for dealing with Excel BIFF8 worksheets.</p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderBIFF8,SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordBoundSheetBIFF8,SoftArtisans.OfficeWriter.ExcelWriter.Template.ParsedExpressionReader)">
            <summary> Constructor for Sheet.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.getIncrementForRow(System.Int32,System.Boolean,System.Collections.Generic.IDictionary{System.Int32,System.Int32})">
            <summary>
            Iterates through rows and sums up the previous increments to get the increment for the current row
            </summary>
            <param name="aRow">the row to get the increment value for</param>
            <param name="aRefIsRelative">reference should be stretched</param>
            <param name="fieldMarkerRows">a mapping of rows to increments</param>
            <returns>the increment value</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.pushUpdateIncrementForRow(System.Int32,System.Int32)">
            <summary> Adds a row increment for a specific row.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.addRow(SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateSourceRow)">
            <summary>
            Insert a row at the end of the list.
            NOTE: rows will be resorted by row number. This is normally ok
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.fixUpSheetRecord(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <summary> Adjust type and size in the given Record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.fixUpChartRecord(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record,SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordBOF)">
            <summary> Adjust type and size in the given Record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.fixUpAIExpandPtgRefToPtgArea(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <summary>This method will expand any ptg refs into ptg area tokens in the given ai record.  It will search 
            through all ptg tokens in the given record and look for any ptg refs.  If a ptg ref is found, it 
            will expand it to a ptg area.  (OWD-1759)
            
            No formula streching is done here, this method only expands refs into areas, and let the old formula 
            streching code do the streching.  </summary>
              
            <param name="aRec">the record to modify</param>
            <throws>IOException if io error occurs, or if the expanded ptg expression results in the AI record
            exceeding the BIFF8 record size limitation.</throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.fixUpCellRecord(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <summary> Adjust type and size in the given Record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.fixUpCONTINUE(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <summary> Fixes a CONTINUE record.
            No implementation.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.fixUpAI(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <summary> Fix up the AI record (a Chart record)</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.fixUpMSODrawing(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <summary> Fix the row offsets in an MSODrawing</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.fixUpNote(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <summary> Updates the row references for a Note record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.fixUpHLink(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <summary> Updates the row references for a HLink record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.fixUpHLinkToolTip(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <summary> Updates the row references for a HLinkToolTip record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.fixUpMergeCells(SoftArtisans.OfficeWriter.ExcelWriter.Records.MergeCellsRecord)">
            <summary> Updates the row references for a MergeCells record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.fixUpHPageBreaks(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <summary> Updates the row references for a Horizontal Page Break record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.fixUpVPageBreaks(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <summary> Updates the row references for a Vertical Page Break record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.fixUpCondFMT(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <summary> Updates the row references for a CondFMT record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.fixUpCF(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <summary> Updates the row references for a CF record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.fixUpDV(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDV)">
            <summary> Updates the row references for a DV record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.fixUpCellFormula(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordFORMULA)">
            <summary> Updates the row references for a CellFormula record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.fixUpArray(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <summary> Updates the row references for an Array record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.fixUpSHRFMLA(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <summary> Updates the row references for a Shared Formula record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.fixUpSxView(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <summary> Updates the row references for a SXVIEW record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.write(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordWriter)">
            <returns> Correction factor = newSize - oldSize.
            </returns>
            <summary> 1. seeks to BOF in aReader (from SheetOffset)
            2. if the next record is BOF throw exception
            3. Cast Record to RecordBOF
            4. Copy to output stream
            5. remember the offset of the written record for the BUNDLESHEET record update
            6. Create a "SheetHandler"
            7. switch on BOF.dt:
            - xlmiscBOF_DT_WORKSHEET -> cast SheetHandler -> TemplateWorksheetHandler
            - xlmiscBOF_DT_CHART     -> cast SheetHandler -> TemplateChartHandler
            - default: -> cast SheetHandler -> SheetBOFEOFHandler
            8. if SheetHandler != null, SheetHandler.WriteToStream( OutputStream, Reader)
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.CopyWorksheetToReaderNavigator(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordReader,System.Collections.Generic.IList{System.SByte[]},System.Int32@)">
            <summary>
            copy a worksheet to the Reader/Navigator
            </summary>
            <param name="aWriter"></param>
            <param name="aPile"></param>
            <param name="vPos"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.addProhibitedMarkerRange(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordSXVIEW)">
            <summary>
            Get the pivot table range from a SXVIEW (pivot table view) record,
            and store it in a 2D range.
            
            This is used so data markers sound within that range aren't bound. Pivot tables
            sometimes duplicate data markers into the view's cells, which can confuse ExcelWriter
            </summary>
            <param name="record">an SXVIEW record</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.isInProhibitedRange(System.Int32,System.Int32)">
            <summary>
            Iterate through the prohibited marker ranges, and if one is hit, return true
            </summary>
            <param name="row">row</param>
            <param name="col">column</param>
            <returns>true or false</returns>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.prohibitedMarkerRanges">
            <summary>
            Marker cells inside these ranges should be ignored
            
            This is because pivot table views will sometimes duplicate
            data markers in the data, causing them to be bound twice, which causes problems
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.initializeRecordPile">
            <summary>
            If there are pivot tables in the sheet, initialize a different record pile
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.IncrementRowReferences(System.Collections.Generic.IDictionary{System.Int32,System.Int32})">
            <summary>
            Sometimes increments are calculated after the sheet is written out,
            so we update these Record if possible with the new row numbers.
            </summary>
            <param name="increments">a mapping of row numbers to increments</param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.Parent">
            <summary> Returns the TemplateReader that created this sheet.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.LicenseKey">
            <summary> Sets the license key, so we can get the edition</summary>
            <param name="aVal">
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.LastDBCellOffset">
            <summary> Sets the offset in the stream of the last DBCELL record for this sheet.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.SheetName">
            <summary> Returns the name of this sheet.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.SheetType">
            <summary> Returns the version of this sheet (BIFF7/8).</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.Rows">
            <summary> Returns an enumeration of rows for this sheet.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.SheetOffset">
            <summary> Returns the offset of this sheet's BOF record in the stream.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.RowStretchOptions">
            <summary>There are two types row number updates:
            
            1) row number is incremented by the number of rows inserted prior to this row (simple push down)
            2) row number is incremented by the number of rows inserted prior to this field marker row plus
            the number of rows inserted for this field marker (push and stretch).
            
            First row in the area is usually updated with simple push, last row in the area is usually updated with
            push and stretch.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.MSOFieldHeader">
            <summary> This class represents the header for an MSO field.
            We probably should have just done it in the data buffer directly rather than create an object,
            because that's how we did all the others.  But since this was the first one we did, and we
            should probably use this approach for the other fixups, it stays for now.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet.MSOFieldStruct">
            <summary> A class representing the data struct for an MSOField.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ReadOnlyTemplateBindings.findDSNFromField(SoftArtisans.OfficeWriter.ExcelWriter.Template.FieldMarkerInfo,System.String)">
            <summary>
            This functions should tolerate differences in syntax in the marker and return the same IBinding,
            if it refers to the same data source
            </summary>
            <param name="info"></param>
            <param name="worksheetName"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateBindings">
            <summary> <p>Title: TemplateBindings.java</p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Oct 22, 2002
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateBindings.TwoStrings">
            <summary>
            Provide a way to store two strings, compare, and hash them
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateBindings.TwoStrings.#ctor(System.String,System.String)">
            <summary>
            Create a structure that contains two strings
            </summary>
            <param name="name"></param>
            <param name="worksheetName">this is changed to String.Empty if it's null</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateFormatException">
            <summary> This exception is used for any format / corrupted-data error in
            template files.  It derives from SAException: publicly,
            you just need to declare and catch SAException.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateFormatException.#ctor">
            <summary> Serialization constructor.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateFormatException.#ctor(System.String)">
            <summary> Simple constructor, allowing you to set the getMessage() text of the
            exception.
            </summary>
            <param name="Message">Error message text to set.
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateFormatException.#ctor(System.String,System.Exception)" -->
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateFormatException.#ctor(System.Exception)" -->
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateOutputRow">
            <summary> <p>Title: TemplateOutputRow.java</p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Oct 21, 2002
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateOutputRow.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateSourceRow)">
            <summary> Constructor for TemplateOutputRow.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderBIFF8">
            <summary> <p>
            Title: TemplateReader
            </p>
            <p>
            Description: Read a template file into memory and initialize the data structures we need for the ExcelTemplate.
            </p>
            <p>
            Copyright: Copyright (c) 2002 SoftArtisans
            </p>
            <p>
            Company: SoftArtisans
            </p>
            
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderBIFF8.#ctor(SoftArtisans.OfficeWriter.Shared.ReadOnlyStorage,System.IO.Stream,SoftArtisans.OfficeWriter.Shared.ILicenseKey)">
            <summary> Constructor</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderBIFF8.initialize" -->
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderBIFF8.readTemplateBIFF8(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordWriter)" -->
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderBIFF8.readSupBooksBIFF8(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordWriter)">
             <summary>Reads the SUPBOOK records and store the fact if it references an internal (self) or external workbook.</summary>
            
             <param name="aRec">the SUPBOOK record to read.</param>
             @throws Exception
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderBIFF8.readExternSheetsBIFF8(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordWriter)">
            <summary> Reads the XTI structures from an EXTERNSHEET record and adds the references to the reader's vector of external
            references (mExternSheetReferences).
            
            </summary>
            <param name="aRec">
            the EXTERNSHEET record to read.
            </param>
            <throws>  Exception </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderBIFF8.getSheet(System.Int32)">
            <summary> Returns the Sheet at the specified index.
            
            </summary>
            <param name="aIndex">
            the 0-based <i>index </i> of the sheet, not the stream offset.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderBIFF8.getSheetByName(System.String)">
            <summary> Attempts to find a sheet by the name specified in the BOUNDSHEET record.
            
            </summary>
            <returns> the Sheet, if it exists; null if it cannot be found by the name given.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderBIFF8.clean">
            <summary> Resets this reader by setting all variables to defaults.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderBIFF8.findFirstRow(System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordWriter)">
            <summary> Attempts to find the first ROW record of the given sheet index (0-based, not stream based).
            
            </summary>
            <returns> true if the aReader is now set to the first ROW record in the requested sheet; false if it could not be
            found.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderBIFF8.extractFieldMarker(SoftArtisans.OfficeWriter.ExcelWriter.Records.ICellRecord)">
            <summary> Attempts to get {@link FieldMarkerInfo}from a LabelSST record; if the record is not a LabelSST, returns null.
            This function calls FieldMarkerInfo by passing it the string from the SST.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderBIFF8.fixUpNameRecords(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordWriter)">
            <summary> Adjusts named cell records (NAME) by fixing their cell references. This method is called after all the cells have
            been inserted, and uses the Corrections interface of the sheets.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderBIFF8.updateAllBoundsheets(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordWriter,System.Int64[])">
            <summary> Updates the offsets (lbPlyPos) values of each BOUNDSHEET record starting from the point in the RecordReader
            passed in to the values specified by each Sheet object in mSheets.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderBIFF8.updateDCONREF_BIFF8(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordWriter)">
            <summary> Corrects the cell references in a DCONREF record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderBIFF8.updateRowsUsedByPivotTable(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordDCONREF,SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet,System.Int32)">
            <summary>
            Figure out how much the data rows used by the pivot table are stretched
            And stretch the rows under the pivot table accordingly
            
            NOTE: for now, this will update the row increment correctly, but
            since the sheet is already written out, we can't do anything useful with it
            </summary>
            <param name="record">The record with source row information</param>
            <param name="destSheet">The sheet which contains the pivot table view</param>
            <param name="pivotTableLastRow">The pivot table's last row</param>
            <returns>the increment calculated for pivotTableLastRow</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderBIFF8.processTemplate(SoftArtisans.OfficeWriter.ExcelWriter.Template.ITemplateBindings)">
            <summary> ProcessTemplate
            
            1. Check and make sure that mNav!=null, aOutputStream!=null 2. Go through each sheet 3. Find the first row of
            that sheet in the navigator. 4. Copy all of the row records to the Sheet's Row array 5. Go through each row and
            read the cells that belong to it. 6. If they have a field marker, mark it as such. 7. Process each row for this
            worksheet.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderBIFF8.CreateRecord``1(SoftArtisans.OfficeWriter.ExcelWriter.Records.RecordReader)">
            <summary>
            Create a T record from the RecordReader data
            </summary>
            <typeparam name="T">some kind of Record. Needs a default public constructor</typeparam>
            <param name="vReaderWriter">A RecordReader which is seeked to a record of type T</param>
            <returns>the record</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderBIFF8.generateCellRecord(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <summary> Create a record that derives from RecordCellBase (any of the objects that count as Cells in a row) from a Record.
            Unfortunately we can't seem to cast records.
            
            </summary>
            <returns> A record object deriving from RecordCellBase that reflects the type of record this is (according to
            getType()). null is returned if we don't support that type of Cell Record or it isn't a Cell record.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderBIFF8.processRow(SoftArtisans.OfficeWriter.ExcelWriter.Template.Sheet,SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateSourceRow,System.Int32)">
            <summary> Processes a single row for field markers and inserts data.
            
            1. Given a sheet.
            2. Get a row.
            3. If the row has a field marker, and there is data in the bindings, create a TemplateOutputRow 
            4. For each column in the parent row that has a FieldMarker: 
            a) if this is the first binding
            for this column or if the binding is null find the binding (throw on error) else cache the binding name 
            b) Build a new cell
             - copy row, column, XF
             - Get the data from the binding and create the appropriate record. 
             - save the cell from the ValueHandler to the output vector. 
            5. If it's not a field marker column,
             - copy the orginal cell. (skip if Shared Formula!) 
            6. Repeat the cell creation if there's more data to be bound. 
            7. Reset the bindings. 
            8. FixUp the Cell values (row increments, I guess) 
            9. Next row!
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderBIFF8.FileFormat">
            <summary> Returns the format of the workbook being read, as reported by the first BOF record. If the reader has not been
            initialized, returns {@link Constants#xlmiscBOF_BIFF8Ver}.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Template.TemplateReaderBIFF8.NumSheets">
            <summary> Returns the number of sheets in this workbook. This is discovered after initialization by reading the BOUNDSHEET
            records.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TransformToBlankRecord.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Template.ValueHandler)">
            <param name="ValueHandler">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.TransformToBoolRecord.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Template.ValueHandler)">
            <param name="ValueHandler">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ValueHandler.flashMultiRecord">
            <summary>
            I think this is supposed to be 'flushMultiRecord'.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Template.ValueHandler.addRecord(SoftArtisans.OfficeWriter.ExcelWriter.Records.Record)">
            <param name="rec">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Constants">
            <summary> <p>Title: Constants</p>
            <p>Description: Constants defined by ExcelWriter</p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelStreamSupportClass">
            <summary>
            Depending on the type of stream, call a specific read (or available, etc) function. This is because
            when this was java code, Read was lowercase and used signed byte arrays. Since the .NET Read uses
            unsigned bytes, we have to either convert the signed bytes to unsigned bytes and use Read,
            or do it this way
            
            Normally everything would be in StreamSupportClass, but Encrypter and Decrypter are only visible to
            ExcelWriter, so we have to do special checks for those two cases in addition.
            
            BDUEDN stands for BlockingInputStream, DocumentInputStream, UnsyncByteArrayInputStream,
            Encrypter, Decrypter, Navigator.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelStreamSupportClass.ReadSpecial_BDUEDN(System.IO.Stream,System.SByte[],System.Int32,System.Int32)">
            <summary>
            Call ReadSpecial_BDUN in StreamSupportClass, but also check if this
            is an Encrypter or Decrypter. See ReadSpecial_BDUN for more info
            </summary>
            <param name="sourceStream"></param>
            <param name="target"></param>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelStreamSupportClass.ReadSpecial_BDUEDN(System.IO.Stream,System.SByte[])">
            <summary>
            Call ReadSpecial_BDUN in StreamSupportClass, but also check if this
            is an Encrypter or Decrypter. See ReadSpecial_BDUN for more info
            </summary>
            <param name="sourceStream"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelStreamSupportClass.Available_BDUEDN(System.IO.Stream)">
            <summary>
            Call Available_BDUN in StreamSupportClass, but also check if this is an
            Encrypter or Decrypter. See Available_BDUN for more info
            </summary>
            <param name="sourceStream"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelStringUtil">
            <author>  geoffk Sep 21, 2004 5:14:11 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelStringUtil.writeBiff8String(System.String,SoftArtisans.OfficeWriter.ExcelWriter.ByteDataBuffer,System.Boolean)">
            <summary> A method to write a BIFF8 string into a record (usually the cch/rgch
            stuff). Ripped enthusiastically from the BOUNDSHEET record. This method
            handles: - The max length (cuts to max length if needed) - Writing the
            cch (length) out if aWriteLength == true - Checking to see if the string
            is Unicode or ASCII - Writing the first byte out which determines if it
            is compressed or not - Writing the string out.
            
            </summary>
            <param name="aString">
            The String to write
            </param>
            <param name="aMaxLength">
            </param>
            <param name="aWriteLength">
            </param>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelStringUtil.calcBIFF8StringSize(System.String,System.Boolean,System.Boolean)">
            <summary> Calculates the length of a BIFF8 string. Does not include cch or
            grbit!!!!
            </summary>
            <param name="aTruncate">TODO
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate">
            <Doc>
      <summary>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate"/> object represents an ExcelWriter template spreadsheet.</summary>
      <remarks>
        <para>An ExcelWriter template is a file created in Microsoft Excel that contains data markers.</para>
        <para>A data marker specifies a database column, variable, or array to insert in the spreadsheet column containing the marker.</para>
        <para>The <c>ExcelTemplate</c> object is in the <c>SoftArtisans.OfficeWriter.ExcelWriter</c> namespace. The object can be referenced as <c>SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate</c>. To minimize typing and errors, use an <c>Import</c> directive to import the namespace to the aspx page, and reference the object as <c>ExcelTemplate</c>, without the namespace prefix.</para>
      </remarks>
      <example>
        <para>If you are coding directly in the .aspx page, following the Page directive, include:<br/><code>
&lt;%@ Import Namespace="SoftArtisans.OfficeWriter.ExcelWriter" %&gt;</code><br/>If you are coding in the "code behind" page (.aspx.vb or .aspx.cs), include an <c>Imports</c> or <c>using</c> statement at the top of the "code behind" page:<code>
using SoftArtisans.OfficeWriter.ExcelWriter;</code><br/><code>
Imports SoftArtisans.OfficeWriter.ExcelWriter</code><br/>To create an instance of the <c>ExcelTemplate</c> object use:<code>
ExcelTemplate oExcelTemplate = new ExcelTemplate();</code><br/><code>
Dim oExcelTemplate As New ExcelTemplate()</code></para>
      </example>
    </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.ALL_ROWS">
            <Doc>
        <summary>
          <para>Used as <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.MaxRows"/>, to indicate that as much of the data source should be imported as possible.</para>
        </summary>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.#ctor">
            <Doc>
        <summary>
          <para>Creates a new <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate"/> object.</para>
        </summary>
        <example>
          <para>
            <code>
ExcelTemplate xlt = new ExcelTemplate();
</code>
            <br/>
            <code>
Dim xlt As New ExcelTemplate()
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindCellData(System.Object,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)">
            <Doc>
        <summary>
          <para>Sets an object as a data source for a single cell in a template.</para>
        </summary>
        <param name="cellData">
          <para>An object to use as the data source.</para>
        </param>
        <param name="dataMarkerName">
          <para>The name of the template data marker at which to insert the data source value. This parameter must be specified, but can be null or an empty string when setting the first data source to bind to the template.</para>
        </param>
        <param name="property">
          <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties"/> object which contains information about how the data should be bound to the template. <c>property</c> Must be specified, but the <c>DataBindingProperties</c> need not be set beforehand. To bind data to a template with the default <c>DataBindingProperties</c>, pass in <c>ExcelTemplate.CreateDataBindingProperties()</c> as the <c>property</c> value. Otherwise, use the <c>ExcelTemplate.CreateDataBindingProperties()</c> method to generate a new <c>DataBindingProperties</c> object and set the <c>DataBindingProperties.MaxRows</c>, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.Transpose"/>, and/or <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.WorksheetName"/> properties for the workbook.</para>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <c>BindCellData</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</para>
        </exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindCellData(System.Object,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindColumnData(System.Object[],System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindRowData(System.Data.DataView,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindData(System.Data.DataSet,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Set a cell data source for the data marker
          //--- %%=$Company
          xlt.BindCellData("SoftArtisans",
               "Company",
               xlt.CreateDataBindingProperties());
        </code>
            <br/>
            <code>

          '--- Set a cell data source for the data marker
          '--- %%=$Company
          xlt.BindCellData("SoftArtisans", _
               "Company", _
               xlt.CreateDataBindingProperties())
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetCellDataSource(System.Object,System.String)">
            <Doc>
        <summary>Sets an object as a data source for a single cell in a template.</summary>
        <param name="cellData">An object to use as the data source.</param>
        <param name="dataMarkerName">The name of the template data marker at which to insert the data source value. This parameter must be specified, but can be null or an empty string when setting the first data source to bind to the template.</param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetCellDataSource</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetCellDataSource(System.Object,System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Set a cell data source for the data marker
          //--- %%=$Company
          xlt.SetCellDataSource("SoftArtisans", "Company");
        </code>
            <br/>
            <code>

          '--- Set a cell data source for the data marker
          '--- %%=$Company
          xlt.SetCellDataSource("SoftArtisans", "Company")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String)">
            <Doc>
        <summary>
          <para>Sets an array of objects as a data source for a single column in the template. You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetCellDataSource(System.Object,System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/>.</para>
        </summary>
        <param name="columnData">
          <para>An array of objects to use as the data source.</para>
        </param>
        <param name="dataSourceName">
          <para>The name of the template data marker at which to insert the values imported from the data source.</para>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <c>SetColumnDataSource</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</para>
        </exception>
        <exception cref="T:System.ArgumentException"/>
        <example>
          <para>
            <code>

          //--- Set a column data source for the data marker
          //--- %%=$SimpleArray
          string[] onedim = {"SoftArtisans", "OfficeWriter", "ExcelTemplate"};
          xlt.SetColumnDataSource(onedim, "SimpleArray");
        </code>
            <br/>
            <code>

          '--- Set a column data source for the data marker
          '--- %%=$SimpleArray
          Dim onedim As String() = {"SoftArtisans", "OfficeWriter", "ExcelTemplate"}
          xlt.SetColumnDataSource(onedim, "SimpleArray")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String,System.Int32)">
            <Doc>
        <summary>Sets an array of objects as a data source for a single column in the template. The maximum number of rows to return from the data source is defined by the <c>MaxRows</c> parameter.</summary>
        <param name="columnData">
          <para>An array of objects to use as the data source.</para>
        </param>
        <param name="dataSourceName">
          <para>The name of the template data marker at which to insert the values imported from the data source.</para>
        </param>
        <param name="MaxRows">
          <para>Specifies the maximum number of rows to import from the data source. To import the maximum rows available, use the constant <see cref="F:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.ALL_ROWS"/> .</para>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <c>SetColumnDataSource</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</para>
        </exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetCellDataSource(System.Object,System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Set a column data source for the data marker
          //--- %%=$SimpleArray
          //--- Specify that only 2 rows should be imported
          string[] onedim = {"SoftArtisans", "OfficeWriter", "ExcelTemplate"};
          xlt.SetColumnDataSource(onedim, "SimpleArray", 2);
        </code>
            <br/>
            <code>

          '--- Set a column data source for the data marker
          '--- %%=$SimpleArray
          '--- Specify that only 2 rows should be imported
          Dim onedim As String() = {"SoftArtisans", "OfficeWriter", "ExcelTemplate"}
          xlt.SetColumnDataSource(onedim, "SimpleArray", 2)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindColumnData(System.Object[],System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)">
            <Doc>
        <summary>
          <para>Sets an array of objects as a data source for a single column in the template.</para>
        </summary>
        <param name="columnData">
          <para>An array of objects to use as the data source.</para>
        </param>
        <param name="dataSourceName">
          <para>The name of the template data marker at which to insert the values imported from the data source.</para>
        </param>
        <param name="property">
          <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties"/> object which contains information about how the data should be bound to the template. <c>property</c> Must be specified, but the <c>DataBindingProperties</c> need not be set beforehand. To bind data to a template with the default <c>DataBindingProperties</c>, pass in <c>ExcelTemplate.CreateDataBindingProperties()</c> as the <c>property</c> value. Otherwise, use the <c>ExcelTemplate.CreateDataBindingProperties()</c> method to generate a new <c>DataBindingProperties</c> object and set the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.MaxRows"/>, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.Transpose"/>, and/or <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.WorksheetName"/> properties for the workbook.</para>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <c>BindColumnData</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</para>
        </exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindCellData(System.Object,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindColumnData(System.Object[],System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindRowData(System.Data.DataView,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindData(System.Data.DataSet,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Set a column data source for the data marker
          //--- %%=$SimpleArray
          string[] onedim = {"SoftArtisans", "OfficeWriter", "ExcelTemplate"};
          xlt.BindColumnData(onedim,
               "SimpleArray",
               xlt.CreateDataBindingProperties());
        </code>
            <br/>
            <code>

          '--- Set a column data source for the data marker
          '--- %%=$SimpleArray
          Dim onedim As String() = {"SoftArtisans", "OfficeWriter", "ExcelTemplate"}
          xlt.BindColumnData(onedim, _
               "SimpleArray", _
               xlt.CreateDataBindingProperties())
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Collections.IEnumerable,System.String)">
            <Doc>
        <summary>Sets a column's data source to an <see cref="T:System.Collections.IEnumerable"/> collection. The <c>IEnumerable</c> interface supports a simple iteration over a collection.</summary>
        <param name="dataSource">An <c>IEnumerable</c> collection to use as the data source.</param>
        <param name="dataSourceName">The name of the template data marker at which to insert the values imported from the data source.</param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetColumnDataSource</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetCellDataSource(System.Object,System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Set a column data source for the data marker
          //--- %%=$Products
          xlt.SetColumnDataSource(coll, "Products");
        </code>
            <br/>
            <code>

          '--- Set a column data source for the data marker
          '--- %%=$Products
          xlt.SetColumnDataSource(coll, "Products")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Collections.IEnumerable,System.String,System.Int32)">
            <Doc>
        <summary>Sets a column's data source to an <see cref="T:System.Collections.IEnumerable"/> collection. The <c>IEnumerable</c> interface supports a simple iteration over a collection. The maximum number of rows to return from the data source is defined by the <c>MaxRows</c> parameter.</summary>
        <param name="dataSource">
          <para>An <c>IEnumerable</c> collection to use as the data source.</para>
        </param>
        <param name="dataSourceName">
          <para>The name of the template data marker at which to insert the values imported from the data source.</para>
        </param>
        <param name="MaxRows">
          <para>Specifies the maximum number of rows to import from the data source. To import the maximum rows available, use the constant <see cref="F:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.ALL_ROWS"/> .</para>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <c>SetColumnDataSource</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</para>
        </exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetCellDataSource(System.Object,System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Set a column data source for the data marker
          //--- %%=$Products
          xlt.SetColumnDataSource(coll, "Products", 7);
        </code>
            <br/>
            <code>

          '--- Set a column data source for the data marker
          '--- %%=$Products
          xlt.SetColumnDataSource(coll, "Products", 7)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindColumnData(System.Collections.IEnumerable,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)">
            <Doc>
        <summary>
          <para>Sets a column's data source to an <see cref="T:System.Collections.IEnumerable"/> collection. The <c>IEnumerable</c> interface supports a simple iteration over a collection.</para>
        </summary>
        <param name="dataSource">
          <para>An <c>IEnumerable</c> collection to use as the data source.</para>
        </param>
        <param name="dataSourceName">
          <para>The name of the template data marker at which to insert the values imported from the data source.</para>
        </param>
        <param name="property">
          <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties"/> object which contains information about how the data should be bound to the template. <c>property</c> Must be specified, but the <c>DataBindingProperties</c> need not be set beforehand. To bind data to a template with the default <c>DataBindingProperties</c>, pass in <c>ExcelTemplate.CreateDataBindingProperties()</c> as the <c>property</c> value. Otherwise, use the <c>ExcelTemplate.CreateDataBindingProperties()</c> method to generate a new <c>DataBindingProperties</c> object and set the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.MaxRows"/>, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.Transpose"/>, and/or <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.WorksheetName"/> properties for the workbook.</para>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <c>BindColumnData</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</para>
        </exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindCellData(System.Object,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindColumnData(System.Object[],System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindRowData(System.Data.DataView,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindData(System.Data.DataSet,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Set a column data source for the data marker
          //--- %%=$Products
          xlt.BindColumnData(coll,
               "Products",
               xlt.CreateDataBindingProperties());
        </code>
            <br/>
            <code>

          '--- Set a column data source for the data marker
          '--- %%=$Products
          xlt.BindColumnData(coll, _
               "Products", _
               xlt.CreateDataBindingProperties())
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Collections.IDictionary,System.String)">
            <Doc>
        <summary>Sets a column's data source to an <see cref="T:System.Collections.IDictionary"/>. An <c>IDictionary</c> represents a collection of key-and-value pairs.</summary>
        <param name="dataSource">An <c>IDictionary</c> collection of key-and-value pairs.</param>
        <param name="dataSourceName">The name of the template data marker at which to insert the values imported from the data source.</param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetColumnDataSource</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetCellDataSource(System.Object,System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Set a column data source for the data marker
          //--- %%=$Products
          xlt.SetColumnDataSource(coll, "Products");
        </code>
            <br/>
            <code>

          '--- Set a column data source for the data marker
          '--- %%=$Products
          xlt.SetColumnDataSource(coll, "Products")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Collections.IDictionary,System.String,System.Int32)">
            <Doc>
        <summary>
          <para>Sets a column's data source to an <see cref="T:System.Collections.IDictionary"/>. An <c>IDictionary</c> represents a collection of key-and-value pairs. The maximum number of rows to return from the data source is defined by the <c>MaxRows</c> parameter.</para>
        </summary>
        <param name="dataSource">
          <para>An <c>IDictionary</c> collection of key-and-value pairs.</para>
        </param>
        <param name="dataSourceName">
          <para>The name of the template data marker at which to insert the values imported from the data source.</para>
        </param>
        <param name="MaxRows">
          <para>Specifies the maximum number of rows to import from the data source. To import the maximum rows available, use the constant <see cref="F:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.ALL_ROWS"/> .</para>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <c>SetColumnDataSource</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</para>
        </exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetCellDataSource(System.Object,System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Set a column data source for the data marker
          //--- %%=$Products
          xlt.SetColumnDataSource(coll, "Products", 7);
        </code>
            <br/>
            <code>

          '--- Set a column data source for the data marker
          '--- %%=$Products
          xlt.SetColumnDataSource(coll, "Products", 7)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindColumnData(System.Collections.IDictionary,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)">
            <Doc>
        <summary>
          <para>Sets a column's data source to an <see cref="T:System.Collections.IDictionary"/>. An <c>IDictionary</c> represents a collection of key-and-value pairs.</para>
        </summary>
        <param name="dataSource">
          <para>An <c>IDictionary</c> collection of key-and-value pairs.</para>
        </param>
        <param name="dataSourceName">
          <para>The name of the template data marker at which to insert the values imported from the data source.</para>
        </param>
        <param name="property">
          <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties"/> object which contains information about how the data should be bound to the template. <c>property</c> Must be specified, but the <c>DataBindingProperties</c> need not be set beforehand. To bind data to a template with the default <c>DataBindingProperties</c>, pass in <c>ExcelTemplate.CreateDataBindingProperties()</c> as the <c>property</c> value. Otherwise, use the <c>ExcelTemplate.CreateDataBindingProperties()</c> method to generate a new <c>DataBindingProperties</c> object and set the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.MaxRows"/>, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.Transpose"/>, and/or <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.WorksheetName"/> properties for the workbook.</para>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <c>BindColumnData</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</para>
        </exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindCellData(System.Object,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindColumnData(System.Object[],System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindRowData(System.Data.DataView,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindData(System.Data.DataSet,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Set a column data source for the data marker
          //--- %%=$Products
          xlt.BindColumnData(coll,
               "Products",
               xlt.CreateDataBindingProperties());
        </code>
            <br/>
            <code>

          '--- Set a column data source for the data marker
          '--- %%=$Products
          xlt.BindColumnData(coll, _
               "Products", _
               xlt.CreateDataBindingProperties())
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindRowData(System.Data.DataView,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)">
            <Doc>
        <summary>Sets a DataView as a data source to bind to a row in the template. </summary>
        <param name="source">
          <para>The DataView to use as the data source.</para>
        </param>
        <param name="dataSourceName">The name of the data marker at which to insert the values imported from the data source. For example, to bind a data source to the data marker %%=Orders.OrderId, the value of dataSourceName should be "Orders". The string passed must begin with a letter.</param>
        <param name="property">The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties"/> object which contains information about how the data should be bound to the template. <c>property</c> Must be specified, but the <c>DataBindingProperties</c> need not be set beforehand. To bind data to a template with the default <c>DataBindingProperties</c>, pass in <c>ExcelTemplate.CreateDataBindingProperties()</c> as the <c>property</c> value. Otherwise, use the <c>ExcelTemplate.CreateDataBindingProperties()</c> method to generate a new <c>DataBindingProperties</c> object and set the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.MaxRows"/>, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.Transpose"/>, and/or <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.WorksheetName"/> properties for the workbook.</param>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <c>BindRowData</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</para>
        </exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>Only the first row of the DataView will be used. This method is commonly used to create a set of key-value pairs via a single row of data.</para>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindCellData(System.Object,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindColumnData(System.Object[],System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindRowData(System.Data.DataView,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindData(System.Data.DataSet,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          xlt.Open(@"C:\ExcelWriter\EmployeeOrdersTemplate.xls");

          //--- Bind the DataView to the
          //--- %%=Orders.[Field] data marker.
          xlt.BindRowData(OrdersDV,
               "Orders",
               xlt.CreateDataBindingProperties());
          xlt.Process();
          xlt.Save(Page.Response, "EmployeeOrders.xls", false);
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()
          xlt.Open("C:\ExcelWriter\EmployeeOrdersTemplate.xls")
          ...

          '--- Bind the DataView to the
          '--- %%=Orders.[Field] data marker.
          xlt.BindRowData(OrdersDV, _
               "Orders", _
               xlt.CreateDataBindingProperties())
          xlt.Process()
          xlt.Save(Page.Response, "EmployeeOrders.xls", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)">
            <Doc>
        <summary>Sets a DataView as a data source to bind to a row in the template. Only the first row of the DataView will be used. This method is commonly used to create a set of key-value pairs via a single row of data.</summary>
        <param name="source">The DataView to use as the data source.</param>
        <param name="dataSourceName">The name of the data marker at which to insert the values imported from the data source. For example, to bind a data source to the data marker %%=Orders.OrderId, the value of dataSourceName should be "Orders". The string passed must begin with a letter.</param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetRowDataSource</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetCellDataSource(System.Object,System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          xlt.Open(@"C:\ExcelWriter\EmployeeOrdersTemplate.xls");

          //--- Bind the DataView to the
          //--- %%=Orders.[Field] data marker.
          xlt.SetRowDataSource(OrdersDV, "Orders");
          xlt.Process();
          xlt.Save(Page.Response, "EmployeeOrders.xls", false);
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()
          xlt.Open("C:\ExcelWriter\EmployeeOrdersTemplate.xls")

          '--- Bind the DataView to the
          '--- %%=Orders.[Field] data marker.
          xlt.SetRowDataSource(OrdersDV, "Orders")
          xlt.Process()
          xlt.Save(Page.Response, "EmployeeOrders.xls", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindRowData(System.Data.DataTable,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)">
            <Doc>
        <summary>Sets a DataTable as a data source to bind to a row in the template. </summary>
        <param name="source">The DataTable to use as the data source.</param>
        <param name="dataSourceName">The name of the data marker at which to insert the values imported from the data source. For example, to bind a data source to the data marker %%=Orders.OrderId, the value of dataSourceName should be "Orders". The string passed must begin with a letter.</param>
        <param name="property">The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties"/> object which contains information about how the data should be bound to the template. <c>property</c> Must be specified, but the <c>DataBindingProperties</c> need not be set beforehand. To bind data to a template with the default <c>DataBindingProperties</c>, pass in <c>ExcelTemplate.CreateDataBindingProperties()</c> as the <c>property</c> value. Otherwise, use the <c>ExcelTemplate.CreateDataBindingProperties()</c> method to generate a new <c>DataBindingProperties</c> object and set the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.MaxRows"/>, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.Transpose"/>, and/or <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.WorksheetName"/> properties for the workbook.</param>
        <exception cref="T:System.ArgumentNullException">
          <c>BindRowData</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>Only the first row of the DataTable will be used. This method is commonly used to create a set of key-value pairs via a single row of data.</para>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindCellData(System.Object,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindColumnData(System.Object[],System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindRowData(System.Data.DataView,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindData(System.Data.DataSet,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          xlt.Open(@"C:\ExcelWriter\EmployeeOrdersTemplate.xls");

          //--- Bind the DataTable to the
          //--- %%=Orders.[Field] data marker.
          xlt.BindRowData(OrdersDT,
               "Orders",
               xlt.CreateDataBindingProperties());
          xlt.Process();
          xlt.Save(Page.Response, "EmployeeOrders.xls", false);
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()
          xlt.Open("C:\ExcelWriter\EmployeeOrdersTemplate.xls")

          '--- Bind the DataTable to the
          '--- %%=Orders.[Field] data marker.
          xlt.BindRowData(OrdersDT, _
               "Orders", _
               xlt.CreateDataBindingProperties())
          xlt.Process()
          xlt.Save(Page.Response, "EmployeeOrders.xls", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataTable,System.String)">
            <Doc>
        <summary>Sets a DataTable as a data source to bind to a row in the template. Only the first row of the DataTable will be used. This method is commonly used to create a set of key-value pairs via a single row of data.</summary>
        <param name="source">The DataTable to use as the data source.</param>
        <param name="dataSourceName">The name of the data marker at which to insert the values imported from the data source. For example, to bind a data source to the data marker %%=Orders.OrderId, the value of dataSourceName should be "Orders". The string passed must begin with a letter.</param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetRowDataSource</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetCellDataSource(System.Object,System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          xlt.Open(@"C:\ExcelWriter\EmployeeOrdersTemplate.xls");

          //--- Bind the DataTable to the
          //--- %%=Orders.[Field] data marker.
          xlt.SetRowDataSource(OrdersDT, "Orders");
          xlt.Process();
          xlt.Save(Page.Response, "EmployeeOrders.xls", false);
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()
          xlt.Open("C:\ExcelWriter\EmployeeOrdersTemplate.xls")

          '--- Bind the DataTable to the
          '--- %%=Orders.[Field] data marker.
          xlt.SetRowDataSource(OrdersDT, "Orders")
          xlt.Process()
          xlt.Save(Page.Response, "EmployeeOrders.xls", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindRowData(System.Data.DataSet,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)">
            <Doc>
        <summary>Sets a DataSet as a data source to bind to a row in the template. </summary>
        <param name="source">
          <para>The DataSet to use as the data source.</para>
        </param>
        <param name="dataSourceName">The name of the data marker at which to insert the values imported from the data source. For example, to bind a data source to the data marker %%=Orders.OrderId, the value of dataSourceName should be "Orders". The string passed must begin with a letter.</param>
        <param name="property">The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties"/> object which contains information about how the data should be bound to the template. <c>property</c> Must be specified, but the <c>DataBindingProperties</c> need not be set beforehand. To bind data to a template with the default <c>DataBindingProperties</c>, pass in <c>ExcelTemplate.CreateDataBindingProperties()</c> as the <c>property</c> value. Otherwise, use the <c>ExcelTemplate.CreateDataBindingProperties()</c> method to generate a new <c>DataBindingProperties</c> object and set the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.MaxRows"/>, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.Transpose"/>, and/or <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.WorksheetName"/> properties for the workbook.</param>
        <exception cref="T:System.ArgumentNullException">
          <c>BindRowData</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>Only the first row of the DataSet will be used. This method is commonly used to create a set of key-value pairs via a single row of data.</para>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindCellData(System.Object,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindColumnData(System.Object[],System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindRowData(System.Data.DataView,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindData(System.Data.DataSet,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          xlt.Open(@"C:\ExcelWriter\EmployeeOrdersTemplate.xls");
    
          //--- Bind the DataSet to the
          //--- %%=Orders.[Field] data marker.
          xlt.BindRowData(OrdersDS,
               "Orders",
               xlt.CreateDataBindingProperties());
          xlt.Process();
          xlt.Save(Page.Response, "EmployeeOrders.xls", false);
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()
          xlt.Open("C:\ExcelWriter\EmployeeOrdersTemplate.xls")
    
          '--- Bind the DataSet to the
          '--- %%=Orders.[Field] data marker.
          xlt.BindRowData(OrdersDS, _
               "Orders", _
               xlt.CreateDataBindingProperties())
          xlt.Process()
          xlt.Save(Page.Response, "EmployeeOrders.xls", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataSet,System.String)">
            <Doc>
        <summary>Sets a DataSet as a data source to bind to a row in the template. Only the first row of the DataSet will be used. This method is commonly used to create a set of key-value pairs via a single row of data.</summary>
        <param name="source">The DataSet to use as the data source.</param>
        <param name="dataSourceName">The name of the data marker at which to insert the values imported from the data source. For example, to bind a data source to the data marker %%=Orders.OrderId, the value of dataSourceName should be "Orders". The string passed must begin with a letter.</param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetRowDataSource</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetCellDataSource(System.Object,System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          xlt.Open(@"C:\ExcelWriter\EmployeeOrdersTemplate.xls");

          //--- Bind the DataSet to the
          //--- %%=Orders.[Field] data marker.
          xlt.SetRowDataSource(OrdersDS, "Orders");
          xlt.Process();
          xlt.Save(Page.Response, "EmployeeOrders.xls", false);
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()
          xlt.Open("C:\ExcelWriter\EmployeeOrdersTemplate.xls")

          '--- Bind the DataSet to the
          '--- %%=Orders.[Field] data marker.
          xlt.SetRowDataSource(OrdersDS, "Orders")
          xlt.Process()
          xlt.Save(Page.Response, "EmployeeOrders.xls", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindRowData(System.Object[],System.String[],System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)">
            <Doc>
        <summary>
          <para>Sets an array of objects as a data source for a single row in a template.</para>
        </summary>
        <param name="rowData">
          <para>An object to use as the data source.</para>
        </param>
        <param name="columnNames">The names of the columns to get from the data source. If the <c>columnNames</c> parameter is null, field binding can only be performed by ordinal (for example, %%=DSN.#1 or %%=$DSN). If <c>columnNames</c> is specified, both ordinal field binding and named field binding can be used.</param>
        <param name="dataSourceName">
          <para>The name of the set of data markers at which to insert the values imported from the data source. <c>dataSourceName</c> must be specified, but can be left as null or an empty string if this is the first data source bound AND the data markers in the template use the ?http://wiki.softartisans.com/display/EW70/Creating+Data+Markers#CreatingDataMarkers-short or refer to the datasource by number rather than name. Note: <c>dataSourceName</c> does not include a data marker's column name, for example, the <c>dataSourceName</c> for <c>%%=Products.ProductID</c> is "Products."</para>
        </param>
        <param name="property">
          <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties"/> object which contains information about how the data should be bound to the template. <c>property</c> Must be specified, but the <c>DataBindingProperties</c> need not be set beforehand. To bind data to a template with the default <c>DataBindingProperties</c>, pass in <c>ExcelTemplate.CreateDataBindingProperties()</c> as the <c>property</c> value. Otherwise, use the <c>ExcelTemplate.CreateDataBindingProperties()</c> method to generate a new <c>DataBindingProperties</c> object and set the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.MaxRows"/>, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.Transpose"/>, and/or <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.WorksheetName"/> properties for the workbook.</para>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <c>BindRowData</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</para>
        </exception>
        <exception cref="T:System.ArgumentException"/>
        <example>
          <para>
            <code>

          //--- Set a data source for the row of data markers
          //--- %%=Address.Street, %%=Address.City, and
          //--- %%=Address.State
          string[] addressvalues = {"1330 Beacon St.", "Brookline", "MA"};
          string[] addressnames = {"Street", "City", "State"};
          xlt.BindRowData(addressvalues,
               addressnames,
               "Address",
               xlt.CreateDataBindingProperties());
        </code>
            <br/>
            <code>

          '--- Set a data source for the row of data markers
          '--- %%=Address.Street, %%=Address.City, and
          '--- %%=Address.State
          Dim addressvalues As String() = {"1330 Beacon St.", "Brookline", "MA"}
          Dim addressnames As String() = {"Street", "City", "State"}
          xlt.BindRowData(addressvalues, _
               addressnames, _
               "Address" _
               xlt.CreateDataBindingProperties())
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Object[],System.String[],System.String)">
            <Doc>
        <summary>Sets an array of objects as a data source for a single row in a template.</summary>
        <param name="aData">An object to use as the data source.</param>
        <param name="aColumnNames">The names of the columns to get from the data source. If the <c>columnNames</c> parameter is null, field binding can only be performed by ordinal (for example, %%=DSN.#1 or %%=$DSN). If <c>columnNames</c> is specified, both ordinal field binding and named field binding can be used.</param>
        <param name="aDataMarkerName">The name of the set of data markers at which to insert the data source value. This parameter must be specified, but can be null or an empty string when setting the first data source to bind to the template. Note: <c>dataMarkerName</c> does not include a data marker's column name, for example, the <c>dataMarkerName</c> for <c>%%=Products.ProductID</c> is "Products."</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <example>
          <para>
            <code>

          //--- Set a data source for the row of data markers
          //--- %%=Address.Street, %%=Address.City, and
          //--- %%=Address.State
          string[] addressvalues = {"1330 Beacon St.", "Brookline", "MA"};
          string[] addressnames = {"Street", "City", "State"};
          xlt.SetRowDataSource(addressvalues, addressnames, "Address");
        </code>
            <br/>
            <code>

          '--- Set a data source for the row of data markers
          '--- %%=Address.Street, %%=Address.City, and
          '--- %%=Address.State
          Dim addressvalues As String()= {"1330 Beacon St.", "Brookline", "MA"}
          Dim addressnames As String() = {"Street", "City", "State"}
          xlt.SetRowDataSource(addressvalues, addressnames, "Address")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindRowData(System.Collections.IDictionary,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)">
            <Doc>
        <summary>Sets a row's data source to an <see cref="T:System.Collections.IDictionary"/>. An <c>IDictionary</c> represents a collection of key-and-value pairs.</summary>
        <param name="dataSource">
          <para>An <c>IDictionary</c> collection of key-and-value pairs to use as the data source.</para>
        </param>
        <param name="dataSourceName">The name of the data marker at which to insert the values imported from the data source. For example, to bind a data source to the data marker %%=Orders.OrderId, the value of dataSourceName should be "Orders". The string passed must begin with a letter.</param>
        <param name="property">
          <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties"/> object which contains information about how the data should be bound to the template. <c>property</c> Must be specified, but the <c>DataBindingProperties</c> need not be set beforehand. To bind data to a template with the default <c>DataBindingProperties</c>, pass in <c>ExcelTemplate.CreateDataBindingProperties()</c> as the <c>property</c> value. Otherwise, use the <c>ExcelTemplate.CreateDataBindingProperties()</c> method to generate a new <c>DataBindingProperties</c> object and set the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.MaxRows"/>, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.Transpose"/>, and/or <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.WorksheetName"/> properties for the workbook.</para>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <c>BindRowData</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</para>
        </exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindCellData(System.Object,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindColumnData(System.Object[],System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>,<see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindRowData(System.Data.DataView,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindData(System.Data.DataSet,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          xlt.Open(@"C:\ExcelWriter\EmployeeOrdersTemplate.xls");
    
          //--- Bind the IDictionary collection to the
          //--- %%=Orders.[Field] data marker.
          xlt.BindRowData(OrdersColl,
               "Orders",
               xlt.CreateDataBindingProperties());
          xlt.Process();
          xlt.Save(Page.Response, "EmployeeOrders.xls", false);
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()
          xlt.Open("C:\ExcelWriter\EmployeeOrdersTemplate.xls")
     
          '--- Bind the IDictionary collection to the
          '--- %%=Orders.[Field] data marker.
          xlt.BindRowData(OrdersColl, _
               "Orders", _
               xlt.CreateDataBindingProperties())
          xlt.Process()
          xlt.Save(Page.Response, "EmployeeOrders.xls", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Collections.IDictionary,System.String)">
            <Doc>
        <summary>Sets a row's data source to an <see cref="T:System.Collections.IDictionary"/>. An <c>IDictionary</c> represents a collection of key-and-value pairs.</summary>
        <param name="dataSource">An <c>IDictionary</c> collection of key-and-value pairs to use as the data source.</param>
        <param name="dataSourceName">The name of the data marker at which to insert the values imported from the data source. For example, to bind a data source to the data marker %%=Orders.OrderId, the value of dataSourceName should be "Orders". The string passed must begin with a letter.</param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetRowDataSource</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetCellDataSource(System.Object,System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          xlt.Open(@"C:\ExcelWriter\EmployeeOrdersTemplate.xls");

          //--- Bind the IDictionary collection to the
          //--- %%=Orders.[Field] data marker.
          xlt.SetRowDataSource(OrdersColl, "Orders");
          xlt.Process();
          xlt.Save(Page.Response, "EmployeeOrders.xls", false);
        </code>
            <br/>
            <code>

          ExcelTemplate xlt = new ExcelTemplate()
          xlt.Open("C:\ExcelWriter\EmployeeOrdersTemplate.xls")

          '--- Bind the IDictionary collection to the
          '--- %%=Orders.[Field] data marker.
          xlt.SetRowDataSource(OrdersColl, "Orders")
          xlt.Process()
          xlt.Save(Page.Response, "EmployeeOrders.xls", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindRowData(System.Collections.IEnumerable,System.String[],System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)">
            <Doc>
        <summary>
          <para>Sets a row's data source to an <see cref="T:System.Collections.IEnumerable"/> collection. The <c>IEnumerable</c> interface supports a simple iteration over a collection.</para>
        </summary>
        <param name="dataSource">
          <para>An <c>IEnumerable</c> collection to use as the data source.</para>
        </param>
        <param name="colNames">
          <para>The names of the columns to get from the data source. If the <c>columnNames</c> parameter is null, field binding can only be performed by ordinal (for example, %%=DSN.#1 or %%=$DSN). If <c>colNames</c> is specified, both ordinal field binding and named field binding can be used.</para>
        </param>
        <param name="dataSourceName">
          <para>The name of the data marker at which to insert the values imported from the data source. For example, to bind a data source to the data marker %%=Orders.OrderId, the value of dataSourceName should be "Orders". The string passed must begin with a letter.</para>
        </param>
        <param name="property">
          <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties"/> object which contains information about how the data should be bound to the template. <c>property</c> Must be specified, but the <c>DataBindingProperties</c> need not be set beforehand. To bind data to a template with the default <c>DataBindingProperties</c>, pass in <c>ExcelTemplate.CreateDataBindingProperties()</c> as the <c>property</c> value. Otherwise, use the <c>ExcelTemplate.CreateDataBindingProperties()</c> method to generate a new <c>DataBindingProperties</c> object and set the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.MaxRows"/>, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.Transpose"/>, and/or <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.WorksheetName"/> properties for the workbook.</para>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <c>BindRowData</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</para>
        </exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindCellData(System.Object,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindColumnData(System.Object[],System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindRowData(System.Data.DataView,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindData(System.Data.DataSet,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          xlt.Open(@"C:\ExcelWriter\EmployeeOrdersTemplate.xls");

          //--- Bind the IEnumerable collection to the
          //--- %%=Orders.[Field] data marker.
          xlt.BindRowData(OrdersColl,
               null,
               "Orders",
               xlt.CreateDataBindingProperties());
          xlt.Process();
          xlt.Save(Page.Response, "EmployeeOrders.xls", false);
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate();
          xlt.Open("C:\ExcelWriter\EmployeeOrdersTemplate.xls")

          '--- Bind the IEnumerable collection to the
          '--- %%=Orders.[Field] data marker.
          xlt.BindRowData(OrdersColl, _
               null, _
               "Orders", _
               xlt.CreateDataBindingProperties())
          xlt.Process()
          xlt.Save(Page.Response, "EmployeeOrders.xls", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Collections.IEnumerable,System.String[],System.String)">
            <Doc>
        <summary>Sets a row's data source to an <see cref="T:System.Collections.IEnumerable"/> collection. The <c>IEnumerable</c> interface supports a simple iteration over a collection.</summary>
        <param name="dataSource">An <c>IEnumerable</c> collection to use as the data source.</param>
        <param name="colNames">The names of the columns to get from the data source. If the <c>columnNames</c> parameter is null, field binding can only be performed by ordinal (for example, %%=DSN.#1 or %%=$DSN). If <c>colNames</c> is specified, both ordinal field binding and named field binding can be used.</param>
        <param name="dataSourceName">The name of the data marker at which to insert the values imported from the data source. For example, to bind a data source to the data marker %%=Orders.OrderId, the value of dataSourceName should be "Orders". The string passed must begin with a letter.</param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetRowDataSource</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetCellDataSource(System.Object,System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          xlt.Open(@"C:\ExcelWriter\EmployeeOrdersTemplate.xls");

          //--- Bind the IEnumerable collection to the
          //--- %%=Orders.[Field] data marker.
          xlt.SetRowDataSource(OrdersColl, null,"Orders");
          xlt.Process();
          xlt.Save(Page.Response, "EmployeeOrders.xls", false);
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()
          xlt.Open("C:\ExcelWriter\EmployeeOrdersTemplate.xls")

          '--- Bind the IEnumerable collection to the
          '--- %%=Orders.[Field] data marker.
          xlt.SetRowDataSource(OrdersColl, null,"Orders")
          xlt.Process()
          xlt.Save(Page.Response, "EmployeeOrders.xls", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)">
            <Doc>
        <summary>Sets an ADO.NET DataSet as a data source to bind to template data markers.</summary>
        <param name="source">The DataSet to use as the data source.</param>
        <param name="dataMarkerName">The name of the set of data markers at which to insert the values imported from the data source. <c>dataMarkerName</c> must be specified, but can be left as null or an empty string if this is the first data source bound. Note: <c>dataMarkerName</c> does not include a data marker's column name, for example, the <c>dataMarkerName</c> for <c>%%=Products.ProductID</c> is "Products."</param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetDataSource</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetCellDataSource(System.Object,System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          OleDbConnection Conn = new OleDbConnection();
          DataSet OrdersDs = null;
          try
          {
               Conn.ConnectionString = Application["connstring"].ToString();

               //--- SQL Query for orders string
               OrdersSQL = "SELECT Orders.OrderID, Customers.CompanyName " +
                    "As Customer, " +
                    "Orders.OrderDate, " + 
                    "([Order Details].UnitPrice * [Order Details].Quantity) " +
                    "As [OrderTotal] " + 
                    "FROM Orders, [Order Details], Customers " +
                    "WHERE Orders.OrderID=[Order Details].OrderID AND " +
                    "Orders.CustomerID=Customers.CustomerID AND Orders.EmployeeID=?";
               OleDbCommand CmdOrders = new OleDbCommand(OrdersSQL, Conn);
               CmdOrders.Parameters.Add("@EmployeeID", EmployeeId);
               OleDbDataAdapter AdptSales = new OleDbDataAdapter(CmdOrders);
               OrdersDs = new DataSet();
               AdptSales.Fill(OrdersDs, "Orders");
          }
          xlt.SetDataSource(OrdersDs, "Orders");
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()
          Dim Conn As New OleDbConnection()
          Dim OrdersDs As DataSet = Nothing
          Try
               Conn.ConnectionString = Application("connstring").ToString()

               '--- SQL Query for orders
               Dim OrdersSQL As String = "SELECT Orders.OrderID, Customers.CompanyName " &amp; _
                    "As Customer, " &amp; _
                    "Orders.OrderDate, " &amp; _
                    "([Order Details].UnitPrice * [Order Details].Quantity) " &amp; _
                    "As [OrderTotal] " &amp; _
                    "FROM Orders, [Order Details], Customers " &amp; _
                    "WHERE Orders.OrderID=[Order Details].OrderID AND " &amp; _
                    "Orders.CustomerID=Customers.CustomerID AND Orders.EmployeeID=?"
               Dim CmdOrders As New OleDbCommand(OrdersSQL, Conn)
               CmdOrders.Parameters.Add("@EmployeeID", EmployeeId)
               Dim AdptSales As New OleDbDataAdapter(CmdOrders)
               OrdersDs = New DataSet()
               AdptSales.Fill(OrdersDs, "Orders")
          End Try
          xlt.SetDataSource(OrdersDs, "Orders")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String,System.Int32)">
            <Doc>
        <summary>Sets an ADO.NET DataSet as a data source to bind to template data markers.</summary>
        <param name="source">The DataSet to use as the data source.</param>
        <param name="dataMarkerName">The name of the set of data markers at which to insert the values imported from the data source. <c>dataMarkerName</c> must be specified, but can be left as null or an empty string if this is the first data source bound. Note: <c>dataMarkerName</c> does not include a data marker's column name, for example, the <c>dataMarkerName</c> for <c>%%=Products.ProductID</c> is "Products."</param>
        <param name="maxRows">Specifies the maximum number of rows to import from the data source. To import the maximum rows available, use the constant <see cref="F:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.ALL_ROWS"/>.</param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetDataSource</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetCellDataSource(System.Object,System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          OleDbConnection Conn = new OleDbConnection();
          DataSet OrdersDs = null;
          try
          {
               Conn.ConnectionString = Application["connstring"].ToString();

               //--- SQL Query for orders
               string OrdersSQL = "SELECT Orders.OrderID, Customers.CompanyName " +
                    "As Customer, " +
                    "Orders.OrderDate, " +
                    "([Order Details].UnitPrice * [Order Details].Quantity) As [OrderTotal] " +
                    "FROM Orders, [Order Details], Customers " +
                    "WHERE Orders.OrderID=[Order Details].OrderID AND " +
                    "Orders.CustomerID=Customers.CustomerID AND Orders.EmployeeID=?";
               OleDbCommand CmdOrders = new OleDbCommand(OrdersSQL, Conn);
               CmdOrders.Parameters.Add("@EmployeeID", EmployeeId);
               OleDbDataAdapter AdptSales = new OleDbDataAdapter(CmdOrders);
               OrdersDs = new DataSet();
               AdptSales.Fill(OrdersDs, "Orders", ExcelTemplate.ALL_ROWS);
          }
          xlt.SetDataSource(OrdersDs, "Orders");
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()
          Dim Conn As New OleDbConnection()
          Dim OrdersDs As DataSet = Nothing
          Try
               Conn.ConnectionString = Application("connstring").ToString()

               '--- SQL Query for orders
               Dim OrdersSQL As String = "SELECT Orders.OrderID, Customers.CompanyName " &amp; _          
                    "As Customer, " &amp; _
                    "Orders.OrderDate, " &amp; _
                    "([Order Details].UnitPrice * [Order Details].Quantity) As [OrderTotal] " &amp; _
                    "FROM Orders, [Order Details], Customers " &amp; _
                    "WHERE Orders.OrderID=[Order Details].OrderID AND " &amp; _
                    "Orders.CustomerID=Customers.CustomerID AND Orders.EmployeeID=?"
               Dim CmdOrders As New OleDbCommand(OrdersSQL, Conn)
               CmdOrders.Parameters.Add("@EmployeeID", EmployeeId)
               Dim AdptSales As New OleDbDataAdapter(CmdOrders)
               OrdersDs = New DataSet()
               AdptSales.Fill(OrdersDs, "Orders", ExcelTemplate.ALL_ROWS)
          End Try
          xlt.SetDataSource(OrdersDs, "Orders")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindData(System.Data.DataSet,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)">
            <Doc>
        <summary>
          <para>Sets an ADO.NET DataSet as a data source to bind to template data markers.</para>
        </summary>
        <param name="source">
          <para>The DataSet to use as the data source.</para>
        </param>
        <param name="dataSourceName">
          <para>The name of the set of data markers at which to insert the values imported from the data source. <c>dataSourceName</c> must be specified, but can be left as null or an empty string if this is the first data source bound AND the data markers in the template use the ?http://wiki.softartisans.com/display/EW70/Creating+Data+Markers#CreatingDataMarkers-short or refer to the datasource by number rather than name. Note: <c>dataSourceName</c> does not include a data marker's column name, for example, the <c>dataSourceName</c> for <c>%%=Products.ProductID</c> is "Products."</para>
        </param>
        <param name="property">The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties"/> object which contains information about how the data should be bound to the template.</param>
        <param name="property">
          <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties"/> object which contains information about how the data should be bound to the template.  <c>property</c> Must be specified, but the <c>DataBindingProperties</c> need not be set beforehand.  To bind data to a template with the default <c>DataBindingProperties</c>, pass in <c>ExcelTemplate.CreateDataBindingProperties()</c> as the <c>property</c> value.  Otherwise, use the <c>ExcelTemplate.CreateDataBindingProperties()</c> method to generate a new <c>DataBindingProperties</c> object and set the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.MaxRows"/>, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.Transpose"/>, and/or <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.WorksheetName"/> properties for the workbook.</para>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <c>BindData</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</para>
        </exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindCellData(System.Object,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindColumnData(System.Object[],System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindRowData(System.Data.DataView,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindData(System.Data.DataSet,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();

          OleDbConnection Conn = new OleDbConnection();
          DataSet OrdersDs = null;
          try
          {
               Conn.ConnectionString = Application["connstring"].ToString();

               //--- SQL Query for orders
               string OrdersSQL =
                    "SELECT Orders.OrderID, Customers.CompanyName As Customer, " +
                    "Orders.OrderDate, " +
                    "([Order Details].UnitPrice * [Order Details].Quantity) " +
                    "As [OrderTotal] " +
                    "FROM Orders, [Order Details], Customers " +
                    "WHERE Orders.OrderID=[Order Details].OrderID AND " +
                    "Orders.CustomerID=Customers.CustomerID AND Orders.EmployeeID=?";
               OleDbCommand CmdOrders = new OleDbCommand(OrdersSQL, Conn);
               CmdOrders.Parameters.Add("@EmployeeID", EmployeeId);
               OleDbDataAdapter AdptSales = new OleDbDataAdapter(CmdOrders);
               OrdersDs = new DataSet();
               AdptSales.Fill(OrdersDs, "Orders");
          }
          xlt.BindData(OrdersDs,
               "Orders",
               xlt.CreateDataImportProperties());
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()
          Dim Conn As New OleDbConnection()
          Dim OrdersDs As DataSet = Nothing
          Try
               Conn.ConnectionString = Application("connstring").ToString()

               '--- SQL Query for orders
               Dim OrdersSQL As String = _
                    "SELECT Orders.OrderID, Customers.CompanyName As Customer, " &amp; _
                    "Orders.OrderDate, " &amp; _
                    "([Order Details].UnitPrice * [Order Details].Quantity) " &amp; _
                    "As [OrderTotal] " &amp; _
                    "FROM Orders, [Order Details], Customers" &amp; _
                    "WHERE Orders.OrderID=[Order Details].OrderID AND " &amp; _
                    "Orders.CustomerID=Customers.CustomerID AND Orders.EmployeeID=?"
               Dim CmdOrders As New OleDbCommand(OrdersSQL, Conn)
               CmdOrders.Parameters.Add("@EmployeeID", EmployeeId)
               Dim AdptSales As New OleDbDataAdapter(CmdOrders)
               OrdersDs = New DataSet()
               AdptSales.Fill(OrdersDs, "Orders")
          End Try
          xlt.BindData(OrdersDs, _
               "Orders", _
               xlt.CreateDataImportProperties())
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.IDataReader,System.String)">
            <Doc>
        <summary>Sets an ADO.NET IDataReader as a data source to bind to template data markers.</summary>
        <param name="source">This parameter must be an instance of <see cref="T:System.Data.SqlClient.SqlDataReader"/> or <see cref="T:System.Data.OleDb.OleDbDataReader"/> or <c>Microsoft.AnalysisServices.AdomdClient.AdomdDataReader</c>, otherwise <c>SetDataSource</c> will throw an exception.</param>
        <param name="dataMarkerName">The name of the set of data markers at which to insert the values imported from the data source. <c>dataMarkerName</c> must be specified, but can be left as null or an empty string if this is the first data source bound. Note: <c>dataMarkerName</c> does not include a data marker's column name, for example, the <c>dataMarkerName</c> for <c>%%=Products.ProductID</c> is "Products."</param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetDataSource</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetCellDataSource(System.Object,System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          OleDbDataReader CategoryRdr = GetCategoryReader();
          try
          {
               ExcelTemplate xlt = new ExcelTemplate();
               xlt.SetDataSource(CategoryRdr, "Category");
          } catch(System.Exception ex) {
          } finally {
               //--- The OleDbDataReader must be open when it's passed
               //--- to ExcelTemplate. Remember to close it after use.
               if (CategoryRdr != null)
                    CategoryRdr.Close();
          }

          //--- Get an OleDbDataReader containing a list of product categories
          private OleDbDataReader GetCategoryReader()
          {
               OleDbConnection Conn = new OleDbConnection();
               Conn.ConnectionString = Application["connstring"].ToString();

               //--- SQL query for a list of categories
               string CategorySQL = "SELECT CategoryName FROM Categories";
               OleDbCommand Cmd = new OleDbCommand(CategorySQL, Conn);
               Conn.Open();
               return Cmd.ExecuteReader();
          }
        </code>
            <br/>
            <code>

          Dim CategoryRdr As OleDbDataReader = GetCategoryReader()
          Try
               Dim xlt As New ExcelTemplate()
               xlt.SetDataSource(CategoryRdr, "Category")
          Catch ex As System.Exception
          Finally
               '--- The OleDbDataReader must be open when it's passed
               '--- to ExcelTemplate. Remember to close it after use.
               If Not CategoryRdr = Nothing
                    CategoryRdr.Close()
               End If
          End Try
     
          '--- Get an OleDbDataReader containing a list of product categories
          Private Function GetCategoryReader() As OleDbDataReader
               Dim Conn As New OleDbConnection()
               Conn.ConnectionString = Application("connstring").ToString()

               '--- SQL query for a list of categories
               Dim CategorySQL As String = "SELECT CategoryName FROM Categories"
               Dim Cmd As New OleDbCommand(CategorySQL, Conn)
               Conn.Open()
               Return Cmd.ExecuteReader()
          End Function
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.IDataReader,System.String,System.Int32)">
            <Doc>
        <summary>Sets an IDataReader as a data source to bind to template data markers.</summary>
        <param name="source">This parameter must be an instance of <see cref="T:System.Data.SqlClient.SqlDataReader"/>, <see cref="T:System.Data.OleDb.OleDbDataReader"/> or <c>Microsoft.AnalysisServices.AdomdClient.AdomdDataReader</c>, otherwise <c>SetDataSource</c> will throw an exception.</param>
        <param name="dataMarkerName">The name of the set of data markers at which to insert the values imported from the data source. <c>dataMarkerName</c> must be specified, but can be left as null or an empty string if this is the first data source bound. Note: <c>dataMarkerName</c> does not include a data marker's column name, for example, the <c>dataMarkerName</c> for <c>%%=Products.ProductID</c> is "Products."</param>
        <param name="maxRows">Specifies the maximum number of rows to import from the data source. To import the maximum rows available, use the constant <see cref="F:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.ALL_ROWS"/>.</param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetDataSource</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetCellDataSource(System.Object,System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          OleDbDataReader CategoryRdr = GetCategoryReader();
          try
          {
               ExcelTemplate xlt = new ExcelTemplate();
               xlt.SetDataSource(CategoryRdr, "Category", ExcelTemplate.ALL_ROWS);
          } catch(System.Exception ex) {
          } finally {
               //--- The OleDbDataReader must be open when it's passed
               //--- to ExcelTemplate. Remember to close it after use.
               if(CategoryRdr != null)
                    CategoryRdr.Close();
          }

          //--- Get an OleDbDataReader containing  a list of product categories
          private OleDbDataReader GetCategoryReader()
          {
               OleDbConnection Conn = new OleDbConnection();
               Conn.ConnectionString = Application["connstring"].ToString();

               //--- SQL query for a list of categories
               string CategorySQL = "SELECT CategoryName FROM Categories";
               OleDbCommand Cmd = new OleDbCommand(CategorySQL, Conn);
               Conn.Open();
               return Cmd.ExecuteReader();
          }
        </code>
            <br/>
            <code>

          Dim CategoryRdr As OleDbDataReader = GetCategoryReader()
          Try
               Dim xlt As New ExcelTemplate()
               xlt.SetDataSource(CategoryRdr, "Category", ExcelTemplate.ALL_ROWS)
          Catch ex System.Exception
          Finally
               '--- The OleDbDataReader must be open when it's passed
               '--- to ExcelTemplate. Remember to close it after use.
               If Not CategoryRdr = Nothing
                    CategoryRdr.Close()
               End If
          End Try
     
          '--- Get an OleDbDataReader containing a list of product categories
          Private Function GetCategoryReader() As OleDbDataReader
               Dim Conn As New OleDbConnection()
               Conn.ConnectionString = Application("connstring").ToString()
 
               '--- SQL query for a list of categories
               Dim CategorySQL As String = "SELECT CategoryName FROM Categories"
               Dim Cmd As New OleDbCommand(CategorySQL, Conn)
               Conn.Open()
               Return Cmd.ExecuteReader()
          End Function
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindData(System.Data.IDataReader,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)">
            <Doc>
        <summary>
          <para>Sets an ADO.NET IDataReader as a data source to bind to template data markers.</para>
        </summary>
        <param name="source">This parameter must be an instance of <see cref="T:System.Data.SqlClient.SqlDataReader"/> or <see cref="T:System.Data.OleDb.OleDbDataReader"/> or <c>Microsoft.AnalysisServices.AdomdClient.AdomdDataReader</c>, otherwise <c>BindData</c> will throw an exception.</param>
        <param name="dataSourceName">
          <para>The name of the set of data markers at which to insert the values imported from the data source. <c>dataSourceName</c> must be specified, but can be left as null or an empty string if this is the first data source bound AND the data markers in the template use the ?http://wiki.softartisans.com/display/EW70/Creating+Data+Markers#CreatingDataMarkers-short or refer to the datasource by number rather than name. Note: <c>dataSourceName</c> does not include a data marker's column name, for example, the <c>dataSourceName</c> for <c>%%=Products.ProductID</c> is "Products."</para>
        </param>
        <param name="property">The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties"/> object which contains information about how the data should be bound to the template.</param>
        <param name="property">
          <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties"/> object which contains information about how the data should be bound to the template.  <c>property</c> Must be specified, but the <c>DataBindingProperties</c> need not be set beforehand.  To bind data to a template with the default <c>DataBindingProperties</c>, pass in <c>ExcelTemplate.CreateDataBindingProperties()</c> as the <c>property</c> value.  Otherwise, use the <c>ExcelTemplate.CreateDataBindingProperties()</c> method to generate a new <c>DataBindingProperties</c> object and set the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.MaxRows"/>, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.Transpose"/>, and/or <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.WorksheetName"/> properties for the workbook.</para>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <c>BindData</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</para>
        </exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindCellData(System.Object,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindColumnData(System.Object[],System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindRowData(System.Data.DataView,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindData(System.Data.DataSet,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          OleDbDataReader CategoryRdr = GetCategoryReader();
          try
          {
               ExcelTemplate xlt = new ExcelTemplate();
               xlt.BindData(CategoryRdr,
                    "Category",
                    ExcelTemplate.CreateDataImportProperties());
          } catch(System.Exception ex) {
          } finally {
               //--- The OleDbDataReader must be open when it's passed
               //--- to ExcelTemplate. Remember to close it after use.
               if(CategoryRdr!=null)
                    CategoryRdr.Close();
          }

          //--- Get an OleDbDataReader containing a list of product categories
          private OleDbDataReader GetCategoryReader()
          {
               OleDbConnection Conn = new OleDbConnection();
               Conn.ConnectionString = Application["connstring"].ToString();

               //--- SQL query for a list of categories
               string CategorySQL = "SELECT CategoryName FROM Categories";
               OleDbCommand Cmd = new OleDbCommand(CategorySQL, Conn);
               Conn.Open();
               return Cmd.ExecuteReader();
          }
        </code>
            <br/>
            <code>

          Dim CategoryRdr As OleDbDataReader = GetCategoryReader()
          Try
               Dim xlt As New ExcelTemplate()
               xlt.BindData(CategoryRdr, _
                    "Category", _
                    ExcelTemplate.CreateDataBindingProperties())
          Catch ex As System.Exception
          Finally
               '--- The OleDbDataReader must be open when it's passed
               '--- to ExcelTemplate. Remember to close it after use.
               If Not CategoryRdr = Nothing
                    CategoryRdr.Close()
               End If
          End Try

          '--- Get an OleDbDataReader containing a list of product categories
          Private Function GetCategoryReader() As OleDbDataReader
               Dim Conn As New OleDbConnection()
               Conn.ConnectionString = Application("connstring").ToString()

               '--- SQL query for a list of categories
               Dim CategorySQL As String = "SELECT CategoryName FROM Categories"
               Dim Cmd As New OleDbCommand(CategorySQL, Conn)
               Conn.Open()
               Return Cmd.ExecuteReader()
          End Function
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataTable,System.String)">
            <Doc>
        <summary>Sets an ADO.NET DataTable as a data source to bind to template data markers.</summary>
        <param name="source">The DataTable to use as the data source.</param>
        <param name="dataMarkerName">The name of the set of data markers at which to insert the values imported from the data source. <c>dataMarkerName</c> must be specified, but can be left as null or an empty string if this is the first data source bound. Note: <c>dataMarkerName</c> does not include a data marker's column name, for example, the <c>dataMarkerName</c> for <c>%%=Products.ProductID</c> is "Products."</param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetDataSource</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetCellDataSource(System.Object,System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          OleDbConnection Conn = new OleDbConnection();
          DataTable EmployeeDt = null;
          try
          {
               Conn.ConnectionString = Application["connstring"].ToString();

               //--- SQL Query for employee information
               string EmployeeSQL = "SELECT FirstName + ' ' +
                    LastName As Name, Title " +
                    "FROM Employees WHERE EmployeeID=?";
               OleDbCommand CmdEmployee = new OleDbCommand(EmployeeSQL, Conn);
               CmdEmployee.Parameters.Add("@EmployeeID", EmployeeId);
               OleDbDataAdapter AdptEmployee = new OleDbDataAdapter(CmdEmployee);
               EmployeeDt = new DataTable();
               AdptEmployee.Fill(EmployeeDt);
          }
          xlt.SetDataSource(EmployeeDt, "Employee");
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()
          Dim Conn As New OleDbConnection()
          Dim EmployeeDt As DataTable = Nothing
          Try
               Conn.ConnectionString = Application("connstring").ToString()
 
               '--- SQL Query for employee information
               Dim EmployeeSQL As String = "SELECT FirstName + ' ' + " &amp; _
                    "LastName As Name, Title " &amp; _
                    "FROM Employees WHERE EmployeeID=?"
               Dim CmdEmployee As New OleDbCommand(EmployeeSQL, Conn)
               CmdEmployee.Parameters.Add("@EmployeeID", EmployeeId)
               Dim AdptEmployee As New OleDbDataAdapter(CmdEmployee)
               EmployeeDt = New DataTable()
               AdptEmployee.Fill(EmployeeDt)
          End Try
          xlt.SetDataSource(EmployeeDt, "Employee")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataTable,System.String,System.Int32)">
            <Doc>
        <summary>Sets an ADO.NET DataTable as a data source to bind to template data markers.</summary>
        <param name="source">The DataTable to use as the data source.</param>
        <param name="dataMarkerName">The name of the set of data markers at which to insert the values imported from the data source. <c>dataMarkerName</c> must be specified, but can be left as null or an empty string if this is the first data source bound. Note: <c>dataMarkerName</c> does not include a data marker's column name, for example, the <c>dataMarkerName</c> for <c>%%=Products.ProductID</c> is "Products."</param>
        <param name="maxRows">Specifies the maximum number of rows to import from the data source. To import the maximum rows available, use the constant <see cref="F:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.ALL_ROWS"/>.</param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetDataSource</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetCellDataSource(System.Object,System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          OleDbConnection Conn = new OleDbConnection();
          DataTable EmployeeDt = null;
          try
          {
               Conn.ConnectionString = Application["connstring"].ToString();
 
               //--- SQL Query for employee information
               string EmployeeSQL = "SELECT FirstName + ' ' + " +
                    "LastName As Name, Title " +
                    "FROM Employees WHERE EmployeeID=?";
               OleDbCommand CmdEmployee = new OleDbCommand(EmployeeSQL, Conn);
               CmdEmployee.Parameters.Add("@EmployeeID", EmployeeId);
               OleDbDataAdapter AdptEmployee = new OleDbDataAdapter(CmdEmployee);
               EmployeeDt = new DataTable();
               AdptEmployee.Fill(EmployeeDt);
          }
          xlt.SetDataSource(EmployeeDt,
               "Employee",
               ExcelTemplate.ALL_ROWS);
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()
          Dim Conn As New OleDbConnection()
          Dim EmployeeDt As DataTable = Nothing
          Try
               Conn.ConnectionString = Application("connstring").ToString()

               '--- SQL Query for employee information
               Dim EmployeeSQL As String = "SELECT FirstName + ' ' + " &amp; _
                    "LastName As Name, Title " &amp; _
                    "FROM Employees WHERE EmployeeID=?"
               Dim CmdEmployee As New OleDbCommand(EmployeeSQL, Conn)
               CmdEmployee.Parameters.Add("@EmployeeID", EmployeeId)
               Dim AdptEmployee As New OleDbDataAdapter(CmdEmployee)
               EmployeeDt = New DataTable()
               AdptEmployee.Fill(EmployeeDt)
          End Try
          xlt.SetDataSource(EmployeeDt, _
               "Employee", _
               ExcelTemplate.ALL_ROWS)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindData(System.Data.DataTable,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)">
            <Doc>
        <summary>
          <para>Sets an ADO.NET DataTable as a data source to bind to template data markers.</para>
        </summary>
        <param name="source">
          <para>The DataTable to use as the data source.</para>
        </param>
        <param name="dataSourceName">
          <para>The name of the set of data markers at which to insert the values imported from the data source. <c>dataSourceName</c> must be specified, but can be left as null or an empty string if this is the first data source bound AND the data markers in the template use the ?http://wiki.softartisans.com/display/EW70/Creating+Data+Markers#CreatingDataMarkers-short or refer to the datasource by number rather than name. Note: <c>dataSourceName</c> does not include a data marker's column name, for example, the <c>dataSourceName</c> for <c>%%=Products.ProductID</c> is "Products."</para>
        </param>
        <param name="property">The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties"/> object which contains information about how the data should be bound to the template.</param>
        <param name="property">
          <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties"/> object which contains information about how the data should be bound to the template.  <c>property</c> Must be specified, but the <c>DataBindingProperties</c> need not be set beforehand.  To bind data to a template with the default <c>DataBindingProperties</c>, pass in <c>ExcelTemplate.CreateDataBindingProperties()</c> as the <c>property</c> value.  Otherwise, use the <c>ExcelTemplate.CreateDataBindingProperties()</c> method to generate a new <c>DataBindingProperties</c> object and set the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.MaxRows"/>, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.Transpose"/>, and/or <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.WorksheetName"/> properties for the workbook.</para>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <c>BindData</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</para>
        </exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindCellData(System.Object,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindColumnData(System.Object[],System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>,<see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindRowData(System.Data.DataView,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindData(System.Data.DataSet,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          OleDbConnection Conn = new OleDbConnection();
          DataTable EmployeeDt = null;
          try
          {
               Conn.ConnectionString = Application["connstring"].ToString();

               //--- SQL Query for employee information
               string EmployeeSQL = "SELECT FirstName + ' ' +
                    LastName As Name, Title " +
                    "FROM Employees WHERE EmployeeID=?";
               OleDbCommand CmdEmployee = new OleDbCommand(EmployeeSQL, Conn);
               CmdEmployee.Parameters.Add("@EmployeeID", EmployeeId);
               OleDbDataAdapter AdptEmployee = new OleDbDataAdapter(CmdEmployee);
               EmployeeDt = new DataTable();
               AdptEmployee.Fill(EmployeeDt);
          }
          xlt.BindData(EmployeeDt,
               "Employee",
               xlt.CreateDataBindingProperties());
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()
          Dim Conn As New OleDbConnection()
          Dim EmployeeDt As DataTable = Nothing
          Try
               Conn.ConnectionString = Application("connstring").ToString()

               '--- SQL Query for employee information
               Dim EmployeeSQL As String = "SELECT FirstName &amp; ' ' &amp; _
                    LastName As Name, Title " &amp; _
                    "FROM Employees WHERE EmployeeID=?"
               Dim CmdEmployee As New OleDbCommand(EmployeeSQL, Conn)
               CmdEmployee.Parameters.Add("@EmployeeID", EmployeeId)
               Dim AdptEmployee As New OleDbDataAdapter(CmdEmployee)
               EmployeeDt = New DataTable()
               AdptEmployee.Fill(EmployeeDt)
          End Try
          xlt.BindData(EmployeeDt, _
               "Employee", _
               xlt.CreateDataBindingProperties())
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Object[][],System.String[],System.String)">
            <Doc>
        <summary>Sets a two-dimensional - possibly jagged - array of objects as a template data source.</summary>
        <param name="arrayData">A two-dimensional array of objects to use as the data source. By default, the first dimension corresponds to row and the second to column (that is, Object[row][column]).</param>
        <param name="columnNames">The names of the columns to get from the data source. If the <c>columnNames</c> parameter is null, field binding can only be performed by ordinal (for example, %%=DSN.#1 or %%=$DSN). If <c>columnNames</c> is specified, both ordinal field binding and named field binding can be used.</param>
        <param name="dataMarkerName">The name of the set of data markers at which to insert the values imported from the data source. <c>dataMarkerName</c> must be specified, but can be left as null or an empty string if this is the first data source bound. Note: <c>dataMarkerName</c> does not include a data marker's column name, for example, the <c>dataMarkerName</c> for <c>%%=Products.ProductID</c> is "Products."</param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetDataSource</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetCellDataSource(System.Object,System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          xlt.Open(@"C:\DataBinding\ArrayBindingTemplate.xls");
          string[][] twodim = {
               new string[]{"Watertown", "MA", "02472"},
               new string[]{"Washington", "DC", "20500"}
               };
          string[] names = {"City", "State", "Zip"};
          xlt.SetDataSource(twodim, names, "TwoDimArray");
          xlt.PreserveStrings = true;
          xlt.Process();
          xlt.Save(Page.Response, "ArrayBinding.xls", false);
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()
          xlt.Open("C:\DataBinding\ArrayBindingTemplate.xls")
          Dim twodim()() As String = New String()() { _
               New String(){"Watertown","MA","02472"}, _
               New String(){"Washington","DC","20500"} _
               }
          Dim names As String() = {"City", "State", "Zip"}
          xlt.SetDataSource(twodim, names, "TwoDimArray")
          xlt.PreserveStrings = True
          xlt.Process()
          xlt.Save(Page.Response, "ArrayBinding.xls", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Object[][],System.String[],System.String,System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ExcelTemplate&quot;]/Member[@signature=&quot;ExcelTemplate.SetDataSource(Object()(), String(), String, Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Object[][],System.String[],System.String,System.Boolean)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ExcelTemplate&quot;]/Member[@signature=&quot;ExcelTemplate.SetDataSource(Object()(), String(), String, Boolean)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Object[][],System.String[],System.String,System.Int32,System.Boolean)">
            <Doc>
        <summary>
          <b>(Deprecated)</b> Sets a two-dimensional - possibly jagged - array of objects as a template data source.</summary>
        <param name="arrayData">A two-dimensional array of objects to use as the data source. By default, the first dimension corresponds to row and the second to column (that is, Object[row][column]).</param>
        <param name="columnNames">The names of the columns to get from the data source. If the <c>columnNames</c> parameter is null, field binding can only be performed by ordinal (for example, %%=DSN.#1 or %%=$DSN). If <c>columnNames</c> is specified, both ordinal field binding and named field binding can be used.</param>
        <param name="dataMarkerName">The name of the set of data markers at which to insert the values imported from the data source. <c>dataMarkerName</c> must be specified, but can be left as null or an empty string if this is the first data source bound. Note: <c>dataMarkerName</c> does not include a data marker's column name, for example, the <c>dataMarkerName</c> for <c>%%=Products.ProductID</c> is "Products."</param>
        <param name="maxRows">Specifies the maximum number of rows to import from the data source. To import the maximum rows available, use the constant <see cref="F:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.ALL_ROWS"/>.</param>
        <param name="transpose">If <c>transpose</c> is set to <c>true</c>, the array is treated as Object[column][row]. By default, <c>transpose</c> is set to <c>false</c>.</param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetDataSource</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetCellDataSource(System.Object,System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          xlt.Open(@"C:\DataBinding\ArrayBindingTemplate.xls");
          string[][] twodim = {
               new string[]{"Watertown", "MA", "02472"},
               new string[]{"Washington", "DC", "20500"}
               };
          string[] names = {"City", "State", "Zip"};
          xlt.SetDataSource(twodim, names, "TwoDimArray", ExcelTemplate.ALL_ROWS, false);
          xlt.PreserveStrings = true; xlt.Process();
          xlt.Save(Page.Response, "ArrayBinding.xls", false);
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()
          xlt.Open("C:\DataBinding\ArrayBindingTemplate.xls")
          Dim twodim()() As String = New String()(){ _
               New String(){"Watertown", "MA", "02472"}, _
               New String(){"Washington", "DC", "20500"} _
               }
          Dim names As String() = {"City", "State", "Zip"}
          xlt.SetDataSource(twodim, names, "TwoDimArray", ExcelTemplate.ALL_ROWS, False)
          xlt.PreserveStrings = True
          xlt.Process()
          xlt.Save(Page.Response, "ArrayBinding.xls", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindData(System.Object[][],System.String[],System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)">
            <Doc>
        <summary>
          <para>Sets a two-dimensional - possibly jagged - array of objects as a template data source.</para>
        </summary>
        <param name="arrayData">
          <para>A two-dimensional array of objects to use as the data source. By default, the first dimension corresponds to row and the second to column (that is, Object[row][column]).</para>
        </param>
        <param name="columnNames">
          <para>The names of the columns to get from the data source. If the <c>columnNames</c> parameter is null, field binding can only be performed by ordinal (for example, %%=DSN.#1 or %%=$DSN). If <c>columnNames</c> is specified, both ordinal field binding and named field binding can be used.</para>
        </param>
        <param name="dataSourceName">
          <para>The name of the set of data markers at which to insert the values imported from the data source. <c>dataSourceName</c> must be specified, but can be left as null or an empty string if this is the first data source bound AND the data markers in the template use the ?http://wiki.softartisans.com/display/EW70/Creating+Data+Markers#CreatingDataMarkers-short or refer to the datasource by number rather than name. Note: <c>dataSourceName</c> does not include a data marker's column name, for example, the <c>dataSourceName</c> for <c>%%=Products.ProductID</c> is "Products."</para>
        </param>
        <param name="property">
          <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties"/> object which contains information about how the data should be bound to the template.  <c>property</c> Must be specified, but the <c>DataBindingProperties</c> need not be set beforehand.  To bind data to a template with the default <c>DataBindingProperties</c>, pass in <c>ExcelTemplate.CreateDataBindingProperties()</c> as the <c>property</c> value.  Otherwise, use the <c>ExcelTemplate.CreateDataBindingProperties()</c> method to generate a new <c>DataBindingProperties</c> object and set the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.MaxRows"/>, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.Transpose"/>, and/or <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.WorksheetName"/> properties for the workbook.</para>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <c>BindData</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</para>
        </exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindCellData(System.Object,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindColumnData(System.Object[],System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindRowData(System.Data.DataView,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindData(System.Data.DataSet,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          xlt.Open(@"C:\DataBinding\ArrayBindingTemplate.xls");
          string[][] twodim = {
               new string[]{"Watertown", "MA", "02472"},
               new string[]{"Washington", "DC", "20500"}
               };
          string[] names = {"City", "State", "Zip"};
          xlt.BindData(twodim,
               names,
               "TwoDimArray",
               xlt.CreateDataBindingProperties());
          xlt.PreserveStrings = true;
          xlt.Process();
          xlt.Save(Page.Response,
               "ArrayBinding.xls",
               false);
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()
          xlt.Open("C:\DataBinding\ArrayBindingTemplate.xls")
          Dim twodim()() As String = New String()() { _
               New String(){"Watertown", "MA", "02472"}, _
               New String(){"Washington", "DC", "20500"}, _
               }
          Dim names As String() = {"City", "State", "Zip"}
          xlt.BindData(twodim, _
               names, _
               "TwoDimArray", _
               xlt.CreateDataBindingProperties())
          xlt.PreserveStrings = True
          xlt.Process()
          xlt.Save(Page.Response, _
              "ArrayBinding.xls", _
               False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Object[0:,0:],System.String[],System.String)">
            <Doc>
        <summary>Sets a rectangular array of objects as a template data source.</summary>
        <param name="arrayData">A rectangular array of objects to use as the data source. By default, the first dimension corresponds to row and the second to column (that is, Object[row,column]).</param>
        <param name="columnNames">The names of the columns to get from the data source. If the <c>columnNames</c> parameter is null, field binding can only be performed by ordinal (for example, %%=DSN.#1 or %%=$DSN). If <c>columnNames</c> is specified, both ordinal field binding and named field binding can be used.</param>
        <param name="dataMarkerName">The name of the set of data markers at which to insert the values imported from the data source. <c>dataMarkerName</c> must be specified, but can be left as null or an empty string if this is the first data source bound. Note: <c>dataMarkerName</c> does not include a data marker's column name, for example, the <c>dataMarkerName</c> for <c>%%=Products.ProductID</c> is "Products."</param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetDataSource</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetCellDataSource(System.Object,System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          xlt.Open(Page.MapPath("./ArrayBindingTemplate2.xls"));

          //--- Create an array of names and an array of data
          //--- source values and bind the data source to the
          //--- template data markers
          //--- %%=TwoDimArray.FirstName
          //--- %%=TwoDimArray.LastName
          //--- %%=TwoDimArray.Position
          string[,] twoDimNormal = {
               {"Nancy", "Davolio", "Sales Manager"},
               {"Michael", "Suyama", "HR Representative"},
               {"Adrian", "King", "IS Support"}
               };
          string[] names = {"FirstName", "LastName", "Position"};
          xlt.SetDataSource(twoDimNormal, names, "TwoDimArray");
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()
          xlt.Open(Page.MapPath("./ArrayBindingTemplate2.xls"))

          '--- Create an array of names and an array of data
          '--- source values and bind the data source to the
          '--- template data markers
          '--- %%=TwoDimArray.FirstName
          '--- %%=TwoDimArray.LastName
          '--- %%=TwoDimArray.Position
          Dim twoDimNormal(,) As String = New String(,){ _
               {"Nancy", "Davolio", "Sales Manager"}, _
               {"Michael", "Suyama", "HR Representative"}, _
               {"Adrian", "King", "IS Support"} _
               }
          Dim names As String() = {"FirstName", "LastName", "Position"}
          xlt.SetDataSource(twoDimNormal, names, "TwoDimArray")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Object[0:,0:],System.String[],System.String,System.Boolean)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ExcelTemplate&quot;]/Member[@signature=&quot;ExcelTemplate.SetDataSource(Object(,), String(), String, Boolean)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Object[0:,0:],System.String[],System.String,System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ExcelTemplate&quot;]/Member[@signature=&quot;ExcelTemplate.SetDataSource(Object(,), String(), String, Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Object[0:,0:],System.String[],System.String,System.Int32,System.Boolean)">
            <Doc>
        <summary>Sets a rectangular array of objects as a template data source.</summary>
        <param name="arrayData">A rectangular array of objects to use as the data source. By default, the first dimension corresponds to row and the second to column (that is, Object[row,column]).</param>
        <param name="columnNames">The names of the columns to get from the data source. If the <c>columnNames</c> parameter is null, field binding can only be performed by ordinal (for example, %%=DSN.#1 or %%=$DSN). If <c>columnNames</c> is specified, both ordinal field binding and named field binding can be used.</param>
        <param name="dataMarkerName">The name of the set of data markers at which to insert the values imported from the data source. <c>dataMarkerName</c> must be specified, but can be left as null or an empty string if this is the first data source bound. Note: <c>dataMarkerName</c> does not include a data marker's column name, for example, the <c>dataMarkerName</c> for <c>%%=Products.ProductID</c> is "Products."</param>
        <param name="maxRows">Specifies the maximum number of rows to import from the data source. To import the maximum rows available, use the constant <see cref="F:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.ALL_ROWS"/>.</param>
        <param name="transpose">If <c>transpose</c> is set to <c>true</c>, the array is treated as Object[column][row]. By default, <c>transpose</c> is set to <c>false</c>.</param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetDataSource</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetCellDataSource(System.Object,System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetColumnDataSource(System.Object[],System.String)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetRowDataSource(System.Data.DataView,System.String)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          xlt.Open(Page.MapPath("./ArrayBindingTemplate2.xls"));

          //--- Create an array of names and an array of data
          //--- source values and bind the data source to the
          //--- template data markers
          //--- %%=TwoDimArray.FirstName
          //--- %%=TwoDimArray.LastName
          //--- %%=TwoDimArray.Position
          string[,] twoDimTranspose = {
               {"Nancy", "Michael", "Adrian"},
               {"Davolio", "Suyama", "King"},
               {"Sales Manager", "HR Representative", "IS Support"}
               };
          string[] names = {"FirstName", "LastName", "Position"};
          xlt.SetDataSource(twoDimTranspose,
               names,
               "TwoDimTrans",
               ExcelTemplate.ALL_ROWS,
               true);
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()
          xlt.Open(Page.MapPath("ArrayBindingTemplate2.xls"));

          '--- Create an array of names and an array of data
          '--- source values and bind the data source to the
          '--- template data markers
          '--- %%=TwoDimArray.FirstName
          '--- %%=TwoDimArray.LastName
          '--- %%=TwoDimArray.Position
          Dim twoDimTranspose(,) As String = { _
               {"Nancy", "Michael", "Adrian"}, _
               {"Davolio", "Suyama", "King"}, _
               {"Sales Manager", "HR Representative", "IS Support"} _
               }
          names As String() = {"FirstName", "LastName", "Position"}
          xlt.SetDataSource(twoDimTranspose, _
               names, _
               "TwoDimTrans", _
               ExcelTemplate.ALL_ROWS, _
               True)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindData(System.Object[0:,0:],System.String[],System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)">
            <Doc>
        <summary>
          <para>Sets a rectangular array of objects as a template data source.</para>
        </summary>
        <param name="arrayData">
          <para>A rectangular array of objects to use as the data source. By default, the first dimension corresponds to row and the second to column (that is, Object[row,column]).</para>
        </param>
        <param name="columnNames">
          <para>The names of the columns to get from the data source. If the <c>columnNames</c> parameter is null, field binding can only be performed by ordinal (for example, %%=DSN.#1 or %%=$DSN). If <c>columnNames</c> is specified, both ordinal field binding and named field binding can be used.</para>
        </param>
        <param name="dataSourceName">
          <para>The name of the set of data markers at which to insert the values imported from the data source. <c>dataSourceName</c> must be specified, but can be left as null or an empty string if this is the first data source bound AND the data markers in the template use the http://wiki.softartisans.com/display/EW70/Creating+Data+Markers#CreatingDataMarkers-short or refer to the datasource by number rather than name. Note: <c>dataSourceName</c> does not include a data marker's column name, for example, the <c>dataSourceName</c> for <c>%%=Products.ProductID</c> is "Products."</para>
        </param>
        <param name="property">The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties"/> object which contains information about how the data should be bound to the template.</param>
        <param name="property">
          <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties"/> object which contains information about how the data should be bound to the template.  <c>property</c> Must be specified, but the <c>DataBindingProperties</c> need not be set beforehand.  To bind data to a template with the default <c>DataBindingProperties</c>, pass in <c>ExcelTemplate.CreateDataBindingProperties()</c> as the <c>property</c> value.  Otherwise, use the <c>ExcelTemplate.CreateDataBindingProperties()</c> method to generate a new <c>DataBindingProperties</c> object and set the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.MaxRows"/>, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.Transpose"/>, and/or <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties.WorksheetName"/> properties for the workbook.</para>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <c>BindData</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</para>
        </exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can set several data sources for a single template. Use the following methods to set template data sources: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindCellData(System.Object,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindColumnData(System.Object[],System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindRowData(System.Data.DataView,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindData(System.Data.DataSet,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          xlt.Open(Page.MapPath("./ArrayBindingTemplate2.xls"));

          //--- Create an array of names and an array of data
          //--- source values and bind the data source to the
          //--- template data markers
          //--- %%=TwoDimArray.FirstName
          //--- %%=TwoDimArray.LastName
          //--- %%=TwoDimArray.Position
          string[,] twoDimNormal = {
               {"Nancy", "Davolio", "Sales Manager"},
               {"Michael", "Suyama", "HR Representative"},
               {"Adrian", "King", "IS Support"}
               };
          string[] names = {"FirstName", "LastName", "Position"};
          xlt.BindData(twoDimNormal,
               names,
               "TwoDimArray",
               xlt.CreateDataBindingProperties());
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()
          xlt.Open(Page.MapPath("./ArrayBindingTemplate2.xls"))

          '--- Create an array of names and an array of data
          '--- source values and bind the data source to the
          '--- template data markers
          '--- %%=TwoDimArray.FirstName
          '--- %%=TwoDimArray.LastName
          '--- %%=TwoDimArray.Position
          Dim twoDimNormal(,) As String = New String(,){ _
               {"Nancy", "Davolio", "Sales Manager"}, _
               {"Michael", "Suyama", "HR Representative"}, _
               {"Adrian", "King", "IS Support"}}
          Dim names As String() = {"FirstName", "LastName", "Position"}
          xlt.BindData(twoDimNormal, _
               names, _
               "TwoDimArray", _
               xlt.CreateDataBindingProperties())
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Open(System.String)">
            <Doc>
        <summary>Opens an ExcelWriter template spreadsheet. A template is a file created in Microsoft Excel that contains data markers where data source values will be inserted.</summary>
        <param name="templateFileName">The complete path and file name of the template Excel file.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Open(System.String)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>If your template file is the new Office Open XML (.xlsx) format, you can pass it into the <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Open(System.String)"/> method just as you would a BIFF8 (.xls) Excel file. You will need to remember to give the output file a ".xlsx" extension when you call <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Save(System.IO.Stream)"/>, as ExcelWriter cannot convert .xlsx files to .xls. </remarks>
        <example>
          <para>
            <code>

          //--- Open an Excel BIFF8 (.xls) file
          oExcelTemplate.Open(Application["templatepath"] +
               @"\DataBinding\EmployeeOrdersTemplate.xls");
   
          //--- Open an Office Open XML Excel (.xlsx) file
          oExcelTemplate.Open(Application["templatepath"] +
               @"\DataBinding\EmployeeOrdersTemplate.xlsx");
        </code>
            <br/>
            <code>

          '--- Open an Excel BIFF8 (.xls) file
          oExcelTemplate.Open(Application("templatepath") &amp; _
               "\DataBinding\EmployeeOrdersTemplate.xls")
       
          '--- Open an Office Open XML Excel (.xlsx) file
          oExcelTemplate.Open(Application("templatepath") &amp; _
               "\DataBinding\EmployeeOrdersTemplate.xlsx")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Open(SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication,SoftArtisans.OfficeWriter.ExcelWriter.Workbook)">
            <Doc>
        <summary>Passes a spreadsheet from <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication"/> to <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate"/>. </summary>
        <param name="excelApplication">The instance of <c>ExcelApplication</c> that was used to create the spreadsheet.</param>
        <param name="workbook">A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Workbook"/> object representing the Excel file created with <c>ExcelApplication</c>.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Open(System.String)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can use <c>ExcelApplication</c> to create a document with data markers (a template) and pass the file to <c>ExcelTemplate</c> to populate the data markers.</para>
          <para>If your template file is the new Office Open XML (.xlsx) format, you cannot open it using <c>ExcelApplication</c> in ExcelWriter version 7.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          ExcelTemplate xlt = new ExcelTemplate();
          xlt.Open(xla, wb);
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim xlt As New ExcelTemplate()
          xlt.Open(xla, wb)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Open(System.IO.Stream)">
            <Doc>
        <summary>Opens an ExcelWriter template from a <see cref="T:System.IO.Stream"/>. An ExcelWriter template is a file created in Microsoft Excel that contains data markers where data source values will be inserted.</summary>
        <param name="templateStream">A <c>System.IO.Stream</c> object, or a class derived from <c>System.IO.Stream</c> (for example, <see cref="T:System.IO.FileStream"/>).</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Open(System.String)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>If your template file is the new Office Open XML (.xlsx) format, you can pass it into the <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Open(System.String)"/> method just as you would a BIFF8 (.xls) Excel file. You will need to remember to give the output file a ".xlsx" extension when you call <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Save(System.IO.Stream)"/>, as ExcelWriter cannot convert .xlsx files to .xls. </remarks>
        <example>
          <para>
            <code>

          //--- Open an Excel BIFF8 (.xls) file
          FileStream oFileStream = New FileStream(@"C:\Templates\Template.xls", FileMode.Open);
          oExcelTemplate.Open(oFileStream);

          //--- Open an Office Open XML Excel (.xlsx) file
          FileStream oFileStream = New FileStream(@"C:\Templates\Template.xls", FileMode.Open);
          oExcelTemplate.Open(oFileStream);
        </code>
            <br/>
            <code>

          '--- Open an Excel BIFF8 (.xls) file
          Dim oFileStream As New FileStream("C:\Templates\Template.xls", FileMode.Open)
          oExcelTemplate.Open(oFileStream)

          '--- Open an Office Open XML Excel (.xlsx) file
          Dim oFileStream As New FileStream("C:\Templates\Template.xls", FileMode.Open)
          oExcelTemplate.Open(oFileStream)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Open(System.IO.Stream,System.Boolean)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ExcelTemplate&quot;]/Member[@signature=&quot;ExcelTemplate.Open(System.IO.Stream, Boolean)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Process">
            <Doc>
        <summary>
          <para>The <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Process"/> method enters data source values in a template's data markers, and creates the output file (the new spreadsheet) in memory. The <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Save(System.IO.Stream)"/> method can then save the output file to disk, stream it to the browser, or both.</para>
        </summary>
        <remarks>
          <para>Call <c>Process</c> after <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SetDataSource(System.Data.DataSet,System.String)"/> and before <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Save(System.IO.Stream)"/>.</para>
          <para>You can call <c>Process</c> only once for each instance of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          xlt.Open(Application["templatepath"] +
               @"\DataBinding\ArrayBindingTemplate2.xls");

          //--- Set a data source for the data marker "SimpleArray."
          string[] onedim = {"SoftArtisans", "OfficeWriter", "ExcelTemplate"};
          xlt.SetColumnDataSource(onedim, "SimpleArray");

          //--- Process the template to populate it with the data source data.
          xlt.Process();

          //--- Stream the processed document to the client.
          xlt.Save(Page.Response, "ArrayBinding.xls", false);
       </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()
          xlt.Open(Application("templatepath") &amp; _
               "\DataBinding\ArrayBindingTemplate2.xls")

          '--- Set a data source for the data marker "SimpleArray."
          Dim onedim As String() = {"SoftArtisans", "OfficeWriter", "ExcelTemplate"}
          xlt.SetColumnDataSource(onedim, "SimpleArray")

          '--- Process the template to populate it with the data source data.
          xlt.Process()

          '--- Stream the processed document to the client.
          xlt.Save(Page.Response, "ArrayBinding.xls", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ExcelTemplate&quot;]/Member[@signature=&quot;ExcelTemplate.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.CreateDataBindingProperties">
            <Doc>
        <summary>Creates a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties"/> object for assigning the property values associated with one or more data binding calls.</summary>
        <exception cref="T:System.ArgumentNullException">
          <c>CreateDataBindingProperties</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>A <c>DataBindingProperties</c> object is required for each data binding call, including these methods: <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindData(System.Data.DataSet,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindCellData(System.Object,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindColumnData(System.Object[],System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>, and <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.BindRowData(System.Data.DataView,System.String,SoftArtisans.OfficeWriter.ExcelWriter.DataBindingProperties)"/>.  Hence, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.CreateDataBindingProperties"/> must be called at least once in any WordTemplate project that binds data to a template.</para>
          <para>The same <c>DataBindingProperties</c> object can be used for multiple data binding method calls.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Create a DataBindingProperties object to be used
          //--- in a data binding call
          DataBindingProperties dbp = ExcelTemplate.CreateDataBindingProperties();
          dbp.MaxRows = 20;
          xlt.BindData(twodim, names, "TwoDimArray", dbp);
          xlt.Process();
          xlt.Save(Page.Response, "output.xls", false);
        </code>
            <br/>
            <code>

          '--- Create a DataBindingProperties object to be used
          '--- multiple times in a project
          Dim dbp As DataBindingProperties = ExcelTemplate.CreateDataBindingProperties()
          dbp.MaxRows = 20
          xlt.BindData(twodim, names, "TwoDimArray", dbp)
          xlt.Process()
          xlt.Save(Page.Response, "output.xls", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Save(System.IO.Stream)">
            <Doc>
        <summary>
          <para>Generates an Excel binary file and streams it to the specified <see cref="T:System.IO.Stream"/> or, a class derived from <c>System.IO.Stream</c> (for example, <see cref="T:System.IO.FileStream"/>). If you pass <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Save(System.IO.Stream)"/> a <c>System.IO.FileStream</c>, ExcelWriter will save the generated file on the server. If you pass <c>Save</c> <c>Response.OutputStream</c>, ExcelWriter will stream the the generated file to the client.</para>
        </summary>
        <param name="outputStream">
          <para>A <c>System.IO.Stream</c> object (for example, <c>Response.OutputStream</c>) or, a class derived from <c>System.IO.Stream</c> (for example, <c>System.IO.FileStream</c>)</para>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <c>Save</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</para>
        </exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>ExcelWriter allows you to save in both the Excel 97-03 BIFF8 format (.xls) or the new Office Open XML (.xlsx) format.  The template file must be of the expected output format. Hence, if you wish to output .xls files, you must start with a .xls template, and if you wish to output .xlsx files, you must start with a .xlsx template.  ExcelWriter does not support the creation or editing of .xlsx files with the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication"/> object.</para>
          <para>You can call <c>Save</c> more than once for a single instance of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate"/>. This allows you to save more than one copy of a generated file, and/or both save the file on the server and stream it to the client. </para>
        </remarks>
        <example>
          <para>
            <code>
          //--- FileStream and FileMode are in the System.IO namespace
          //--- This stream is for a .xls template
          FileStream fstream = new FileStream(@"C:\temp\outfile.xls", FileMode.Create);

          //--- Pass the FileStream to ExcelTemplate
          xlTemplate.Save(fstream);

          //--- Close the FileStream (could be in a finally block)
          fstream.Close();

          //--- FileStream and FileMode are in the System.IO namespace
          //--- This stream is for a .xlsx template
          FileStream fstream = new FileStream(@"C:\temp\outfile.xlsx", FileMode.Create);

          //--- Pass the FileStream to ExcelTemplate
          xlTemplate.Save(fstream);

          //--- Close the FileStream (could be in a finally block)
          fstream.Close();
</code>
            <br/>
            <code>
          '--- FileStream and FileMode are in the System.IO namespace
          '--- This stream is for a .xls template
          Dim fstream As New FileStream("C:\temp\outfile.xls", FileMode.Create)

          '--- Pass the FileStream to ExcelTemplate
          xlTemplate.Save(fstream)

          '--- Close the FileStream (could be in a finally block)
          fstream.Close()

          '--- FileStream and FileMode are in the System.IO namespace
          '--- This stream is for a .xlsx template
          Dim fstream As New FileStream("C:\temp\outfile.xlsx", FileMode.Create)

          '--- Pass the FileStream to ExcelTemplate
          xlTemplate.Save(fstream)

          '--- Close the FileStream (could be in a finally block)
          fstream.Close()
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Save(System.String)">
            <Doc>
        <summary>Saves the generated Excel file on the server. The ASPNET account (IIS5), NETWORK SERVICE account (IIS6 or IIS7), or the authenticated user must have Write access to the destination directory specified by the <c>outputFileName</c> parameter.</summary>
        <param name="outputFileName">Specifies a complete path and file name for the generated file. ExcelWriter will save the file to this location. If a file with the same name exists, it will be overwritten by the new Excel file.</param>
        <exception cref="T:System.ArgumentNullException">
          <c>Save</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>ExcelWriter allows you to save in both the Excel 97-03 BIFF8 format (.xls) or the new Office Open XML (.xlsx) format.  The template file must be of the expected output format. Hence, if you wish to output .xls files, you must start with a .xls template, and if you wish to output .xlsx files, you must start with a .xlsx template.  ExcelWriter does not support the creation or editing of .xlsx files with the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication"/> object.</para>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Save(System.IO.Stream)"/> more than once for a single instance of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate"/>. This allows you to save more than one copy of a generated file, and/or both save the file on the server and stream it to the client. </para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Save a .xls file
          xlTemplate.Save(@"C:\Reports\Orders.xls");

          //--- Save a .xlsx file
          xlTemplate.Save(@"C:\Reports\Orders.xlsx");
        </code>
            <br/>
            <code>

          '--- Save a .xls file
          xlTemplate.Save("c:\Reports\Orders.xls")

          '--- Save a .xlsx file
          xlTemplate.Save("c:\Reports\Orders.xlsx")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Save(System.Web.HttpResponse)">
            <Doc>
        <summary>
          <para>If you pass <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Save(System.IO.Stream)"/> an <see cref="T:System.Web.HttpResponse"/> object object, ExcelWriter will stream the generated file to the client. </para>
        </summary>
        <param name="response">
          <para>A <see cref="!:System.Http.Response"/> object, usually <c>Page.Response</c>.</para>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <c>Save</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</para>
        </exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>If the user chooses to open (rather than save) the file, it will open in the browser window. ExcelWriter will set a default name for the file. To set a different file name and/or to open the file in Microsoft Excel, use the signature <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Save(System.Web.HttpResponse,System.String,System.Boolean)"/>.</para>
          <para>You can call <c>Save</c> more than once for a single instance of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate"/>. This allows you to save more than one copy of a generated file, and/or both save the file on the server and stream it to the client. </para>
        </remarks>
        <example>
          <para>
            <code>

          xlTemplate.Save(Page.Response);
        </code>
            <br/>
            <code>

          xlTemplate.Save(Page.Response)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Save(System.Web.HttpResponse,System.String,System.Boolean)">
            <Doc>
        <summary>
          <para>If you pass <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Save(System.IO.Stream)"/> an HttpResponse object, ExcelWriter will stream the generated file to the client. This method allows you to specify a default client-side file name, and whether the file should be opened in the browser window or in Microsoft Excel.</para>
        </summary>
        <param name="response">
          <para>A <see cref="!:System.Http.Response"/> object, usually <c>Page.Response</c></para>
        </param>
        <param name="attachmentName">
          <para>Specifies a name for the generated Excel file; this name will be displayed in the download dialog when the file is streamed to the browser.</para>
        </param>
        <param name="openInBrowser">
          <para>If <c>openInBrowser</c> is set to <c>true</c>, and the user chooses to open the file, the file will open in the browser window. If <c>openInBrowser</c> is set to <c>false</c>, and the user chooses to open the file, the file will open in Microsoft Excel. By default, the file will open in the browser window.</para>
          <para>
            <b>Note:</b>
            <br/>
            <para>not all browsers can embed an Excel file in the browser window</para>
          </para>
        </param>
        <remarks>
          <para>ExcelWriter allows you to save in both the Excel 97-03 BIFF8 format   (.xls) or the new Office Open XML (.xlsx) format.  The template file   must be of the expected output format. Hence, if you wish to output .xls   files, you must start with a .xls template, and if you wish to output   .xlsx files, you must start with a .xlsx template.  ExcelWriter does  not  support the creation or editing of .xlsx files with the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication"/> object.<br/></para>
          <para>You can call <c>Save</c> more than once for a single instance of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate"/>.   This allows you to save more than one copy of a generated file, and/or   both save the file on the server and stream it to the client.<br/></para>
        </remarks>
        <example>Stream to the client and open in Excel<br/><para>When you pass an HttpResponse object to <c>Save</c>, ExcelWriter will stream the generated Excel file to the client. The browser will display a File Download dialog asking the user to open or save the file. The method's second parameter specifies a file name to display in the File Download dialog. If the method's third parameter - http://wiki.softartisans.com/display/EW70/#param-openInBrowser - is <c>false</c> and the user chooses to open the Excel file, the file will open in Microsoft Excel.<br/><code>

            //--- Stream to the client
            //--- "Output.xls" will appear in the Save As dialog
            //--- The file will open in Excel
            xlTemplate.Save(Page.Response, "Output.xls", false);

            //--- Stream to the client
            //--- "Output.xlsx" will appear in the Save As dialog
            //--- The file will open in Excel 2007 only
            xlTemplate.Save(Page.Response, "Output.xlsx", false);
          </code><br/><code>

            '--- Stream to the client
            '--- "Output.xls" will appear in the Save As dialog
            '--- The file will open in Excel
            xlTemplate.Save(Page.Response, "Output.xls", False)

            '--- Stream to the client
            '--- "Output.xlsx" will appear in the Save As dialog
            '--- The file will open in Excel 2007 only
            xlTemplate.Save(Page.Response, "Output.xlsx", False)
</code></para>Stream to the client and open in the browser window<br/><para>When you pass an HttpResponse object to <c>Save</c>, ExcelWriter will stream the generated Excel file to the client. The browser will display a File Download dialog asking the user to open or save the file. The method's second parameter specifies a file name to display in the File Download dialog. If the method's third parameter - http://wiki.softartisans.com/display/EW70/#param-openInBrowser - is True and the user chooses to open the Excel file, the file will open in the browser window.<br/><code>
            //--- Stream to the client
            //--- "Output.xls" will appear in the Save As dialog
            //--- The file will open in the browser's Excel plug-in
            xlTemplate.Save(Page.Response, "Output.xls", true);
            ...

            //--- Stream to the client
            //--- "Output.xlsx" will appear in the Save As dialog
            //--- The file will open in the browser's Excel 2007 plug-in
            xlTemplate.Save(Page.Response, "Output.xlsx", true);
</code><br/><code>
            '--- Stream to the client
            '--- "Output.xls" will appear in the Save As dialog
            '--- The file will open in the browser's Excel plug-in
            xlTemplate.Save(Page.Response, "Output.xls", True)
            ...

            '--- Stream to the client
            '--- "Output.xlsx" will appear in the Save As dialog
            '--- The file will open in the browser's Excel 2007 plug-in
            xlTemplate.Save(Page.Response, "Output.xlsx", True)
</code></para></example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.ContentType">
            <Doc>
        <summary>Sets or returns the generated spreadsheet's MIME content type.  </summary>
        <remarks>
          <para>In most browsers, Microsoft Excel files are mapped to the MIME type "application/vnd.ms-excel" and <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.ContentType"/> is set to this value by default.  However, some browsers map Excel files to a different MIME content type, and the browser will not open a file of type "application/vnd.ms-Excel." In this case, set <c>ContentType</c> to the appropriate MIME content type.</para>
          <para>In Internet Explorer, to find out what MIME content type maps to Excel files:</para>
          <list type="number">
            <item>
              <description>Open the Start menu and select Run.</description>
            </item>
            <item>
              <description>Entire <i>regedit</i> to open the Registry Editor.</description>
            </item>
            <item>
              <description>Open HKEY_CLASSES_ROOT\MIME\Database\Content Type.  This folder contains a list of MIME content type folders.  If you select a folder, you will see the extensions to which the type maps in the right frame.</description>
            </item>
          </list>
          <para>In Netscape Navigator, to find out what MIME content type maps to Excel files:</para>
          <list type="number">
            <item>
              <description>In the browser window, open the Edit menu and select Preferences...</description>
            </item>
            <item>
              <description>In the Category window select Applications.</description>
            </item>
            <item>
              <description>In the Description window, select an application to display its MIME content type.</description>
            </item>
          </list>
          <para>
            <c>ContentType</c> is a <b>Read/Write</b> property.</para>
        </remarks>
        <example>
          <para>
            <code>

          xlt.ContentType = "application/unknown";
        </code>
            <br/>
            <code>

          xlt.ContentType = "application/unknown"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.SaveExtension">
            <Doc>
        <summary>Sets or returns the generated spreadsheet's MIME content type.  </summary>
        <remarks>
          <para>In most browsers, Microsoft Excel files are mapped to the MIME type "application/vnd.ms-excel" and <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.ContentType"/> is set to this value by default.  However, some browsers map Excel files to a different MIME content type, and the browser will not open a file of type "application/vnd.ms-Excel." In this case, set <c>ContentType</c> to the appropriate MIME content type.</para>
          <para>In Internet Explorer, to find out what MIME content type maps to Excel files:</para>
          <list type="number">
            <item>
              <description>Open the Start menu and select Run.</description>
            </item>
            <item>
              <description>Entire <i>regedit</i> to open the Registry Editor.</description>
            </item>
            <item>
              <description>Open HKEY_CLASSES_ROOT\MIME\Database\Content Type.  This folder contains a list of MIME content type folders.  If you select a folder, you will see the extensions to which the type maps in the right frame.</description>
            </item>
          </list>
          <para>In Netscape Navigator, to find out what MIME content type maps to Excel files:</para>
          <list type="number">
            <item>
              <description>In the browser window, open the Edit menu and select Preferences...</description>
            </item>
            <item>
              <description>In the Category window select Applications.</description>
            </item>
            <item>
              <description>In the Description window, select an application to display its MIME content type.</description>
            </item>
          </list>
          <para>
            <c>ContentType</c> is a <b>Read/Write</b> property.</para>
        </remarks>
        <example>
          <para>
            <code>

          xlt.ContentType = "application/unknown";
        </code>
            <br/>
            <code>

          xlt.ContentType = "application/unknown"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.DecryptPassword">
            <Doc>
        <summary>To decrypt an encrypted template, set <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.DecryptPassword"/> to the password set using <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.EncryptPassword"/> or in Microsoft Excel (Tools -&gt; Options... -&gt; Security).</summary>
        <remarks>
          <para>Set <c>DecryptPassword</c> before calling <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Open(System.String)"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          xlt.DecryptPassword = "password";
          xlt.Open(Application["templatepath"] +
               @"\DataBinding\EmployeeOrdersTemplate.xls");
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()
          xlt.DecryptPassword = "password"
          xlt.Open(Application["templatepath"] &amp; _
               "\DataBinding\EmployeeOrdersTemplate.xls")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.EncryptPassword">
            <Doc>
        <summary>If you set <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.EncryptPassword"/>, ExcelWriter will encrypt the generated spreadsheet - when <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Process"/> is called - using RC4 encryption. </summary>
        <remarks>
          <para>Set <c>EncryptPassword</c> to a string no longer than 15 characters.  Use this string to decrypt the file, either in Microsoft Excel or by setting <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.DecryptPassword"/>.</para>
          <para>Set <c>EncryptPassword</c> <b>before</b> calling <c>Process</c>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          xlt.EncryptPassword = "MyPassword";
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()
          xlt.EncryptPassword = "MyPassword"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.ExcludeMacros">
            <Doc>
        <summary>Sets whether ExcelWriter should remove template macros from the generated spreadsheet or include them. </summary>
        <remarks>
          <para>If <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.ExcludeMacros"/> is set to <c>false</c>, and the template spreadsheet contains macros, ExcelWriter will preserve the macros in the generated spreadsheet. If <c>ExcludeMacros</c> is set to <c>true</c>, and the template spreadsheet contains macros, ExcelWriter will not include the macros in the generated spreadsheet.  <c>ExcludeMacros</c> is set to <c>false</c> by default.</para>
          <para>
            <c>ExcludeMacros</c> is a <b>Read/Write</b> property. </para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Setting SetExcludeMacros to "true" tells ExcelWriter to
          //--- to remove macros in the template from the generated
          //--- spreadsheet.
          xlt.ExcludeMacros = true;
        </code>
            <br/>
            <code>

          '--- Setting SetExcludeMacros to "True" tells ExcelWriter to
          '--- to remove macros in the template from the generated
          '--- spreadsheet.
          xlt.ExcludeMacros = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.LicenseKey">
            <Doc>
        <summary>Sets or returns the 23-character license key that enables ExcelWriter for the current instance. </summary>
        <remarks>
          <para>This key does not persist once the code completes execution. If this property is set, ExcelWriter will use this key and ignore any keys in the registry.</para>
        </remarks>
        <example>
          <para>
            <code>

          string key = xlt.LicenseKey;

          //--- Bind the license key to the data marker
          //--- %%=$ExcelWriterLicenseKey.
          xlt.SetCellDataSource(key, "ExcelWriterLicenseKey");
        </code>
            <br/>
            <code>

          Dim key As String = xlt.LicenseKey

          '--- Bind the license key to the data marker
          '--- %%=$ExcelWriterLicenseKey
          xlt.SetCellDataSource(key, "ExcelWriterLicenseKey")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.PreserveStrings">
            <Doc>
        <summary>If you set <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.PreserveStrings"/> to <c>true</c>, ExcelWriter will preserve numeric strings as strings. </summary>
        <remarks>
          <para>By default, when populating template data markers, ExcelWriter tries to convert numeric strings to numbers. </para>
          <para>
            <c>PreserveStrings</c> is a <b>Read/Write</b> property.</para>
          <para>This property can be set for individual data markers using the http://wiki.softartisans.com/display/EW70/Creating+Data+Markers#modifiers.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();
          xlt.Open(@"C:\DataBinding\ArrayBindingTemplate.xls");
          string[][] twodim = {
               new string[]{"Watertown", "MA", "02472"},
               new string[]{"Washington","DC", "20500"}
               };
          string[] names = {"City", "State", "Zip"};
          xlt.BindData(twodim,
               names,
               "TwoDimArray",
               xlt.CreateDataBindingProperties());
          xlt.PreserveStrings = true;
          xlt.Process();
          xlt.Save(Page.Response, "ArrayBinding.xls", false);
        </code>
            <br/>
            <code>

          Dim xlw As New ExcelTemplate()
          xlt.Open("C:\DataBinding\ArrayBindingTemplate.xls")
          Dim twodim As String()() = { _
               New String(){"Watertown", "MA", "02472"}, _
               New String(){"Washington", "DC", "20500"}, _
               }
          Dim names As String() = {"City", "State", "Zip"}
          xlt.BindData(twodim, _
               names, _
               "TwoDimArray", _
               xlt.CreateDataBindingProperties())
          xlt.PreserveStrings = True
          xlt.Process()
          xlt.Save(Page.Response, "ArrayBinding.xls", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.RemoveExtraDataMarkers">
            <Doc>
        <summary>
          <para>Sets whether ExcelWriter should remove data markers in the template that do not bind to data sources in code. </para>
        </summary>
        <remarks>
          <para>By default, if a data marker does not bind to a data source, ExcelWriter will throw an exception. If <c>RemoveExtraDataMarkers</c> is set to <c>true</c>, ExcelWriter will remove extra data markers silently.</para>
          <para>If a data marker includes the "Optional" modifier, and does not bind to a data source, ExcelWriter will remove it without error even if <c>RemoveExtraDataMarkers</c> is set to <c>false</c>.</para>
          <para>
            <c>RemoveExtraDataMarkers</c> is a <b>Read/Write</b> property.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Setting RemoveDataMarkers to 'true' tells
          //--- ExcelWriter to remove data markers that do not
          //--- bind to a data source.
          xlt.RemoveExtraDataMarkers = true;
        </code>
            <br/>
            <code>

          '--- Setting RemoveDataMarkers to 'True' tells
          '--- ExcelWriter to remove data markers that do not
          '--- bind to a data source.
          xlt.RemoveExtraDataMarkers = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.StretchCellReferencesInCharts">
            <Doc>
        <summary>
          <para>Sets or returns whether to stretch cell references in charts.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get StretchCellReferencesInCharts
          boolean stretchCellRef = XlwTemplate.StretchCellReferencesInCharts;

          //--- Set StretchCellReferencesInCharts to true
          XlwTemplate.StretchCellReferencesInCharts = true;
        </code>
            <br/>
            <code>

          '--- Get StretchCellReferencesInCharts
          Dim stretchCellRef As Boolean = XlwTemplate.StretchCellReferencesInCharts

          '--- Set StretchCellReferencesInCharts to true
          XlwTemplate.StretchCellReferencesInCharts = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Version">
            <Doc>
        <summary>
          <para>Returns the exact version of ExcelWriter.</para>
        </summary>
        <remarks>
          <para>
            <code>
            SoftArtisans.ProductName Major.Minor.Patch.Build
            (mmddyyyy-hhmmss-buildMachineId)
</code>
          </para>
          <list type="table">
            <listHeader>
              <term>PlaceHolder </term>
              <description>Description </description>
            </listHeader>
            <item>
              <term>ProductName </term>
              <description>A product name like "SoftArtisans.ExcelWriter." Note: the product name may be different depending on what license key is in effect. </description>
            </item>
            <item>
              <term>Major </term>
              <description>Major release number. </description>
            </item>
            <item>
              <term>Minor </term>
              <description>Minor release number. </description>
            </item>
            <item>
              <term>Patch </term>
              <description>Patch or bug fix number. </description>
            </item>
            <item>
              <term>Build </term>
              <description>Build number. </description>
            </item>
            <item>
              <term>mmddyyyy </term>
              <description>Date the build was compiled. </description>
            </item>
            <item>
              <term>hhmmss </term>
              <description>Time the build was compiled. </description>
            </item>
            <item>
              <term>buildMachineId </term>
              <description>Unique computer ID for the computer on which this product was compiled. </description>
            </item>
          </list>
          <para>
            <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate.Version"/> is a <b>Read Only</b> property.</para>
        </remarks>
        <example>
          <para>
            <code>

          string version = xlt.Version;

          //--- Bind the version to the data marker
          //--- %%=$ExcelWriterVersion.
          xlt.SetCellDataSource(version, "ExcelWriterVersion");
        </code>
            <br/>
            <code>

          Dim version As String = xlt.Version

          '--- Bind the version to the data marker
          '--- %%=$ExcelWriterVersion.
          xlt.SetCellDataSource(version, "ExcelWriterVersion")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.UnitConverter">
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.CorruptedFileException">
            <summary>
            This is used when ExcelCompare fails when opening the output xlsx file, or when a file cannot be opened
            in general
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.MergeCellException">
            <summary>
            An exception thrown when the merge cells overlap a grouping block awkwardly
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SAParameterNullException">
            <summary> Created by IntelliJ IDEA.
            User: denisl
            Date: Dec 30, 2003
            Time: 4:39:07 PM
            To change this template use Options | File Templates.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SARuntimeException">
            <summary> A simple runtime exception class to handle nested exceptions (causes).</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.CompoundFile">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  unascribed
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSReadOnlyStorage">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ReadOnlyStorage">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.Node">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ReadOnlyStorage.openStream(System.String)">
            <summary> Opens a stream in the storage for random access i/o</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ReadOnlyStorage.openStorage(System.String)">
            <summary> Opens a sub-storage in the storage for random access i/o
            Substorage must exist in the storage
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ReadOnlyStorage.enumNodes">
            <summary> Returns an iterator object that can be used to enumerate
            the storage and stream objects contained within this storage object
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ReadOnlyStorage.getStorageClsid">
            <summary> Gets CLSID for the storage</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ReadOnlyStorage.copyTo(System.Collections.Generic.IEnumerable{System.String},SoftArtisans.OfficeWriter.Shared.Storage)">
            <summary> Copies the entire contents of an open storage object to another storage object
            Excludes elements listed in th aExceludeElements parameter
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ReadOnlyStorage.Name">
            <returns>s Storage's name
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSReadOnlyStream">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ReadOnlyStream">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ReadOnlyStream.Stream">
            <returns>s inner Stream
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ReadOnlyStream.Name">
            <returns>s stream's name
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSReadOnlyTranslatingIterator">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.TranslatingIterator">
            <summary> Summary description for TranslatingIterator</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSStorage">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.Storage">
            <summary> Read-write storage interface definition.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Storage.createStorage(System.String)">
            <summary> Creates a storage in the open compund file
            Returns Storage object
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Storage.createStream(System.String,System.IO.Stream)">
            <summary> Creates a stream in a newly created compound file
            aSourceStream is a sourse of data;
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Storage.createStream(System.String,SoftArtisans.OfficeWriter.Shared.WriteEventListener)">
            <summary> Creates a stream in a newly created compound file
            aeventListener gets event when it's time to write data to the output stream
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Storage.setStorageClsid(SoftArtisans.OfficeWriter.Shared.ClassID)">
            <summary> Sets CLSID for the storage</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSTranslatingIterator">
            <summary> <p>Title: Translating Iterator </p>
            <p>Description: Allows to call into POIFS collection of Entries</p>
            <p></p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSWriteEventListener">
            <summary> Summary description for POIFSWriteEventListener.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.WriteEventListener">
            <summary> Summary description for WriteEventListener.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSWriterListener">
            <summary> Interface POIFSWriterListener
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
            <version>  %I%, %G%
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSWriterListener.processPOIFSWriterEvent(SoftArtisans.OfficeWriter.Shared.POIFSWriterEvent)">
            <summary> Process a POIFSWriterEvent that this listener had registered
            for
            
            </summary>
            <param name="event">the POIFSWriterEvent
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.InfoProperty.getBuiltInIdFromName(System.String,System.Boolean)">
            <param name="name">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.InfoProperty.getDefaultValueForBuiltIn(System.Int32,System.Boolean)">
            <param name="id">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertySet.writeWithoutHydrate(SoftArtisans.OfficeWriter.Shared.Storage)">
            <param name="stg">
            </param>
            <throws>  IOException </throws>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.SummaryInfoSection.PROPERTY_ID_NAMEIDS">
            <summary>
            TODO: find out from the docs why this is significant
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.VariantHelper.VT_FILETIME">
            <summary> <p>[P] FILETIME. The FILETIME structure holds a date and time
            associated with a file. The structure identifies a 64-bit
            integer specifying the number of 100-nanosecond intervals which
            have passed since January 1, 1601. This 64-bit value is split
            into the two dwords stored in the structure.</p>
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.Navigator">
            <summary>
            The main bulk of this class was moved to FragmentedMemoryStream
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Navigator.#ctor(System.IO.Stream,System.Int32)">
            <summary> Create a Navigator over an InputStream, using aDefaultBufferSize as the
            default size for buffers.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Navigator.ReadByte">
            <summary> Read a single byte from the stream. This is equivalent to invoking
            read(byte[0] b,0,1);
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Navigator.Read(System.SByte[])">
            <summary> Fill a byte array with up to aBuffer.length bytes from the stream. This
            method is equivelent to calling read(aBuffer, aBuffer.length, 0);
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Navigator.Replace(System.SByte[],System.Int32)">
            <summary> Inserts a number of bytes into a stream, overwriting aSizeToReplace
            existing bytes.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Navigator.available">
            <summary> Returns the number of bytes left from the current position.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.StorageFactory">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002</p>
            <p>Company: </p>
            </summary>
            <author>  unascribed
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StorageFactory.getCompoundFile(System.IO.Stream,System.Boolean,SoftArtisans.OfficeWriter.Shared.ClassID)">
            <summary>
            Returns a new POIFSCompoundFile object
            </summary>
            <param name="aInStream"></param>
            <param name="isInput"></param>
            <param name="rootClassId">true if the root class id should be excel, false if it should be word</param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.Decrypter">
            <summary> Created by IntelliJ IDEA.
            User: ianr
            Date: Jun 22, 2004
            Time: 4:42:29 PM
            To change this template use File | Settings | File Templates.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Decrypter.ReadByte">
            <summary> Reads a byte from the stream.
            
            </summary>
            <returns>
            The byte read or -1, signifying eof.
            </returns>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Decrypter.read(System.SByte[])">
            <summary> Reads encrypted data from the stream.
            
            </summary>
            <param name="aBuf">
            The buffer to place the bytes read.
            </param>
            <returns>
            returns the number of bytes read or -1, signifying eof.
            </returns>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Decrypter.read(System.SByte[],System.Int32,System.Int32)">
            <summary> Reads encrypted data from the stream.
            
            </summary>
            <param name="aBuf">
            Buffer to place the bytes read.
            </param>
            <param name="aOffset">
            Position in aBuf to start placing the bytes read
            </param>
            <param name="aLen">
            Number of bytes to read
            </param>
            <returns>
            returns the number of bytes read or -1, signifying eof.
            </returns>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Decrypter.available">
            <summary> Returns the number of bytes left in the underlying stream.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Decrypter.Close">
            <summary> Closes the underlying stream.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Decrypter.decryptChunk">
            <summary> Decrypts a chunk of data from the input stream in mBuffer.
            
            </summary>
            <returns>
            The number of bytes encrypted and placed in mBuffer or -1, signifying oef.
            </returns>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Decrypter.DecryptStorage(SoftArtisans.OfficeWriter.Shared.ReadOnlyStorage)">
            <summary>
            NOTE: this seems to be an Excel specific function
            </summary>
            <param name="aStorage"></param>
            <returns></returns>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.DecrypterXML.password">
            <summary>
            The password
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.DecrypterXML.storage">
            <summary>
            The input data
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DecrypterXML.DecryptStorage">
             <summary>
             Decrypt the storage using the password provided in the constructor
            
             </summary>
             <returns>The unencrypted zip file</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DecrypterXML.VerifyPassword(SoftArtisans.OfficeWriter.Shared.EncryptionInfo,System.Security.Cryptography.ICryptoTransform)">
            <summary>
            Verify the password so we know it works. There is a verifier, and its hash, both encrypted.
            If we decrypt them and the given hash matches the computed hash, the password works
            </summary>
            <param name="info">Information required to decrypt</param>
            <param name="cryptoTransform">Decrypter</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DecrypterXML.CreateCryptoTransform(SoftArtisans.OfficeWriter.Shared.EncryptionInfo)">
            <summary>
            Create the decryptor transform
            </summary>
            <param name="info">information required to decrypt stream</param>
            <returns>the ICryptoTransform</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.Encrypter">
            <summary> Created by IntelliJ IDEA.
            User: ianr
            Date: Jun 22, 2004
            Time: 4:42:29 PM
            To change this template use File | Settings | File Templates.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Encrypter.ReadByte">
            <summary> Reads a byte from the stream.
            
            </summary>
            <returns>
            The byte read or -1, signifying eof.
            </returns>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Encrypter.read(System.SByte[])">
            <summary> Reads and encrypts data from the stream.
            
            </summary>
            <param name="aBuf">
            The buffer to place the bytes read.
            </param>
            <returns>
            returns the number of bytes read or -1, signifying eof.
            </returns>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Encrypter.read(System.SByte[],System.Int32,System.Int32)">
            <summary> Reads and encrypts data from the stream.
            
            </summary>
            <param name="aBuf">
            Buffer to place the bytes read.
            </param>
            <param name="aOffset">
            Position in aBuf to start placing the bytes read
            </param>
            <param name="aLen">
            Number of bytes to read
            </param>
            <returns>
            returns the number of bytes read or -1, signifying eof.
            </returns>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Encrypter.available">
            <summary> Returns the number of bytes left in the underlying stream.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Encrypter.Close">
            <summary> Closes the underlying stream.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Encrypter.encryptChunk">
            <summary> Encrypts a chunk of data from the input stream in mBuffer.
            
            </summary>
            <returns>
            The number of bytes encrypted and placed in mBuffer or -1, signifying oef.
            </returns>
            <throws>  IOException </throws>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EncrypterXML.compoundFile">
            <summary>
            Intermediate object used to create a Compound Storage file
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EncrypterXML.#ctor(System.String,System.IO.Stream,System.Int32)">
            <summary>
            The constructor
            </summary>
            <param name="password"></param>
            <param name="outputStream">where to write to</param>
            <param name="keySize">the key size in bits. Valid values are 128, 192, or 256</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EncrypterXML.PopulateEncryptionInfo">
            <summary>
            Get information and write it to EncryptionInfo stream
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EncrypterXML.GetEncryptedPackage(System.IO.Stream)">
            <summary>
            Create the stream which will be what's put in the EncryptedPackage stream
            </summary>
            <param name="inputStream">the unencrypted contents (a Zip file)</param>
            <returns>the encrypted stream</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EncrypterXML.WriteEncryptedPackage(System.IO.Stream)">
            <summary>
            Write a stream to EncryptedPackage
            </summary>
            <param name="inputStream">input stream</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EncrypterXML.ConcatenateStreams(System.IO.Stream,System.IO.Stream)">
            <summary>
            Create a stream which is stream a concatenated with stream b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>the new stream</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EncryptionAlgorithmsXML">
            <summary>
            Algorithms used by Office 2007 encryption and decryption
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EncryptionAlgorithmsXML.ComputeHash(System.Byte[],System.Byte[])">
            <summary>
            In MS-CRYPTO a hashing algorithm H(a,b) is used. This is it
            </summary>
            <param name="a">beginning of total array</param>
            <param name="b">ending of total array</param>
            <returns>20-byte hashed value</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EncryptionAlgorithmsXML.ComputeKey(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Implements the key generating algorithm in MS-OFFCRYPTO
            </summary>
            <param name="password">The password as a unicode byte array</param>
            <param name="salt">See EncrpytionInfo.Salt</param>
            <param name="iterations">Hashing is done many times to make it more computationally intensive. Usually 50,000</param>
            <param name="cbRequiredKeyLength">Key size in bytes</param>
            <returns>the key</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EncryptionAlgorithmsXML.CompareArrays``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Compare two generic arrays (or whatever collection)
            </summary>
            <typeparam name="T">Type in array</typeparam>
            <param name="one"></param>
            <param name="two"></param>
            <returns>true if arrays are equal, false otherwise</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EncryptionInfo">
            <summary>
            Handles writing, reading, and storing data from the EncryptionInfo stream
            
            Encryption and decryption are not done here! All values are assumed to be as if they were
            read out of an encrypted document (in other words, encrypt values before passing them here through
            the constructor).
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EncryptionInfo.HASH_ITERATIONS">
            <summary>
            From MS-OFFCRYPTO. Hashing is done 50000 times to make it more computationally intensive to do,
            discouraging hackers
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EncryptionInfo.VERIFIER_UNENCRYPTED_HASH_SIZE">
            <summary>
            SHA1 hashes are 20 bytes
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EncryptionInfo.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Int32)">
            <summary>
            See MS-OFFCRYPTO docs for info about default values
            </summary>
            <param name="encryptedVerifier">16 bytes of some random data, encrypted</param>
            <param name="encryptedVerifierHash">the verifier, hashed with SHA1, encrypted</param>
            <param name="salt">the randomly generated salt, 16 bytes</param>
            <param name="keySize">key size in bits</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.RC4">
            <summary>
            Implements RC4 algorithm
            
            NOTE: I couldn't find any built-in .NET library to do this. We use this for binary-format encryption
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.RC4Key">
            <summary> Created by IntelliJ IDEA.
            User: ianr
            Date: Jun 18, 2004
            Time: 1:13:05 PM
            To change this template use File | Settings | File Templates.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper">
            <summary> <p>Title: LittleEndianHelper.java</p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Oct 1, 2002
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readShort(System.SByte[],System.Int32)">
            <summary> Read a little endian 16-bit short integer from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readShort(System.Byte[],System.Int32)">
            <summary> Read a little endian 16-bit short integer from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readChar(System.SByte[],System.Int32)">
            <summary> Read a little endian 16-bit character from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readChar(System.Byte[],System.Int32)">
            <summary> Read a little endian 16-bit character from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readInt(System.SByte[],System.Int32)">
            <summary> Read a little endian 32-bit integer from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readInt(System.Byte[],System.Int32)">
            <summary> Read a little endian 32-bit integer from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readLong(System.SByte[],System.Int32)">
            <summary> Read a little endian 64-bit long integer from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readLong(System.Byte[],System.Int32)">
            <summary> Read a little endian 64-bit long integer from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readFloat(System.SByte[],System.Int32)">
            <summary> Read a little endian 32-bit floating point variable from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readFloat(System.Byte[],System.Int32)">
            <summary> Read a little endian 32-bit floating point variable from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readDouble(System.SByte[],System.Int32)">
            <summary> Read a little endian 64-bit floating point variable from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readDouble(System.Byte[],System.Int32)">
            <summary> Read a little endian 64-bit floating point variable from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readByteU(System.SByte[],System.Int32)">
            <summary> Read a little endian 8-bit unsigned byte from a byte array and return it as a Java short.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readByteU(System.Byte[],System.Int32)">
            <summary> Read a little endian 8-bit unsigned byte from a byte array and return it as a Java short.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readShortU(System.SByte[],System.Int32)">
            <summary> Read a little endian 16-bit unsigned short from a byte array and return it as a Java int.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readShortU(System.Byte[],System.Int32)">
            <summary> Read a little endian 16-bit unsigned short from a byte array and return it as a Java int.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readIntU(System.SByte[],System.Int32)">
            <summary> Read a little endian 32-bit unsigned integer from a byte array and return it as a Java long..</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readIntU(System.Byte[],System.Int32)">
            <summary> Read a little endian 32-bit unsigned integer from a byte array and return it as a Java long..</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readFixed32(System.SByte[],System.Int32)">
            <summary> Read a signed, 32bit fixed point number (high word is integer, low word
            is fraction)
            </summary>
            <param name="aBuff">
            </param>
            <param name="aOff">
            </param>
            <returns>
            </returns>
            <throws>  ArrayIndexOutOfBoundsException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readFixed32(System.Byte[],System.Int32)">
            <summary> Read a signed, 32bit fixed point number (high word is integer, low word
            is fraction)
            </summary>
            <param name="aBuff">
            </param>
            <param name="aOff">
            </param>
            <returns>
            </returns>
            <throws>  ArrayIndexOutOfBoundsException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readFixed32U(System.SByte[],System.Int32)">
            <summary> Read an unsigned, 32bit fixed point number (high word is integer, low 
            word is fraction)
            </summary>
            <param name="aBuff">
            </param>
            <param name="aOff">
            </param>
            <returns>
            </returns>
            <throws>  ArrayIndexOutOfBoundsException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readFixed32U(System.Byte[],System.Int32)">
            <summary> Read an unsigned, 32bit fixed point number (high word is integer, low 
            word is fraction)
            </summary>
            <param name="aBuff">
            </param>
            <param name="aOff">
            </param>
            <returns>
            </returns>
            <throws>  ArrayIndexOutOfBoundsException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeShort(System.Int16,System.SByte[],System.Int32)">
            <summary> Write a big endian 16-bit short to a byte array as a little endian 16-bit short.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeShort(System.Int16,System.Byte[],System.Int32)">
            <summary> Write a big endian 16-bit short to a byte array as a little endian 16-bit short.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeInt(System.Int32,System.SByte[],System.Int32)">
            <summary> Write a big endian 32-bit int to a byte array as a little endian 32-bit int.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeInt(System.Int32,System.Byte[],System.Int32)">
            <summary> Write a big endian 32-bit int to a byte array as a little endian 32-bit int.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeLong(System.Int64,System.SByte[],System.Int32)">
            <summary> Write a big endian 64-bit long to a byte array as a little endian 64-bit long.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeLong(System.Int64,System.Byte[],System.Int32)">
            <summary> Write a big endian 64-bit long to a byte array as a little endian 64-bit long.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeFloat(System.Single,System.SByte[],System.Int32)">
            <summary> Write a big endian 32-bit float to a byte array as a little endian 32-bit float.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeFloat(System.Single,System.Byte[],System.Int32)">
            <summary> Write a big endian 32-bit float to a byte array as a little endian 32-bit float.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeDouble(System.Double,System.SByte[],System.Int32)">
            <summary> Write a big endian 64-bit double to a byte array as a little endian 64-bit double.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeDouble(System.Double,System.Byte[],System.Int32)">
            <summary> Write a big endian 64-bit double to a byte array as a little endian 64-bit double.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeByteU(System.Int16,System.SByte[],System.Int32)">
            <summary> Writes a short with a max value of (Byte.MAX_VALUE*2 + 1) to a byte array as a little endian 8-bit byte.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeByteU(System.Int16,System.Byte[],System.Int32)">
            <summary> Writes a short with a max value of (Byte.MAX_VALUE*2 + 1) to a byte array as a little endian 8-bit byte.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeShortU(System.Int32,System.SByte[],System.Int32)">
            <summary> Writes an int with a max value of (Short.MAX_VALUE*2 + 1) to a byte array as a little endian 16-bit short.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeShortU(System.Int32,System.Byte[],System.Int32)">
            <summary> Writes an int with a max value of (Short.MAX_VALUE*2 + 1) to a byte array as a little endian 16-bit short.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeIntU(System.Int64,System.SByte[],System.Int32)">
            <summary> Writes a long with a max value of (Integer.MAX_VALUE*2 + 1) to a byte array as a little endian 32-bit int.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeIntU(System.Int64,System.Byte[],System.Int32)">
            <summary> Writes a long with a max value of (Integer.MAX_VALUE*2 + 1) to a byte array as a little endian 32-bit int.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeFixed32(System.Double,System.SByte[],System.Int32)">
            <summary> Write a signed fixed-point 32 bit number (high word is int, 
            low word is fraction)
            </summary>
            <param name="aVal">
            </param>
            <param name="aBuff">
            </param>
            <param name="aOff">
            </param>
            <throws>  ArrayIndexOutOfBoundsException </throws>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeFixed32(System.Double,System.Byte[],System.Int32)">
            <summary> Write a signed fixed-point 32 bit number (high word is int, 
            low word is fraction)
            </summary>
            <param name="aVal">
            </param>
            <param name="aBuff">
            </param>
            <param name="aOff">
            </param>
            <throws>  ArrayIndexOutOfBoundsException </throws>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeFixed32U(System.Double,System.SByte[],System.Int32)">
            <summary> Write an unsigned fixed-point 32 bit number (high word is int, 
            low word is fraction)
            </summary>
            <param name="aVal">
            </param>
            <param name="aBuff">
            </param>
            <param name="aOff">
            </param>
            <throws>  ArrayIndexOutOfBoundsException </throws>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeFixed32U(System.Double,System.Byte[],System.Int32)">
            <summary> Write an unsigned fixed-point 32 bit number (high word is int, 
            low word is fraction)
            </summary>
            <param name="aVal">
            </param>
            <param name="aBuff">
            </param>
            <param name="aOff">
            </param>
            <throws>  ArrayIndexOutOfBoundsException </throws>
            <throws>  IOException </throws>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.StreamCopyAdaptor">
            <summary> Summary description for StreamCopyAdaptor.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.UnsyncByteArrayInputStream.DoRead``1(``0[],System.Int32,System.Int32)">
            <summary>
            Read bytes from a stream
            </summary>
            <typeparam name="T"></typeparam>
            <param name="aBuffer">This must be either byte[] or sbyte[]</param>
            <param name="aOffset"></param>
            <param name="aLength"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ALicenseKey">
            <author>  geoffk Sep 22, 2003 4:09:15 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ILicenseKey">
            <summary> 
            </summary>
            <author>  geoffk
            Sep 22, 2003 4:07:15 PM
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.AUTH_KANA">
            <summary>Company code for AUTH_KANA </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.AUTH_SOFTARTISANS">
            <summary>Company code for Softartisans </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.AUTH_COMPONENTSOURCE">
            <summary>Company code for ComponentSource </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.CLIENTREQ_EVAL_KEY_MUST_MATCH">
            <summary>Requires the installation key to match </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.CLIENTREQ_NAME_HASH_MUST_MATCH">
            <summary>Requires the client name hash to match </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.EDITION_DESKTOP_DEV">
            <summary>Desktop Design-Time*</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.EDITION_DESKTOP_RUNTIME">
            <summary>Desktop Run-Time*</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.EDITION_EE_DEV">
            <summary>EE Developer *</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.EDITION_SE_DEV">
            <summary>SE Developer *</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.EDITION_EE">
            <summary>Enterprise / Full *</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.EDITION_FREE">
            <summary>Free *</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.EDITION_LE">
            <summary>LE *</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.EDITION_SE">
            <summary>SE *</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.EDITION_RS">
            <summary>RS *</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.EDITION_PE">
            <summary>Professional *</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.EDITION_RS_DEV">
            <summary>RS_DEV *</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.EDITION_EE_TS">
            <summary>EE Testing/Staging *</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.EDITION_SE_TS">
            <summary>SE Testing/Staging *</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.EXPIRES_IN_120_DAYS">
            <summary>Indicates the product will expire in 120 days </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.EXPIRES_IN_30_DAYS">
            <summary>Indicates the product will expire in 30 days </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.EXPIRES_IN_60_DAYS">
            <summary>Indicates the product will expire in 60 days </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.EXPIRES_IN_90_DAYS">
            <summary>Indicates the product will expire in 90 days </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.KEY_FORMAT_1">
            <summary>The original C++ license format </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.KEY_FORMAT_2">
            <summary>The second revision </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.KEYTYPE_EVAL">
            <summary>Specifies that the license is an installation key </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.KEYTYPE_PERM">
            <summary>Specifies that the license is an activation key </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.PRODUCT_EXCELWRITER_COM_DEPRICATED">
            <summary>Product ID for ExcelWriter COM (depricated). Has been used once for KANA v1 licenses </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.PRODUCT_EXCELWRITER_JAVA">
            <summary>Product ID for ExcelWriter Java </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.PRODUCT_EXCELWRITER_WIN">
            <summary>Product ID for ExcelWriter NET </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.PRODUCT_FILEUP_WIN">
            <summary>Product ID for FileUP. Plesase note that this id covers FileUpEE  </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.PRODUCT_OFFICEWRITER_JAVA">
            <summary>Product ID for Writer Suite </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.PRODUCT_OFFICEWRITER_WIN">
            <summary>Product key for OfficeWriter for Windows </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.PRODUCT_REPORTSVC_WIN">
            <summary>Product ID for ReportingServices Suite </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.PRODUCT_WORDWRITER_JAVA">
            <summary>Product ID for WordWriter Java </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.PRODUCT_WORDWRITER_WIN">
            <summary>Product ID for WordWriter for Windows </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.PRODUCT_ARCHIVE_WIN">
            <summary>
            Product ID for Archive for Windows
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.PRODUCT_FILEMANAGER_WIN">
            <summary>
            Product ID for FileManager for Windows
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.PRODUCT_IMAGEWRITER_WIN">
            <summary>
            Product ID for ImageWriter for Windows
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.PRODUCT_SMTPMAIL_WIN">
            <summary>
            Product ID for SMTPMail for Windows
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.PRODUCT_XFILE_WIN">
            <summary>
            Product ID for XFile for Windows
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ILicenseKey.autoSetName">
            <summary> Set the user's computer name hash for this license key.  The computer
            name is retrieved by <CODE>InetAddress.getLocalHost().getHostName()</CODE>
            method, and then hashed with the <CODE>LicenseKey.getHashValue(name)</CODE>
            method.  If the host name cannot be found, the hash value will be set to 0.
            
            </summary>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.getHashValue(System.String)">
            </seealso>
            <seealso cref="!:setComputerNameHash(int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ILicenseKey.getProductFamily">
            <summary> Get the product family for this license key.</summary>
            <returns> the product family.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ILicenseKey.getProductPlatformName">
            <summary> Get the product platform for this license key.</summary>
            <returns> the product platform.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ILicenseKey.ToString">
            <summary> Return the encoded key.  If you have a <CODE>LicenseKey</CODE> named
            key, the key.toString() is the same as LicenseKey.encode(key)
            </summary>
            <returns> the encoded license key.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ILicenseKey.ClientInfoReq">
            <summary> The client requirement info for this key.</summary>
            <returns> the client requirement info
            </returns>
            <seealso cref="!:setClientInfoReq(int)">
            </seealso>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.LicenseKeyException">if set to something that is not a requirement</exception>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.CLIENTREQ_EVAL_KEY_MUST_MATCH">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ILicenseKey.ComputerNameHash">
            <summary> Gets the computer nmame has for this license key.</summary>
            <returns> the computer name hash
            </returns>
            <seealso cref="!:setComputerNameHash(int)">
            </seealso>
            <summary> Set the computer name has for this license key.  The hash should
            can be any 16-bit <CODE>short</CODE>.
            </summary>
            <param name="hash">the computer name hash.
            </param>
            <throws>  LicenseKeyException if <CODE>(hash &lt; 0 || hash &gt; 65535)</CODE> </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ILicenseKey.Crc">
            <summary> Gets the CRC for this license key.  Note that there is no
            setCrc method, because the CRC is automaticly calculated
            and set when the LicenseKey gets encoded.
            
            </summary>
            <returns> the crc value
            </returns>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.decode(System.String)">
            </seealso>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.encode(SoftArtisans.OfficeWriter.Shared.ILicenseKey)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ILicenseKey.CreatedDay">
            <summary> Gets the day this key was created.</summary>
            <returns> the day this key was created.
            </returns>
            <seealso cref="!:setCreatedDay(int)">
            </seealso>
            <summary> Set the day this key was created.  It can be any number within
            the range [1-31].
            </summary>
            <param name="day">the day the license key was created.
            </param>
            <throws>  LicenseKeyException if <CODE>(day &lt; 1 || day &gt; 31)</CODE> </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ILicenseKey.CreatedMonth">
            <summary> Get the month this key was created.</summary>
            <returns> the month this key was created.
            </returns>
            <seealso cref="!:setCreatedMonth(int)">
            </seealso>
            <summary> Set the month this key was created.  It can be any number within
            the range [1-12];
            </summary>
            <param name="month">the month this key was created.
            </param>
            <throws>  LicenseKeyException if </throws>
            <summary> <CODE>(month &lt; 1 || month &gt; 12)</CODE>
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ILicenseKey.CreatedYear">
            <summary> Gets the year this key was created.</summary>
            <returns> the year this key was created.
            </returns>
            <seealso cref="!:setCreatedYear(int)">
            </seealso>
            <summary> Set the year this key was created.  Valid years are any between the
            values [2003-2010].
            
            </summary>
            <param name="year">the year this key was created.
            </param>
            <throws>  LicenseKeyException if <CODE>(year &lt; 2003 || year &gt; 2010)</CODE> </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ILicenseKey.Data">
            <summary> Gets the array of data in this key.</summary>
            <returns> the data array.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ILicenseKey.ExpirePeriod">
            <summary> Get the expire period code for this license key.</summary>
            <returns> the expire code for this key
            </returns>
            <seealso cref="!:setExpirePeriod(int)">
            </seealso>
            <summary> Set the expire period for this license key.  This field should be
            ignore if the product is not an evaluation product.
            
            </summary>
            <param name="expireCode">the expire period code.
            </param>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.EXPIRES_IN_30_DAYS">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.EXPIRES_IN_60_DAYS">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.EXPIRES_IN_90_DAYS">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.EXPIRES_IN_120_DAYS">
            </seealso>
            <throws>  LicenseKeyException if <CODE>expireCode</CODE> is invalid. </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ILicenseKey.KeyType">
            <summary> Gets the key type for this license key.</summary>
            <returns> the key type.
            </returns>
            <seealso cref="!:setKeyType(int)">
            </seealso>
            <summary> Set a new key type for this license key.  The <CODE>type</CODE>
            shoud be either 0 or 1.
            
            </summary>
            <param name="type">the new type.
            </param>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.KEYTYPE_EVAL">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.KEYTYPE_PERM">
            </seealso>
            <throws>  LicenseKeyException if <CODE>type</CODE> is not 0 or 1. </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SoftArtisans.OfficeWriter.Shared.ILicenseKey.LicenseAuthority" -->
        <member name="P:SoftArtisans.OfficeWriter.Shared.ILicenseKey.licenseAuthorityName">
            <summary>
            Returns the string representation for any of the constants
            in this class for license authorities
            </summary>
            <remarks>If a subclass has additional authorities, this should be 
            overriden. If the authority is unknow "Unknown Authority" will be returned.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SoftArtisans.OfficeWriter.Shared.ILicenseKey.LicenseFormat" -->
        <member name="P:SoftArtisans.OfficeWriter.Shared.ILicenseKey.MajorVersion">
            <summary> Gets the major version of the product for this license key.</summary>
            <returns> the major version of the product.
            </returns>
            <seealso cref="!:setMajorVersion(int)">
            </seealso>
            <summary> Set the major version of the product for this license key.  The
            <CODE>version</CODE> should be an <CODE>int</CODE> from [0-7].
            </summary>
            <param name="version">the version number
            </param>
            <throws>  LicenseKeyException if <CODE>(version &lt; 0 || version &gt; 7)</CODE> </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ILicenseKey.MaxCpuCount">
            <summary> Gets the max cpu count for this license key.</summary>
            <returns> the max cpu count
            </returns>
            <seealso cref="!:setMaxCpuCount(int)">
            </seealso>
            <summary> Set the max cpu count for this license key.  The <CODE>maxCpu</CODE>
            should be any <CODE>int</CODE> for [1-63].
            </summary>
            <param name="maxCpu">the max cpu setting.
            </param>
            <throws>  LicenseKeyException if <CODE>(maxCpu &lt; 1 || maxCpu &gt; 63)</CODE> </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ILicenseKey.ProductId">
            <summary> The product id for this license key.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SoftArtisans.OfficeWriter.Shared.ILicenseKey.SerialNumber" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.charValue(System.Char)">
            <summary> Gets the given character's value in base32.
            
            </summary>
            <param name="c">the given character.
            </param>
            <returns> the character value in base32, or -1 if not a valid character.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.createShort(System.SByte,System.SByte)">
            <summary> Creates a short with the given bytes.
            
            </summary>
            <param name="lsb">the least significant byte
            </param>
            <param name="msb">the most significant byte.
            </param>
            <returns> the short created from the two bytes.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.decode(System.String)">
            <summary> Decodes a license key. License key should be in format
            XXXXXX-XXXX-XXXX-XXXXXX. The decoder will validate the license key by
            checking its crc sum. If the crc sum is invalid, it will throw an
            exception.
            
            </summary>
            <param name="keyString">the given license key
            </param>
            <returns> a license key decodeded from the string.
            </returns>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.LicenseKeyException">
            if the keyString givin is not in valid format or the key's
            crc sum is not valid.
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.encode(SoftArtisans.OfficeWriter.Shared.ILicenseKey)">
            <summary> Encodes a license key in base32 format. The CRC will be automatically
            calculated for you.
            
            </summary>
            <param name="key">the license key
            </param>
            <returns> the encoded string
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.getHashValue(System.String)">
            <summary> Gets a 13-bit hash value from the given string. Use mainly to calculate
            the hash value of a computer name.
            
            </summary>
            <param name="string_Renamed">the given string.
            </param>
            <returns> a 13-bit unsigned value of the hash.
            </returns>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.set_ComputerNameHash(System.Int32)">
            </seealso>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.get_ComputerNameHash">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.autoSetName">
            <summary> Set the user's computer name hash for this license key. The computer
            name is retrieved by <CODE>InetAddress.getLocalHost().getHostName()
            </CODE> method, and then hashed with the <CODE>
            LicenseKey.getHashValue(name)</CODE> method. If the host name cannot be
            found, the hash value will be set to 0.
            
            </summary>
            <seealso cref="!:InetAddress.getLocalHost()">
            </seealso>
            <seealso cref="!:InetAddress.getHostName()">
            </seealso>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.getHashValue(System.String)">
            </seealso>
            <seealso cref="!:setComputerNameHash(int)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.autoSetTime">
            <summary> Attempt to set the created month, day, and year with the current time on
            the user computer. Since valid years are [2003-2010], if the user's
            computer is not within those years, an exception will be thrown.
            
            </summary>
            <throws>  LicenseKeyException </throws>
            <summary>             if the time in the user's computer is not between 1/1/2003
            and 12/31/2010
            </summary>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.set_CreatedMonth(System.Int32)">
            </seealso>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.set_CreatedDay(System.Int32)">
            </seealso>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.set_CreatedYear(System.Int32)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.printBinaryDump">
            <summary> Prints the binary dump for this license key, mainly a debug method.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.ToString">
            <summary> Return the encoded key. If you have a <CODE>LicenseKey</CODE> named
            key, the key.toString() is the same as LicenseKey.encode(key)
            
            </summary>
            <returns> the encoded license key.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.getProductPlatform(System.Int32)">
            <summary>
            The platform associated with the given product id
            </summary>
            <param name="productId">the product id</param>
            <returns>either <see cref="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.PLATFORM_JAVA"/> 
            if <code>productId</code> is one of the constant product
            ids on the java platform; <see cref="F:SoftArtisans.OfficeWriter.Shared.ILicenseKey.PLATFORM_WINDOWS"/>
            otherwise</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.getDescription(SoftArtisans.OfficeWriter.Shared.ILicenseKey,System.Int32)">
            <summary> Returns an ouput string describing the license.
            
            </summary>
            <param name="aKey">
            </param>
            <param name="aOutputStyle">STYLE_SINGLE_LINE, STYLE_MULTI_LINE
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.createMultiLineDescription(SoftArtisans.OfficeWriter.Shared.ILicenseKey)">
            <param name="aKey">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.createInternalSingleLineDescription(SoftArtisans.OfficeWriter.Shared.ILicenseKey)">
            <param name="aKey">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ALicenseKey.ComputerNameHash">
            <summary> Gets the computer nmame has for this license key.
            
            </summary>
            <returns> the computer name hash
            </returns>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.set_ComputerNameHash(System.Int32)">
            </seealso>
            <summary> Set the computer name has for this license key. The hash should can be
            any 16-bit <CODE>short</CODE>.
            
            </summary>
            <param name="value">the computer name hash.
            </param>
            <throws>  LicenseKeyException </throws>
            <summary>             if <CODE>(hash &lt; 0 || hash &gt; 65535)</CODE>
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ALicenseKey.Crc">
            <summary> Gets the CRC for this license key. Note that there is no setCrc method,
            because the CRC is automaticly calculated and set when the LicenseKey
            gets encoded.
            
            </summary>
            <returns> the crc value
            </returns>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.decode(System.String)">
            </seealso>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.encode(SoftArtisans.OfficeWriter.Shared.ILicenseKey)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ALicenseKey.CreatedDay">
            <summary> Gets the day this key was created.
            
            </summary>
            <returns> the day this key was created.
            </returns>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.set_CreatedDay(System.Int32)">
            </seealso>
            <summary> Set the day this key was created. It can be any number within the range
            [1-31].
            
            </summary>
            <param name="value">the day the license key was created.
            </param>
            <throws>  LicenseKeyException </throws>
            <summary>             if <CODE>(day &lt; 1 || day &gt; 31)</CODE>
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ALicenseKey.CreatedMonth">
            <summary> Get the month this key was created.
            
            </summary>
            <returns> the month this key was created.
            </returns>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.set_CreatedMonth(System.Int32)">
            </seealso>
            <summary> Set the month this key was created. It can be any number within the
            range [1-12];
            
            </summary>
            <param name="value">the month this key was created.
            </param>
            <throws>  LicenseKeyException </throws>
            <summary>             if <CODE>(month &lt; 1 || month &gt; 12)</CODE>
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ALicenseKey.CreatedYear">
            <summary> 
            The year this key was created.
            </summary>
            <remarks>If setting Major Version or ProductId, those should be changed first, as 
            the way this is set changes depending on those values</remarks>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.LicenseKeyException">
            if <CODE>(year &lt; MinYear || year &gt; MaxYear)</CODE>
            </exception>
            <seealso cref="P:SoftArtisans.OfficeWriter.Shared.ALicenseKey.MinYear"/>
            <seealso cref="P:SoftArtisans.OfficeWriter.Shared.ALicenseKey.MaxYear"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ALicenseKey.CreatedYearFourthBit">
            <summary>
            The most significant bit of the created year in the 4th bit position.
            </summary>
            <remarks>If setting Major Version or ProductId, those should be changed first, as 
            the way this is set changes depending on those values.
            
            For OW-4.x licenses this is grabbed from the key, for earlier versions, it is 0.
            </remarks>
            <seealso cref="P:SoftArtisans.OfficeWriter.Shared.ALicenseKey.MinYear"/>
            <seealso cref="P:SoftArtisans.OfficeWriter.Shared.ALicenseKey.MaxYear"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ALicenseKey.MinYear">
            <summary>
            The Lowest year that a license could have been created on.
            </summary>
            <remarks>For OW-4.x licenses this is 2008-2023, for older stuff it's 2003-2010</remarks>
            <seealso cref="P:SoftArtisans.OfficeWriter.Shared.ALicenseKey.MaxYear"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ALicenseKey.MaxYear">
            <summary>
            The Highest year that a license could have been created on.
            </summary>
            <remarks>For OW-4.x licenses this is 2008-2023, for older stuff it's 2003-2010</remarks>
            <seealso cref="P:SoftArtisans.OfficeWriter.Shared.ALicenseKey.MinYear"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ALicenseKey.Data">
            <summary> Gets the array of data in this key.
            
            </summary>
            <returns> the data array.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ALicenseKey.ExpirePeriod">
            <summary> The expire period code for this license key. This field should be ignore
            if the product is not an evaluation product.
            
            </summary>
            <seealso cref="!:EXPIRES_IN_30_DAYS">
            </seealso>
            <seealso cref="!:EXPIRES_IN_60_DAYS">
            </seealso>
            <seealso cref="!:EXPIRES_IN_90_DAYS">
            </seealso>
            <seealso cref="!:EXPIRES_IN_120_DAYS">
            </seealso>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.LicenseKeyException">if set to an invalid period</exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ALicenseKey.KeyType">
            <summary> Gets the key type for this license key.
            
            </summary>
            <returns> the key type.
            </returns>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.set_KeyType(System.Int32)">
            </seealso>
            <summary> Set a new key type for this license key. The <CODE>type</CODE> shoud
            be either 0 or 1.
            
            </summary>
            <param name="value">the new type.
            </param>
            <seealso cref="!:KEYTYPE_EVAL">
            </seealso>
            <seealso cref="!:KEYTYPE_PERM">
            </seealso>
            <throws>  LicenseKeyException </throws>
            <summary>             if <CODE>type</CODE> is not 0 or 1.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SoftArtisans.OfficeWriter.Shared.ALicenseKey.LicenseFormat" -->
        <member name="P:SoftArtisans.OfficeWriter.Shared.ALicenseKey.MajorVersion">
            <summary> Gets the major version of the product for this license key.
            
            </summary>
            <returns> the major version of the product.
            </returns>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.set_MajorVersion(System.Int32)">
            </seealso>
            <summary> Set the major version of the product for this license key. The <CODE>
            version</CODE> should be an <CODE>int</CODE> from [0-7].
            
            </summary>
            <param name="value">the version number
            </param>
            <throws>  LicenseKeyException </throws>
            <summary>             if <CODE>(version &lt; 0 || version &gt; 7)</CODE>
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ALicenseKey.NumberOfProductEditions">
            <summary>
            This is the number of different product editions that there are
            </summary>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.getProductEditionMap(System.Int32)"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ALicenseTable">
            <summary> Provides an implementation of providesOneProduct.
            
            </summary>
            <author>  geoffk
            Jul 11, 2003 10:02:30 AM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ILicenseTable">
            <summary> Table interface to find out which products come with what licenses.
            
            </summary>
            <author>  geoffk
            Jul 10, 2003 2:30:22 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ILicenseTable.findProducts(System.Int32,System.Int32)">
            <summary> Returns an array of ProductDescriptions provided by the given product and version.</summary>
            <param name="aProduct">the product id to lookup (defined in LicenseKey)
            </param>
            <param name="aVersion">the version to lookup.
            </param>
            <returns> an array of ProductDescriptions available from the given product.  If the product/version combo is not found, an empty array will be returned.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ILicenseTable.providesOneProduct(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Returns true if aProduct/aVersion provide aDesiredProduct/aDesiredVersion.</summary>
            <param name="aProduct">the product id to lookup (defined in LIcenseKey)
            </param>
            <param name="aVersion">the version to lookup
            </param>
            <param name="aDesiredProduct">the product to check against
            </param>
            <param name="aDesiredVersion">the version to check against
            </param>
            <returns> true if the products match.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ALicenseTable.providesOneProduct(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Implementation of ILicenseTable.providesOneProduct.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ASingleKeyLicenseReader">
            <summary> Abstract class implementing getKeys for license readers that only return a single key.
            
            </summary>
            <author>  geoffk
            Jul 11, 2003 10:40:43 AM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LicenseReader">
            <summary> This class is used by the <CODE>LicenseKeyValidator</CODE>
            to obtain a license key string to validate.
            
            </summary>
            <author>  Pok-Ching Lee
            </author>
            <version>  1.0
            </version>
            <seealso cref="!:ExcelWriterLicenseReader">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseReader.KeyString">
            <summary> The method should return a license key string.  If
            the license key string cannot be obtained, a
            <CODE>LicenseKeyException</CODE> should be thrown.
            This method <B>should not</B> return a <CODE>null</CODE>,
            throw a descriptive exception instead.
            
            </summary>
            <returns> a license key string.
            </returns>
            <throws>  LicenseKeyException if the key string </throws>
            <summary> cannot be obtained.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseReader.Keys">
            <summary> The method should return an array of license key strings.
            If the license key string cannot be obtained, a
            <CODE>LicenseKeyException</CODE> should be thrown.
            This method <B>should not</B> return a <CODE>null</CODE>,
            throw a descriptive exception instead.
            
            </summary>
            <returns> an array of license key strings.
            </returns>
            <throws>  LicenseKeyException if no key strings can be obtained. </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ASingleKeyLicenseReader.KeyString">
            <seealso cref="!:LicenseReader#getKeyString()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ASingleKeyLicenseReader.Keys">
            <summary> Returns a single license key in an array.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.HardCodedLicenseReader">
            <summary> This <CODE>LicenseReader</CODE> allows the developer
            to hard code the license key into the program.
            
            </summary>
            <author>  Pok-Ching Lee
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HardCodedLicenseReader.#ctor(System.String)">
            <summary> Creates a hard coded license reader.</summary>
            <param name="keyString">the hard coded license key string.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.HardCodedLicenseTable">
            <summary> Hardcoded license description file.</summary>
            <author>  geoffk
            Jul 10, 2003 2:36:06 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HardCodedLicenseTable.findProducts(System.Int32,System.Int32)">
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.ILicenseTable.findProducts(System.Int32,System.Int32)">
            </seealso>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SoftArtisans.OfficeWriter.Shared.LicenseKey1" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKey1.#ctor">
            <summary> Creates a blank license key.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKey1.#ctor(System.Int16[])">
            <summary> Creates a License key with an array of data.  Note, this does
            not validate the CRC.  Use the static decode() method instead.
            </summary>
            <param name="buffer">the memory byte buffer.
            </param>
            <throws>  LicenseKeyException if <CODE>data.length</CODE> != 6 </throws>
            <seealso cref="!:LicenseKey.decode(String)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey1.ProductId">
            <summary> Get the product id for this license key.</summary>
            <returns> the product id.
            </returns>
            <seealso cref="!:setProductId(int)">
            </seealso>
            <summary> Set a new product for this license key.  The id should be any
            <CODE>int</CODE> from [0-15].  Only the <CODE>int</CODE>s
            1,2,3,5,6,7,8,9 are used.  The rest are reserved for future products.
            
            Note: Setting id to a reserved <CODE>int</CODE> does not throw any
            exceptions or errors!
            
            </summary>
            <param name="id">the new product id, see the constants.
            </param>
            <seealso cref="!:PRODUCT_EXCELWRITER_COM_DEPRICATED">
            </seealso>
            <seealso cref="!:PRODUCT_EXCELWRITER_JAVA">
            </seealso>
            <seealso cref="!:PRODUCT_EXCELWRITER_WIN">
            </seealso>
            <seealso cref="!:PRODUCT_WORDWRITER_WIN">
            </seealso>
            <seealso cref="!:PRODUCT_WORDWRITER_JAVA">
            </seealso>
            <seealso cref="!:PRODUCT_REPORTSVC_WIN">
            </seealso>
            <seealso cref="!:PRODUCT_FILEUP_WIN">
            </seealso>
            <seealso cref="!:PRODUCT_FILEUPEE_WIN">
            </seealso>
            <throws>  LicenseKeyException if <CODE>(id &lt; 0 || id &gt; 15)</CODE> </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey1.MaxCpuCount">
            <summary> Gets the max cpu count for this license key.</summary>
            <returns> the max cpu count
            </returns>
            <seealso cref="!:setMaxCpuCount(int)">
            </seealso>
            <summary> Set the max cpu count for this license key.  The <CODE>maxCpu</CODE>
            should be any <CODE>int</CODE> for [1-63].
            </summary>
            <param name="maxCpu">the max cpu setting.
            </param>
            <throws>  LicenseKeyException if <CODE>(maxCpu &lt; 1 || maxCpu &gt; 63)</CODE> </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey1.ClientInfoReq">
            <summary> Gets the client requirement info for this key.</summary>
            <returns> the client requirement info
            </returns>
            <seealso cref="!:setClientInfoReq(int)">
            </seealso>
            <summary> Set the clientInfoReq for this license key.
            
            </summary>
            <param name="requirement">the client requirment.
            </param>
            <seealso cref="!:CLIENTREQ_EVAL_KEY_MUST_MATCH">
            </seealso>
            <seealso cref="!:CLIENTREQ_NAME_HASH_MUST_MATCH">
            </seealso>
            <throws>  LicenseKeyException if <CODE>requirement</CODE> is not one </throws>
            <summary> of the valid fields.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SoftArtisans.OfficeWriter.Shared.LicenseKey1.LicenseAuthority" -->
        <!-- Badly formed XML comment ignored for member "P:SoftArtisans.OfficeWriter.Shared.LicenseKey1.SerialNumber" -->
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey1.ProductEdition">
            <summary> UNIMPLEMENTED IN V1</summary>
            <summary> UNIMPLEMENTED IN V1</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LicenseKey2">
            <summary> This class represents a LicenseKey, version 2.
            
            Changes from Version 1:
            - Added edition
            - Added OfficeWriter.NET product key
            - Removed 4 high bits from Serial Number
            - Removed 1 high bit from CPU count
            - Removed 2 high bits from License Authority
            - Removed 1 high bit from ClientReq
            - Added edition in high bits from Serial number
            - added remaining 4 bits to Product (scattered)
            
            </summary>
            <author>  geoffk
            Sep 22, 2003 9:51:46 AM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKey2.#ctor">
            <summary> Creates a blank license key.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKey2.#ctor(System.Int16[])">
            <summary> Creates a License key with an array of data.  Note, this does
            not validate the CRC.  Use the static decode() method instead.
            </summary>
            <param name="aData">the memory byte buffer.
            </param>
            <throws>  LicenseKeyException if <CODE>data.length</CODE> != 6 </throws>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.ALicenseKey.decode(System.String)">
            </seealso>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SoftArtisans.OfficeWriter.Shared.LicenseKey2.LicenseAuthority" -->
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey2.MaxCpuCount">
            <summary> Gets the max cpu count for this license key.</summary>
            <returns> the max cpu count
            </returns>
            <seealso cref="!:setMaxCpuCount(int)">
            </seealso>
            <summary> Set the max cpu count for this license key.  The <CODE>maxCpu</CODE>
            should be any <CODE>int</CODE> for [1-32].
            </summary>
            <param name="maxCpu">the max cpu setting.
            </param>
            <throws>  LicenseKeyException if <CODE>(maxCpu &lt; 1 || maxCpu &gt; 32)</CODE> </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey2.ClientInfoReq">
            <summary> Gets the client requirement info for this key.</summary>
            <returns> the client requirement info
            </returns>
            <seealso cref="!:setClientInfoReq(int)">
            </seealso>
            <summary> Set the clientInfoReq for this license key.
            
            </summary>
            <param name="requirement">the client requirment.
            </param>
            <seealso cref="!:CLIENTREQ_EVAL_KEY_MUST_MATCH">
            </seealso>
            <seealso cref="!:CLIENTREQ_NAME_HASH_MUST_MATCH">
            </seealso>
            <throws>  LicenseKeyException if <CODE>requirement</CODE> is not one </throws>
            <summary> of the valid fields.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SoftArtisans.OfficeWriter.Shared.LicenseKey2.SerialNumber" -->
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey2.ProductId">
            <summary> Get the product id for this license key.</summary>
            <returns> the product id.
            </returns>
            <seealso cref="!:setProductId(int)">
            </seealso>
            <summary> Set a new product for this license key.  The id should be any
            <CODE>int</CODE> from [0-255].  Only the <CODE>int</CODE>s
            [1-11] inclusive are used.  The rest are reserved for future products.
            Note that 0 is not used!
            
            Note: Setting id to a reserved <CODE>int</CODE> does not throw any
            exceptions or errors!
            
            </summary>
            <param name="id">the new product id, see the constants.
            </param>
            <seealso cref="!:PRODUCT_EXCELWRITER_COM_DEPRICATED">
            </seealso>
            <seealso cref="!:PRODUCT_EXCELWRITER_JAVA">
            </seealso>
            <seealso cref="!:PRODUCT_EXCELWRITER_WIN">
            </seealso>
            <seealso cref="!:PRODUCT_WORDWRITER_WIN">
            </seealso>
            <seealso cref="!:PRODUCT_WORDWRITER_JAVA">
            </seealso>
            <seealso cref="!:PRODUCT_FILEUP_WIN">
            </seealso>
            <seealso cref="!:PRODUCT_FILEUPEE_WIN">
            </seealso>
            <seealso cref="!:PRODUCT_OFFICEWRITER_JAVA">
            </seealso>
            <seealso cref="!:PRODUCT_OFFICEWRITER_WIN">
            </seealso>
            <seealso cref="!:PRODUCT_REPORTSVC_WIN">
            </seealso>
            <throws>  LicenseKeyException if <CODE>(id &lt; 1 || id &gt; 255)</CODE> </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey2.ProductEdition">
            <summary> Get the edition for this license key.</summary>
            <returns> the product edition.
            </returns>
            <seealso cref="!:setProductEdition(int)">
            </seealso>
            <summary> Sets a new edition for this license key.  This value must be between
            [0-15], and should use the static final values defined in LicenseKey2.
            
            </summary>
            <param name="aEdition">the new edition constant for this key.
            </param>
            <seealso cref="!:EDITION_SE;">
            </seealso>
            <seealso cref="!:EDITION_EE;">
            </seealso>
            <seealso cref="!:EDITION_SE_DEV;">
            </seealso>
            <seealso cref="!:EDITION_LE;">
            </seealso>
            <seealso cref="!:EDITION_DESKTOP_DEV;">
            </seealso>
            <seealso cref="!:EDITION_DESKTOP_RUNTIME;">
            </seealso>
            <seealso cref="!:EDITION_FREE;">
            </seealso>
            <seealso cref="!:EDITION_RS;">
            </seealso>
            <seealso cref="!:EDITION_RS_DEV;">
            </seealso>
            <throws>  LicenseKeyException if aEdition is out of the acceptable range. </throws>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LicenseKeyException">
            <summary> An exception thrown when trying to set up, encode, or decode
            an invalid license key.
            
            
            </summary>
            <author>  Pok-Ching Lee
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LicenseKeyValidator">
            <summary> This class is used to validate a license key.  You will need to
            give the validator some sort of <CODE>LicenseReader</CODE> for
            it to obtain the license key string.
            
            
            </summary>
            <author>  Pok-Ching Lee
            </author>
            <version>  1.0
            </version>
            <seealso cref="!:ExcelWriterLicenseReader">
            </seealso>
            <seealso cref="!:JarDirectoryLicenseReader">
            </seealso>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.HardCodedLicenseReader">
            </seealso>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.LicenseReader">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKeyValidator.validate(System.String,System.Int32,System.Int32)">
            <summary> New validate method which returns without error, or throws an LicenseKeyException.</summary>
            <param name="aKey">the license key to validate
            </param>
            <param name="aProduct">the product to validate the key against
            </param>
            <param name="aVersion">the major version of the product to validate the key against
            </param>
            <throws>  LicenseKeyException if the key does not validate </throws>
            <summary> 
            geoffk 20030709 1508
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKeyValidator.validate(System.String[],System.Int32,System.Int32,SoftArtisans.OfficeWriter.Shared.ILicenseTable,System.String,System.String,System.String)">
            <summary> Validates multiple keys for a product and version using the ITable interface.</summary>
            <param name="aKeys">
            </param>
            <param name="aProduct">
            </param>
            <param name="aVersion">
            </param>
            <param name="aTable">*
            
            geoffk 20030711 0948
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKeyValidator.validate(System.String,System.Int32,System.Int32,SoftArtisans.OfficeWriter.Shared.ILicenseTable)">
            <summary> Validates a single key for a product and version using the ITable interface.
            
            This is designed to be called by a product, checking to make sure that the key it has found
            will work with the product.
            
            </summary>
            <param name="aKey">
            </param>
            <param name="aProduct">
            </param>
            <param name="aVersion">
            </param>
            <param name="aTable">
            geoffk 20030711 0948
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKeyValidator.validate(System.String,System.Int32,System.Int32,SoftArtisans.OfficeWriter.Shared.ILicenseTable,System.String,System.String,System.String)">
            <summary> Validates a single key for a product and version using the ITable interface.
            
            This is designed to be called by a product, checking to make sure that the key it has found
            will work with the product.
            
            </summary>
            <param name="aKey">
            </param>
            <param name="aProduct">
            </param>
            <param name="aVersion">
            </param>
            <param name="aTable">
            geoffk 20030711 0948
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKeyValidator.validate(System.String)">
            <summary> Determines if a key has expired.
            
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKeyValidator.validate(System.String,System.String,System.String,System.String)">
            <summary> Determines if a key has expired.
            
            </summary>
            <param name="aKey">
            </param>
            <param name="aDate">
            </param>
            <param name="aMonth">
            </param>
            <param name="aYear">
            </param>
            <throws>  LicenseKeyException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKeyValidator.validatePackage(System.String,System.Int32,System.Int32,SoftArtisans.OfficeWriter.Shared.ILicenseTable)">
            <summary> Checks to see if the key aKey has a product that is provided by aProduct.aVersion.
            
            This is designed to work with the installer, and checks to see if the key matches any of the products
            that this installer can provide.
            
            </summary>
            <param name="aKey">a key to validate.
            </param>
            <param name="aProduct">The product that should contain the product provided by aKey.
            </param>
            <param name="aVersion">The version of the product that should contain the product provided by aKey.
            </param>
            <param name="aTable">A table to look up the products in.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKeyValidator.validatePackage(System.String,System.Int32,System.Int32,SoftArtisans.OfficeWriter.Shared.ILicenseTable,System.String,System.String,System.String)">
            <summary> Checks to see if the key aKey has a product that is provided by aProduct.aVersion.
            
            This is designed to work with the installer, and checks to see if the key matches any of the products
            that this installer can provide.
            
            </summary>
            <param name="aKey">a key to validate.
            </param>
            <param name="aProduct">The product that should contain the product provided by aKey.
            </param>
            <param name="aVersion">The version of the product that should contain the product provided by aKey.
            </param>
            <param name="aTable">A table to look up the products in.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKeyValidator.hasExpired(SoftArtisans.OfficeWriter.Shared.ILicenseKey,System.String,System.String,System.String)">
            <summary> Checks whether the given key has expired.  This uses the
            <CODE>Calendar.getInstance()</CODE> to get the current
            date.
            
            </summary>
            <param name="key">the license key
            </param>
            <returns> true if the key has expired.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ProductDescription">
            <summary> Data class that holds information about a product.
            Right now, it's just product id and version pairs.
            
            </summary>
            <author>  geoffk
            Jul 10, 2003 2:32:51 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.CompareStrings.compareStrings(System.String,System.String)">
            <summary>
            Compare two strings based on the char value. This is legacy code
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DateUtils">
            <summary>
            Convert a DateTime to an Excel date number (which can be formatted to look like a date)
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DateUtils.ElapsedTime(System.Double)">
            <summary>
            Calulate elapsed time from Utc 1900
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DateUtils.calcExcelDate(System.DateTime)">
            <summary>
            Calculate a double from the DateTime.
            </summary>
            <param name="date">the DateTime of the day</param>
            <returns>number of days since Jan 1, 1900 UTC</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DateUtils.calcDateFromDouble(System.Double)">
            <summary>
            Calculate a DateTime from the double.
            </summary>
            <param name="date">number of days since Jan 1, 1900 UTC</param>
            <returns>the DateTime of the day</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EmptyEnumerable`1">
            <summary>
            A simle Enumerable object that has nothing to enumerate over.
            </summary>
            <note><code>MoveNext()</code> will always return false</note>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EmptyEnumerable`1.GetEnumerator">
            <summary>
            Gets the empty enumerator
            </summary>
            <returns>an <see cref="!:EmptyEnumerator"/></returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EmptyEnumerable`1.Instance">
            <summary>
            A Static instance of this enumerable object
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.IntTreeMap.mModificationCount">
            <summary>
            Keeps track of the number of modifications, so that Enumerators will be able 
            to throw an exception if something has been changed.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntTreeMap.lastEntry">
            <summary> Returns the last Entry in the TreeMap (according to the TreeMap's
            key-sort function). Returns null if the TreeMap is empty.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntTreeMap.successor(SoftArtisans.OfficeWriter.Shared.IntTreeMapEntry)">
            <summary> Returns the successor of the specified Entry, or null if no such.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntTreeMap.colorOf(SoftArtisans.OfficeWriter.Shared.IntTreeMapEntry)">
            <summary> Balancing operations.
            
            Implementations of rebalancings during insertion and deletion are
            slightly different than the CLR version. Rather than using dummy
            nilnodes, we use a set of accessors that deal properly with null. They
            are used to avoid messiness surrounding nullness checks in the main
            algorithms.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntTreeMap.rotateLeft(SoftArtisans.OfficeWriter.Shared.IntTreeMapEntry)">
            <summary>From CLR * </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntTreeMap.rotateRight(SoftArtisans.OfficeWriter.Shared.IntTreeMapEntry)">
            <summary>From CLR * </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntTreeMap.fixAfterInsertion(SoftArtisans.OfficeWriter.Shared.IntTreeMapEntry)">
            <summary>From CLR * </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntTreeMap.deleteEntry(SoftArtisans.OfficeWriter.Shared.IntTreeMapEntry)">
            <summary> Delete node p, and then rebalance the tree.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntTreeMap.fixAfterDeletion(SoftArtisans.OfficeWriter.Shared.IntTreeMapEntry)">
            <summary>From CLR * </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntTreeMapEntry.Clone(SoftArtisans.OfficeWriter.Shared.IntTreeMapEntry)">
            <summary>
            Does a deep copy of this node and all children nodes to a new <code>IntTreeMapEntry</code>
            </summary>
            <param name="newParent">the parent to be used for the clone entry</param>
            <returns>A deep clone of this node with the given parent.</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.JavaIterator`1">
            <summary>
            A simple class to emulate Iterators in Java, because sometimes 
            we want to be able to check if there is another element in our
            enumeration without advancing it.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.JavaIterator`1.mEnumerator">
            <summary>
            The underlying enumerator, this is where we get the actual objects
            from, and how we detremine if there are more elements
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.JavaIterator`1.mCalledMoveNext">
            <summary>
            Whether or not we have called MoveNext but not Current
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.JavaIterator`1.mHasNext">
            <summary>
            Whether or not there is a next element, since hasNext() should be
            callable multiple times in a row without advancing the enumerator
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.JavaIterator`1.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Creates a new Iterator from a given <code>IEnumerator</code>
            </summary>
            <param name="enumerator">the enumerator that will be used 
            for getting values and advancing</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.JavaIterator`1.HasNext">
            <summary>
            Checks whether there are any elements left in the enumeration
            </summary>
            <returns>true if there are any elements, false if all the 
            elements have been returned</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.JavaIterator`1.Next">
            <summary>
            Advances the iterator to the next position and returns the object 
            at that position. <code>HasNext()</code> should be called before 
            this.
            </summary>
            <returns>the object at the next position in the enumeration</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.MD5">
            <summary>
            TODO: figure out how to use the built-in MD5 class
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SoftArtisans.OfficeWriter.Shared.MiscUtils" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.MiscUtils.findFirstNotIn(System.String,System.String)">
            <summary> Utility method: find index of first character in str1,
            which is *not* present in str2.
            returns -1 if all characters in str1 are in the list.
            Special case for str1 == null: return -1.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.MiscUtils.findFirstStringDifference(System.String,System.String)">
            <summary> Utility method: find position of first different between two strings.
            returns -1 if no difference.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.MiscUtils.deleteFile(System.String)">
            <summary> Utility method: Delete a file via the file name, if it exists.
            If it didn't exist already, does nothing constructively.
            Throw if you can't remove it.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.MiscUtils.fileExists(System.String)">
            <summary> Utility method: does file exist?</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.MiscUtils.getFileInfo(System.String)">
            <summary> Utility method: get information about a file.
            Mostly useful in debugging messages.
            Does not throw.
            You can add to this: actually try to open file, read special system properties, etc.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.MiscUtils.stringFromReader(System.IO.StreamReader)">
            <summary>
            Reads the remaining contents of a StreamReader into a string and closes the reader.
            </summary>
            <remarks>If the reading operation fails, the reader will still be closed.</remarks>
            <param name="aReader">the Stream to be read in</param>
            <returns>the contents of the reader, or <code>null</code> if the file cannot be read</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.MiscUtils.stringFromFile(System.String)">
            <summary>
            Reads the contents of a file into a string
            </summary>
            <param name="filename">The filename of the file to be read in</param>
            <returns>the contents of the file or <code>null</code> if the file cannot be read successfully</returns>
            <seealso cref="T:System.IO.StreamReader"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.MiscUtils.stringToFile(System.String,System.String)">
            <summary> stringToFile
            
            Write string to a file.  Does not do anything about linefeeds.
            Always appends: maybe we should pass a flag.
            On error, returns a string.  Else returns null for no error.
            
            NOTE: Compare with writeFile(...), appendFile(...)
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.MiscUtils.writeFile(System.String,System.String)">
            <summary> Write a String to a text file .
            NOTE: Compare with stringToFile(...)
            Returns null is all is OK, else returns error message.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.MiscUtils.appendFile(System.String,System.String)">
            <summary> Append a string to a file
            NOTE: Compare with stringToFile(...)
            Returns null is all is OK, else returns error message.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.MiscUtils.copyStreamLeaveInputOpen(System.IO.Stream,System.IO.Stream)">
            <summary>  Copy one stream to another: close output only at end.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.MiscUtils.copyReaderLeaveInputOpen(System.IO.StreamReader,System.IO.StreamWriter)">
            <summary>  Copy one reader to a writer.  Close output at end.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.MiscUtils.copyStream(System.IO.Stream,System.IO.Stream)">
            <summary>  Copy one stream to another: close both at end.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.MiscUtils.copyReader(System.IO.StreamReader,System.IO.StreamWriter)">
            <summary> Copy one reader to a writer; close both at end.
            This is designed for Character streams.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.MiscUtils.findUnusedFilename(System.IO.FileInfo,System.Int32,System.Boolean,System.String)">
            <summary>FlorianM: return</summary>
            <param name="baseName">initial filename
            </param>
            <param name="maxNumber">maximum number to test for the pre/postfixe
            </param>
            <param name="prefix">if true, prefixe the number, if false, postfixe it
            </param>
            <param name="token">token to use between the baseName and the number
            </param>
            <returns> a valid unused filename or null if the maxNumber is reached
            without finding one
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.MiscUtils.UniqueString">
            <summary> Create a substring you can use for making up unique file names.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.NumberConverter">
            <summary>
            Contains a number of methods to convert numbers in the same manner as java.
            </summary>
            <remarks>These methods were grabbed from com.ms.vjsharp.util.Utilities</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.NumberConverter.FloatToInt(System.Single)">
            <summary>
            Convert the given float to an int; setting overflows to the max or min int value respectively
            </summary>
            <param name="f">the float to be converted</param>
            <returns>the int value of the given float</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.NumberConverter.FloatToLong(System.Single)">
            <summary>
            Convert the given float to an long; setting overflows to the max or min long value respectively
            </summary>
            <param name="f">the float to be converted</param>
            <returns>the long value of the given float</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.NumberConverter.DoubleToInt(System.Double)">
            <summary>
            Convert the given double to an int; setting overflows to the max or min int value respectively
            </summary>
            <param name="f">the double to be converted</param>
            <returns>the int value of the given double</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.NumberConverter.DoubleToLong(System.Double)">
            <summary>
            Convert the given double to an long; setting overflows to the max or min long value respectively
            </summary>
            <param name="f">the double to be converted</param>
            <returns>the long value of the given double</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ParserBase.advance">
            <summary>
            Move to next token
            </summary>
            <returns>false if there is no next token</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ParserBase.token">
            <summary>
            Gets the current token
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ParserBase.value">
            <summary>
            Gets the value of the output of the rule
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SAHexDump">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.SAHexDump.hexDump(System.SByte[],System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.SAHexDump.hexDump(System.Byte[],System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.SAHexDump.toBytes(System.String)">
            <summary> Converts a hex string to a sbyte array.</summary>
            <param name="aHexString">a hex string in the form "XX XX XX"
            </param>
            <returns> a sbyte array representing the Hex string.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SAHexDump.hexDump(System.SByte[],System.Int32,System.Int32)">
            <param name="data">
            </param>
            <param name="i">
            </param>
            <param name="j">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SAHexDump.DirtyHexStringtoBytes(System.String)">
            <summary>
            Convert a hex string to an sbyte array
            </summary>
            <param name="s">some string where characters A-F, a-f, and 0-9 are hex data,
            and everything else is ignored.
            
            it's assumed that hex digits come in pairs</param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SAPropertyBag">
            <summary> User: denisl Date: Jun 6, 2003 Time: 11:37:16 AM</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SAStringUtil.decodeExcelPath(System.String)">
            <summary> Given a String containing an encoded path, this method returns the 
            the encoded string.  The result should be identical or as close to 
            the string Excel would generate as possible.
            </summary>
            <param name="aString">the String to decode
            </param>
            <returns> the decoded string.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SAStringUtil.encodeExcelPath(System.String)">
            <summary> Given a String containing an path, this method returns the 
            the encoded string.  The result should be identical or as close to 
            the string Excel would generate as possible.
            </summary>
            <param name="aString">the String to decode
            </param>
            <returns> the decoded string.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SAStringUtil.decodeTo1Byte(System.String)">
            <summary> Converts a string into single-bytes by ruthlessly discarding the upper
            byte. Muhahah! Note: Should we throw an exception if the upper byte is
            non-zero?
            
            </summary>
            <param name="aStr">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SAStringUtil.decodeTo2ByteLE(System.String)">
            <summary> Converts a string into 2-byte unicode in Little Endian format.
            
            </summary>
            <param name="aStr">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SimpleStructuredWriter">
            <summary>
            This class is intended as a wrapper around either a StringBuilder or a TextWriter
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.SimpleStructuredWriter.commitBuffer">
            <summary>
            If this is not null, put everything in here. When commit() is called, this is flushed into
            the writer or builder and then set to null. begin() sets this to an empty StringBuilder
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler.addAttribute(System.String,System.String)">
            <summary> Add an attribute to the last open Item (begun with 
            {@link #beginItem(String)} and not yet ended with {@link #endItem()}.
            </summary>
            <param name="aName">the name of the attribute
            </param>
            <param name="aValue">the value of the attribute
            </param>
            <throws>  SARuntimeException if no Items are open. </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler.addItem(System.String,System.String)">
            <summary> Add an item containing a value rather than attributes and other Items to
            the last open Item.
            </summary>
            <param name="aName">the name of the item
            </param>
            <param name="aValue">the value of the item
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler.beginItem(System.String)">
            <summary> Begins a new Item inside the last open item</summary>
            <param name="aName">the name of the new Item
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IStructuredOutputHandler.endItem">
            <summary> Ends the last open item</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler">
            <summary> StructuredOutputHandler is used to create String representations of
            structured output.  It handles indentation and wraping items with proper
            XML tags.
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler.addAttribute(System.String,System.String)">
            <summary> Add an attribute to the last open Item (begun with 
            {@link #beginItem(String)} and not yet ended with {@link #endItem()}.
            </summary>
            <param name="aName">the name of the attribute
            </param>
            <param name="aValue">the value of the attribute
            </param>
            <throws>  SARuntimeException if no Items are open. </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler.addItem(System.String,System.String)">
            <summary> Add an item containing a value rather than attributes and other Items to
            the last open Item.
            </summary>
            <param name="aName">the name of the item
            </param>
            <param name="aValue">the value of the item
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler.beginItem(System.String)">
            <summary> Begins a new Item inside the last open item</summary>
            <param name="aName">the name of the new Item
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler.endItem">
            <summary> Ends the last open item</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler.ToString">
            <summary> Returns a String representation of the output that has been collected
            in this handler.
            </summary>
            <seealso cref="!:java.lang.Object#toString()">
            </seealso>
            <throws>  SARuntimeException if items have been opened but not closed </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler.toXml">
            <summary> Return an XML representation of the output that has been collected in
            this handler.
            </summary>
            <returns> an XML representation of the output that has been collected
            </returns>
            <throws>  SARuntimeException if items have been opened but not closed </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler.getOutput(System.Boolean)">
            <summary> Constructs and returns the output in this handler</summary>
            <param name="aIsXml">if <code>true</code> XML tags will wrap the output 
            otherwise a plain string is returned
            </param>
            <returns> a String or XML representation of the output in the handler
            </returns>
            <throws>  SARuntimeException if items have been opened but not closed </throws>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler.Attribute">
            <summary> Class that encapsulates the name-value pair that is a attribute</summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler.Attribute.#ctor(System.String,System.String)">
            <summary> Construct a new attribute with the specified name and value</summary>
            <param name="aName">the name of the attribute
            </param>
            <param name="aValue">the value of the attribute
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler.Attribute.writeString(SoftArtisans.OfficeWriter.Shared.SimpleStructuredWriter)">
            <summary> Writes the attribute to the specified buffer as a plain String.</summary>
            <param name="aBuff">the buffer to write to
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler.Attribute.writeXml(SoftArtisans.OfficeWriter.Shared.SimpleStructuredWriter)">
            <summary> Writes the attribute to the specified buffer as XML</summary>
            <param name="aBuff">the buffer to write to
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler.Item">
            <summary> The Item class encapsulates a single block of output, analagous to a 
            node in XML.  The item class may contain either a value string or zero 
            or more Items or Attributes.
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler.Item.#ctor(SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler.Item,System.String,System.String)">
            <summary> Construct a new Item with the given name</summary>
            <param name="aName">the name of the Item
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler.Item.#ctor(SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler.Item,System.String,System.String,System.String)">
            <summary> Construct a new Item with the given Name and value</summary>
            <param name="aName">the name of the Item
            </param>
            <param name="aValue">the Value of the Item
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler.Item.addItem(SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler.Item)">
            <summary> Adds an Item to the body of this Item</summary>
            <param name="aItem">the Item to add
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler.Item.addAttribute(SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler.Attribute)">
            <summary> Adds an attribute to the body of this Item</summary>
            <param name="anAttribute">the Attribute to add.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler.Item.writeBeginningString(SoftArtisans.OfficeWriter.Shared.SimpleStructuredWriter)">
            <summary> Writes the output of this Item and its contents to the specified
            StringBuffer as either a plain String format.
            </summary>
            <param name="writer">the StringBuffer to write to
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler.Item.writeBeginningXml(SoftArtisans.OfficeWriter.Shared.SimpleStructuredWriter)">
            <summary> Writes the output of this Item and its contents to the specified
            StringBuffer as XML.
            </summary>
            <param name="writer">the StringBuffer to write to
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StructuredOutputHandler.Item.addIndent(SoftArtisans.OfficeWriter.Shared.SimpleStructuredWriter)">
            <summary> Helper method to insert the proper indention in the specified buffer.</summary>
            <param name="writer">the buffer to add indentation to
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.StructuredOutputWriter">
            <summary> 
            Used like StructuredOutputHandler, but this doesn't keep anything
            in memory that doesn't need to be in memory
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StructuredOutputWriter.addAttribute(System.String,System.String)">
            <summary> Add an attribute to the last open Item (begun with 
            {@link #beginItem(String)} and not yet ended with {@link #endItem()}.
            </summary>
            <param name="aName">the name of the attribute
            </param>
            <param name="aValue">the value of the attribute
            </param>
            <throws>  SARuntimeException if no Items are open. </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StructuredOutputWriter.addItem(System.String,System.String)">
            <summary> Add an item containing a value rather than attributes and other Items to
            the last open Item.
            </summary>
            <param name="aName">the name of the item
            </param>
            <param name="aValue">the value of the item
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StructuredOutputWriter.beginItem(System.String)">
            <summary> Begins a new Item inside the last open item</summary>
            <param name="aName">the name of the new Item
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StructuredOutputWriter.endItem">
            <summary> Ends the last open item</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.TransactionOutputHandler">
            <summary>
            Stores a list of function calls for IStructuredOutputHandlers, and replays them later. This is used
            to facilitate transactional commits
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.YaccInputScanner">
            <summary>
            This is used in the yacc-based parsers to provide a yacc-like wrapper around the Scanner interface we
            already have
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.Symbol">
            <summary> Defines the Symbol class, which is used to represent all terminals
            and nonterminals while parsing.  The lexer should pass CUP Symbols 
            and CUP returns a Symbol.
            
            </summary>
            <version>  last updated: 7/3/96
            </version>
            <author>   Frank Flannery
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Symbol.#ctor(System.Int32,System.Object)">
            <summary>
            Constructor for no l,r values
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Symbol.#ctor(System.Int32)">
            <summary>Constructor for no value or l,r
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.Symbol.sym">
            <summary>The symbol number of the terminal or non terminal being represented </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.Symbol.value">
            <summary>
            The data passed to parser
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Symbol.ToString">
            <summary>
            Printing this token out. (Override for pretty-print).
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ClassID">
            <summary>  <p>Represents a class ID (16 bytes). Unlike other little-endian
            type the {@link ClassID} is not just 16 bytes stored in the wrong
            order. Instead, it is a double word (4 bytes) followed by two
            words (2 bytes each) followed by 8 bytes.</p>
            
            </summary>
            <author>  Rainer Klute <a
            href="mailto:klute@rainer-klute.de">&lt;klute@rainer-klute.de&gt;</a>
            </author>
            <version>  $Id: ClassID.java,v 1.10 2003/10/31 16:39:05 avik Exp $
            </version>
            <since> 2002-02-09
            </since>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ClassID.LENGTH">
            <summary><p>The number of bytes occupied by this object in the byte
            stream.</p> 
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ClassID.bytes">
            <summary> <p>The bytes making out the class ID in correct order,
            i.e. big-endian.</p>
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ClassID.#ctor(System.SByte[],System.Int32)">
            <summary>  <p>Creates a {@link ClassID} and reads its value from a byte
            array.</p>
            
            </summary>
            <param name="src">The byte array to read from.
            </param>
            <param name="offset">The offset of the first byte to read.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ClassID.#ctor">
            <summary>  <p>Creates a {@link ClassID} and initializes its value with
            0x00 bytes.</p>
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ClassID.write(System.SByte[],System.Int32)">
            <summary> <p>Writes the class ID to a byte array in the
            little-endian.</p>
            
            </summary>
            <param name="dst">The byte array to write to.
            
            </param>
            <param name="offset">The offset within the <var>dst</var> byte array.
            
            </param>
            <exception cref="!:ArrayStoreException"> if there is not enough room for the class
            ID 16 bytes in the byte array after the <var>offset</var> position.
            </exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.ClassID.Equals(System.Object)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.ClassID.ToString">
            <summary> Returns a human readable representation of the Class ID
            in standard format <code>"{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}"</code>
            </summary>
            <returns> String representation of the Class ID represented
            by this object.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ClassID.GetHashCode">
            <seealso cref="!:Object.hashCode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ClassID.Bytes">
            <summary> <p>Gets the bytes making out the class ID. They are returned in
            correct order, i.e. big-endian.</p>
            
            </summary>
            <returns> the bytes making out the class ID.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ClassID.Length">
            <returns> The number of bytes occupied by this object in the byte
            stream.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSConstants">
            <summary> <p>A repository for constants shared by POI classes.</p>
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSViewable">
            <summary> Interface for a drill-down viewable object. Such an object has
            content that may or may not be displayed, at the discretion of the
            viewer. The content is returned to the viewer as an array or as an
            Iterator, and the object provides a clue as to which technique the
            viewer should use to get its content.
            
            A POIFSViewable object is also expected to provide a short
            description of itself, that can be used by a viewer when the
            viewable object is collapsed.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSViewable.preferArray">
            <summary> Give viewers a hint as to whether to call getViewableArray or
            getViewableIterator
            
            </summary>
            <returns> true if a viewer should call getViewableArray, false if
            a viewer should call getViewableIterator
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSViewable.ViewableArray">
            <summary> Get an array of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an array of Object; may not be null, but may be empty
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSViewable.ViewableIterator">
            <summary> Get an Iterator of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an Iterator; may not be null, but may have an empty
            back end store
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSViewable.ShortDescription">
            <summary> Provides a short description of the object, to be used when a
            POIFSViewable object has not provided its contents.
            
            </summary>
            <returns> short description
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.BATManaged">
            <summary> This interface defines behaviors for objects managed by the Block
            Allocation Table (BAT).
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BATManaged.countBlocks">
            <summary> Return the number of BigBlock's this instance uses
            
            </summary>
            <returns> count of BigBlock instances
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BATManaged.setStartBlock(System.Int32)">
            <summary> Set the start block for this instance
            
            </summary>
            <param name="index">index into the array of BigBlock instances making
            up the the filesystem
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.BATManaged.DocumentWithNoData">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.BATManagedAndBlockWritable">
            <summary>
            This class implements BATManaged and BlockWritable. It's used to make handling classes which implement
            both of those easier
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.BlockWritable">
            <summary> An interface for persisting block storage of POIFS components.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockWritable.writeBlocks(System.IO.Stream)">
            <summary> Write the storage to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
            <exception cref="!:IOException"> on problems writing to the specified
            stream
            </exception>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DirectoryEntry">
            <summary> This interface defines methods specific to Directory objects
            managed by a Filesystem instance.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.Entry">
            <summary> This interface provides access to an object managed by a Filesystem
            instance. Entry objects are further divided into DocumentEntry and
            DirectoryEntry instances.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Entry.delete">
            <summary> Delete this Entry. This operation should succeed, but there are
            special circumstances when it will not:
            
            If this Entry is the root of the Entry tree, it cannot be
            deleted, as there is no way to create another one.
            
            If this Entry is a directory, it cannot be deleted unless it is
            empty.
            
            </summary>
            <returns> true if the Entry was successfully deleted, else false
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Entry.renameTo(System.String)">
            <summary> Rename this Entry. This operation will fail if:
            
            There is a sibling Entry (i.e., an Entry whose parent is the
            same as this Entry's parent) with the same name.
            
            This Entry is the root of the Entry tree. Its name is dictated
            by the Filesystem and many not be changed.
            
            </summary>
            <param name="newName">the new name for this Entry
            
            </param>
            <returns> true if the operation succeeded, else false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Entry.Name">
            <summary> get the name of the Entry
            
            </summary>
            <returns> name
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Entry.DirectoryEntry">
            <summary> is this a DirectoryEntry?
            
            </summary>
            <returns> true if the Entry is a DirectoryEntry, else false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Entry.DocumentEntry">
            <summary> is this a DocumentEntry?
            
            </summary>
            <returns> true if the Entry is a DocumentEntry, else false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Entry.Parent">
            <summary> get this Entry's parent (the DirectoryEntry that owns this
            Entry). All Entry objects, except the root Entry, has a parent.
            
            </summary>
            <returns> this Entry's parent; null iff this is the root Entry
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryEntry.getEntry(System.String)">
            <summary> get a specified Entry by name
            
            </summary>
            <param name="name">the name of the Entry to obtain.
            
            </param>
            <returns> the specified Entry, if it is directly contained in
            this DirectoryEntry
            
            </returns>
            <exception cref="!:FileNotFoundException"> if no Entry with the specified
            name exists in this DirectoryEntry
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryEntry.HasEntry(System.String)">
            <summary>
            Returns whether the specified entry exists in this directory
            </summary>
            <param name="name">the name of the Entry to obtain.</param>
            <returns><c>true</c> if the specified entry is in this directory; <c>false</c> otherwise
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryEntry.createDocument(System.String,System.IO.Stream)">
            <summary> create a new DocumentEntry
            
            </summary>
            <param name="name">the name of the new DocumentEntry
            </param>
            <param name="stream">the InputStream from which to create the new
            DocumentEntry
            
            </param>
            <returns> the new DocumentEntry
            
            </returns>
            <exception cref="!:IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryEntry.createDocument(System.String,System.Int32,SoftArtisans.OfficeWriter.Shared.POIFSWriterListener)">
            <summary> create a new DocumentEntry; the data will be provided later
            
            </summary>
            <param name="name">the name of the new DocumentEntry
            </param>
            <param name="size">the size of the new DocumentEntry
            </param>
            <param name="writer">the writer of the new DocumentEntry
            
            </param>
            <returns> the new DocumentEntry
            
            </returns>
            <exception cref="!:IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryEntry.createDirectory(System.String)">
            <summary> create a new DirectoryEntry
            
            </summary>
            <param name="name">the name of the new DirectoryEntry
            
            </param>
            <returns> the new DirectoryEntry
            
            </returns>
            <exception cref="!:IOException">
            </exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryEntry.Entries">
            <summary> get an iterator of the Entry instances contained directly in
            this instance (in other words, children only; no grandchildren
            etc.)
            
            </summary>
            <returns> iterator; never null, but hasNext() may return false
            immediately (i.e., this DirectoryEntry is empty). All
            objects retrieved by next() are guaranteed to be
            implementations of Entry.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryEntry.Empty">
            <summary> is this DirectoryEntry empty?
            
            </summary>
            <returns> true if this instance contains no Entry instances
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryEntry.EntryCount">
            <summary> find out how many Entry instances are contained directly within
            this DirectoryEntry
            
            </summary>
            <returns> number of immediately (no grandchildren etc.) contained
            Entry instances
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryEntry.StorageClsid">
            <summary> Gets the storage clsid of the directory entry
            
            </summary>
            <returns> storage Class ID
            </returns>
            <summary> Sets the storage clsid for the directory entry
            
            </summary>
            <param name="clsidStorage">storage Class ID
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DirectoryNode">
            <summary> Simple implementation of DirectoryEntry
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EntryNode">
            <summary> Abstract implementation of Entry
            
            Extending classes should override isDocument() or isDirectory(), as
            appropriate
            
            Extending classes must override isDeleteOK()
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EntryNode._property">
            <summary>
             the DocumentProperty backing this object
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EntryNode._parent">
            <summary>
             this object's parent Entry
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EntryNode.#ctor(SoftArtisans.OfficeWriter.Shared.Property,SoftArtisans.OfficeWriter.Shared.DirectoryNode)">
            <summary> create a DocumentNode. This method is not public by design; it
            is intended strictly for the internal use of extending classes
            
            </summary>
            <param name="property">the Property for this Entry
            </param>
            <param name="parent">the parent of this entry
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EntryNode.delete">
            <summary> Delete this Entry. This operation should succeed, but there are
            special circumstances when it will not:
            
            If this Entry is the root of the Entry tree, it cannot be
            deleted, as there is no way to create another one.
            
            If this Entry is a directory, it cannot be deleted unless it is
            empty.
            
            </summary>
            <returns> true if the Entry was successfully deleted, else false
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EntryNode.renameTo(System.String)">
            <summary> Rename this Entry. This operation will fail if:
            
            There is a sibling Entry (i.e., an Entry whose parent is the
            same as this Entry's parent) with the same name.
            
            This Entry is the root of the Entry tree. Its name is dictated
            by the Filesystem and many not be changed.
            
            </summary>
            <param name="newName">the new name for this Entry
            
            </param>
            <returns> true if the operation succeeded, else false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EntryNode.Property">
            <summary> grant access to the property
            
            </summary>
            <returns> the property backing this entry
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EntryNode.Root">
            <summary> is this the root of the tree?
            
            </summary>
            <returns> true if so, else false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EntryNode.DeleteOK">
            <summary> extensions use this method to verify internal rules regarding
            deletion of the underlying store.
            
            </summary>
            <returns> true if it's ok to delete the underlying store, else
            false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EntryNode.Name">
            <summary> get the name of the Entry
            
            </summary>
            <returns> name
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EntryNode.DirectoryEntry">
            <summary> is this a DirectoryEntry?
            
            </summary>
            <returns> true if the Entry is a DirectoryEntry, else false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EntryNode.DocumentEntry">
            <summary> is this a DocumentEntry?
            
            </summary>
            <returns> true if the Entry is a DocumentEntry, else false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EntryNode.Parent">
            <summary> get this Entry's parent (the DocumentEntry that owns this
            Entry). All Entry objects, except the root Entry, has a parent.
            
            </summary>
            <returns> this Entry's parent; null iff this is the root Entry
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryNode.#ctor(SoftArtisans.OfficeWriter.Shared.DirectoryProperty,SoftArtisans.OfficeWriter.Shared.POIFSFileSystem,SoftArtisans.OfficeWriter.Shared.DirectoryNode)">
            <summary> create a DirectoryNode. This method is not public by design; it
            is intended strictly for the internal use of this package
            
            </summary>
            <param name="property">the DirectoryProperty for this DirectoryEntry
            </param>
            <param name="filesystem">the POIFSFileSystem we belong to
            </param>
            <param name="parent">the parent of this entry
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryNode.getEntry(System.String)">
            <summary> get a specified Entry by name
            
            </summary>
            <param name="name">the name of the Entry to obtain.
            
            </param>
            <returns> the specified Entry, if it is directly contained in
            this DirectoryEntry
            
            </returns>
            <exception cref="T:System.IO.FileNotFoundException"> if no Entry with the specified
            name exists in this DirectoryEntry
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryNode.HasEntry(System.String)">
            <summary>
            Returns whether the specified entry exists in this directory
            </summary>
            <param name="name">the name of the Entry to obtain.</param>
            <returns><c>true</c> if the specified entry is in this directory; <c>false</c> otherwise
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryNode.createDocument(System.String,System.IO.Stream)">
            <summary> create a new DocumentEntry
            
            </summary>
            <param name="name">the name of the new DocumentEntry
            </param>
            <param name="stream">the InputStream from which to create the new
            DocumentEntry
            
            </param>
            <returns> the new DocumentEntry
            
            </returns>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryNode.createDocument(System.String,System.Int32,SoftArtisans.OfficeWriter.Shared.POIFSWriterListener)">
            <summary> create a new DocumentEntry; the data will be provided later
            
            </summary>
            <param name="name">the name of the new DocumentEntry
            </param>
            <param name="size">the size of the new DocumentEntry
            </param>
            <param name="writer">the writer of the new DocumentEntry
            
            </param>
            <returns> the new DocumentEntry
            
            </returns>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryNode.createDirectory(System.String)">
            <summary> create a new DirectoryEntry
            
            </summary>
            <param name="name">the name of the new DirectoryEntry
            
            </param>
            <returns> the new DirectoryEntry
            
            </returns>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryNode.preferArray">
            <summary> Give viewers a hint as to whether to call getViewableArray or
            getViewableIterator
            
            </summary>
            <returns> true if a viewer should call getViewableArray, false if
            a viewer should call getViewableIterator
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryNode.createDocument(SoftArtisans.OfficeWriter.Shared.POIFSDocument)">
            <summary> create a new DocumentEntry
            
            </summary>
            <param name="document">the new document
            
            </param>
            <returns> the new DocumentEntry
            
            </returns>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryNode.changeName(System.String,System.String)">
            <summary> Change a contained Entry's name
            
            </summary>
            <param name="oldName">the original name
            </param>
            <param name="newName">the new name
            
            </param>
            <returns> true if the operation succeeded, else false
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryNode.deleteEntry(SoftArtisans.OfficeWriter.Shared.EntryNode)">
            <summary> Delete an entry
            
            </summary>
            <param name="entry">the EntryNode to be deleted
            
            </param>
            <returns> true if the entry was deleted, else false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryNode.Path">
            <returns> this directory's path representation
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryNode.DeleteOK">
            <summary> extensions use this method to verify internal rules regarding
            deletion of the underlying store.
            
            </summary>
            <returns> true if it's ok to delete the underlying store, else
            false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryNode.Entries">
            <summary> get an iterator of the Entry instances contained directly in
            this instance (in other words, children only; no grandchildren
            etc.)
            
            </summary>
            <returns> iterator; never null, but hasNext() may return false
            immediately (i.e., this DirectoryEntry is empty). All
            objects retrieved by next() are guaranteed to be
            implementations of Entry.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryNode.Empty">
            <summary> is this DirectoryEntry empty?
            
            </summary>
            <returns> true if this instance contains no Entry instances
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryNode.EntryCount">
            <summary> find out how many Entry instances are contained directly within
            this DirectoryEntry
            
            </summary>
            <returns> number of immediately (no grandchildren etc.) contained
            Entry instances
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryNode.StorageClsid">
            <summary> Gets the storage clsid of the directory entry
            
            </summary>
            <returns> storage Class ID
            </returns>
            <summary> Sets the storage clsid for the directory entry
            
            </summary>
            <param name="clsidStorage">storage Class ID
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryNode.DirectoryEntry">
            <summary> is this a DirectoryEntry?
            
            </summary>
            <returns> true if the Entry is a DirectoryEntry, else false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryNode.ViewableArray">
            <summary> Get an array of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an array of Object; may not be null, but may be empty
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryNode.ViewableIterator">
            <summary> Get an Iterator of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an Iterator; may not be null, but may have an empty
            back end store
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryNode.ShortDescription">
            <summary> Provides a short description of the object, to be used when a
            POIFSViewable object has not provided its contents.
            
            </summary>
            <returns> short description
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DocumentEntry">
            <summary> This interface defines methods specific to Document objects
            managed by a Filesystem instance.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DocumentEntry.Size">
            <summary> get the size of the document, in bytes
            
            </summary>
            <returns> size in bytes
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DocumentInputStream">
            <summary> This class provides methods to read a DocumentEntry managed by a
            Filesystem instance.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentInputStream.#ctor(SoftArtisans.OfficeWriter.Shared.DocumentEntry)">
            <summary> Create an InputStream from the specified DocumentEntry
            
            </summary>
            <param name="document">the DocumentEntry to be read
            
            </param>
            <exception cref="T:System.IO.IOException"> if the DocumentEntry cannot be opened
            (like, maybe it has been deleted?)
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentInputStream.#ctor(SoftArtisans.OfficeWriter.Shared.POIFSDocument)">
            <summary> Create an InputStream from the specified Document
            
            </summary>
            <param name="document">the Document to be read
            
            </param>
            <exception cref="T:System.IO.IOException"> if the DocumentEntry cannot be opened
            (like, maybe it has been deleted?)
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentInputStream.available">
            <summary> Returns the number of bytes that can be read (or skipped over)
            from this input stream without blocking by the next caller of a
            method for this input stream. The next caller might be the same
            thread or or another thread.
            
            </summary>
            <returns> the number of bytes that can be read from this input
            stream without blocking.
            
            </returns>
            <exception cref="T:System.IO.IOException"> on error (such as the stream has been
            closed)
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentInputStream.Close">
            <summary> Closes this input stream and releases any system resources
            associated with the stream.
            
            </summary>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DocumentInputStream.mark(System.Int32)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentInputStream.markSupported">
            <summary> Tests if this input stream supports the mark and reset methods.
            
            </summary>
            <returns> true
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentInputStream.ReadByte">
            <summary> Reads the next byte of data from the input stream. The value
            byte is returned as an int in the range 0 to 255. If no byte is
            available because the end of the stream has been reached, the
            value -1 is returned. The definition of this method in
            java.io.InputStream allows this method to block, but it won't.
            
            </summary>
            <returns> the next byte of data, or -1 if the end of the stream
            is reached.
            
            </returns>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DocumentInputStream.read(System.SByte[])" -->
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DocumentInputStream.read(System.SByte[],System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DocumentInputStream.reset" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentInputStream.skip(System.Int64)">
            <summary> Skips over and discards n bytes of data from this input
            stream. The skip method may, for a variety of reasons, end up
            skipping over some smaller number of bytes, possibly 0. This
            may result from any of a number of conditions; reaching end of
            file before n bytes have been skipped is only one
            possibility. The actual number of bytes skipped is returned. If
            n is negative, no bytes are skipped.
            
            </summary>
            <param name="n">the number of bytes to be skipped.
            
            </param>
            <returns> the actual number of bytes skipped.
            
            </returns>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DocumentNode">
            <summary> Simple implementation of DocumentEntry
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentNode.#ctor(SoftArtisans.OfficeWriter.Shared.DocumentProperty,SoftArtisans.OfficeWriter.Shared.DirectoryNode)">
            <summary> create a DocumentNode. This method is not public by design; it
            is intended strictly for the internal use of this package
            
            </summary>
            <param name="property">the DocumentProperty for this DocumentEntry
            </param>
            <param name="parent">the parent of this entry
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentNode.preferArray">
            <summary> Give viewers a hint as to whether to call getViewableArray or
            getViewableIterator
            
            </summary>
            <returns> true if a viewer should call getViewableArray, false if
            a viewer should call getViewableIterator
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DocumentNode.Document">
            <summary> get the POIFSDocument
            
            </summary>
            <returns> the internal POIFSDocument
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DocumentNode.Size">
            <summary> get the zize of the document, in bytes
            
            </summary>
            <returns> size in bytes
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DocumentNode.DocumentEntry">
            <summary> is this a DocumentEntry?
            
            </summary>
            <returns> true if the Entry is a DocumentEntry, else false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DocumentNode.DeleteOK">
            <summary> extensions use this method to verify internal rules regarding
            deletion of the underlying store.
            
            </summary>
            <returns> true if it's ok to delete the underlying store, else
            false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DocumentNode.ViewableArray">
            <summary> Get an array of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an array of Object; may not be null, but may be empty
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DocumentNode.ViewableIterator">
            <summary> Get an Iterator of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an Iterator; may not be null, but may have an empty
            back end store
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DocumentNode.ShortDescription">
            <summary> Provides a short description of the object, to be used when a
            POIFSViewable object has not provided its contents.
            
            </summary>
            <returns> short description
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DocumentOutputStream">
            <summary> This class provides a wrapper over an OutputStream so that Document
            writers can't accidently go over their size limits
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary> Create a DocumentOutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the data is actually
            read
            </param>
            <param name="limit">the maximum number of bytes that can be written
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentOutputStream.WriteByte(System.Byte)">
            <summary> Writes the specified byte to this output stream. The general
            contract for write is that one byte is written to the output
            stream. The byte to be written is the eight low-order bits of
            the argument b. The 24 high-order bits of b are ignored.
            
            </summary>
            <param name="b">the byte.
            </param>
            <exception cref="T:System.IO.IOException"> if an I/O error occurs. In particular,
            an IOException may be thrown if the
            output stream has been closed, or if the
            writer tries to write too much data.
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentOutputStream.write(System.SByte[])">
            <summary> Writes b.length bytes from the specified byte array
            to this output stream.
            
            </summary>
            <param name="b">the data.
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DocumentOutputStream.Write(System.Byte[],System.Int32,System.Int32)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentOutputStream.Flush">
            <summary> Flushes this output stream and forces any buffered output bytes
            to be written out.
            
            </summary>
            <exception cref="T:System.IO.IOException"> if an I/O error occurs.
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentOutputStream.Close">
            <summary> Closes this output stream and releases any system resources
            associated with this stream. The general contract of close is
            that it closes the output stream. A closed stream cannot
            perform output operations and cannot be reopened.
            
            </summary>
            <exception cref="T:System.IO.IOException"> if an I/O error occurs.
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentOutputStream.writeFiller(System.Int32,System.SByte)">
            <summary> write the rest of the document's data (fill in at the end)
            
            </summary>
            <param name="totalLimit">the actual number of bytes the corresponding
            document must fill
            </param>
            <param name="fill">the byte to fill remaining space with
            
            </param>
            <exception cref="T:System.IO.IOException"> on I/O error
            </exception>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSDocument">
            <summary> This class manages a document in the POIFS filesystem.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.#ctor(System.String,SoftArtisans.OfficeWriter.Shared.RawDataBlock[],System.Int32)">
            <summary> Constructor from large blocks
            
            </summary>
            <param name="name">the name of the POIFSDocument
            </param>
            <param name="blocks">the big blocks making up the POIFSDocument
            </param>
            <param name="length">the actual length of the POIFSDocument
            
            </param>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.#ctor(System.String,SoftArtisans.OfficeWriter.Shared.SmallDocumentBlock[],System.Int32)">
            <summary> Constructor from small blocks
            
            </summary>
            <param name="name">the name of the POIFSDocument
            </param>
            <param name="blocks">the small blocks making up the POIFSDocument
            </param>
            <param name="length">the actual length of the POIFSDocument
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.#ctor(System.String,SoftArtisans.OfficeWriter.Shared.ListManagedBlock[],System.Int32)">
            <summary> Constructor from small blocks
            
            </summary>
            <param name="name">the name of the POIFSDocument
            </param>
            <param name="blocks">the small blocks making up the POIFSDocument
            </param>
            <param name="length">the actual length of the POIFSDocument
            
            </param>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.#ctor(System.String,System.IO.Stream)">
            <summary> Constructor
            
            </summary>
            <param name="name">the name of the POIFSDocument
            </param>
            <param name="stream">the InputStream we read data from
            
            </param>
            <exception cref="T:System.IO.IOException"> thrown on read errors
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.#ctor(System.String,System.Int32,SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath,SoftArtisans.OfficeWriter.Shared.POIFSWriterListener)">
            <summary> Constructor
            
            </summary>
            <param name="name">the name of the POIFSDocument
            </param>
            <param name="size">the length of the POIFSDocument
            </param>
            <param name="path">the path of the POIFSDocument
            </param>
            <param name="writer">the writer who will eventually write the document
            contents
            
            </param>
            <exception cref="T:System.IO.IOException"> thrown on read errors
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.read(System.SByte[],System.Int32)">
            <summary> read data from the internal stores
            
            </summary>
            <param name="buffer">the buffer to write to
            </param>
            <param name="offset">the offset into our storage to read from
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.writeBlocks(System.IO.Stream)">
            <summary> Write the storage to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
            <exception cref="T:System.IO.IOException"> on problems writing to the specified
            stream
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.countBlocks">
            <summary> Return the number of BigBlock's this instance uses
            
            </summary>
            <returns> count of BigBlock instances
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.setStartBlock(System.Int32)">
            <summary> Set the start block for this instance
            
            </summary>
            <param name="index">index into the array of blocks making up the
            filesystem
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.preferArray">
            <summary> Give viewers a hint as to whether to call getViewableArray or
            getViewableIterator
            
            </summary>
            <returns> true if a viewer should call getViewableArray, false if
            a viewer should call getViewableIterator
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSDocument.SmallBlocks">
            <summary> return the array of SmallDocumentBlocks used
            
            </summary>
            <returns> array of SmallDocumentBlocks; may be empty, cannot be null
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSDocument.Size">
            <returns> size of the document
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSDocument.DocumentProperty">
            <summary> Get the DocumentProperty
            
            </summary>
            <returns> the instance's DocumentProperty
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSDocument.ViewableArray">
            <summary> Get an array of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an array of Object; may not be null, but may be empty
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSDocument.ViewableIterator">
            <summary> Get an Iterator of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an Iterator; may not be null, but may have an empty
            back end store
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSDocument.ShortDescription">
            <summary> Provides a short description of the object, to be used when a
            POIFSViewable object has not provided its contents.
            
            </summary>
            <returns> short description
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.SmallBlockStore.#ctor(System.Object[])">
            <summary> Constructor
            
            </summary>
            <param name="blocks">blocks to construct the store from
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.SmallBlockStore.#ctor(SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath,System.String,System.Int32,SoftArtisans.OfficeWriter.Shared.POIFSWriterListener)">
            <summary> Constructor for a small block store that will be written
            later
            
            </summary>
            <param name="path">path of the document
            </param>
            <param name="name">name of the document
            </param>
            <param name="size">length of the document
            </param>
            <param name="writer">the object that will eventually write the document
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSDocument.SmallBlockStore.Valid">
            <returns> true if this store is a valid source of data
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSDocument.SmallBlockStore.Blocks">
            <returns> the SmallDocumentBlocks
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.BigBlockStore.#ctor(System.Object[])">
            <summary> Constructor
            
            </summary>
            <param name="blocks">the blocks making up the store
            
            </param>
            <exception cref="T:System.IO.IOException"> on I/O error
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.BigBlockStore.#ctor(SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath,System.String,System.Int32,SoftArtisans.OfficeWriter.Shared.POIFSWriterListener)">
            <summary> Constructor for a big block store that will be written
            later
            
            </summary>
            <param name="path">path of the document
            </param>
            <param name="name">name of the document
            </param>
            <param name="size">length of the document
            </param>
            <param name="writer">the object that will eventually write the
            document
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.BigBlockStore.writeBlocks(System.IO.Stream)">
            <summary> write the blocks to a stream
            
            </summary>
            <param name="stream">the stream to which the data is to be written
            
            </param>
            <exception cref="T:System.IO.IOException"> on error
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.BigBlockStore.countBlocks">
            <returns> number of big blocks making up this document
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSDocument.BigBlockStore.Valid">
            <returns> true if this store is a valid source of data
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSDocument.BigBlockStore.Blocks">
            <returns> the DocumentBlocks
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath">
            <summary> Class POIFSDocumentPath
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
            <version>  %I%, %G%
            </version>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath.#ctor(System.String[])" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath.#ctor">
            <summary> simple constructor for the path of a document that is in the
            root of the POIFSFileSystem. The constructor that takes an
            array of Strings can also be used to create such a
            POIFSDocumentPath by passing it a null or empty String array
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath.#ctor(SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath,System.String[])">
            <summary> constructor that adds additional subdirectories to an existing
            path
            
            </summary>
            <param name="path">the existing path
            </param>
            <param name="components">the additional subdirectory names to be added
            
            </param>
            <exception cref="!:IllegalArgumentException"> if any of the Strings in
            components is null or zero
            length
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath.Equals(System.Object)">
            <summary> equality. Two POIFSDocumentPath instances are equal if they
            have the same number of component Strings, and if each
            component String is equal to its coresponding component String
            
            </summary>
            <param name="o">the object we're checking equality for
            
            </param>
            <returns> true if the object is equal to this object
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath.GetHashCode">
            <summary> calculate and return the hashcode
            
            </summary>
            <returns> hashcode
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath.length">
            <returns> the number of components
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath.getComponent(System.Int32)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath.ToString">
            <summary> <p>Returns a string representation of the path. Components are
            separated by the platform-specific file separator.</p>
            
            </summary>
            <author>  Rainer Klute (klute@rainer-klute.de)
            </author>
            <since> 2002-01-24
            
            </since>
            <returns> string representation
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath.Parent">
            <summary> <p>Returns the path's parent or <code>null</code> if this path
            is the root path.</p>
            
            </summary>
            <author>  Rainer Klute (klute@rainer-klute.de)
            </author>
            <since> 2002-01-24
            
            </since>
            <returns> path of parent, or null if this path is the root path
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem">
            <summary> This is the main class of the POIFS system; it manages the entire
            life cycle of the filesystem.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.#ctor(SoftArtisans.OfficeWriter.Shared.ClassID)">
            <summary> Constructor, intended for writing</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.#ctor(System.IO.Stream,SoftArtisans.OfficeWriter.Shared.ClassID)">
            <summary> Create a POIFSFileSystem from an InputStream
            
            </summary>
            <param name="stream">the InputStream from which to read the data
            
            </param>
            <exception cref="!:IOException"> on errors reading, or on invalid data
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.createDocument(System.IO.Stream,System.String)">
            <summary> Create a new document to be added to the root directory
            
            </summary>
            <param name="stream">the InputStream from which the document's data
            will be obtained
            </param>
            <param name="name">the name of the new POIFSDocument
            
            </param>
            <returns> the new DocumentEntry
            
            </returns>
            <exception cref="!:IOException"> on error creating the new POIFSDocument
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.createDocument(System.String,System.Int32,SoftArtisans.OfficeWriter.Shared.POIFSWriterListener)">
            <summary> create a new DocumentEntry in the root entry; the data will be
            provided later
            
            </summary>
            <param name="name">the name of the new DocumentEntry
            </param>
            <param name="size">the size of the new DocumentEntry
            </param>
            <param name="writer">the writer of the new DocumentEntry
            
            </param>
            <returns> the new DocumentEntry
            
            </returns>
            <exception cref="!:IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.createDirectory(System.String)">
            <summary> create a new DirectoryEntry in the root directory
            
            </summary>
            <param name="name">the name of the new DirectoryEntry
            
            </param>
            <returns> the new DirectoryEntry
            
            </returns>
            <exception cref="!:IOException"> on name duplication
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.writeFilesystem(System.IO.Stream)">
            <summary> Write the filesystem out
            
            </summary>
            <param name="stream">the OutputStream to which the filesystem will be
            written
            
            </param>
            <exception cref="!:IOException"> thrown on errors writing to the stream
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.Main(System.String[])">
            <summary> read in a file and write it back out again
            
            </summary>
            <param name="args">names of the files; arg[ 0 ] is the input file,
            arg[ 1 ] is the output file
            
            </param>
            <exception cref="!:IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.createDocumentInputStream(System.String)">
            <summary> open a document in the root entry's list of entries
            
            </summary>
            <param name="documentName">the name of the document to be opened
            
            </param>
            <returns> a newly opened DocumentInputStream
            
            </returns>
            <exception cref="!:IOException"> if the document does not exist or the
            name is that of a DirectoryEntry
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.addDocument(SoftArtisans.OfficeWriter.Shared.POIFSDocument)">
            <summary> add a new POIFSDocument
            
            </summary>
            <param name="document">the POIFSDocument being added
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.addDirectory(SoftArtisans.OfficeWriter.Shared.DirectoryProperty)">
            <summary> add a new DirectoryProperty
            
            </summary>
            <param name="directory">the DirectoryProperty being added
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.remove(SoftArtisans.OfficeWriter.Shared.EntryNode)">
            <summary> remove an entry
            
            </summary>
            <param name="entry">to be removed
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.preferArray">
            <summary> Give viewers a hint as to whether to call getViewableArray or
            getViewableIterator
            
            </summary>
            <returns> true if a viewer should call getViewableArray, false if
            a viewer should call getViewableIterator
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.Root">
            <summary> get the root entry
            
            </summary>
            <returns> the root entry
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.ViewableArray">
            <summary> Get an array of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an array of Object; may not be null, but may be empty
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.ViewableIterator">
            <summary> Get an Iterator of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an Iterator; may not be null, but may have an empty
            back end store
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.ShortDescription">
            <summary> Provides a short description of the object, to be used when a
            POIFSViewable object has not provided its contents.
            
            </summary>
            <returns> short description
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSWriterEvent">
            <summary> Class POIFSWriterEvent
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
            <version>  %I%, %G%
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSWriterEvent.#ctor(SoftArtisans.OfficeWriter.Shared.DocumentOutputStream,SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath,System.String,System.Int32)">
            <summary> package scoped constructor
            
            </summary>
            <param name="stream">the DocumentOutputStream, freshly opened
            </param>
            <param name="path">the path of the document
            </param>
            <param name="documentName">the name of the document
            </param>
            <param name="limit">the limit, in bytes, that can be written to the
            stream
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSWriterEvent.Stream">
            <returns> the DocumentOutputStream, freshly opened
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSWriterEvent.Path">
            <returns> the document's path
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSWriterEvent.Name">
            <returns> the document's name
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSWriterEvent.Limit">
            <returns> the limit on writing, in bytes
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.Child">
            <summary> This interface defines methods for finding and setting sibling
            Property instances
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Child.getNextChild">
            <summary> Get the next Child, if any
            
            </summary>
            <returns> the next Child; may return null
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Child.getPreviousChild">
            <summary> Get the previous Child, if any
            
            </summary>
            <returns> the previous Child; may return null
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Child.setNextChild(SoftArtisans.OfficeWriter.Shared.Child)">
            <summary> Set the next Child
            
            </summary>
            <param name="child">the new 'next' child; may be null, which has the
            effect of saying there is no 'next' child
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Child.setPreviousChild(SoftArtisans.OfficeWriter.Shared.Child)">
            <summary> Set the previous Child
            
            </summary>
            <param name="child">the new 'previous' child; may be null, which has
            the effect of saying there is no 'previous' child
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DirectoryProperty">
            <summary> Directory property
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.Property">
            <summary> This abstract base class is the ancestor of all classes
            implementing POIFS Property behavior.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.#ctor">
            <summary> Default constructor</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.#ctor(System.Int32,System.SByte[],System.Int32)">
            <summary> Constructor from byte data
            
            </summary>
            <param name="index">index number
            </param>
            <param name="array">byte data
            </param>
            <param name="offset">offset into byte data
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.writeData(System.IO.Stream)">
            <summary> Write the raw data to an OutputStream.
            
            </summary>
            <param name="stream">the OutputStream to which the data should be
            written.
            
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.getSize">
            <summary> find out the document size
            
            </summary>
            <returns> size in bytes
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.shouldUseSmallBlocks">
            <summary> Based on the currently defined size, should this property use
            small blocks?
            
            </summary>
            <returns> true if the size is less than _big_block_minimum_bytes
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.isSmall(System.Int32)">
            <summary> does the length indicate a small document?
            
            </summary>
            <param name="length">length in bytes
            
            </param>
            <returns> true if the length is less than
            _big_block_minimum_bytes
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.setSize(System.Int32)">
            <summary> Set the size of the document associated with this Property
            
            </summary>
            <param name="size">the size of the document, in bytes
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.preWrite">
            <summary> Perform whatever activities need to be performed prior to
            writing
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.isValidIndex(System.Int32)">
            <summary> determine whether the specified index is valid
            
            </summary>
            <param name="index">value to be checked
            
            </param>
            <returns> true if the index is valid
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.getNextChild">
            <summary> Get the next Child, if any
            
            </summary>
            <returns> the next Child; may return null
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.getPreviousChild">
            <summary> Get the previous Child, if any
            
            </summary>
            <returns> the previous Child; may return null
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.setNextChild(SoftArtisans.OfficeWriter.Shared.Child)">
            <summary> Set the next Child
            
            </summary>
            <param name="child">the new 'next' child; may be null, which has the
            effect of saying there is no 'next' child
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.setPreviousChild(SoftArtisans.OfficeWriter.Shared.Child)">
            <summary> Set the previous Child
            
            </summary>
            <param name="child">the new 'previous' child; may be null, which has
            the effect of saying there is no 'previous' child
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.preferArray">
            <summary> Give viewers a hint as to whether to call getViewableArray or
            getViewableIterator
            
            </summary>
            <returns> true if a viewer should call getViewableArray, false if
            a viewer should call getViewableIterator
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.Property.CompareTo(SoftArtisans.OfficeWriter.Shared.Property)" -->
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.StartBlock">
            <returns> the start block
            </returns>
            <summary> Set the start block for the document referred to by this
            Property.
            
            </summary>
            <param name="startBlock">the start block index
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.Directory">
            <returns> true if a directory type Property
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.StorageClsid">
            <summary> Sets the storage clsid, which is the Class ID of a COM object which
            reads and writes this stream
            </summary>
            <returns> storage Class ID for this property stream
            </returns>
            <summary> Sets the storage class ID for this property stream. This is the Class ID
            of the COM object which can read and write this property stream
            </summary>
            <param name="clsidStorage">Storage Class ID
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.NodeColor">
            <summary> Set the node color.
            
            </summary>
            <param name="nodeColor">the node color (red or black)
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.ChildProperty">
            <summary> Set the child property.
            
            </summary>
            <param name="child">the child property's index in the Property Table
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.ChildIndex">
            <summary> Get the child property (its index in the Property Table)
            
            </summary>
            <returns> child property index
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.Index">
            <summary> get the index for this Property
            
            </summary>
            <returns> the index of this Property within its Property Table
            </returns>
            <summary> Set the index for this Property
            
            </summary>
            <param name="index">this Property's index within its containing
            Property Table
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.NextChildIndex">
            <summary> get the next sibling
            
            </summary>
            <returns> index of next sibling
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.PreviousChildIndex">
            <summary> get the previous sibling
            
            </summary>
            <returns> index of previous sibling
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.ViewableArray">
            <summary> Get an array of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an array of Object; may not be null, but may be empty
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.ViewableIterator">
            <summary> Get an Iterator of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an Iterator; may not be null, but may have an empty
            back end store
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.ShortDescription">
            <summary> Provides a short description of the object, to be used when a
            POIFSViewable object has not provided its contents.
            
            </summary>
            <returns> short description
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.Name">
            <summary> Get the name of this property
            
            </summary>
            <returns> property name as String
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.Parent">
            <summary> Behavior for parent (directory) properties
            
            </summary>
            <author>  Marc Johnson27591@hotmail.com
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Parent.addChild(SoftArtisans.OfficeWriter.Shared.Property)">
            <summary> Add a new child to the collection of children
            
            </summary>
            <param name="property">the new child to be added; must not be null
            
            </param>
            <exception cref="!:IOException"> if the Parent already has a child with
            the same name
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Parent.setPreviousChild(SoftArtisans.OfficeWriter.Shared.Child)">
            <summary> Set the previous Child
            
            </summary>
            <param name="child">the new 'previous' child; may be null, which has
            the effect of saying there is no 'previous' child
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Parent.setNextChild(SoftArtisans.OfficeWriter.Shared.Child)">
            <summary> Set the next Child
            
            </summary>
            <param name="child">the new 'next' child; may be null, which has the
            effect of saying there is no 'next' child
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Parent.Children">
            <summary> Get an iterator over the children of this Parent; all elements
            are instances of Property.
            
            </summary>
            <returns> Iterator of children; may refer to an empty collection
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryProperty.#ctor(System.String)">
            <summary> Default constructor
            
            </summary>
            <param name="name">the name of the directory
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryProperty.#ctor(System.Int32,System.SByte[],System.Int32)">
            <summary> reader constructor
            
            </summary>
            <param name="index">index number
            </param>
            <param name="array">byte data
            </param>
            <param name="offset">offset into byte data
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryProperty.addChild(SoftArtisans.OfficeWriter.Shared.Property)">
            <summary> Add a new child to the collection of children
            
            </summary>
            <param name="property">the new child to be added; must not be null
            
            </param>
            <exception cref="T:System.IO.IOException"> if we already have a child with the same
            name
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryProperty.changeName(SoftArtisans.OfficeWriter.Shared.Property,System.String)">
            <summary> Change a Property's name
            
            </summary>
            <param name="property">the Property whose name is being changed
            </param>
            <param name="newName">the new name for the Property
            
            </param>
            <returns> true if the name change could be made, else false
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryProperty.deleteChild(SoftArtisans.OfficeWriter.Shared.Property)">
            <summary> Delete a Property
            
            </summary>
            <param name="property">the Property being deleted
            
            </param>
            <returns> true if the Property could be deleted, else false
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryProperty.preWrite">
            <summary> Perform whatever activities need to be performed prior to
            writing
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryProperty.Directory">
            <returns> true if a directory type Property
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryProperty.Children">
            <summary> Get an iterator over the children of this Parent; all elements
            are instances of Property.
            
            </summary>
            <returns> Iterator of children; may refer to an empty collection
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DocumentProperty">
            <summary> Trivial extension of Property for POIFSDocuments
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentProperty.#ctor(System.String,System.Int32)">
            <summary> Constructor
            
            </summary>
            <param name="name">POIFSDocument name
            </param>
            <param name="size">POIFSDocument size
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentProperty.#ctor(System.Int32,System.SByte[],System.Int32)">
            <summary> reader constructor
            
            </summary>
            <param name="index">index number
            </param>
            <param name="array">byte data
            </param>
            <param name="offset">offset into byte data
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentProperty.preWrite">
            <summary> Perform whatever activities need to be performed prior to
            writing
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DocumentProperty.Document">
            <summary> get the POIFSDocument
            
            </summary>
            <returns> the associated document
            </returns>
            <summary> set the POIFSDocument
            
            </summary>
            <param name="doc">the associated POIFSDocument
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DocumentProperty.Directory">
            <returns> true if a directory type Property
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.PropertyConstants_Fields">
            <summary> Interface PropertyConstants</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.PropertyFactory">
            <summary> Factory for turning an array of RawDataBlock instances containing
            Proprty data into an array of proper Property objects.
            
            The array produced may be sparse, in that any portion of data that
            should correspond to a Property, but which does not map to a proper
            Property (i.e., a DirectoryProperty, DocumentProperty, or
            RootProperty) will get mapped to a null Property in the array.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyFactory.convertToProperties(SoftArtisans.OfficeWriter.Shared.ListManagedBlock[])">
            <summary> Convert raw data blocks to an array of Property's
            
            </summary>
            <param name="blocks">to be converted
            
            </param>
            <returns> the converted List of Property objects. May contain
            nulls, but will not be null
            
            </returns>
            <exception cref="!:IOException"> if any of the blocks are empty
            </exception>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.PropertyTable">
            <summary> This class embodies the Property Table for the filesystem; this is
            basically the dsirectory for all of the documents in the
            filesystem.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyTable.#ctor(SoftArtisans.OfficeWriter.Shared.ClassID)">
            <summary> Default constructor</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyTable.#ctor(System.Int32,SoftArtisans.OfficeWriter.Shared.RawDataBlockList)">
            <summary> reading constructor (used when we've read in a file and we want
            to extract the property table from it). Populates the
            properties thoroughly
            
            </summary>
            <param name="startBlock">the first block of the property table
            </param>
            <param name="blockList">the list of blocks
            
            </param>
            <exception cref="!:IOException"> if anything goes wrong (which should be
            a result of the input being NFG)
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyTable.addProperty(SoftArtisans.OfficeWriter.Shared.Property)">
            <summary> Add a property to the list of properties we manage
            
            </summary>
            <param name="property">the new Property to manage
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyTable.removeProperty(SoftArtisans.OfficeWriter.Shared.Property)">
            <summary> Remove a property from the list of properties we manage
            
            </summary>
            <param name="property">the Property to be removed
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyTable.preWrite">
            <summary> Prepare to be written</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyTable.getStartBlock">
            <summary> Get the start block for the property table
            
            </summary>
            <returns> start block index
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyTable.countBlocks">
            <summary> Return the number of BigBlock's this instance uses
            
            </summary>
            <returns> count of BigBlock instances
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyTable.setStartBlock(System.Int32)">
            <summary> Set the start block for this instance
            
            </summary>
            <param name="index">index into the array of BigBlock instances making
            up the the filesystem
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyTable.writeBlocks(System.IO.Stream)">
            <summary> Write the storage to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
            <exception cref="!:IOException"> on problems writing to the specified
            stream
            </exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.PropertyTable.Root">
            <summary> Get the root property
            
            </summary>
            <returns> the root property
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.RootProperty">
            <summary> Root property
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.RootProperty.#ctor">
            <summary> Default constructor</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.RootProperty.#ctor(System.Int32,System.SByte[],System.Int32)">
            <summary> reader constructor
            
            </summary>
            <param name="index">index number
            </param>
            <param name="array">byte data
            </param>
            <param name="offset">offset into byte data
            </param>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.RootProperty.EXCEL_CLASSID">
            <summary>
            This seems to be used by applications that open this to figure out what kind of file it is (doc, xls, ppt).
            This was mostly irrelevant and we set it to zero, but Powerpoint complained for if the file was embedded.
            Aspose Slides 
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.RootProperty.WORD_CLASSID">
            <summary>
            This seems to be used by applications that open this to figure out what kind of file it is (doc, xls, ppt).
            This was mostly irrelevant and we set it to zero, but Powerpoint complained for if the file was embedded.
            Aspose Slides 
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.RootProperty.setSize(System.Int32)">
            <summary> set size
            
            </summary>
            <param name="size">size in terms of small blocks
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.BATBlock">
            <summary> A block of block allocation table entries. BATBlocks are created
            only through a static factory method: createBATBlocks.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BigBlock.doWriteData(System.IO.Stream,System.SByte[])">
            <summary> Default implementation of write for extending classes that
            contain their data in a simple array of bytes.
            
            </summary>
            <param name="stream">the OutputStream to which the data should be
            written.
            </param>
            <param name="data">the byte array of to be written.
            
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BigBlock.writeData(System.IO.Stream)">
            <summary> Write the block's data to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BigBlock.writeBlocks(System.IO.Stream)">
            <summary> Write the storage to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
            <exception cref="!:IOException"> on problems writing to the specified
            stream
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BATBlock.#ctor">
            <summary> Create a single instance initialized with default values</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BATBlock.createBATBlocks(System.Int32[])">
            <summary> Create an array of BATBlocks from an array of int block
            allocation table entries
            
            </summary>
            <param name="entries">the array of int entries
            
            </param>
            <returns> the newly created array of BATBlocks
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BATBlock.createXBATBlocks(System.Int32[],System.Int32)">
            <summary> Create an array of XBATBlocks from an array of int block
            allocation table entries
            
            </summary>
            <param name="entries">the array of int entries
            </param>
            <param name="startBlock">the start block of the array of XBAT blocks
            
            </param>
            <returns> the newly created array of BATBlocks
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BATBlock.calculateStorageRequirements(System.Int32)">
            <summary> Calculate how many BATBlocks are needed to hold a specified
            number of BAT entries.
            
            </summary>
            <param name="entryCount">the number of entries
            
            </param>
            <returns> the number of BATBlocks needed
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BATBlock.calculateXBATStorageRequirements(System.Int32)">
            <summary> Calculate how many XBATBlocks are needed to hold a specified
            number of BAT entries.
            
            </summary>
            <param name="entryCount">the number of entries
            
            </param>
            <returns> the number of XBATBlocks needed
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BATBlock.entriesPerBlock">
            <returns> number of entries per block
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BATBlock.entriesPerXBATBlock">
            <returns> number of entries per XBAT block
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.BATBlock.#ctor(System.Int32[],System.Int32,System.Int32)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.BATBlock.writeData(System.IO.Stream)">
            <summary> Write the block's data to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
            <exception cref="!:IOException"> on problems writing to the specified
            stream
            </exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.BATBlock.XBATChainOffset">
            <returns> offset of chain index of XBAT block
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableReader" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableReader.#ctor(System.Int32,System.Int32[],System.Int32,System.Int32,SoftArtisans.OfficeWriter.Shared.BlockList)">
            <summary> create a BlockAllocationTableReader for an existing filesystem. Side
            effect: when this method finishes, the BAT blocks will have
            been removed from the raw block list, and any blocks labeled as
            'unused' in the block allocation table will also have been
            removed from the raw block list.
            
            </summary>
            <param name="block_count">the number of BAT blocks making up the block
            allocation table
            </param>
            <param name="block_array">the array of BAT block indices from the
            filesystem's header
            </param>
            <param name="xbat_count">the number of XBAT blocks
            </param>
            <param name="xbat_index">the index of the first XBAT block
            </param>
            <param name="raw_block_list">the list of RawDataBlocks
            
            </param>
            <exception cref="!:IOException"> if, in trying to create the table, we
            encounter logic errors
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableReader.#ctor(SoftArtisans.OfficeWriter.Shared.ListManagedBlock[],SoftArtisans.OfficeWriter.Shared.BlockList)">
            <summary> create a BlockAllocationTableReader from an array of raw data blocks
            
            </summary>
            <param name="blocks">the raw data
            </param>
            <param name="raw_block_list">the list holding the managed blocks
            
            </param>
            <exception cref="!:IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableReader.#ctor">
            <summary> Constructor BlockAllocationTableReader
            
            
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableReader.fetchBlocks(System.Int32,SoftArtisans.OfficeWriter.Shared.BlockList)">
            <summary> walk the entries from a specified point and return the
            associated blocks. The associated blocks are removed from the
            block list
            
            </summary>
            <param name="startBlock">the first block in the chain
            </param>
            <param name="blockList">the raw data block list
            
            </param>
            <returns> array of ListManagedBlocks, in their correct order
            
            </returns>
            <exception cref="!:IOException"> if there is a problem acquiring the blocks
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableReader.isUsed(System.Int32)">
            <summary> determine whether the block specified by index is used or not
            
            </summary>
            <param name="index">index of block in question
            
            </param>
            <returns> true if the specific block is used, else false
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableReader.getNextBlockIndex(System.Int32)">
            <summary> return the next block index
            
            </summary>
            <param name="index">of the current block
            
            </param>
            <returns> index of the next block (may be
            POIFSConstants.END_OF_CHAIN, indicating end of chain
            (duh))
            
            </returns>
            <exception cref="!:IOException"> if the current block is unused
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableReader.setEntries(SoftArtisans.OfficeWriter.Shared.ListManagedBlock[],SoftArtisans.OfficeWriter.Shared.BlockList)">
            <summary> Convert an array of blocks into a set of integer indices
            
            </summary>
            <param name="blocks">the array of blocks containing the indices
            </param>
            <param name="raw_blocks">the list of blocks being managed. Unused
            blocks will be eliminated from the list
            
            </param>
            <exception cref="!:IOException">
            </exception>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableWriter" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableWriter.#ctor">
            <summary> create a BlockAllocationTableWriter</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableWriter.createBlocks">
            <summary> Create the BATBlocks we need
            
            </summary>
            <returns> start block index of BAT blocks
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableWriter.allocateSpace(System.Int32)">
            <summary> Allocate space for a block of indices
            
            </summary>
            <param name="blockCount">the number of blocks to allocate space for
            
            </param>
            <returns> the starting index of the blocks
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableWriter.getStartBlock">
            <summary> get the starting block
            
            </summary>
            <returns> the starting block index
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableWriter.simpleCreateBlocks">
            <summary> create the BATBlocks</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableWriter.writeBlocks(System.IO.Stream)">
            <summary> Write the storage to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
            <exception cref="!:IOException"> on problems writing to the specified
            stream
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableWriter.countBlocks">
            <summary> Return the number of BigBlock's this instance uses
            
            </summary>
            <returns> count of BigBlock instances
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableWriter.setStartBlock(System.Int32)">
            <summary> Set the start block for this instance
            
            </summary>
            <param name="index">index into the array of BigBlock instances making
            up the the filesystem
            
            </param>
            <param name="start_block">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.BlockList">
            <summary> Interface for lists of blocks that are mapped by block allocation
            tables
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockList.zap(System.Int32)">
            <summary> remove the specified block from the list
            
            </summary>
            <param name="index">the index of the specified block; if the index is
            out of range, that's ok
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockList.remove(System.Int32)">
            <summary> remove and return the specified block from the list
            
            </summary>
            <param name="index">the index of the specified block
            
            </param>
            <returns> the specified block
            
            </returns>
            <exception cref="!:IOException"> if the index is out of range or has
            already been removed
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockList.fetchBlocks(System.Int32)">
            <summary> get the blocks making up a particular stream in the list. The
            blocks are removed from the list.
            
            </summary>
            <param name="startBlock">the index of the first block in the stream
            
            </param>
            <returns> the stream as an array of correctly ordered blocks
            
            </returns>
            <exception cref="!:IOException"> if blocks are missing
            </exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.BlockList.BAT">
            <summary> set the associated BlockAllocationTable
            
            </summary>
            <param name="bat">the associated BlockAllocationTable
            
            </param>
            <exception cref="!:IOException">
            </exception>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.BlockListImpl">
            <summary> A simple implementation of BlockList
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockListImpl.#ctor">
            <summary> Constructor BlockListImpl</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockListImpl.zap(System.Int32)">
            <summary> remove the specified block from the list
            
            </summary>
            <param name="index">the index of the specified block; if the index is
            out of range, that's ok
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockListImpl.remove(System.Int32)">
            <summary> remove and return the specified block from the list
            
            </summary>
            <param name="index">the index of the specified block
            
            </param>
            <returns> the specified block
            
            </returns>
            <exception cref="!:IOException"> if the index is out of range or has
            already been removed
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockListImpl.fetchBlocks(System.Int32)">
            <summary> get the blocks making up a particular stream in the list. The
            blocks are removed from the list.
            
            </summary>
            <param name="startBlock">the index of the first block in the stream
            
            </param>
            <returns> the stream as an array of correctly ordered blocks
            
            </returns>
            <exception cref="!:IOException"> if blocks are missing
            </exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.BlockListImpl.Blocks">
            <summary> provide blocks to manage
            
            </summary>
            <param name="blocks">blocks to be managed
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.BlockListImpl.BAT">
            <summary> set the associated BlockAllocationTable
            
            </summary>
            <param name="bat">the associated BlockAllocationTable
            
            </param>
            <exception cref="!:IOException">
            </exception>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DocumentBlock">
            <summary> A block of document data.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentBlock.#ctor(SoftArtisans.OfficeWriter.Shared.RawDataBlock)">
            <summary> create a document block from a raw data block
            
            </summary>
            <param name="block">the raw data block
            
            </param>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentBlock.#ctor(System.IO.Stream)">
            <summary> Create a single instance initialized with data.
            
            </summary>
            <param name="stream">the InputStream delivering the data.
            
            </param>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentBlock.#ctor">
            <summary> Create a single instance initialized with default values</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentBlock.size">
            <summary> Get the number of bytes read for this block
            
            </summary>
            <returns> bytes read into the block
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentBlock.partiallyRead">
            <summary> Was this a partially read block?
            
            </summary>
            <returns> true if the block was only partially filled with data
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentBlock.convert(System.SByte[],System.Int32)">
            <summary> convert a single long array into an array of DocumentBlock
            instances
            
            </summary>
            <param name="array">the byte array to be converted
            </param>
            <param name="size">the intended size of the array (which may be smaller)
            
            </param>
            <returns> an array of DocumentBlock instances, filled from the
            input array
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentBlock.read(SoftArtisans.OfficeWriter.Shared.DocumentBlock[],System.SByte[],System.Int32)">
            <summary> read data from an array of DocumentBlocks
            
            </summary>
            <param name="blocks">the blocks to read from
            </param>
            <param name="buffer">the buffer to write the data into
            </param>
            <param name="offset">the offset into the array of blocks to read from
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentBlock.writeData(System.IO.Stream)">
            <summary> Write the block's data to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
            <exception cref="T:System.IO.IOException"> on problems writing to the specified
            stream
            </exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DocumentBlock.FillByte">
            <returns> the fill byte used
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.HeaderBlockConstants_Fields">
            <summary> Constants used in reading/writing the Header block
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.HeaderBlockReader">
            <summary> The block containing the archive header
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HeaderBlockReader.#ctor(System.IO.Stream)">
            <summary> create a new HeaderBlockReader from an InputStream
            
            </summary>
            <param name="stream">the source InputStream
            
            </param>
            <exception cref="!:IOException"> on errors or bad data
            </exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.HeaderBlockReader.PropertyStart">
            <summary> get start of Property Table
            
            </summary>
            <returns> the index of the first block of the Property Table
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.HeaderBlockReader.SBATStart">
            <returns> start of small block allocation table
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.HeaderBlockReader.BATCount">
            <returns> number of BAT blocks
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.HeaderBlockReader.BATArray">
            <returns> BAT array
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.HeaderBlockReader.XBATCount">
            <returns> XBAT count
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.HeaderBlockReader.XBATIndex">
            <returns> XBAT index
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.HeaderBlockWriter">
            <summary> The block containing the archive header
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HeaderBlockWriter.#ctor">
            <summary> Create a single instance initialized with default values</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HeaderBlockWriter.setBATBlocks(System.Int32,System.Int32)">
            <summary> Set BAT block parameters. Assumes that all BAT blocks are
            contiguous. Will construct XBAT blocks if necessary and return
            the array of newly constructed XBAT blocks.
            
            </summary>
            <param name="blockCount">count of BAT blocks
            </param>
            <param name="startBlock">index of first BAT block
            
            </param>
            <returns> array of XBAT blocks; may be zero length, will not be
            null
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HeaderBlockWriter.calculateXBATStorageRequirements(System.Int32)">
            <summary> For a given number of BAT blocks, calculate how many XBAT
            blocks will be needed
            
            </summary>
            <param name="blockCount">number of BAT blocks
            
            </param>
            <returns> number of XBAT blocks needed
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HeaderBlockWriter.writeData(System.IO.Stream)">
            <summary> Write the block's data to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
            <exception cref="!:IOException"> on problems writing to the specified
            stream
            </exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.HeaderBlockWriter.PropertyStart">
            <summary> Set start of Property Table
            
            </summary>
            <param name="startBlock">the index of the first block of the Property
            Table
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.HeaderBlockWriter.SBATStart">
            <summary> Set start of small block allocation table
            
            </summary>
            <param name="startBlock">the index of the first big block of the small
            block allocation table
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.HeaderBlockWriter.SBATBlockCount">
            <summary> Set count of SBAT blocks
            
            </summary>
            <param name="count">the number of SBAT blocks
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ListManagedBlock">
            <summary> An interface for blocks managed by a list that works with a
            BlockAllocationTable to keep block sequences straight
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org
            </author>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ListManagedBlock.Data">
            <summary> Get the data from the block
            
            </summary>
            <returns> the block's data as a byte array
            
            </returns>
            <exception cref="!:IOException"> if there is no data
            </exception>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.PropertyBlock">
            <summary> A block of Property instances
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyBlock.#ctor(SoftArtisans.OfficeWriter.Shared.Property[],System.Int32)">
            <summary> Create a single instance initialized with default values
            
            </summary>
            <param name="properties">the properties to be inserted
            </param>
            <param name="offset">the offset into the properties array
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyBlock.createPropertyBlockArray(System.Collections.Generic.List{SoftArtisans.OfficeWriter.Shared.Property})">
            <summary> Create an array of PropertyBlocks from an array of Property
            instances, creating empty Property instances to make up any
            shortfall
            
            </summary>
            <param name="properties">the Property instances to be converted into
            PropertyBlocks, in a java List
            
            </param>
            <returns> the array of newly created PropertyBlock instances
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyBlock.writeData(System.IO.Stream)">
            <summary> Write the block's data to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
            <exception cref="!:IOException"> on problems writing to the specified
            stream
            </exception>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.RawDataBlock">
            <summary> A big block created from an InputStream, holding the raw data
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.RawDataBlock.#ctor(System.IO.Stream)">
            <summary> Constructor RawDataBlock
            
            </summary>
            <param name="stream">the InputStream from which the data will be read
            
            </param>
            <exception cref="!:IOException"> on I/O errors, and if an insufficient
            amount of data is read
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.RawDataBlock.eof">
            <summary> When we read the data, did we hit end of file?
            
            </summary>
            <returns> true if no data was read because we were at the end of
            the file, else false
            
            </returns>
            <exception cref="!:IOException">
            </exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.RawDataBlock.Data">
            <summary> Get the data from the block
            
            </summary>
            <returns> the block's data as a byte array
            
            </returns>
            <exception cref="!:IOException"> if there is no data
            </exception>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.RawDataBlockList">
            <summary> A list of RawDataBlocks instances, and methods to manage the list
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.RawDataBlockList.#ctor(System.IO.Stream)">
            <summary> Constructor RawDataBlockList
            
            </summary>
            <param name="stream">the InputStream from which the data will be read
            
            </param>
            <exception cref="!:IOException"> on I/O errors, and if an incomplete
            block is read
            </exception>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SmallBlockTableReader">
            <summary> This class implements reading the small document block list from an
            existing file
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallBlockTableReader.getSmallDocumentBlocks(SoftArtisans.OfficeWriter.Shared.RawDataBlockList,SoftArtisans.OfficeWriter.Shared.RootProperty,System.Int32)">
            <summary> fetch the small document block list from an existing file
            
            </summary>
            <param name="blockList">the raw data from which the small block table
            will be extracted
            </param>
            <param name="root">the root property (which contains the start block
            and small block table size)
            </param>
            <param name="sbatStart">the start block of the SBAT
            
            </param>
            <returns> the small document block list
            
            </returns>
            <exception cref="!:IOException">
            </exception>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SmallBlockTableWriter">
            <summary> This class implements storage for writing the small blocks used by
            small documents.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallBlockTableWriter.#ctor(System.Collections.Generic.IEnumerable{SoftArtisans.OfficeWriter.Shared.BATManagedAndBlockWritable},SoftArtisans.OfficeWriter.Shared.RootProperty)">
            <summary> Creates new SmallBlockTable
            
            </summary>
            <param name="documents">a List of POIFSDocument instances
            </param>
            <param name="root">the Filesystem's root property
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallBlockTableWriter.countBlocks">
            <summary> Return the number of BigBlock's this instance uses
            
            </summary>
            <returns> count of BigBlock instances
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallBlockTableWriter.setStartBlock(System.Int32)">
            <summary> Set the start block for this instance
            
            </summary>
            <param name="index">index into the array of BigBlock instances making
            up the the filesystem
            
            </param>
            <param name="start_block">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallBlockTableWriter.writeBlocks(System.IO.Stream)">
            <summary> Write the storage to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
            <exception cref="!:IOException"> on problems writing to the specified
            stream
            </exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.SmallBlockTableWriter.SBATBlockCount">
            <summary> Get the number of SBAT blocks
            
            </summary>
            <returns> number of SBAT big blocks
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.SmallBlockTableWriter.SBAT">
            <summary> Get the SBAT
            
            </summary>
            <returns> the Small Block Allocation Table
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SmallDocumentBlock">
            <summary> Storage for documents that are too small to use regular
            DocumentBlocks for their data
            
            </summary>
            <author>   Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallDocumentBlock.convert(System.SByte[],System.Int32)">
            <summary> convert a single long array into an array of SmallDocumentBlock
            instances
            
            </summary>
            <param name="array">the byte array to be converted
            </param>
            <param name="size">the intended size of the array (which may be smaller)
            
            </param>
            <returns> an array of SmallDocumentBlock instances, filled from
            the array
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallDocumentBlock.fill(System.Collections.Generic.IList{SoftArtisans.OfficeWriter.Shared.BlockWritable})">
            <summary> fill out a List of SmallDocumentBlocks so that it fully occupies
            a set of big blocks
            
            </summary>
            <param name="blocks">the List to be filled out
            
            </param>
            <returns> number of big blocks the list encompasses
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallDocumentBlock.convert(SoftArtisans.OfficeWriter.Shared.BlockWritable[],System.Int32)">
            <summary> Factory for creating SmallDocumentBlocks from DocumentBlocks
            
            </summary>
            <param name="store">the original DocumentBlocks
            </param>
            <param name="size">the total document size
            
            </param>
            <returns> an array of new SmallDocumentBlocks instances
            
            </returns>
            <exception cref="T:System.IO.IOException"> on errors reading from the DocumentBlocks
            </exception>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if, somehow, the store
            contains less data than size indicates
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallDocumentBlock.extract(SoftArtisans.OfficeWriter.Shared.ListManagedBlock[])">
            <summary> create a list of SmallDocumentBlock's from raw data
            
            </summary>
            <param name="blocks">the raw data containing the SmallDocumentBlock
            data
            
            </param>
            <returns> a List of SmallDocumentBlock's extracted from the input
            
            </returns>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallDocumentBlock.read(SoftArtisans.OfficeWriter.Shared.BlockWritable[],System.SByte[],System.Int32)">
            <summary> read data from an array of SmallDocumentBlocks
            
            </summary>
            <param name="blocks">the blocks to read from
            </param>
            <param name="buffer">the buffer to write the data into
            </param>
            <param name="offset">the offset into the array of blocks to read from
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallDocumentBlock.calcSize(System.Int32)">
            <summary> Calculate the storage size of a set of SmallDocumentBlocks
            
            </summary>
            <param name="size">number of SmallDocumentBlocks
            
            </param>
            <returns> total size
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallDocumentBlock.writeBlocks(System.IO.Stream)">
            <summary> Write the storage to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.SmallDocumentBlock.Data">
            <summary> Get the data from the block
            
            </summary>
            <returns> the block's data as a byte array
            
            </returns>
            <exception cref="T:System.IO.IOException"> if there is no data
            </exception>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SmallDocumentBlockList">
            <summary> A list of SmallDocumentBlocks instances, and methods to manage the list
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallDocumentBlockList.#ctor(System.Collections.Generic.List{SoftArtisans.OfficeWriter.Shared.SmallDocumentBlock})">
            <summary> Constructor SmallDocumentBlockList
            
            </summary>
            <param name="blocks">a list of SmallDocumentBlock instances
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.BitField">
            <summary> Manage operations dealing with bit-mapped fields.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
            <author>  Andrew C. Oliver (acoliver at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.#ctor(System.Int32)">
            <summary> Create a BitField instance
            
            </summary>
            <param name="mask">the mask specifying which bits apply to this
            BitField. Bits that are set in this mask are the
            bits that this BitField operates on
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.getValue(System.Int32)">
            <summary> Obtain the value for the specified BitField, appropriately
            shifted right. Many users of a BitField will want to treat the
            specified bits as an int value, and will not want to be aware
            that the value is stored as a BitField (and so shifted left so
            many bits)
            
            </summary>
            <param name="holder">the int data containing the bits we're interested
            in
            
            </param>
            <returns> the selected bits, shifted right appropriately
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.getShortValue(System.Int16)">
            <summary> Obtain the value for the specified BitField, appropriately
            shifted right, as a short. Many users of a BitField will want
            to treat the specified bits as an int value, and will not want
            to be aware that the value is stored as a BitField (and so
            shifted left so many bits)
            
            </summary>
            <param name="holder">the short data containing the bits we're
            interested in
            
            </param>
            <returns> the selected bits, shifted right appropriately
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.getRawValue(System.Int32)">
            <summary> Obtain the value for the specified BitField, unshifted
            
            </summary>
            <param name="holder">the int data containing the bits we're interested
            in
            
            </param>
            <returns> the selected bits
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.getShortRawValue(System.Int16)">
            <summary> Obtain the value for the specified BitField, unshifted
            
            </summary>
            <param name="holder">the short data containing the bits we're
            interested in
            
            </param>
            <returns> the selected bits
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.isSet(System.Int32)">
            <summary> Is the field set or not? This is most commonly used for a
            single-bit field, which is often used to represent a boolean
            value; the results of using it for a multi-bit field is to
            determine whether *any* of its bits are set
            
            </summary>
            <param name="holder">the int data containing the bits we're interested
            in
            
            </param>
            <returns> true if any of the bits are set, else false
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.isAllSet(System.Int32)">
            <summary> Are all of the bits set or not? This is a stricter test than
            isSet, in that all of the bits in a multi-bit set must be set
            for this method to return true
            
            </summary>
            <param name="holder">the int data containing the bits we're interested
            in
            
            </param>
            <returns> true if all of the bits are set, else false
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.setValue(System.Int32,System.Int32)">
            <summary> Replace the bits with new values.
            
            </summary>
            <param name="holder">the int data containint the bits we're interested
            in
            </param>
            <param name="value">the new value for the specified bits
            
            </param>
            <returns> the value of holder with the bits from the value
            parameter replacing the old bits
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.setShortValue(System.Int16,System.Int16)">
            <summary> Replace the bits with new values.
            
            </summary>
            <param name="holder">the short data containing the bits we're
            interested in
            </param>
            <param name="value">the new value for the specified bits
            
            </param>
            <returns> the value of holder with the bits from the value
            parameter replacing the old bits
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.clear(System.Int32)">
            <summary> Clear the bits.
            
            </summary>
            <param name="holder">the int data containing the bits we're interested
            in
            
            </param>
            <returns> the value of holder with the specified bits cleared
            (set to 0)
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.clearShort(System.Int16)">
            <summary> Clear the bits.
            
            </summary>
            <param name="holder">the short data containing the bits we're
            interested in
            
            </param>
            <returns> the value of holder with the specified bits cleared
            (set to 0)
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.clearByte(System.SByte)">
            <summary> Clear the bits.
            
            </summary>
            <param name="holder">the byte data containing the bits we're
            interested in
            
            </param>
            <returns> the value of holder with the specified bits cleared
            (set to 0)
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.set_Renamed(System.Int32)">
            <summary> Set the bits.
            
            </summary>
            <param name="holder">the int data containing the bits we're interested
            in
            
            </param>
            <returns> the value of holder with the specified bits set to 1
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.setShort(System.Int16)">
            <summary> Set the bits.
            
            </summary>
            <param name="holder">the short data containing the bits we're
            interested in
            
            </param>
            <returns> the value of holder with the specified bits set to 1
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.setByte(System.SByte)">
            <summary> Set the bits.
            
            </summary>
            <param name="holder">the byte data containing the bits we're
            interested in
            
            </param>
            <returns> the value of holder with the specified bits set to 1
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.setBoolean(System.Int32,System.Boolean)">
            <summary> Set a boolean BitField
            
            </summary>
            <param name="holder">the int data containing the bits we're interested
            in
            </param>
            <param name="flag">indicating whether to set or clear the bits
            
            </param>
            <returns> the value of holder with the specified bits set or
            cleared
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.setShortBoolean(System.Int16,System.Boolean)">
            <summary> Set a boolean BitField
            
            </summary>
            <param name="holder">the short data containing the bits we're
            interested in
            </param>
            <param name="flag">indicating whether to set or clear the bits
            
            </param>
            <returns> the value of holder with the specified bits set or
            cleared
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.setByteBoolean(System.SByte,System.Boolean)">
            <summary> Set a boolean BitField
            
            </summary>
            <param name="holder">the byte data containing the bits we're
            interested in
            </param>
            <param name="flag">indicating whether to set or clear the bits
            
            </param>
            <returns> the value of holder with the specified bits set or
            cleared
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.BlockingInputStream">
            <summary> Implementation of a BlockingInputStream to provide data to
            RawDataBlock that expects data in 512 byte chunks.  Useful to read
            data from slow (ie, non FileInputStream) sources, for example when
            reading an OLE2 Document over a network.
            
            Possible extentions: add a timeout. Curently a call to read(byte[]) on this
            class is blocking, so use at your own peril if your underlying stream blocks.
            
            </summary>
            <author>  Jens Gerhard
            </author>
            <author>  aviks - documentation cleanups.
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockingInputStream.read(System.SByte[])">
            <summary> We had to revert to byte per byte reading to keep
            with slow network connections on one hand, without
            missing the end-of-file.
            This is the only method that does its own thing in this class
            everything else is delegated to aggregated stream.
            THIS IS A BLOCKING BLOCK READ!!!
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ByteField">
            <summary> representation of a byte (8-bit) field at a fixed location within a
            byte array
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.FixedField`1">
            <summary> construct the FixedField with its offset into its containing
            byte array
            
            </summary>
            <param name="offset">of the field within its byte array
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if offset is negative
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.FixedField`1.readFromBytes(System.SByte[])">
            <summary> set the value from its offset into an array of bytes
            
            </summary>
            <param name="data">the byte array from which the value is to be read
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is out
            of the array's valid index range
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.FixedField`1.readFromStream(System.IO.Stream)">
            <summary> set the value from an InputStream
            
            </summary>
            <param name="stream">the InputStream from which the value is to be
            read
            
            </param>
            <exception cref="!:BufferUnderrunException"> if there is not enough data
            available from the InputStream
            </exception>
            <exception cref="!:IOException"> if an IOException is thrown from reading
            the InputStream
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.FixedField`1.writeToBytes(System.SByte[])">
            <summary> write the value out to an array of bytes at the appropriate
            offset
            
            </summary>
            <param name="data">the array of bytes to which the value is to be
            written
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is out
            of the array's valid index range
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.FixedField`1.#ctor(System.Int32,System.SByte[])">
            <summary> Construct the FixedField with its offset into its containing
            byte array and initialize its value from its byte array
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="data">the byte array to read the value from
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is not
            within the range of 0..(data.length - 1)
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.FixedField`1.Set(`0,System.SByte[])">
            <summary> set the FixedField's current value and write it to a byte array
            
            </summary>
            <param name="value">to be set
            </param>
            <param name="data">the byte array to write the value to
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is out
            of range
            </exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.FixedField`1.Value">
            <summary> get the LongField's current value
            
            </summary>
            <returns> current value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ByteField.#ctor(System.Int32)">
            <summary> construct the ByteField with its offset into its containing
            byte array and a default value of 0
            
            </summary>
            <param name="offset">of the field within its byte array
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if offset is negative
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ByteField.#ctor(System.Int32,System.SByte)">
            <summary> construct the ByteField with its offset into its containing
            byte array and initialize its value
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="value">the initial value
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if offset is negative
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ByteField.#ctor(System.Int32,System.SByte[])">
            <summary> Construct the ByteField with its offset into its containing
            byte array and initialize its value from its byte array
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="data">the byte array to read the value from
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is not
            within the range of 0..(data.length - 1)
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ByteField.#ctor(System.Int32,System.SByte,System.SByte[])">
            <summary> construct the ByteField with its offset into its containing
            byte array, initialize its value, and write its value to its
            byte array
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="value">the initial value
            </param>
            <param name="data">the byte array to write the value to
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is not
            within the range of 0..(data.length - 1)
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ByteField.readFromBytes(System.SByte[])">
            <summary> set the value from its offset into an array of bytes
            
            </summary>
            <param name="data">the byte array from which the value is to be read
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is out
            of range of the bte array
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ByteField.readFromStream(System.IO.Stream)">
            <summary> set the value from an InputStream
            
            </summary>
            <param name="stream">the InputStream from which the value is to be
            read
            
            </param>
            <exception cref="!:BufferUnderrunException"> if there is not enough data
            available from the InputStream
            </exception>
            <exception cref="!:IOException"> if an IOException is thrown from reading
            the InputStream
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ByteField.writeToBytes(System.SByte[])">
            <summary> write the value out to an array of bytes at the appropriate
            offset
            
            </summary>
            <param name="data">the array of bytes to which the value is to be
            written
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is out
            of the byte array's range
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ByteField.ToString">
            <summary> return the value as a String
            
            </summary>
            <returns> the value as a String
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.HexDump">
            <summary> dump data in hexadecimal format; derived from a HexDump utility I
            wrote in June 2001.
            
            </summary>
            <author>  Marc Johnson
            </author>
            <author>  Glen Stampoultzis  (glens at apache.org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexDump.dump(System.SByte[],System.Int64,System.IO.Stream,System.Int32,System.Int32)">
            <summary> dump an array of bytes to an OutputStream
            
            </summary>
            <param name="data">the byte array to be dumped
            </param>
            <param name="offset">its offset, whatever that might mean
            </param>
            <param name="stream">the OutputStream to which the data is to be
            written
            </param>
            <param name="index">initial index into the byte array
            </param>
            <param name="length">number of characters to output
            
            </param>
            <exception cref="!:IOException"> is thrown if anything goes wrong writing
            the data to stream
            </exception>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the index is
            outside the data array's bounds
            </exception>
            <exception cref="!:IllegalArgumentException"> if the output stream is
            null
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexDump.dump(System.SByte[],System.Int64,System.IO.Stream,System.Int32)">
            <summary> dump an array of bytes to an OutputStream
            
            </summary>
            <param name="data">the byte array to be dumped
            </param>
            <param name="offset">its offset, whatever that might mean
            </param>
            <param name="stream">the OutputStream to which the data is to be
            written
            </param>
            <param name="index">initial index into the byte array
            
            </param>
            <exception cref="!:IOException"> is thrown if anything goes wrong writing
            the data to stream
            </exception>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the index is
            outside the data array's bounds
            </exception>
            <exception cref="!:IllegalArgumentException"> if the output stream is
            null
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexDump.dump(System.SByte[],System.Int64,System.Int32)">
            <summary> dump an array of bytes to a String
            
            </summary>
            <param name="data">the byte array to be dumped
            </param>
            <param name="offset">its offset, whatever that might mean
            </param>
            <param name="index">initial index into the byte array
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the index is
            outside the data array's bounds
            </exception>
            <returns> output string
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexDump.toHex(System.SByte[])">
            <summary> Converts the parameter to a hex value.
            
            </summary>
            <param name="value">    The value to convert
            </param>
            <returns>          A String representing the array of bytes
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexDump.toHex(System.SByte[],System.Int32)">
            <summary> <p>Converts the parameter to a hex value breaking the results into
            lines.</p>
            
            </summary>
            <param name="bytes">       The value to convert
            </param>
            <param name="bytesPerLine">The maximum number of bytes per line. The next byte
            will be written to a new line
            </param>
            <returns>             A String representing the array of bytes
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexDump.toHex(System.Int16)">
            <summary> Converts the parameter to a hex value.
            
            </summary>
            <param name="value">    The value to convert
            </param>
            <returns>          The result right padded with 0
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexDump.toHex(System.SByte)">
            <summary> Converts the parameter to a hex value.
            
            </summary>
            <param name="value">    The value to convert
            </param>
            <returns>          The result right padded with 0
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexDump.toHex(System.Int32)">
            <summary> Converts the parameter to a hex value.
            
            </summary>
            <param name="value">    The value to convert
            </param>
            <returns>          The result right padded with 0
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexDump.toHex(System.Int64)">
            <summary> Converts the parameter to a hex value.
            
            </summary>
            <param name="value">    The value to convert
            </param>
            <returns>          The result right padded with 0
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexDump.dump(System.IO.Stream,System.IO.StreamWriter,System.Int32,System.Int32)">
            <summary> Dumps <code>bytesToDump</code> bytes to an output stream.
            
            </summary>
            <param name="in">         The stream to read from
            </param>
            <param name="out">        The output stream
            </param>
            <param name="start">      The index to use as the starting position for the left hand side label
            </param>
            <param name="bytesToDump">The number of bytes to output.  Use -1 to read until the end of file.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.HexRead">
            <summary> Utilities to read hex from files.
            
            </summary>
            <author>  Marc Johnson
            </author>
            <author>  Glen Stampoultzis (glens at apache.org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexRead.readData(System.String)">
            <summary> This method reads hex data from a filename and returns a byte array.
            The file may contain line comments that are preceeded with a # symbol.
            
            </summary>
            <param name="filename"> The filename to read
            </param>
            <returns> The bytes read from the file.
            </returns>
            <throws>  IOException If there was a problem while reading the file. </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexRead.readData(System.String,System.String)">
            <summary> Same as readData(String) except that this method allows you to specify sections within
            a file.  Sections are referenced using section headers in the form:
            <pre>
            [sectioname]
            </pre>
            
            </summary>
            <seealso cref="!:#readData(String)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.IntegerField">
            <summary> representation of an integer (32-bit) field at a fixed location
            within a byte array
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntegerField.#ctor(System.Int32)">
            <summary> construct the IntegerField with its offset into its containing
            byte array
            
            </summary>
            <param name="offset">of the field within its byte array
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is
            negative
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntegerField.#ctor(System.Int32,System.Int32)">
            <summary> construct the IntegerField with its offset into its containing
            byte array and initialize its value
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="value">the initial value
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is
            negative
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntegerField.#ctor(System.Int32,System.SByte[])">
            <summary> Construct the IntegerField with its offset into its containing
            byte array and initialize its value from its byte array
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="data">the byte array to read the value from
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is not
            within the range of 0..(data.length - 1)
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntegerField.#ctor(System.Int32,System.Int32,System.SByte[])">
            <summary> construct the IntegerField with its offset into its containing
            byte array, initialize its value, and write the value to a byte
            array
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="value">the initial value
            </param>
            <param name="data">the byte array to write the value to
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is
            negative or too large
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntegerField.readFromBytes(System.SByte[])">
            <summary> set the value from its offset into an array of bytes
            
            </summary>
            <param name="data">the byte array from which the value is to be read
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is too
            large
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntegerField.readFromStream(System.IO.Stream)">
            <summary> set the value from an InputStream
            
            </summary>
            <param name="stream">the InputStream from which the value is to be
            read
            
            </param>
            <exception cref="!:BufferUnderrunException"> if there is not enough data
            available from the InputStream
            </exception>
            <exception cref="!:IOException"> if an IOException is thrown from reading
            the InputStream
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntegerField.writeToBytes(System.SByte[])">
            <summary> write the value out to an array of bytes at the appropriate
            offset
            
            </summary>
            <param name="data">the array of bytes to which the value is to be
            written
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is too
            large
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntegerField.ToString">
            <summary> return the value as a String
            
            </summary>
            <returns> the value as a String
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IOUtils.readFully(System.IO.Stream,System.SByte[])">
            <summary> Helper method, just calls <tt>readFully(in, b, 0, b.length)</tt></summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.IOUtils.readFully(System.IO.Stream,System.SByte[],System.Int32,System.Int32)" -->
        <member name="T:SoftArtisans.OfficeWriter.Shared.LittleEndian">
            <summary>  a utility class for handling little-endian numbers, which the 80x86 world is
            replete with. The methods are all static, and input/output is from/to byte
            arrays, or from InputStreams.
            
            </summary>
            <author>      Marc Johnson (mjohnson at apache dot org)
            </author>
            <author>      Andrew Oliver (acoliver at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.#ctor">
            <summary>  Constructor for the LittleEndian object</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getShort(System.SByte[],System.Int32)">
            <summary>  get a short value from a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <returns>         the short (16-bit) value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.GetShort(System.SByte[],System.Int32@)">
            <summary>
            Gets a short from the data at the given offset and updates the offset to be the next
            byte.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getUShort(System.SByte[],System.Int32)">
            <summary>  get an unsigned short value from a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <returns>         the unsigned short (16-bit) value in an integer
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getUShort(System.Byte[],System.Int32)">
            <summary>  get an unsigned short value from a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <returns>         the unsigned short (16-bit) value in an integer
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getSimpleShortArray(System.SByte[],System.Int32,System.Int32)">
            <summary>  get a short array from a byte array.
            
            </summary>
            <param name="data">   Description of the Parameter
            </param>
            <param name="offset"> Description of the Parameter
            </param>
            <param name="size">   Description of the Parameter
            </param>
            <returns>         The simpleShortArray value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getShortArray(System.SByte[],System.Int32)">
            <summary>  get a short array from a byte array. The short array is assumed to start
            with a word describing the length of the array.
            
            </summary>
            <param name="data">   Description of the Parameter
            </param>
            <param name="offset"> Description of the Parameter
            </param>
            <returns>         The shortArray value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getShort(System.SByte[])">
            <summary>  get a short value from the beginning of a byte array
            
            </summary>
            <param name="data"> the byte array
            </param>
            <returns>       the short (16-bit) value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getUShort(System.SByte[])">
            <summary>  get an unsigned short value from the beginning of a byte array
            
            </summary>
            <param name="data"> the byte array
            </param>
            <returns>       the unsigned short (16-bit) value in an int
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getInt(System.SByte[],System.Int32)">
            <summary>  get an int value from a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <returns>         the int (32-bit) value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.GetInt(System.SByte[],System.Int32@)">
            <summary>
            Gets an integer from the data at the given offset and updates the offset to be the next
            byte.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getInt(System.SByte[])">
            <summary>  get an int value from the beginning of a byte array
            
            </summary>
            <param name="data"> the byte array
            </param>
            <returns>       the int (32-bit) value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getUInt(System.SByte[],System.Int32)">
            <summary>  get an unsigned int value from a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <returns>         the unsigned int (32-bit) value in a long
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getUInt(System.SByte[])">
            <summary>  get an unsigned int value from a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <returns>         the unsigned int (32-bit) value in a long
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getLong(System.SByte[],System.Int32)">
            <summary>  get a long value from a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <returns>         the long (64-bit) value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getLong(System.SByte[])">
            <summary>  get a long value from the beginning of a byte array
            
            </summary>
            <param name="data"> the byte array
            </param>
            <returns>       the long (64-bit) value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getDouble(System.SByte[],System.Int32)">
            <summary>  get a double value from a byte array, reads it in little endian format
            then converts the resulting revolting IEEE 754 (curse them) floating
            point number to a happy java double
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <returns>         the double (64-bit) value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getDouble(System.SByte[])">
            <summary>  get a double value from the beginning of a byte array
            
            </summary>
            <param name="data"> the byte array
            </param>
            <returns>       the double (64-bit) value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putShort(System.SByte[],System.Int32,System.Int16)">
            <summary>  put a short value into a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <param name="value">  the short (16-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putShort(System.Byte[],System.Int32,System.Int16)">
            <summary>  put a short value into a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <param name="value">  the short (16-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putShort(System.Byte[],System.Int32,System.UInt16)">
            <summary>  put an unsigned short value into a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <param name="value">  the short (16-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putShortArray(System.SByte[],System.Int32,System.Int16[])">
            <summary>  put a array of shorts into a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <param name="value">  the short array
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putUShort(System.SByte[],System.Int32,System.Int32)">
            <summary> put an unsigned short value into a byte array
            
            </summary>
            <param name="data">the byte array
            </param>
            <param name="offset">a starting offset into the byte array
            </param>
            <param name="value">the short (16-bit) value
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> may be thrown
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putUShort(System.Byte[],System.Int32,System.Int32)">
            <summary> put an unsigned short value into a byte array
            
            </summary>
            <param name="data">the byte array
            </param>
            <param name="offset">a starting offset into the byte array
            </param>
            <param name="value">the short (16-bit) value
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> may be thrown
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putShort(System.SByte[],System.Int16)">
            <summary>  put a short value into beginning of a byte array
            
            </summary>
            <param name="data">  the byte array
            </param>
            <param name="value"> the short (16-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putShort(System.Byte[],System.Int16)">
            <summary>  put a short value into beginning of a byte array
            
            </summary>
            <param name="data">  the byte array
            </param>
            <param name="value"> the short (16-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putInt(System.SByte[],System.Int32,System.Int32)">
            <summary>  put an int value into a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <param name="value">  the int (32-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putInt(System.Byte[],System.Int32,System.Int32)">
            <summary>  put an int value into a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <param name="value">  the int (32-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putInt(System.SByte[],System.Int32)">
            <summary>  put an int value into beginning of a byte array
            
            </summary>
            <param name="data">  the byte array
            </param>
            <param name="value"> the int (32-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putInt(System.Byte[],System.Int32)">
            <summary>  put an int value into beginning of a byte array
            
            </summary>
            <param name="data">  the byte array
            </param>
            <param name="value"> the int (32-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putLong(System.SByte[],System.Int32,System.Int64)">
            <summary>  put a long value into a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <param name="value">  the long (64-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putLong(System.SByte[],System.Int64)">
            <summary>  put a long value into beginning of a byte array
            
            </summary>
            <param name="data">  the byte array
            </param>
            <param name="value"> the long (64-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putDouble(System.SByte[],System.Int32,System.Double)">
            <summary>  put a double value into a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <param name="value">  the double (64-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putDouble(System.SByte[],System.Double)">
            <summary>  put a double value into beginning of a byte array
            
            </summary>
            <param name="data">  the byte array
            </param>
            <param name="value"> the double (64-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.readShort(System.IO.Stream)">
            <summary>  get a short value from an InputStream
            
            </summary>
            <param name="stream">                      the InputStream from which the short
            is to be read
            </param>
            <returns>                              the short (16-bit) value
            </returns>
            <exception cref="!:"> IOException              will be propagated back to the caller
            </exception>
            <exception cref="!:"> BufferUnderrunException  if the stream cannot provide enough
            bytes
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.readInt(System.IO.Stream)">
            <summary>  get an int value from an InputStream
            
            </summary>
            <param name="stream">                      the InputStream from which the int is
            to be read
            </param>
            <returns>                              the int (32-bit) value
            </returns>
            <exception cref="!:"> IOException              will be propagated back to the caller
            </exception>
            <exception cref="!:"> BufferUnderrunException  if the stream cannot provide enough
            bytes
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.readLong(System.IO.Stream)">
            <summary>  get a long value from an InputStream
            
            </summary>
            <param name="stream">                      the InputStream from which the long
            is to be read
            </param>
            <returns>                              the long (64-bit) value
            </returns>
            <exception cref="!:"> IOException              will be propagated back to the caller
            </exception>
            <exception cref="!:"> BufferUnderrunException  if the stream cannot provide enough
            bytes
            </exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.LittleEndian.readFromStream(System.IO.Stream,System.Int32)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getNumber(System.SByte[],System.Int32,System.Int32)">
            <summary>  Gets the number attribute of the LittleEndian class
            
            </summary>
            <param name="data">   Description of the Parameter
            </param>
            <param name="offset"> Description of the Parameter
            </param>
            <param name="size">   Description of the Parameter
            </param>
            <returns>         The number value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getNumber(System.Byte[],System.Int32,System.Int32)">
            <summary>  Gets the number attribute of the LittleEndian class
            
            </summary>
            <param name="data">   Description of the Parameter
            </param>
            <param name="offset"> Description of the Parameter
            </param>
            <param name="size">   Description of the Parameter
            </param>
            <returns>         The number value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putNumber(System.SByte[],System.Int32,System.Int64,System.Int32)">
            <summary>  Description of the Method
            
            </summary>
            <param name="data">   Description of the Parameter
            </param>
            <param name="offset"> Description of the Parameter
            </param>
            <param name="value">  Description of the Parameter
            </param>
            <param name="size">   Description of the Parameter
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putNumber(System.Byte[],System.Int32,System.Int64,System.Int32)">
            <summary>  Description of the Method
            
            </summary>
            <param name="data">   Description of the Parameter
            </param>
            <param name="offset"> Description of the Parameter
            </param>
            <param name="value">  Description of the Parameter
            </param>
            <param name="size">   Description of the Parameter
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.ubyteToInt(System.SByte)">
            <summary>  Convert an 'unsigned' byte to an integer. ie, don't carry across the
            sign.
            
            </summary>
            <param name="b"> Description of the Parameter
            </param>
            <returns>    Description of the Return Value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getUnsignedByte(System.SByte[],System.Int32)">
            <summary>  get the unsigned value of a byte.
            
            </summary>
            <param name="data">   the byte array.
            </param>
            <param name="offset"> a starting offset into the byte array.
            </param>
            <returns>         the unsigned value of the byte as a 32 bit integer
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getUnsignedByte(System.SByte[])">
            <summary>  get the unsigned value of a byte.
            
            </summary>
            <param name="data"> the byte array
            </param>
            <returns>       the unsigned value of the byte as a 32 bit integer
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getByteArray(System.SByte[],System.Int32,System.Int32)">
            <summary>  Copy a portion of a byte array
            
            </summary>
            <param name="data">                       the original byte array
            </param>
            <param name="offset">                     Where to start copying from.
            </param>
            <param name="size">                       Number of bytes to copy.
            </param>
            <returns>                             The byteArray value
            </returns>
            <throws>   IndexOutOfBoundsException  - if copying would cause access of </throws>
            <summary>      data outside array bounds.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LittleEndian.BufferUnderrunException">
            <summary>  Exception to handle buffer underruns
            
            </summary>
            <author>      Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.BufferUnderrunException.#ctor">
            <summary>  simple constructor</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LongField">
            <summary> representation of a long (16-bit) field at a fixed location within
            a byte array
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LongField.#ctor(System.Int32)">
            <summary> construct the LongField with its offset into its containing
            byte array
            
            </summary>
            <param name="offset">of the field within its byte array
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if offset is negative
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LongField.#ctor(System.Int32,System.Int64)">
            <summary> construct the LongField with its offset into its containing
            byte array and initialize its value
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="value">the initial value
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if offset is negative
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LongField.#ctor(System.Int32,System.SByte[])">
            <summary> Construct the LongField with its offset into its containing
            byte array and initialize its value from its byte array
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="data">the byte array to read the value from
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is not
            within the range of 0..(data.length - 1)
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LongField.#ctor(System.Int32,System.Int64,System.SByte[])">
            <summary> construct the LongField with its offset into its containing
            byte array, initialize its value, and write the value to a byte
            array
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="value">the initial value
            </param>
            <param name="data">the byte array to write the value to
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if offset is negative
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LongField.readFromBytes(System.SByte[])">
            <summary> set the value from its offset into an array of bytes
            
            </summary>
            <param name="data">the byte array from which the value is to be read
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is out
            of range
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LongField.readFromStream(System.IO.Stream)">
            <summary> set the value from an InputStream
            
            </summary>
            <param name="stream">the InputStream from which the value is to be
            read
            
            </param>
            <exception cref="!:BufferUnderrunException"> if there is not enough data
            available from the InputStream
            </exception>
            <exception cref="!:IOException"> if an IOException is thrown from reading
            the InputStream
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LongField.writeToBytes(System.SByte[])">
            <summary> write the value out to an array of bytes at the appropriate
            offset
            
            </summary>
            <param name="data">the array of bytes to which the value is to be
            written
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is out
            of range
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LongField.ToString">
            <summary> return the value as a String
            
            </summary>
            <returns> the value as a String
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ShortField">
            <summary> representation of a short (16-bit) field at a fixed location within
            a byte array
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ShortField.#ctor(System.Int32,System.Int16)">
            <summary> construct the ShortField with its offset into its containing
            byte array and initialize its value
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="value">the initial value
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if offset is negative
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ShortField.#ctor(System.Int32,System.SByte[])">
            <summary> Construct the ShortField with its offset into its containing
            byte array and initialize its value from its byte array
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="data">the byte array to read the value from
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is not
            within the range of 0..(data.length - 1)
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ShortField.#ctor(System.Int32,System.Int16,System.SByte[])">
            <summary> construct the ShortField with its offset into its containing
            byte array, initialize its value, and write its value to its
            byte array
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="value">the initial value
            </param>
            <param name="data">the byte array to write the value to
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if offset is negative
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ShortField.Set(System.Int16,System.SByte[])">
            <summary> set the ShortField's current value and write it to a byte array
            
            </summary>
            <param name="value">to be set
            </param>
            <param name="data">the byte array to write the value to
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is out
            of range
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ShortField.readFromBytes(System.SByte[])">
            <summary> set the value from its offset into an array of bytes
            
            </summary>
            <param name="data">the byte array from which the value is to be read
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is out
            of range
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ShortField.readFromStream(System.IO.Stream)">
            <summary> set the value from an InputStream
            
            </summary>
            <param name="stream">the InputStream from which the value is to be
            read
            
            </param>
            <exception cref="!:BufferUnderrunException"> if there is not enough data
            available from the InputStream
            </exception>
            <exception cref="!:IOException"> if an IOException is thrown from reading
            the InputStream
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ShortField.writeToBytes(System.SByte[])">
            <summary> write the value out to an array of bytes at the appropriate
            offset
            
            </summary>
            <param name="data">the array of bytes to which the value is to be
            written
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is out
            of range
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ShortField.ToString">
            <summary> return the value as a String
            
            </summary>
            <returns> the value as a String
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Anchor">
            <Doc>
      <summary>
        <para>An anchor represents the position of a floating (non-cell data) object within a spreadsheet. The position is maintained as a row number + a percentage of the row's width and a column number + a percentage of the column's height.</para>
      </summary>
      <remarks>
        <para>To create an <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Anchor"/> object, use <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CreateAnchor(System.Int32,System.Int32,System.Double,System.Double)"/> or <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Cell.CreateAnchor(System.Int32,System.Int32)"/>.</para>
      </remarks>
      <example>
        <para>
          <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          Worksheet ws = wb.Worksheets[0];
          Anchor anc = ws.CreateAnchor(2, 4, 0, 0);
        </code>
          <br/>
          <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim ws As Worksheet = wb.Worksheets(0)
          Dim anc As Anchor = ws.CreateAnchor(2, 4, 0, 0)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Anchor.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Anchor&quot;]/Member[@signature=&quot;Anchor.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Anchor.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Anchor&quot;]/Member[@signature=&quot;Anchor.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Anchor.Column">
            <Doc>
        <summary>
          <para>Returns the 0-based number of the column containing the anchor.</para>
        </summary>
        <example>
          <para>
            <code>
int col = anc.Column;</code>
            <br/>
            <code>
Dim col As Integer = anc.Column</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Anchor.OffsetX">
            <Doc>
        <summary>
          <para>Returns the X offset from the left side of the column containing the anchor, as a percentage of column width.</para>
        </summary>
        <remarks>
          <para>An offset of <c>100.0</c> represents an anchor flush with the right side of the column.</para>
        </remarks>
        <example>
          <para>
            <code>
double x = anc.OffsetX;</code>
            <br/>
            <code>
Dim x As Double = anc.OffsetX</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Anchor.OffsetY">
            <Doc>
        <summary>
          <para>Returns the Y offset from the top of the row containing the anchor, as a percentage of row height.</para>
        </summary>
        <remarks>
          <para>An offset of 100.0 represents an anchor flush with the bottom side of the row.</para>
        </remarks>
        <example>
          <para>
            <code>
double y = anc.OffsetY;</code>
            <br/>
            <code>
Dim y As Double = anc.OffsetY</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Anchor.Row">
            <Doc>
        <summary>
          <para>Returns the 0-based number of the row containing the anchor..</para>
        </summary>
        <example>
          <para>
            <code>
int row = anc.Row;</code>
            <br/>
            <code>
Dim row As Integer = anc.Row</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Area">
            <Doc>
      <summary>
        <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object represents a rectangular set of cells.</para>
      </summary>
      <remarks>
        <para>To create an <c>Area</c> object, call <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CreateArea(System.Int32,System.Int32,System.Int32,System.Int32)"/></para>
      </remarks>
      <example>
        <para>
          <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          Worksheet ws = wb.Worksheets[0];
          Area a = ws.CreateArea(4, 4, 15, 6);
        </code>
          <br/>
          <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim ws As Worksheet = wb(0)
          Dim a As Area = ws.CreateArea(4, 4, 15, 6)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.ApplyStyle(SoftArtisans.OfficeWriter.ExcelWriter.Style)">
            <Doc>
        <summary>
          <para>Applies a style to the area. When a style is applied - rather than set (see <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.SetStyle(SoftArtisans.OfficeWriter.ExcelWriter.Style)"/> ) - only the differences between the new style and style properties previously assigned to the area (through the ExcelWriter API or in Microsoft Excel) will take effect. For example, if the area has a background color and the new style applied does not contain a background color, the area's color will not be affected. However, if the new style includes background color,  it will replace the existing background color of the area.</para>
        </summary>
        <param name="style">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Style"/> object representing the style to apply to the cell.</para>
        </param>
        <example>
          <para>
            <code>
a.ApplyStyle(oStyle);</code>
            <br/>
            <code>
a.ApplyStyle(oStyle)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.AutoFitHeight">
            <Doc>
        <summary>
          <para>Sets the height of each of the rows within the area to the height of the highest cell value in that row within the bounds of the Area.</para>
        </summary>
        <example>
          <para>
            <code>
a.AutoFitHeight();</code>
            <br/>
            <code>
a.AutoFitHeight()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.AutoFitWidth">
            <Doc>
        <summary>
          <para>Sets the width of each of the columns within the area to the width of the widest cell value in that column within the bounds of the Area.</para>
        </summary>
        <example>
          <para>
            <code>
a.AutoFitWidth();</code>
            <br/>
            <code>
a.AutoFitWidth()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.ClearContent">
            <Doc>
        <summary>
          <para>Clears the content of all cells in the area. Calling this method is equivalent to setting an area's cell values to null.</para>
        </summary>
        <example>
          <para>
            <code>
a.ClearContent();</code>
            <br/>
            <code>
a.ClearContent()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.CreateHyperlink(System.String)">
            <Doc>
        <summary>
          <para>Creates a new hyperlink in the area pointing to the specified href. This hyperlink is automatically added to the worksheet. All cell values in the area will be converted to hyperlinks.</para>
        </summary>
        <param name="href">
          <para>The hyperlink's destination.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlink"/> object.</para>
        </returns>
        <example>
          <para>
            <code>
Hyperlink link = a.CreateHyperlink("http://www.softartisans.com");</code>
            <br/>
            <code>
Dim link As Hyperlink = a.CreateHyperlink("http://www.softartisans.com")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Area&quot;]/Member[@signature=&quot;Area.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.GetColumnWidth(System.Int32)">
            <Doc>
        <summary>
          <para>Returns the width - in points (1/72 of an inch) - of the specified column. When converted to character widths, this must be a value that is between 0 - 255.</para>
        </summary>
        <param name="columnIndex">
          <para>The column's 0-based index, relative to the first column in the Area.</para>
        </param>
        <returns>
          <para>The width of the column, in points.</para>
        </returns>
        <example>
          <para>
            <code>
double colWidth = a.GetColumnWidth(0);</code>
            <br/>
            <code>
Dim colWidth As Double = a.GetColumnWidth(0)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.GetColumnWidthInChars(System.Int32)">
            <Doc>
        <summary>
          <para>Sets or returns the width of the column as a number of '0' characters in the font of the 'Normal' style. This must be a value between 0 - 255.</para>
        </summary>
        <param name="columnIndex">
          <para>The column's 0-based index, relative to the starting column of the Area.</para>
        </param>
        <returns>
          <para>The width of the column, as a number of '0' characters.</para>
        </returns>
        <example>
          <para>
            <code>
double colWidth = a.GetColumnWidthInChars();</code>
            <br/>
            <code>
Dim colWidth As Double = a.GetColumnWidthInChars()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Area&quot;]/Member[@signature=&quot;Area.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.GetRowHeight(System.Int32)">
            <Doc>
        <summary>
          <para>Returns the height - in points (1/72 of an inch) - of the specified row. When converted to character widths, this must be a value that is between 0 - 409.</para>
        </summary>
        <param name="rowIndex">
          <para>The 0-based index of the row, relative to the first row in the area.</para>
        </param>
        <returns>
          <para>The height of the row, in points.</para>
        </returns>
        <example>
          <para>
            <code>
double rowHeight = a.GetRowHeight(0);</code>
            <br/>
            <code>
Dim rowHeight As Double = a.GetRowHeight(0)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.GroupColumns(System.Boolean)">
            <Doc>
        <summary>
          <para>Groups or outlines the columns contained within the area.</para>
        </summary>
        <param name="collapsed">
          <para>
            <c>true</c> if the group is collapsed, <c>false</c> if not.</para>
        </param>
        <example>
          <para>
            <code>
a.GroupColumns(true);</code>
            <br/>
            <code>
a.GroupColumns(True)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.GroupRows(System.Boolean)">
            <Doc>
        <summary>
          <para>Groups or outlines the rows contained within the area.</para>
        </summary>
        <param name="collapsed">
          <para>
            <c>true</c> if the group is collapsed, <c>false</c> if not.</para>
        </param>
        <example>
          <para>
            <code>
a.GroupRows(true);</code>
            <br/>
            <code>
a.GroupRows(True)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.ImportData(System.Object[][])">
            <Doc>
        <summary>
          <para>Imports data from a two-dimensional array of objects to the specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> . The new data will  <u>overwrite</u>  values and formulas in the target worksheet cells, but existing formatting will be preserved.</para>
        </summary>
        <param name="data">
          <para>A two-dimensional array of values to import to the worksheet. The first dimension corresponds to row and the second to column (that is, Object[row][column]).<br/>Thus, an array of data  { {"A","X"},{"B","Y"},{"C","Z"} }  would be inserted into the worksheet as:</para>
          <list type="table">
            <item>
              <term>A</term>
              <description>X</description>
            </item>
            <item>
              <term>B</term>
              <description>Y</description>
            </item>
            <item>
              <term>C</term>
              <description>Z</description>
            </item>
          </list>
        </param>
        <returns>
          <para>An <c>Area</c> object representing the set of cells populated with the imported values.</para>
        </returns>
        <example>
          <para>
            <code>
Area data = a.ImportData(dataArray);</code>
            <br/>
            <code>
Dim data As Area = a.ImportData(dataArray)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.ImportData(System.Object[][],System.String[],SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties)">
            <Doc>
        <summary>
          <para>Imports data from a two-dimensional array of objects to the specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> . The new data will  <u>overwrite</u>  values and formulas in the target worksheet cells, but existing formatting will be preserved.</para>
        </summary>
        <param name="data">
          <para>A two-dimensional array of values to import to the worksheet. By default, the first dimension corresponds to row and the second to column (that is, Object[row][column]).<br/>Thus, an array of data  { {"A","X"},{"B","Y"},{"C","Z"} }  would be inserted into the worksheet as:</para>
          <list type="table">
            <item>
              <term>A</term>
              <description>X</description>
            </item>
            <item>
              <term>B</term>
              <description>Y</description>
            </item>
            <item>
              <term>C</term>
              <description>Z</description>
            </item>
          </list>
          <para>If you enable <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.Transpose"/> , the format will be [row][column], so:<br/>{ {"A","B","C"},{"X","Y","Z"} }  would be inserted into the worksheet as:<br/></para>
          <list type="table">
            <item>
              <term>A</term>
              <description>X</description>
            </item>
            <item>
              <term>B</term>
              <description>Y</description>
            </item>
            <item>
              <term>C</term>
              <description>Z</description>
            </item>
          </list>
        </param>
        <param name="columnNames">
          <para>An array of column names for the imported data. <c>columnNames</c> and the column dimension of <c>data</c> must contain the same number of elements.</para>
        </param>
        <param name="properties">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties"/> object that contains a set of properties to use when importing data to the area.</para>
        </param>
        <returns>
          <para>An <c>Area</c> object representing the set of cells populated with the imported values.</para>
        </returns>
        <example>
          <para>
            <code>

          DataImportProperties importProps = oWorkbook.CreateDataImportProperties();
          importProps.Truncate = true;
          Area importedArea = a.ImportData(dataArray, fieldNames, importProps);
        </code>
            <br/>
            <code>

          Dim importProps As DataImportProperties = wb.CreateDataImportProperties()
          importProps.Truncate = True
          Dim importedArea As Area = a.ImportData(dataArray, fieldNames, importProps)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.ImportData(System.Data.DataTable)">
            <Doc>
        <summary>
          <para>Imports data from an ADO.NET <see cref="T:System.Data.DataTable"/>  to the specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/>. The new data will <u>overwrite</u> values and formulas in the target worksheet cells, but existing formatting will be preserved.</para>
        </summary>
        <param name="data">
          <para>The <c>DataTable</c> to import.</para>
        </param>
        <returns>
          <para>An <c>Area</c> object representing the set of cells populated with the imported values.</para>
        </returns>
        <example>
          <para>
            <code>
Area importedArea = a.ImportData(dt);</code>
            <br/>
            <code>
Dim importedArea As Area = a.ImportData(dt)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.ImportData(System.Data.DataTable,SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties)">
            <Doc>
        <summary>
          <para>Imports data from an ADO.NET <see cref="T:System.Data.DataTable"/>  to the specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/>. The new data will <u>overwrite</u> values and formulas in the target worksheet cells, but existing formatting will be preserved.</para>
        </summary>
        <param name="data">
          <para>The <c>DataTable</c> to import.</para>
        </param>
        <param name="props">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties"/> object that contains a set of properties that will determine the behavior of the data import.</para>
        </param>
        <returns>
          <para>An <c>Area</c> object representing the set of cells populated with the imported values.</para>
        </returns>
        <example>
          <para>
            <code>

          DataImportProperties importProps = wb.CreateDataImportProperties();
          importProps.Truncate = true;
          Area importedArea = a.ImportData(dt, importProps);
        </code>
            <br/>
            <code>

          Dim importProps As DataImportProperties = wb.CreateDataImportProperties()
          importProps.Truncate = True
          Area importedArea = a.ImportData(dt, importProps)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.ImportData(System.Data.DataView)">
            <Doc>
        <summary>
          <para>Imports data from an ADO.NET <see cref="T:System.Data.DataView"/>  to the specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/>. The new data will <u>overwrite</u> values and formulas in the target worksheet cells, but existing formatting will be preserved.</para>
        </summary>
        <param name="data">
          <para>The <c>DataView</c> to import.</para>
        </param>
        <returns>
          <para>An <c>Area</c> object representing the set of cells populated with the imported values.</para>
        </returns>
        <example>
          <para>
            <code>
Area importedArea = a.ImportData(oDataView);</code>
            <br/>
            <code>
Dim importedArea As Area = a.ImportData(oDataView)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.ImportData(System.Data.DataView,SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties)">
            <Doc>
        <summary>
          <para>Imports data from an ADO.NET <see cref="T:System.Data.DataView"/>  to the specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/>. The new data will <u>overwrite</u> values and formulas in the target worksheet cells, but existing formatting will be preserved.</para>
        </summary>
        <param name="data">
          <para>The <c>DataView</c> to import.</para>
        </param>
        <param name="props">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties"/> object that contains a set of properties that will determine the behavior of the data import.</para>
        </param>
        <returns>
          <para>An <c>Area</c> object representing the set of cells populated with the imported values.</para>
        </returns>
        <example>
          <para>
            <code>

          DataImportProperties importProps = wb.CreateDataImportProperties();
          importProps.Truncate = true;
          Area importedArea = a.ImportData(dv, importProps);
        </code>
            <br/>
            <code>

          Dim importProps As DataImportProperties = wb.CreateDataImportProperties()
          importProps.Truncate = True
          Dim importedArea As Area = a.ImportData(dv, importProps)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.ImportData(System.Object[0:,0:])">
            <Doc>
        <summary>
          <para>Imports data from a rectangular array of objects  to the specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/>. The new data will <u>overwrite</u> values and formulas in the target worksheet cells, but existing formatting will be preserved.</para>
        </summary>
        <param name="data">
          <para>A rectangular array of values to import to the worksheet. The first dimension corresponds to row and the second to column.<br/>Thus, an array of data  { {"A","X"},{"B","Y"},{"C","Z"} }  would be inserted into the worksheet as:</para>
          <list type="table">
            <item>
              <term>A</term>
              <description>X</description>
            </item>
            <item>
              <term>B</term>
              <description>Y</description>
            </item>
            <item>
              <term>C</term>
              <description>Z</description>
            </item>
          </list>
        </param>
        <returns>
          <para>An <c>Area</c> object representing the set of cells populated with the imported values.</para>
        </returns>
        <example>
          <para>
            <code>
Area importedArea = a.ImportData(dataArray);</code>
            <br/>
            <code>
Dim importedArea As Area = a.ImportData(dataArray)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.ImportData(System.Object[0:,0:],System.String[],SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties)">
            <Doc>
        <summary>
          <para>Imports data from a rectangular array of objects  to the specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/>. The new data will <u>overwrite</u> values and formulas in the target worksheet cells, but existing formatting will be preserved.</para>
        </summary>
        <param name="data">
          <para>A rectangular array of values to import to the worksheet.       The first dimension corresponds to row and the second to column.<br/>Thus, an array of data  { {"A","X"},{"B","Y"},{"C","Z"} }  would be inserted into the worksheet as:<br/></para>
          <list type="table">
            <item>
              <term>A</term>
              <description>X</description>
            </item>
            <item>
              <term>B</term>
              <description>Y</description>
            </item>
            <item>
              <term>C</term>
              <description>Z</description>
            </item>
          </list>
          <para>If you enable <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.Transpose"/> , the format will be [row][column], so:<br/>{ {"A","B","C"},{"X","Y","Z"} }  would be inserted into the worksheet as:<br/></para>
          <list type="table">
            <item>
              <term>A</term>
              <description>X</description>
            </item>
            <item>
              <term>B</term>
              <description>Y</description>
            </item>
            <item>
              <term>C</term>
              <description>Z</description>
            </item>
          </list>
        </param>
        <param name="columnNames">
          <para>A string array of column names.</para>
        </param>
        <param name="props">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties"/> object that contains a set of properties that will determine the behavior of the data import.</para>
        </param>
        <returns>
          <para>An <c>Area</c> object representing the set of cells populated with the imported values.</para>
        </returns>
        <example>
          <para>
            <code>

          DataImportProperties importProps = wb.CreateDataImportProperties();
          importProps.Transpose = true;
          Area importedArea = a.ImportData(dataArray, fieldNames, importProps);
        </code>
            <br/>
            <code>

          Dim importProps As DataImportProperties = wb.CreateDataImportProperties()
          importProps.Transpose = True
          Dim importedArea As Area = a.ImportData(dataArray, fieldNames, importProps)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.ImportData(System.Data.IDataReader)">
            <Doc>
        <summary>
          <para>Imports data from an <see cref="T:System.Data.IDataReader"/> to the specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/>. The new data will <u>overwrite</u> values and formulas in the target worksheet cells, but existing formatting will be preserved.</para>
        </summary>
        <param name="data">
          <para>An instance of <see cref="T:System.Data.SqlClient.SqlDataReader"/>, <see cref="T:System.Data.OleDb.OleDbDataReader"/> or <code>
Microsoft.AnalysisServices.AdomdClient.AdomdDataReader</code><br/>.</para>
        </param>
        <returns>
          <para>An <c>Area</c> object representing the set of cells populated with the imported values.</para>
        </returns>
        <example>
          <para>
            <code>
Area importedArea = a.ImportData(dr);</code>
            <br/>
            <code>
Dim importedArea As Area = a.ImportData(dr)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.ImportData(System.Data.IDataReader,SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties)">
            <Doc>
        <summary>
          <para>Imports data from an <see cref="T:System.Data.IDataReader"/> to the specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/>. The new data will <u>overwrite</u> values and formulas in the target worksheet cells, but existing formatting will be preserved.</para>
        </summary>
        <param name="data">
          <para>An instance of <see cref="T:System.Data.SqlClient.SqlDataReader"/>, <see cref="T:System.Data.OleDb.OleDbDataReader"/> or <code>
Microsoft.AnalysisServices.AdomdClient.AdomdDataReader</code><br/>.</para>
        </param>
        <param name="props">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties"/> object that contains a set of properties that will determine the behavior of the data import.</para>
        </param>
        <returns>
          <para>An <c>Area</c> object representing the set of cells populated with the imported values.</para>
        </returns>
        <example>
          <para>
            <code>

          DataImportProperties importProps = wb.CreateDataImportProperties();
          importProps.Truncate = true;
          Area importedArea = a.ImportData(dr, importProps);
        </code>
            <br/>
            <code>

          Dim importProps As DataImportProperties = wb.CreateDataImportProperties()
          importProps.Truncate = True
          Dim importedArea As Area = a.ImportData(dr, importProps)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.MergeCells">
            <Doc>
        <summary>
          <para>Merges all cells in the area into a single cell.</para>
        </summary>
        <example>
          <para>
            <code>
a.MergeCells();</code>
            <br/>
            <code>
a.MergeCells()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.RemoveConditionalFormat">
            <Doc>
        <summary>
          <para>This method removes any ConditionalFormat objects from the Area.</para>
        </summary>
        <example>
          <para>
            <code>
area.RemoveConditionalFormat();</code>
            <br/>
            <code>
area.RemoveConditionalFormat()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.SetColumnWidth(System.Int32,System.Double)">
            <Doc>
        <summary>
          <para>Sets the width - in points (1/72 of an inch) - of the specified column. When converted to character widths, this must be a value that is between 0 - 255.</para>
        </summary>
        <param name="columnIndex">
          <para>The column's 0-based index, relative to the first column in the area.</para>
        </param>
        <param name="width">
          <para>The width of the column, in points.</para>
        </param>
        <example>
          <para>
            <code>
a.SetColumnWidth(0, 100);</code>
            <br/>
            <code>
a.SetColumnWidth(0, 100)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.SetColumnWidthInChars(System.Int32,System.Double)">
            <Doc>
        <summary>
          <para>Sets or returns the width of the column as a number of '0' characters in the font of the 'Normal' style. This must be a value between the 0 - 255.</para>
        </summary>
        <param name="columnIndex">
          <para>The column's 0-based index, relative to the starting column of the Area.</para>
        </param>
        <param name="width">
          <para>The width of the column, as a number of '0' characters.</para>
        </param>
        <example>
          <para>
            <code>
a.SetColumnWidthInChars(0, 100);</code>
            <br/>
            <code>
a.SetColumnWidthInChars(0, 100)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.SetConditionalFormat(SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat)">
            <Doc>
        <summary>
          <para>This method copies the specified ConditionaFormat object and associates it with this Area. If any ConditionalFormat objects already exist within the Area, they will be removed and replaced by the specifed one.</para>
        </summary>
        <param name="conditionalFormat"/>
        <example>
          <para>
            <code>
area.SetConditionalFormat(condFmt);</code>
            <br/>
            <code>
area.SetConditionalFormat(condFmt)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.SetDataValidation(SoftArtisans.OfficeWriter.ExcelWriter.DataValidation)">
            <Doc>
        <summary>
          <para>Assigns a data validation rule to all cells in the Area.</para>
        </summary>
        <param name="dataValidation">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation"/> object<br/>representing the data validation rule to assign to the Area.</para>
        </param>
        <example>
          <para>
            <code>
area.SetDataValidation(myDataValidation);</code>
            <br/>
            <code>
area.SetDataValidation(myDataValidation)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.SetRowHeight(System.Int32,System.Double)">
            <Doc>
        <summary>
          <para>Sets the height - in points (1/72 of an inch) - of the specified row. When converted to character widths, this must be a value that is between 0 - 409.</para>
        </summary>
        <param name="rowIndex">
          <para>The 0-based index of the row, relative to the first row in  the area.</para>
        </param>
        <param name="height">
          <para>The height of the row, in points.</para>
        </param>
        <example>
          <para>
            <code>
a.SetRowHeight(0, 30);</code>
            <br/>
            <code>
a.SetRowHeight(0, 30)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.SetStyle(SoftArtisans.OfficeWriter.ExcelWriter.Style)">
            <Doc>
        <summary>
          <para>Sets or returns a style for the area.  When a style is set - rather than applied  (see <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.ApplyStyle(SoftArtisans.OfficeWriter.ExcelWriter.Style)"/>) - the area to which the style  is assigned acquires all of that style's properties, including font properties and number  formatting.  Setting a style overwrites any pre-existing formatting on the area.</para>
        </summary>
        <param name="style">
          <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Style"/> object to assign to the area.</para>
        </param>
        <example>
          <para>
            <code>
a.SetStyle(styl);</code>
            <br/>
            <code>
a.SetStyle(styl)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.ToString">
            <Doc>
        <summary>
          <para>Returns a string representation of the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object.</para>
        </summary>
        <returns>
          <para>A string representation of the <c>Area</c> object.</para>
        </returns>
        <example>
          <para>
            <code>
string color = area.ToString();</code>
            <br/>
            <code>
Dim color As String = area.ToString()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.UngroupColumns">
            <Doc>
        <summary>
          <para>Ungroups the columns within the area.</para>
        </summary>
        <example>
          <para>
            <code>
a.UngroupColumns();</code>
            <br/>
            <code>
a.UngroupColumns()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.UngroupRows">
            <Doc>
        <summary>
          <para>Ungroups the rows within the area.</para>
        </summary>
        <example>
          <para>
            <code>
a.UngroupRows();</code>
            <br/>
            <code>
a.UngroupRows()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Area.AllColumnWidths">
            <Doc>
        <summary>
          <para>Sets the width - in points (1/72 of an inch) - of all columns in the Area. When converted to character widths, this must be a value that is between 0 - 255.</para>
        </summary>
        <example>
          <para>
            <code>
a.AllColumnWidths = 100;</code>
            <br/>
            <code>
a.AllColumnWidths = 100</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Area.AllColumnWidthsInChars">
            <Doc>
        <summary>
          <para>Sets or returns the width of all columns in this Area as a number of  '0' characters in the font of the 'Normal' style. This must be a value between 0 - 255.</para>
        </summary>
        <example>
          <para>
            <code>
a.AllColumnWidthsInChars = 100;</code>
            <br/>
            <code>
a.AllColumnWidthsInChars = 100</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Area.AllRowsHeight">
            <Doc>
        <summary>
          <para>Sets the height - in points (1/72 of an inch) - of all rows in this Area. This must be a value that is between 0 - 409.</para>
        </summary>
        <example>
          <para>
            <code>
a.AllRowsHeight = 30;</code>
            <br/>
            <code>
a.AllRowsHeight = 30</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Area.ArrayFormula">
            <Doc>
        <summary>
          <para>Sets or returns an array entered formula.  An array entered formula is a formula that can have multiple output values. To set an array entered formula, surround the formula string with a '{' and '}'.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get ArrayFormula
          string formula = a.ArrayFormula;

          //--- Set ArrayFormula
          Area a = ws.CreateArea(10,0,10,1);
          a.ArrayFormula = "{=TREND(A1:A10,B1:B10)}";
        </code>
            <br/>
            <code>

          '--- Get ArrayFormula
          Dim formula As String = a.ArrayFormula

          '--- Set ArrayFormula
          Dim a As Area = ws.CreateArea(10,0,10,1)
          a.ArrayFormula = "{=TREND(A1:A10,B1:B10)}"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Area.BorderAround">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Border"/> object that represents a border around the area. Use the <c>Border</c> object returned to set the appearance of the border.</para>
        </summary>
        <example>
          <para>
            <code>
Border bordr = a.BorderAround;</code>
            <br/>
            <code>
Dim bordr As Border = a.BorderAround</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Area.ColumnCount">
            <Doc>
        <summary>
          <para>Sets or returns the number of columns in the area.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get ColumnCount
          int colCount = a.ColumnCount;

          //--- Set ColumnCount
          a.ColumnCount = 7;
        </code>
            <br/>
            <code>

          '--- Get ColumnCount
          Dim colCount As Integer = a.ColumnCount

          '--- Set ColumnCount
          a.ColumnCount = 7
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Area.Dimensions">
            <Doc>
        <summary>
          <para>Sets or returns the dimensions of the area in the format "A1:B7".</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Dimensions
          string areaDimensions = a.Dimensions;

          //--- Set Dimensions
          a.Dimensions = "A1:B7";
        </code>
            <br/>
            <code>

          '--- Get Dimensions
          Dim areaDimensions As String = a.Dimensions

          '--- Set Dimensions
          a.Dimensions = "A1:B7"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Area.FirstColumn">
            <Doc>
        <summary>
          <para>Sets or returns the 0-based number of the first column within the rectangular area of cells.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get FirstColumn
          int firstCol = a.FirstColumn;

          //--- Set FirstColumn
          a.FirstColumn = 5;
        </code>
            <br/>
            <code>

          '--- Get FirstColumn
          Dim firstCol As Integer = a.FirstColumn

          '--- Set FirstColumn
          a.FirstColumn = 5
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Area.FirstRow">
            <Doc>
        <summary>
          <para>Sets or returns the 0-based number of the first row within the rectangular area of cells.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get FirstRow
          int row = a.FirstRow;

          //--- Set FirstRow
          a.FirstRow = 5;
        </code>
            <br/>
            <code>

          '--- Get FirstRow
          Dim row As Integer = a.FirstRow

          '--- Set FirstRow
          a.FirstRow = 5
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Area.Item(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Returns a cell within the specified area of cells.</para>
        </summary>
        <param name="row">
          <para>The cell's 0-based row number, relative to the first cell in the area. For example, for the area B4:E7, <c>area\[0,0\]</c> will return cell B4.</para>
        </param>
        <param name="col">
          <para>The cell's 0-based column number, relative to the first cell in the area.  For example, for the area B4:E7, <c>area\[0,0\]</c> will return cell B4.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/> object representing the cell. If the cell is not within the specified area, an exception will be thrown.</para>
        </returns>
        <example>
          <para>
            <code>
Cell c = ar[5,5];</code>
            <br/>
            <code>
Dim c As Cell = ar(5, 5)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Area.PopulatedCells">
            <Doc>
        <summary>
          <para>Returns a rectanglular area of cells from the first (top, left) populated cell to the last (bottom, right) populated cell in the Area. The Area returned will include cells that contain no data but have been formatted.</para>
        </summary>
        <example>
          <para>
            <code>
Area populated = a.PopulatedCells;</code>
            <br/>
            <code>
Dim populated As Area = a.PopulatedCells</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Area.RowCount">
            <Doc>
        <summary>
          <para>Sets or returns the number of rows in the area.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get FirstCount
          int rows = a.RowCount;

          //--- Set FirstCount
          a.RowCount = 7;
        </code>
            <br/>
            <code>

          '--- Get FirstCount
          Dim rows As Integer = a.RowCount

          '--- Set FirstCount
          a.RowCount = 7
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Area.WorksheetIndex">
            <Doc>
        <summary>
          <para>Returns the 0-based index of the worksheet that contains the specified area.</para>
        </summary>
        <example>
          <para>
            <code>
int sheetNum = a.WorksheetIndex;</code>
            <br/>
            <code>
Dim sheetNum As Integer = a.WorksheetIndex</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Axis">
            <Doc>
      <summary>
        <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Axis"/> object represents a chart axis. The <c>Axis</c> class has two sub-classes: <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis"/> and <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ValueAxis"/>.</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Axis.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Axis&quot;]/Member[@signature=&quot;Axis.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Axis.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Axis&quot;]/Member[@signature=&quot;Axis.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Axis.AxisLine">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine"/> object representing the appearance of the axis.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Axis.LabelFont">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Font"/> object for the labels on the axis.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Axis.MajorGridline">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine"/> object representing the major gridlines of the axis. Gridlines extend from the tick marks on an axis across the chart's plot area.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Axis.MajorTickType">
            <Doc>
        <summary>
          <para>Sets or returns how axis tick marks on the major gridlines are displayed.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Axis.MinorGridline">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine"/> object representing the minor gridlines of the axis. Gridlines extend from the tick marks on an axis across the chart's plot area.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Axis.MinorTickType">
            <Doc>
        <summary>
          <para>Sets or returns how axis tick marks on the minor gridlines are displayed.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Axis.NumberFormat">
            <Doc>
        <summary>
          <para>Sets or returns the display format of axis label numbers.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TextDisplayTopToBottom">
            <Doc>
        <summary>
          <para>Sets or returns whether the text of the tick labels is displayed top to bottom and the letters are upright.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TextRotationAngle">
            <Doc>
        <summary>
          <para>Sets or returns the rotation angle of the text of the tick labels.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TickLabelPosition">
            <Doc>
        <summary>
          <para>Sets or returns the positioning of axis tick labels.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Axis.Title">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartText"/> object representing the axis title.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Axis.ValuesInReverseOrder">
            <Doc>
        <summary>
          <para>Sets or returns whether the axis values are displayed in reverse order.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Axis.Visible">
            <Doc>
        <summary>
          <para>Sets or returns whether the axis will be displayed or hidden.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TickLabelPos">
            <Doc>
        <summary>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TickLabelPos"/> value specifies the position of axis tick labels.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TickLabelPos.HighEnd">
            <Doc>
          <summary>Tick labels will be displayed at the top of the chart's plot area.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TickLabelPos.Invisible">
            <Doc>
          <summary>Tick labels will not be shown.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TickLabelPos.LowEnd">
            <Doc>
          <summary>Tick labels will be displayed at the bottom of the chart's plot area.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TickLabelPos.NextToAxis">
            <Doc>
          <summary>Tick labels will be displayed next to the axis.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TickLabelPos.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Axis&quot;]/Member[@signature=&quot;Axis.TickLabelPos&quot;]/Member[@signature=&quot;Axis.TickLabelPos.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TickLabelPos.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Axis&quot;]/Member[@signature=&quot;Axis.TickLabelPos&quot;]/Member[@signature=&quot;Axis.TickLabelPos.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TickLabelPos.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Axis&quot;]/Member[@signature=&quot;Axis.TickLabelPos&quot;]/Member[@signature=&quot;Axis.TickLabelPos.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TickLabelPos.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Axis&quot;]/Member[@signature=&quot;Axis.TickLabelPos&quot;]/Member[@signature=&quot;Axis.TickLabelPos.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TickLabelPos.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Axis&quot;]/Member[@signature=&quot;Axis.TickLabelPos&quot;]/Member[@signature=&quot;Axis.TickLabelPos.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TickType">
            <Doc>
        <summary>
          <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TickType"/> class contains all available axis tick types.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TickType.CrossAxis">
            <Doc>
          <summary>Tick marks will cross the axis.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TickType.InsideLine">
            <Doc>
          <summary>Tick marks will face inward.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TickType.Invisible">
            <Doc>
          <summary>Tick marks will not be shown.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TickType.OutsideLine">
            <Doc>
          <summary>Tick marks will face outward.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TickType.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Axis&quot;]/Member[@signature=&quot;Axis.TickType&quot;]/Member[@signature=&quot;Axis.TickType.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TickType.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Axis&quot;]/Member[@signature=&quot;Axis.TickType&quot;]/Member[@signature=&quot;Axis.TickType.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TickType.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Axis&quot;]/Member[@signature=&quot;Axis.TickType&quot;]/Member[@signature=&quot;Axis.TickType.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TickType.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Axis&quot;]/Member[@signature=&quot;Axis.TickType&quot;]/Member[@signature=&quot;Axis.TickType.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Axis.TickType.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Axis&quot;]/Member[@signature=&quot;Axis.TickType&quot;]/Member[@signature=&quot;Axis.TickType.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.AxisLabel">
            <Doc>
      <summary>
        <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.AxisLabel"/> object represents the labels on an axis. The labels are the displayed values on the axis. Note: the title of an axis (returned by <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Axis.Title"/> ) is not an axis label.</para>
      </summary>
    </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartText">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartText"/> object represents a region in a chart where text is displayed (e.g., a chart title). The <c>ChartText</c> extends <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion"/>.</para>
      </summary>
    </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion"/> object represents either a chart area or plot area. The following classes extend <c>ChartRegion</c> : <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.AxisLabel"/>, <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartText"/>, <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Legend"/>, <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataPoint"/>, and <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.SeriesDataLabel"/>.</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartRegion&quot;]/Member[@signature=&quot;ChartRegion.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartRegion&quot;]/Member[@signature=&quot;ChartRegion.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.BorderLine">
            <Doc>
        <summary>
          <para>Returns the border around the chart region.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.Font">
            <Doc>
        <summary>
          <para>Sets or returns the font for text in the chart region. If the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion"/> object represents the chart area, the font returned will be the default font for all text items outside of the plot area. If this <c>ChartRegion</c> represents the plot area, the font returned will be the default font for all text items within the plot area.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.HasShadow">
            <Doc>
        <summary>
          <para>Sets or returns whether the chart region will have a shadow.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.Height">
            <Doc>
        <summary>
          <para>Sets or returns the height of the chart region, in units of 1/4000 of the chart area.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.Interior">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartInterior"/> object containing formatting properties for the region.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.TextDisplayTopToBottom">
            <Doc>
        <summary>
          <para>Sets or returns whether the text in the ChartRegion is displayed top to bottom and the letters are upright. If the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion"/> object represents the chart area, the value returned will be the default for all text items outside of the plot area. If the <c>ChartRegion</c> object represents the plot area, the value returned will be the default for all text items within the plot area.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.TextHorizontalAlignment">
            <Doc>
        <summary>
          <para>Sets or returns the horizontal alignment of text in the chart region. If the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion"/> object represents the chart area, the horizontal alignment returned will be the default horizontal alignment for all text items outside the plot area. If the <c>ChartRegion</c> object represents the plot area, the horizontal alignment returned will be the default horizontal alignment for all text items within the plot area.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.TextRotationAngle">
            <Doc>
        <summary>
          <para>Sets or returns the rotation angle of text in a chart region. If the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion"/> object represents the chart area, the angle returned will be the default rotation angle for all text items outside of the plot area. If the <c>ChartRegion</c> object represents the plot area, the angle returned will be the default rotation angle for all text items within the plot area.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.TextVerticalAlignment">
            <Doc>
        <summary>
          <para>Sets or returns the vertical alignment of text in the chart region. If the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion"/> object represents the chart area, the vertical alignment returned will be the default vertical alignment for all text items outside the plot area. If the <c>ChartRegion</c> object represents the plot area, the vertical alignment returned will be the default vertical alignment for all text items within the plot area.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.Width">
            <Doc>
        <summary>
          <para>Sets or returns the width of the chart region, in units of 1/4000 of the chart area.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.X">
            <Doc>
        <summary>
          <para>Sets or returns the x coordinate of the upper left corner of the chart region, in units of 1/4000 of the chart area.</para>
        </summary>
        <remarks>
          <para>For <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.SeriesDataLabel"/> s on a column or bar chart X is the offset perpendicular to the bar or column from the default position in 1/4000 of the ChartArea. For <c>SeriesDataLabel</c> s on a pie chart X is offset angle from the default position in radians. For <c>SeriesDataLabel</c> s in all other charts types X is the offset from the default x position in 1/4000 of the ChartArea.</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.Y">
            <Doc>
        <summary>
          <para>Sets or returns the y coordinate of the upper left corner of the chart region, in units of 1/4000 of the chart area.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.HorizontalAlignment">
            <Doc>
        <summary>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.HorizontalAlignment"/> value determines the horizontal alignment of text in the specified chart area or plot area.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.HorizontalAlignment.Center">
            <Doc>
          <summary>Text in the chart region will be horizontally centered.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.HorizontalAlignment.Justify">
            <Doc>
          <summary>Text in the chart region will be justified.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.HorizontalAlignment.Left">
            <Doc>
          <summary>Text in the chart region will be left-aligned.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.HorizontalAlignment.Right">
            <Doc>
          <summary>Text in the chart region will be right-aligned.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.HorizontalAlignment.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartRegion&quot;]/Member[@signature=&quot;ChartRegion.HorizontalAlignment&quot;]/Member[@signature=&quot;ChartRegion.HorizontalAlignment.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.HorizontalAlignment.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartRegion&quot;]/Member[@signature=&quot;ChartRegion.HorizontalAlignment&quot;]/Member[@signature=&quot;ChartRegion.HorizontalAlignment.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.HorizontalAlignment.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartRegion&quot;]/Member[@signature=&quot;ChartRegion.HorizontalAlignment&quot;]/Member[@signature=&quot;ChartRegion.HorizontalAlignment.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.HorizontalAlignment.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartRegion&quot;]/Member[@signature=&quot;ChartRegion.HorizontalAlignment&quot;]/Member[@signature=&quot;ChartRegion.HorizontalAlignment.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.HorizontalAlignment.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartRegion&quot;]/Member[@signature=&quot;ChartRegion.HorizontalAlignment&quot;]/Member[@signature=&quot;ChartRegion.HorizontalAlignment.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.VerticalAlignment">
            <Doc>
        <summary>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.VerticalAlignment"/> value determines the vertical alignment of text in the specified chart area or plot area.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.VerticalAlignment.Bottom">
            <Doc>
          <summary>Text in the chart region will be bottom-aligned.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.VerticalAlignment.Center">
            <Doc>
          <summary>Text in the chart region will be vertically centered.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.VerticalAlignment.Justify">
            <Doc>
          <summary>Text in the chart region will be justified vertically.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.VerticalAlignment.Top">
            <Doc>
          <summary>Text in the chart region will be top-aligned.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.VerticalAlignment.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartRegion&quot;]/Member[@signature=&quot;ChartRegion.VerticalAlignment&quot;]/Member[@signature=&quot;ChartRegion.VerticalAlignment.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.VerticalAlignment.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartRegion&quot;]/Member[@signature=&quot;ChartRegion.VerticalAlignment&quot;]/Member[@signature=&quot;ChartRegion.VerticalAlignment.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.VerticalAlignment.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartRegion&quot;]/Member[@signature=&quot;ChartRegion.VerticalAlignment&quot;]/Member[@signature=&quot;ChartRegion.VerticalAlignment.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.VerticalAlignment.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartRegion&quot;]/Member[@signature=&quot;ChartRegion.VerticalAlignment&quot;]/Member[@signature=&quot;ChartRegion.VerticalAlignment.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.VerticalAlignment.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartRegion&quot;]/Member[@signature=&quot;ChartRegion.VerticalAlignment&quot;]/Member[@signature=&quot;ChartRegion.VerticalAlignment.Value&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartText.ClearRichTextFormatting">
            <Doc>
        <summary>
          <para>Clears all rich text formatting in the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartText"/> object.</para>
        </summary>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartText.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartText&quot;]/Member[@signature=&quot;ChartText.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartText.GetCharacters(System.Int32)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CharacterRun"/> object representing a range of characters within the text. Use this to set a font on specified characters within the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartText"/> object.</para>
        </summary>
        <param name="startIndex">
          <para>The 0-based character position at which to begin the character run.</para>
        </param>
        <returns>
          <para>A <c>CharacterRun</c> object representing a range of characters within the text.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartText.GetCharacters(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CharacterRun"/> object representing a range of characters within the text. Use this to set a font on specified characters within the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartText"/> object.</para>
        </summary>
        <param name="startIndex">
          <para>The character position at which to begin the character run.</para>
        </param>
        <param name="length">
          <para>The length of the character run.</para>
        </param>
        <returns>
          <para>A <c>CharacterRun</c> object representing a range of characters within the cell.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartText.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartText&quot;]/Member[@signature=&quot;ChartText.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartText.Formula">
            <Doc>
        <summary>
          <para>Sets or returns the formula to use to calculate the value for the text item. For example, if the formula is "=Sheet1!A1", the value in that cell will be the text displayed in the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartText"/> object.</para>
        </summary>
        <remarks>
          <para>The formula may be a reference to a cell, range of cells, or a union of such references.</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartText.NumberFormat">
            <Doc>
        <summary>
          <para>Sets or returns the display format of numbers in the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartText"/> object.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartText.Text">
            <Doc>
        <summary>
          <para>Sets or returns the text displayed in the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartText"/> object.</para>
        </summary>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.AxisLabel.#ctor(SoftArtisans.OfficeWriter.ExcelWriter.Model.ChartTextModel)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;AxisLabel&quot;]/Member[@signature=&quot;AxisLabel.AxisLabel(ChartTextModel)&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.AxisLabel.Position">
            <Doc>
        <summary>
          <para>Sets or returns how the specified axis labels should be positioned in the chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.AxisLabel.LabelPosition">
            <Doc>
        <summary>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.AxisLabel.LabelPosition"/> value specifies the position of an axis label in a chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.AxisLabel.LabelPosition.HighEndPlotArea">
            <Doc>
          <summary>The axis label will be displayed at the top of the chart's plot area.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.AxisLabel.LabelPosition.Invisible">
            <Doc>
          <summary>The axis label will not be shown.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.AxisLabel.LabelPosition.LowEndPlotArea">
            <Doc>
          <summary>The axis label will be displayed at the bottom of the chart's plot area.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.AxisLabel.LabelPosition.NextToAxis">
            <Doc>
          <summary>The axis label will be displayed next to the axis.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.AxisLabel.LabelPosition.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;AxisLabel&quot;]/Member[@signature=&quot;AxisLabel.LabelPosition&quot;]/Member[@signature=&quot;AxisLabel.LabelPosition.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.AxisLabel.LabelPosition.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;AxisLabel&quot;]/Member[@signature=&quot;AxisLabel.LabelPosition&quot;]/Member[@signature=&quot;AxisLabel.LabelPosition.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.AxisLabel.LabelPosition.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;AxisLabel&quot;]/Member[@signature=&quot;AxisLabel.LabelPosition&quot;]/Member[@signature=&quot;AxisLabel.LabelPosition.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.AxisLabel.LabelPosition.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;AxisLabel&quot;]/Member[@signature=&quot;AxisLabel.LabelPosition&quot;]/Member[@signature=&quot;AxisLabel.LabelPosition.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.AxisLabel.LabelPosition.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;AxisLabel&quot;]/Member[@signature=&quot;AxisLabel.LabelPosition&quot;]/Member[@signature=&quot;AxisLabel.LabelPosition.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.AxisType">
            <Doc>
      <summary>
        <para>When creating a chart with two X or Y axes (primary and secondary), use AxisType to associate a series with a particular axis.</para>
      </summary>
    </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.AxisType.Primary">
            <Doc>
        <summary>Primary axis</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.AxisType.Secondary">
            <Doc>
        <summary>Secondary axis</summary>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.AxisType.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;AxisType&quot;]/Member[@signature=&quot;AxisType.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.AxisType.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;AxisType&quot;]/Member[@signature=&quot;AxisType.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.AxisType.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;AxisType&quot;]/Member[@signature=&quot;AxisType.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.AxisType.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;AxisType&quot;]/Member[@signature=&quot;AxisType.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.AxisType.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;AxisType&quot;]/Member[@signature=&quot;AxisType.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Border">
            <Doc>
      <summary>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Border"/> object represents a border around a cell or area of cells. </summary>
      <remarks>
        <para>To set a border around a single cell, set the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Border.Color"/> and <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Border.Style"/> of a <c>Border</c> object retrieved through the cell's <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Border.Style"/>:<br/><code>
cellB2.Style.Border.Style = Border.LineStyle.Thick;
</code><br/><code>
cellB2.Style.Border.Color = Palette.SystemColor.Blue;
</code></para>
        <para>You can also define part of a cell's border using <see cref="!:Border[Border.Part]"/>:<br/><code>
cellB2.Style.Border[Border.Part.Outline].Color = Palette.SystemColor.Blue;
</code><br/>To return a <c>Border</c> object for an <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/>, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Area.BorderAround"/>.</para>
      </remarks>
      <example>
        <para>
          <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          Worksheet ws = wb[0];
          Area a = ws.CreateArea(4, 4, 15, 6);
          Border b = a.BorderAround;
        </code>
          <br/>
          <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim ws As Worksheet = wb(0)
          Dim a As Area = ws.CreateArea(4, 4, 15, 6)
          Dim b As Border = a.BorderAround
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Border.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Border.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Border.Color">
            <Doc>
        <summary>
          <para>Sets or returns the color of the border, as an ExcelWriter <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Border.Color"/> object.  If multiple colors were assigned to border parts,  <c>Color</c> will return the color of the top border.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Color
          Color c = b.Color;

          //--- Set Color
          b.Color = wb.Palette.GetClosestColor(System.Drawing.Color.Blue);
        </code>
            <br/>
            <code>

          '--- Get Color
          Dim c As Color = b.Color

          '--- Set Color
          b.Color = wb.Palette.GetClosestColor(System.Drawing.Color.Blue)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Border.Item(SoftArtisans.OfficeWriter.ExcelWriter.Border.Part)">
            <Doc>
        <summary>
          <para>Returns a BorderPart object representing the specified part of the border. This is the indexer for the Border object.</para>
        </summary>
        <param name="part">
          <para>The part of the border for which to set the line style.</para>
        </param>
        <returns>
          <para>The BorderPart object representing the specified part of the border.</para>
        </returns>
        <example>
          <para>
            <code>
BorderPart bp = b[Border.Part.Left];</code>
            <br/>
            <code>
Dim bp As BorderPart = b.Item(Border.Part.Left)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Border.Style">
            <Doc>
        <summary>
          <para>Sets or returns the border's line style.</para>
        </summary>
        <remarks>
          <para>To set the line style for a specific part of the border get the BorderPart object for the desired part of the border.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get LineStyle
          Border.LineStyle ls = b.LineStyle;

          //--- Set LineStyle
          b.LineStyle = Border.LineStyle.Thick;
        </code>
            <br/>
            <code>

          '--- Get LineStyle
          Dim ls As Border.LineStyle = b.LineStyle

          '--- Set LineStyle
          b.LineStyle = Border.LineStyle.Thick
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle">
            <Doc>
        <summary>
          <para>Use the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle"/> class to set  a line style for a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Border"/> or <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.BorderPart"/>.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle.DashDot">
            <Doc>
          <summary>Dash-dot line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle.DashDotDot">
            <Doc>
          <summary>Dash-dot-dot line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle.Dashed">
            <Doc>
          <summary>Dashed line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle.Dotted">
            <Doc>
          <summary>Dotted line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle.Double">
            <Doc>
          <summary>Double line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle.Hair">
            <Doc>
          <summary>Very thin line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle.Medium">
            <Doc>
          <summary>Medium line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle.MediumDashDot">
            <Doc>
          <summary>Medium dash-dot line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle.MediumDashDotDot">
            <Doc>
          <summary>Medium dash-dot-dot line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle.MediumDashed">
            <Doc>
          <summary>Medium dashed line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle.None">
            <Doc>
          <summary>No line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle.SlantedDashDot">
            <Doc>
          <summary>Slanted-dash-dot line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle.Thick">
            <Doc>
          <summary>Thick line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle.Thin">
            <Doc>
          <summary>Thin line</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.LineStyle&quot;]/Member[@signature=&quot;Border.LineStyle.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.LineStyle&quot;]/Member[@signature=&quot;Border.LineStyle.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.LineStyle&quot;]/Member[@signature=&quot;Border.LineStyle.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.LineStyle&quot;]/Member[@signature=&quot;Border.LineStyle.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Border.LineStyle.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.LineStyle&quot;]/Member[@signature=&quot;Border.LineStyle.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Border.Part">
            <Doc>
        <summary>
          <para>Use the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Border.Part"/> class to set a color or line style for a specific part of a border.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Border.Part.All">
            <Doc>
          <summary>All borders and both diagonals</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Border.Part.Bottom">
            <Doc>
          <summary>Bottom border</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Border.Part.DiagonalBoth">
            <Doc>
          <summary>Both diagonal lines</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Border.Part.DiagonalDown">
            <Doc>
          <summary>Diagonal-down line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Border.Part.DiagonalUp">
            <Doc>
          <summary>Diagonal-up line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Border.Part.Left">
            <Doc>
          <summary>Left border</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Border.Part.Outline">
            <Doc>
          <summary>Left, right, top, and bottom borders</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Border.Part.Right">
            <Doc>
          <summary>Right border</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Border.Part.Top">
            <Doc>
          <summary>Top border</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Border.Part.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.Part&quot;]/Member[@signature=&quot;Border.Part.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Border.Part.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.Part&quot;]/Member[@signature=&quot;Border.Part.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Border.Part.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.Part&quot;]/Member[@signature=&quot;Border.Part.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Border.Part.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.Part&quot;]/Member[@signature=&quot;Border.Part.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Border.Part.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.Part&quot;]/Member[@signature=&quot;Border.Part.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.BorderPart">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.BorderPart"/> object represents a particular part of a border around a cell or area of cells.</para>
      </summary>
      <remarks>
        <para>To get a <c>BorderPart</c>, use <see cref="!:Border[Border.Part]"/>.</para>
      </remarks>
      <example>
        <para>
          <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          Worksheet ws = wb.Worksheets[0];
          Area a = ws.CreateArea(4, 4, 15, 6);
          Border b = a.BorderAround;
          BorderPart bp = b[Border.Part.Left];
        </code>
          <br/>
          <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim ws As Worksheet = wb.Worksheets(0)
          Dim a As Area = ws.CreateArea(4, 4, 15, 6)
          Dim b As Border = a.BorderAround
          Dim bp As BorderPart = b.Item(Border.Part.Left)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.BorderPart.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;BorderPart&quot;]/Member[@signature=&quot;BorderPart.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.BorderPart.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;BorderPart&quot;]/Member[@signature=&quot;BorderPart.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.BorderPart.Color">
            <Doc>
        <summary>
          <para>Sets or returns the color of the border, as an ExcelWriter <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.BorderPart.Color"/> object.  If multiple colors were assigned to border parts,  <c>Color</c> will return the color of the top border.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Color
          Color c = bp.Color;

          //--- Set Color
          bp.Color = wb.Palette.GetClosestColor(System.Drawing.Color.Blue);
        </code>
            <br/>
            <code>

          '--- Get Color
          Dim c As Color = bp.Color

          '--- Set Color
          bp.Color = wb.Palette.GetClosestColor(System.Drawing.Color.Blue)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.BorderPart.Style">
            <Doc>
        <summary>
          <para>Sets or returns the border's line style.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get LineStyle
          Border.LineStyle ls = bp.Style;

          //---- Set LineStyle
          bp.Style = Border.LineStyle.Thin;
        </code>
            <br/>
            <code>

          '--- Get LineStyle
          Dim ls As Border.LineStyle = bp.Style

          '--- Set LineStyle
          bp.Style = Border.LineStyle.Thin
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis"/> object represents a chart's category (x) axis. <c>CategoryAxis</c> is a sub-class of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Axis"/>.</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;CategoryAxis&quot;]/Member[@signature=&quot;CategoryAxis.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;CategoryAxis&quot;]/Member[@signature=&quot;CategoryAxis.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.AxisCrossesMaxCategory">
            <Doc>
        <summary>
          <para>Sets or returns whether the value (y) axis crosses the category (x) axis at the maximum category value.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.AxisCrossesMidCategory">
            <Doc>
        <summary>
          <para>Sets or returns whether category axis major gridlines will be between categories, or in the middle of categories. Gridlines extend from the tick marks on an axis across the chart's plot area.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.BaseUnit">
            <Doc>
        <summary>
          <para>Sets of returns time unit (day, month or year) setting used in to establish BaseUnit number</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.CategoriesBetweenTickMarkLabels">
            <Doc>
        <summary>
          <para>Sets or returns the number of categories to show between tick mark labels.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.CategoriesBetweenTickMarks">
            <Doc>
        <summary>
          <para>Sets or returns the number of categories to show between axis tick marks.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.DisplayType">
            <Doc>
        <summary>
          <para>Sets or returns the display type for the data on the category axis.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.MajorUnit">
            <Doc>
        <summary>
          <para>Sets of returns time unit (day, month or year) setting used in to establish MajorUnitValue number</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.MajorUnitValue">
            <Doc>
        <summary>
          <para>Sets or returns a number, which represent Major Unit value</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.MaximumValue">
            <Doc>
        <summary>
          <para>Sets or returns the maximum value to be used in the category (x) axis</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.MaximumValueAsDate">
            <Doc>
        <summary>
          <para>Sets or returns the maximum value to be used in the category (x) axis, represented as DateTime</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.MinimumValue">
            <Doc>
        <summary>
          <para>Sets or returns the minimum value to be used in the category (x) axis</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.MinimumValueAsDate">
            <Doc>
        <summary>
          <para>Sets or returns the minimum value to be used in the category (x) axis, represented as DateTime</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.MinorUnit">
            <Doc>
        <summary>
          <para>Sets of returns time unit (day, month or year) setting used in to establish MinorUnitValue number</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.MinorUnitValue">
            <Doc>
        <summary>
          <para>Sets or returns a number, which represent Minor Unit value</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.ValueCrossingPoint">
            <Doc>
        <summary>
          <para>Sets or returns the category value at which the value (y) axis crosses the category (x) axis.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.ValueCrossingPointAsDate">
            <Doc>
        <summary>
          <para>Sets or returns the category value at which the value (y) axis crosses the category (x) axis, represented as DateTime</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.AxisDisplayType">
            <Doc>
        <summary>
          <para>Enumeration value allowing you to determine what type of values are displayed on this axis.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.AxisDisplayType.Automatic">
            <Doc>
          <summary>Excel will set the display format automatically.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.AxisDisplayType.Category">
            <Doc>
          <summary>Category axis values will be displayed as numbers.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.AxisDisplayType.TimeScale">
            <Doc>
          <summary>Category axis values will be displayed as dates. A time-scale category axis displays dates in chronological order at specific intervals.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.AxisDisplayType.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;CategoryAxis&quot;]/Member[@signature=&quot;CategoryAxis.AxisDisplayType&quot;]/Member[@signature=&quot;CategoryAxis.AxisDisplayType.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.AxisDisplayType.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;CategoryAxis&quot;]/Member[@signature=&quot;CategoryAxis.AxisDisplayType&quot;]/Member[@signature=&quot;CategoryAxis.AxisDisplayType.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.AxisDisplayType.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;CategoryAxis&quot;]/Member[@signature=&quot;CategoryAxis.AxisDisplayType&quot;]/Member[@signature=&quot;CategoryAxis.AxisDisplayType.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.AxisDisplayType.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;CategoryAxis&quot;]/Member[@signature=&quot;CategoryAxis.AxisDisplayType&quot;]/Member[@signature=&quot;CategoryAxis.AxisDisplayType.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.AxisDisplayType.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;CategoryAxis&quot;]/Member[@signature=&quot;CategoryAxis.AxisDisplayType&quot;]/Member[@signature=&quot;CategoryAxis.AxisDisplayType.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.AxisTimeUnit">
            <Doc>
        <summary>
          <para>Enumeration for determinine what time unit to use for a chart axis</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.AxisTimeUnit.Day">
            <Doc>
          <summary>Time is measured in days</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.AxisTimeUnit.Month">
            <Doc>
          <summary>Time is measured in months</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.AxisTimeUnit.Year">
            <Doc>
          <summary>Time is measured in years</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.AxisTimeUnit.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;CategoryAxis&quot;]/Member[@signature=&quot;CategoryAxis.AxisTimeUnit&quot;]/Member[@signature=&quot;CategoryAxis.AxisTimeUnit.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.AxisTimeUnit.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;CategoryAxis&quot;]/Member[@signature=&quot;CategoryAxis.AxisTimeUnit&quot;]/Member[@signature=&quot;CategoryAxis.AxisTimeUnit.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.AxisTimeUnit.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;CategoryAxis&quot;]/Member[@signature=&quot;CategoryAxis.AxisTimeUnit&quot;]/Member[@signature=&quot;CategoryAxis.AxisTimeUnit.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.AxisTimeUnit.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;CategoryAxis&quot;]/Member[@signature=&quot;CategoryAxis.AxisTimeUnit&quot;]/Member[@signature=&quot;CategoryAxis.AxisTimeUnit.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CategoryAxis.AxisTimeUnit.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;CategoryAxis&quot;]/Member[@signature=&quot;CategoryAxis.AxisTimeUnit&quot;]/Member[@signature=&quot;CategoryAxis.AxisTimeUnit.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/> object represents a single cell in a worksheet. To return a <c>Cell</c> object use &lt;dotnet&gt;<see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Cells"/>.  Specify the cell by 0-based row and column indexes or by Excel-style reference:</para>
      </summary>
      <example>
        <para>
          <code>

          //--- Get Cell by Excel-style reference
          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          Worksheet ws = wb.Worksheets[0];
          Cell cellA1 = ws.Cells[0,0];

          //--- Get Cell by Excel-style reference
          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          Worksheet ws = wb.Worksheets[0];
          Cell cellA1 = ws.Cells["A1"];
        </code>
          <br/>
          <code>

          '--- Get Cell by Excel-style reference
          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim ws As Worksheet = wb.Worksheets(0)
          Dim cellA1 As Cell = ws.Cells(0, 0)

          '--- Get Cell by Excel-style reference
          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim ws As Worksheet = wb.Worksheets(0)
          Dim cellA1 As Cell = ws.Cells("A1")
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Cell.ApplyStyle(SoftArtisans.OfficeWriter.ExcelWriter.Style)">
            <Doc>
        <summary>
          <para>Applies a style to the cell. When a style is applied - rather than set (see <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.Style"/> ) - only the differences between the new style and style properties previously assigned to the cell (through the ExcelWriter API) will take effect. For example, if the cell has a background color and the new style applied does not contain a background color, the cell's color will not be affected. However, if the new style includes a background color, it will replace the existing background color of the cell.</para>
        </summary>
        <param name="style">
          <para>A <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.Style"/> object representing the style to apply to the cell.</para>
        </param>
        <example>
          <para>
            <code>
cellA1.ApplyStyle(s);</code>
            <br/>
            <code>
cellA1.ApplyStyle(s)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Cell.ClearContent">
            <Doc>
        <summary>
          <para>Clears a cell's content. Calling this method is equivalent to setting a cell's value to null.</para>
        </summary>
        <example>
          <para>
            <code>
cellA1.ClearContent();</code>
            <br/>
            <code>
cellA1.ClearContent()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Cell.ClearRichTextFormatting">
            <Doc>
        <summary>
          <para>Clears all rich text formatting within the cell. The font of the text will be set to that set in Cell.Style.Font.</para>
        </summary>
        <example>
          <para>
            <code>
cellA1.ClearRichTextFormatting();</code>
            <br/>
            <code>
cellA1.ClearRichTextFormatting()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Cell.CreateAnchor(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Creates an anchor within the specified cell. An anchor represents the position of a floating (non-cell data) object within a spreadsheet.</para>
        </summary>
        <param name="percentX">
          <para>The X offset from the cell's left side as a percentage of the cell's width. This value must be between 0 and 100.</para>
        </param>
        <param name="percentY">
          <para>The Y offset from the top of the cell as a percentage of the cell's height. This value must be between 0 and 100.</para>
        </param>
        <returns>
          <para>An anchor for this cell.</para>
        </returns>
        <example>
          <para>
            <code>
Anchor anch = cellB7.CreateAnchor(30, 50);</code>
            <br/>
            <code>
Dim anch As Anchor = cellB7.CreateAnchor(30, 50)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Cell.CreateHyperlink(System.String)">
            <Doc>
        <summary>
          <para>Creates a new hyperlink in the cell pointing to the specified href. This hyperlink is automatically added to the worksheet. The cell value will be converted to hyperlinks.</para>
        </summary>
        <param name="href">
          <para>The hyperlink's destination.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlink"/> object.</para>
        </returns>
        <example>
          <para>
            <code>
Hyperlink link = cellA1.CreateHyperlink("http://www.softartisans.com");</code>
            <br/>
            <code>
Dim link As Hyperlink = cellA1.CreateHyperlink("http://www.softartisans.com")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Cell.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Cell&quot;]/Member[@signature=&quot;Cell.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Cell.GetCharacters(System.Int32)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CharacterRun"/> object representing a range of characters within the cell. Use this property to set the font on specified characters within the cell.</para>
        </summary>
        <param name="startIndex">
          <para>The character position at which to begin the character run.</para>
        </param>
        <returns>
          <para>A <c>CharacterRun</c> object representing a range of characters within the cell.</para>
        </returns>
        <example>
          <para>
            <code>
CharacterRun charRun = cellA1.GetCharacters(0);</code>
            <br/>
            <code>
Dim charRun As CharacterRun = cellA1.GetCharacters(0)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Cell.GetCharacters(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CharacterRun"/> object representing a range of characters within the cell. Use this method to set the font on specified characters within the cell.</para>
        </summary>
        <param name="startIndex">
          <para>The character position at which to begin the character run.</para>
        </param>
        <param name="length">
          <para>The length of the character run.</para>
        </param>
        <returns>
          <para>A <c>CharacterRun</c> object representing a range of characters within the cell.</para>
        </returns>
        <example>
          <para>
            <code>
CharacterRun charRun = cellA1.GetCharacters(0, 6);</code>
            <br/>
            <code>
Dim charRun As CharacterRun = cellA1.GetCharacters(0, 6)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Cell.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Cell&quot;]/Member[@signature=&quot;Cell.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Cell.RemoveComment">
            <Doc>
        <summary>
          <para>Removes the comment associated with the cell. A comment is a note attached to the cell, separate from other cell content. To find out if a comment is attached to the cell, use Cell.HasComment .</para>
        </summary>
        <example>
          <para>
            <code>
cellA1.RemoveComment();</code>
            <br/>
            <code>
cellA1.RemoveComment()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Cell.RemoveConditionalFormat">
            <Doc>
        <summary>
          <para>Removes any <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.ConditionalFormat"/> objects from the current <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/>.</para>
        </summary>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          wb.Worksheets[0].Cells[0,0].RemoveConditionalFormat();
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          wb.Worksheets(0).Cells(0,0).RemoveConditionalFormat()
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Cell.RemoveDataValidation">
            <Doc>
        <summary>
          <para>Removes the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.DataValidation"/> object associated with the cell.</para>
        </summary>
        <example>
          <para>
            <code>
cell.RemoveDataValidation();</code>
            <br/>
            <code>
cell.RemoveDataValidation()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Cell.SetConditionalFormat(SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat)">
            <Doc>
        <summary>
          <para>Applies the specified <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.ConditionalFormat"/> to the current<br/><see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/>. If the cell already has a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.ConditionalFormat"/>, it will be replaced by the specified<br/><c>ConditionalFormat</c>.</para>
        </summary>
        <param name="conditionalFormat">
          <para>The <c>ConditionalFormat</c><br/>to apply to the cell.</para>
        </param>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          Worksheet ws = wb.Worksheets[0];
          ConditionalFormat condFmt = wb.CreateConditionalFormat();
          Condition cond = condFmt.CreateCondition(Condition.Comparison.CellValueGreaterThan, "=100");
          Font fnt = cond.Style.Font;
          fnt.Bold = true;
          fnt.Color = wb.Palette.GetClosestColor(100,100,255);
          ws.Cells[0,0].SetConditionalFormat(condFmt);
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim ws As Worksheet = wb.Worksheets(0)
          Dim  condFmt As ConditionalFormat = wb.CreateConditionalFormat()
          Dim cond As Condition = condFmt.CreateCondition(Condition.Comparison.CellValueGreaterThan, "=100")
          Dim fnt As Font = cond.Style.Font
          fnt.Bold = True
          fnt.Color = wb.Palette.GetClosestColor(100,100,255)
          ws.Cells(0,0).SetConditionalFormat(condFmt)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Cell.ToString">
            <Doc>
        <summary>
          <para>Returns a string representation of the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/> object.</para>
        </summary>
        <returns>
          <para>A string representation of the <c>Cell</c> object.</para>
        </returns>
        <example>
          <para>
            <code>
string color = cell.ToString();</code>
            <br/>
            <code>
Dim color As String = cell.ToString()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Cell.Unmerge">
            <Doc>
        <summary>
          <para>Unmerges the current cell.  A merged cell is referenced using the location of the leftmost, topmost constituent cell.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.ColumnNumber">
            <Doc>
        <summary>
          <para>Returns the cell's 0-based column number.</para>
        </summary>
        <example>
          <para>
            <code>
int col = oCell.ColumnNumber;</code>
            <br/>
            <code>
Dim col As Integer = oCell.ColumnNumber</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.Comment">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.Comment"/> object representing a note attached to the cell, separate from other cell content. If a comment is not associated with the specified cell, a new comment will be created and returned.</para>
        </summary>
        <example>
          <para>
            <code>
Comment cmt = cellA1.Comment;</code>
            <br/>
            <code>
Dim cmt As Comment = cellA1.Comment</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.ConditionalFormat">
            <Doc>
        <summary>
          <para>Returns the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.ConditionalFormat"/> object associated with the current <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/>. If a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.ConditionalFormat"/> object does not exist, a new one will be created. Any changes made to the object returned will only affect this <c>Cell</c>.</para>
        </summary>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          Cell c = wb.Worksheets[0].Cells[0,0];
          ConditionalFormat cf = c.ConditionalFormat;
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim c As Cell = wb.Worksheets(0).Cells(0,0)
          Dim cf As ConditionalFormat = c.ConditionalFormat
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.DataValidation">
            <Doc>
        <summary>
          <para>Returns the cell's <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.DataValidation"/> object if one exists.  Otherwise, returns 'null'.</para>
        </summary>
        <example>
          <para>
            <code>
DataValidation dv = cellA1.DataValidation;</code>
            <br/>
            <code>
Dim dv As DataValidation = cellA1.DataValidation</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.Formula">
            <Doc>
        <summary>
          <para>Sets or returns a cell formula. If no formula is associated with the cell, the property returns an empty string.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get CellFormula
          string cf = cellA1.Formula;

          //--- Set CellFormula
          cellA1.Formula = "=SUM(A1:A2)";
        </code>
            <br/>
            <code>

          '--- Get CellFormula
          Dim cf As string = cellA1.Formula

          '--- Set CellFormula
          oCell.Formula = "=SUM(A1:A2)"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.HasComment">
            <Doc>
        <summary>
          <para>Returns <c>true</c> if a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.Comment"/> object is associated with the cell.</para>
        </summary>
        <example>
          <para>
            <code>
bool noteAttached = cellA1.HasComment;</code>
            <br/>
            <code>
Dim noteAttached As Boolean = cellA1.HasComment</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.HasConditionalFormat">
            <Doc>
        <summary>
          <para>Returns whether or not the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/> contains a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.ConditionalFormat"/> object.</para>
        </summary>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          bool hasCndFmt = wb.Worksheets[0].Cells[0,0].HasConditionalFormat;
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          bool hasCndFmt = wb.Worksheets(0).Cells(0,0).HasConditionalFormat
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.HasDataValidation">
            <Doc>
        <summary>
          <para>Returns <c>true</c> if the cell has a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.DataValidation"/> object associated with it.</para>
        </summary>
        <example>
          <para>
            <code>
bool cellA1HasDV = cellA1.HasDataValidation;</code>
            <br/>
            <code>
Dim cellA1HasDV As Boolean = cellA1.HasDataValidation</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.IsMerged">
            <Doc>
        <summary>
          <para>Returns whether or not the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/> is a merged cell.</para>
        </summary>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          bool isMerged = wb.Worksheets[0].Cells[0, 0].IsMerged;
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          bool isMerged = wb.Worksheets(0).Cells(0, 0).IsMerged
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.Name">
            <Doc>
        <summary>
          <para>Returns the cell's Excel-style name (such as, "B5").</para>
        </summary>
        <example>
          <para>
            <code>
string cellName = cellA1.Name;</code>
            <br/>
            <code>
Dim cellName As String = cellA1.Name</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.RowNumber">
            <Doc>
        <summary>
          <para>Returns the cell's 0-based row number.</para>
        </summary>
        <example>
          <para>
            <code>
int row = cellA1.RowIndex;</code>
            <br/>
            <code>
Dim row As Integer = cellA1.RowIndex</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.Style">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.Style"/> object that determines how the cell looks, including number format, font, orientation, etc. Accessing the cell's style through  <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.Style"/> will not affect the formatting of other cells with the same global style.</para>
        </summary>
        <remarks>
          <para>When a style is set - rather than applied (see  <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Cell.ApplyStyle(SoftArtisans.OfficeWriter.ExcelWriter.Style)"/>) -  all properties of the style will be assigned to the cell.  Properties not explicitly set on the new style default to Normal style values.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get Style
          Style s = cellA1.Style;

          //--- Set Style
          cellA1.Style = s;
        </code>
            <br/>
            <code>

          '--- Get Style
          Dim s As Style = cellA1.Style

          '--- Set Style
          cellA1.Style = s
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.Value">
            <Doc>
        <summary>
          <para>Sets or returns a cell value.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Value
          Object cellValue = cellA1.Value;

          //--- Set Value
          cellA1.Value = "value";
        </code>
            <br/>
            <code>

          '--- Get Value
          Dim cellValue As Object = cellA1.Value

          '--- Set Value
          cellA1.Value = "value"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.ValueType">
            <Doc>
        <summary>
          <para>Returns the data type of the cell's value: "Blank, "Boolean", "Date", "Error", "Numeric", or "Text".</para>
        </summary>
        <example>
          <para>
            <code>
Cell.CellValueType cvt = cellA1.ValueType;</code>
            <br/>
            <code>
Dim cvt As Cell.CellValueType = cellA1.ValueType</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell.CellValueType">
            <Doc>
        <summary>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell.CellValueType"/> value specifies the data type of the cell's value.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Cell.CellValueType.Blank">
            <Doc>
          <summary>The cell is empty.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Cell.CellValueType.Boolean">
            <Doc>
          <summary>The cell contains a boolean value.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Cell.CellValueType.Currency">
            <Doc>
          <summary>The cell contains a currency value.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Cell.CellValueType.Date">
            <Doc>
          <summary>The cell value is a date.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Cell.CellValueType.Double">
            <Doc>
          <summary>The cell value is a double.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Cell.CellValueType.Error">
            <Doc>
          <summary>The cell contains an error value.  Error values include #DIV/0!, #N/A, #NAME?, #NULL!, #NUM!, #REF!, and #VALUE!.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Cell.CellValueType.Integer">
            <Doc>
          <summary>The cell value is an integer.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Cell.CellValueType.Text">
            <Doc>
          <summary>The cell contains a string.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Cell.CellValueType.Time">
            <Doc>
          <summary>The cell value is a time.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Cell.CellValueType.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Cell&quot;]/Member[@signature=&quot;Cell.CellValueType&quot;]/Member[@signature=&quot;Cell.CellValueType.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Cell.CellValueType.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Cell&quot;]/Member[@signature=&quot;Cell.CellValueType&quot;]/Member[@signature=&quot;Cell.CellValueType.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Cell.CellValueType.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Cell&quot;]/Member[@signature=&quot;Cell.CellValueType&quot;]/Member[@signature=&quot;Cell.CellValueType.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Cell.CellValueType.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Cell&quot;]/Member[@signature=&quot;Cell.CellValueType&quot;]/Member[@signature=&quot;Cell.CellValueType.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Cell.CellValueType.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Cell&quot;]/Member[@signature=&quot;Cell.CellValueType&quot;]/Member[@signature=&quot;Cell.CellValueType.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Cells">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cells"/> collection represents the set of cells in a worksheet.</para>
      </summary>
      <example>
        <para>
          <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          Worksheet ws = wb.Worksheets[0];
          Cells cls = ws.Cells;
        </code>
          <br/>
          <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim ws As Worksheet = wb.Worksheets(0)
          Dim cls As Cells = ws.Cells
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Cells.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Cells&quot;]/Member[@signature=&quot;Cells.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Cells.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Cells&quot;]/Member[@signature=&quot;Cells.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Cells.Item(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Represents a single cell in a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cells"/> collection. <see cref="!:Cells[]"/> is the indexer of the <c>Cells</c> collection, so <c>Cells\[0, 0\]</c> is equivalent to <c>Cells.Item\[0, 0\]</c>.</para>
        </summary>
        <param name="rowNumber">
          <para>The 0-based row number of the cell to retrieve.</para>
        </param>
        <param name="columnNumber">
          <para>The 0-based column number of the cell to retrieve.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/> object representing the cell at the specified position.</para>
        </returns>
        <example>
          <para>
            <code>
Cell cellA1 = cls[0, 0];
</code>
            <br/>
            <code>
Dim cellA1 As Cell = cls(0, 0)
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Cells.Item(System.String)">
            <Doc>
        <summary>Represents a single cell in a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cells"/> collection. <see cref="!:Cells[]"/> is the indexer of the <c>Cells</c> collection, so <c>Cells\["A1"\]</c> is equivalent to <c>Cells.Item\["A1"\]</c>.</summary>
        <param name="index">
          <para>The index of the cell as a string</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/> object representing the cell at the specified position.</para>
        </returns>
        <example>
          <para>
            <code>
Cell cellA1 = cls["A1"];
</code>
            <br/>
            <code>
Dim cellA1 As Cell = cls("A1")
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.CellStyle">
            <Doc>
      <summary>
        <para>The <u>unique</u> cell style for a given cell.</para>
      </summary>
      <remarks>
        <para>Every cell in an Excel workbook contains a <u>unique</u> cell style. This style is exposed by ExcelWriter through the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CellStyle"/> class. Changes to a <c>CellStyle</c> affect <u>only</u> the cell that owns the style. A <c>CellStyle</c> may be "set" on another cell or group of cells, but this action clones the style. Changes to the original <c>CellStyle</c> reference affect only the owning cell and changes to the cloned <c>CellStyle</c> affect only the cell on which the style was set. If the style is "set" on a cell grouping object, such as an area, range, row, or column, each cell in the grouping receives a unique clone of the style.</para>
      </remarks>
    </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Style">
            <Doc>
      <summary>
        <para>ExcelWriter has three style types: <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CellStyle"/>, <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.GlobalStyle"/>, and <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NamedStyle"/>.</para>
      </summary>
      <remarks>
        <para>All three types derive from the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Style"/> class, and <c>NamedStyle</c> derives from <c>GlobalStyle</c>.</para>
        <para>You cannot create a CellStyle, only manipulate existing ones as part of the objects they apply to.  To create a <c>GlobalStyle</c>, use <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateStyle"/>. To create a <c>NamedStyle</c>, use <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateNamedStyle(System.String)"/>. To get a <c>NamedStyle</c> from an existing document, use <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.GetNamedStyle(System.String)"/>.</para>
      </remarks>
      <example>
        <para>
          <code>

          //--- Open existing spreadsheet
          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Open(@"C:\MySpreadsheet.xls");

          //--- Create GlobalStyle
          Style global = wb.CreateStyle();

          //--- Create NamedStyle
          Style newNamed = wb.CreateNamedStyle("MyStyle");

          //--- Get NamedStyle
          Style existingNamed = wb.GetNamedStyle("ExistingStyle");
        </code>
          <br/>
          <code>

          '--- Open existing spreadsheet
          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Open("C:\MySpreadsheet")

          '--- Create GlobalStyle
          Dim global As Style = wb.CreateStyle()

          '--- Create NamedStyle
          Dim newNamed As Style = wb.CreateNamedStyle("MyStyle")

          '--- Get NamedStyle
          Dim existingNamed As Style = wb.GetNamedStyle("ExistingStyle")
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Style.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Style.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.BackgroundColor">
            <Doc>
        <summary>
          <para>Sets or returns the background color for cells.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get BackgroungColor
          Color bgColor = styl.BackgroundColor;

          //--- Set BackgroundColor
          styl.BackgroundColor = wb.Palette.GetClosestColor(162, 221, 139);
        </code>
            <br/>
            <code>

          '--- Get BackgroundColor
          Dim bgColor As Color = styl.BackgroundColor

          '--- Set BackgroundColor
          styl.BackgroundColor = wb.Palette.GetClosestColor(162, 221, 139)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.Border">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.Border"/> object for the style.</para>
        </summary>
        <example>
          <para>
            <code>
Border bdr = styl.Border;</code>
            <br/>
            <code>
Dim bdr As Border = styl.Border</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.CellLocked">
            <Doc>
        <summary>
          <para>Sets or returns whether a cell will be locked in a protected worksheet.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get CellLocked
          bool locked = style.CellLocked;

          //--- Set CellLocked
          style.CellLocked = true;
        </code>
            <br/>
            <code>

          '--- Get CellLocked
          Dim locked As Boolean = style.CellLocked

          '--- Set CellLocked
          style.CellLocked = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.Font">
            <Doc>
        <summary>
          <para>Sets or returns the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.Font"/> object that defines the font for this style.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Font
          Font fnt = styl.Font;

          //--- Set Font
          styl.Font = fnt;
        </code>
            <br/>
            <code>

          '--- Get Font
          Dim fnt As Font = styl.Font

          '--- Set Font
          styl.Font = fnt
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.ForegroundColor">
            <Doc>
        <summary>
          <para>Sets or returns a foreground color for cells. A foreground color is visible when a pattern is assigned to a cell.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get ForegroundColor
          Color fgColor = styl.ForegroundColor;

          //--- Set ForegroundColor
          styl.ForegroundColor = wb.Palette.GetClosestColor(162, 221, 139);
        </code>
            <br/>
            <code>

          '--- Get ForegroundColor
          Dim fgColor As Color = styl.ForegroundColor

          '--- Set ForegroundColor
          styl.ForegroundColor = wb.Palette.GetClosestColor(162, 221, 139)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.HideFormulas">
            <Doc>
        <summary>
          <para>Sets or returns whether formulas or their calculated results will be displayed in a protected worksheet.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get HideFormulas
          bool hide = styl.HideFormulas;

          //--- Set HideFormulas
          styl.HideFormulas = true;
        </code>
            <br/>
            <code>

          '--- Get HideFormulas
          Dim hide As Boolean = styl.HideFormulas

          '--- Set HideFormulas
          styl.HideFormulas = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.HorizontalAlignment">
            <Doc>
        <summary>
          <para>Sets or returns the horizontal alignment of text within cells.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get HorizontalAlignment
          Style.HAlign ha = styl.HorizontalAlignment;

          //--- Set HorizontalAlignment
          styl.HorizontalAlignment = Style.HAlign.Center;
        </code>
            <br/>
            <code>

          '--- Get HorizontalAlignment
          Dim ha As Style.HAlign = styl.HorizontalAlignment

          '--- Set HorizontalAlignment
          styl.HorizontalAlignment = Style.HAlign.Center
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.IndentLevel">
            <Doc>
        <summary>
          <para>Sets or returns level of indentation of the contents within the cell.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get IndentLevel
          int indentLevel = style.IndentLevel;

          //--- Set IndentLevel
          style.IndentLevel= 4;
        </code>
            <br/>
            <code>

          '--- Get IndentLevel
          Dim indentLevel As Integer = style.IndentLevel

          '--- Set IndentLevel
          style.IndentLevel = 2
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.JustifyDistributed">
            <Doc>
        <summary>
          <para>Sets or returns the whether the text will be justfied horizontally, when the Horizontal Alignment is set to Distributed</para>
        </summary>
        <example>
          <code>

          //--- Get Justify Distributed
          bool justifyDist = styl.JustifyDistributed;

          //--- Set Justify Distributed
          styl.JustifyDistributed = true;
        </code>
          <br/>
          <code>

          '--- Get Justify Distributed
          Dim justifyDist As Boolean = styl.JustifyDistributed

          '--- Set Justify Distributed
          styl.JustifyDistributed = True
        </code>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.NumberFormat">
            <Doc>
        <summary>
          <para>Sets or returns the number format string used for formatting of numbers and dates.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get NumberFormat
          string numFormat = styl.NumberFormat;

          //--- Set NumberFormat
          styl.NumberFormat = "#.##";

          //--- Set NumberFormat
          styl.NumberFormat = "mm/dd/yyyy hh:mm:ss AM/PM";
        </code>
            <br/>
            <code>

          '--- Get NumberFormat
          Dim numFormat As String = styl.NumberFormat

          '--- Set NumberFormat
          styl.NumberFormat = "#.##"

          '--- Set NumberFormat
          styl.NumberFormat = "mm/dd/yyyy hh:mm:ss AM/PM"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.Orientation">
            <Doc>
        <summary>
          <para>Sets or returns the angle that text is displayed at, as a value between -90 and 90.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Orientation
          int orient = styl.Orientation;

          //--- Set Orientation
          styl.Orientation = 45;
        </code>
            <br/>
            <code>

          '--- Get Orientation
          Dim orient As Integer = styl.Orientation

          '--- Set Orientation
          styl.Orientation = 45
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.Pattern">
            <Doc>
        <summary>
          <para>Sets or returns a pattern applied to cells.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Pattern
          Pattern ptn = c.Style.Pattern;

          //--- Set Pattern
          styl.Pattern = Pattern.DiagonalCrosshatch;
        </code>
            <br/>
            <code>

          '--- Get Pattern
          Dim ptn As Pattern = c.Style.Pattern

          '--- Set Pattern
          styl.Pattern = Patter.DiagonalCrosshatch
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.ShrinkToFit">
            <Doc>
        <summary>
          <para>Sets or returns whether text in a cell should be reduced in size to fit within the cell's width.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get ShrinkToFit
          bool shrink = styl.ShrinkToFit;

          //--- Set ShrinkToFit
          styl.ShrinkToFit = true;
        </code>
            <br/>
            <code>

          '--- Get ShrinkToFit
          Dim shrink As Boolean = styl.ShrinkToFit

          '--- Set ShrinkToFit
          styl.ShrinkToFit = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.TextDirection">
            <Doc>
        <summary>
          <para>Sets or returns the direction of the text with in the cells.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get TextDirection
          Style.TextDir textDir = styl.TextDirection;

          //--- Set TextDirection
          styl.TextDirection = Styl.TextDir.RightToLeft;
        </code>
            <br/>
            <code>

          '--- Get TextDirection
          Dim textDir As Style.TextDir = styl.TextDirection

          '--- Set TextDirection
          styl.TextDirection = Style.TextDir.RightToLeft
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.VerticalAlignment">
            <Doc>
        <summary>
          <para>Sets or returns the vertical alignment of text within cells.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get VerticalAlignment
          Style.VAlign vert = styl.VerticalAlignment;

          //--- Set VerticalAlignment
          styl.VerticalAlignment = Style.VAlign.Bottom;
        </code>
            <br/>
            <code>

          '--- Get VerticalAlignment
          Dim vert As Style.VAlign = styl.VerticalAlignment

          '--- Set VerticalAlignment
          styl.VerticalAlignment = Style.VAlign.Bottom
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.WrapText">
            <Doc>
        <summary>
          <para>Sets or returns if text that is larger than the width of the cell will be wrapped, increasing the height of a cell.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get WrapText
          bool wrap = styl.WrapText;

          //--- Set WrapText
          styl.WrapText = true;
        </code>
            <br/>
            <code>

          '--- Get WrapText
          Dim wrap As Boolean = styl.WrapText

          '--- Set WrapText
          styl.WrapText = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Style.ColumnInsertBehavior">
            <Doc>
        <summary>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Style.ColumnInsertBehavior"/> value determines what style will be applied to the inserted columns.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Style.ColumnInsertBehavior.Ignore">
            <Doc>
          <summary>The default style will be applied to the new columns.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Style.ColumnInsertBehavior.Left">
            <Doc>
          <summary>The style of the new columns will match the style of the column to their left</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Style.ColumnInsertBehavior.Right">
            <Doc>
          <summary>The style of the new columns will match the style of the column to their right</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Style.ColumnInsertBehavior.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.ColumnInsertBehavior&quot;]/Member[@signature=&quot;Style.ColumnInsertBehavior.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Style.ColumnInsertBehavior.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.ColumnInsertBehavior&quot;]/Member[@signature=&quot;Style.ColumnInsertBehavior.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Style.ColumnInsertBehavior.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.ColumnInsertBehavior&quot;]/Member[@signature=&quot;Style.ColumnInsertBehavior.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Style.ColumnInsertBehavior.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.ColumnInsertBehavior&quot;]/Member[@signature=&quot;Style.ColumnInsertBehavior.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.ColumnInsertBehavior.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.ColumnInsertBehavior&quot;]/Member[@signature=&quot;Style.ColumnInsertBehavior.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Style.HAlign">
            <Doc>
        <summary>
          <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Style.HAlign"/> class contains all horizontal alignment options.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Style.HAlign.Center">
            <Doc>
          <summary>Text will be centered horizontally.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Style.HAlign.CenterAcrossSelection">
            <Doc>
          <summary>Center across selection.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Style.HAlign.Distributed">
            <Doc>
          <summary>Text will be distributed horizontally.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Style.HAlign.Fill">
            <Doc>
          <summary>Fill</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Style.HAlign.General">
            <Doc>
          <summary>General</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Style.HAlign.Justify">
            <Doc>
          <summary>Text will be justified.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Style.HAlign.Left">
            <Doc>
          <summary>Text will be left-aligned.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Style.HAlign.Right">
            <Doc>
          <summary>Text will be right-aligned.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Style.HAlign.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.HAlign&quot;]/Member[@signature=&quot;Style.HAlign.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Style.HAlign.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.HAlign&quot;]/Member[@signature=&quot;Style.HAlign.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Style.HAlign.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.HAlign&quot;]/Member[@signature=&quot;Style.HAlign.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Style.HAlign.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.HAlign&quot;]/Member[@signature=&quot;Style.HAlign.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.HAlign.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.HAlign&quot;]/Member[@signature=&quot;Style.HAlign.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Style.RowInsertBehavior">
            <Doc>
        <summary>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Style.RowInsertBehavior"/> value determines what style will be applied to the inserted rows.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Style.RowInsertBehavior.Above">
            <Doc>
          <summary>The style of the new rows will match the style of the row above them.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Style.RowInsertBehavior.Below">
            <Doc>
          <summary>The style of the new rows will match the style of the row below them.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Style.RowInsertBehavior.Ignore">
            <Doc>
          <summary>The default style will be applied to the new rows.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Style.RowInsertBehavior.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.RowInsertBehavior&quot;]/Member[@signature=&quot;Style.RowInsertBehavior.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Style.RowInsertBehavior.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.RowInsertBehavior&quot;]/Member[@signature=&quot;Style.RowInsertBehavior.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Style.RowInsertBehavior.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.RowInsertBehavior&quot;]/Member[@signature=&quot;Style.RowInsertBehavior.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Style.RowInsertBehavior.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.RowInsertBehavior&quot;]/Member[@signature=&quot;Style.RowInsertBehavior.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.RowInsertBehavior.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.RowInsertBehavior&quot;]/Member[@signature=&quot;Style.RowInsertBehavior.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Style.TextDir">
            <Doc>
        <summary>
          <para>The <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.TextDirection"/> class contains all text direction options.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Style.TextDir.Context">
            <Doc>
          <summary>Text is displayed in the context of the version of Excel that opens the spreadsheet.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Style.TextDir.LeftToRight">
            <Doc>
          <summary>Text is displayed left to right.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Style.TextDir.RightToLeft">
            <Doc>
          <summary>Text is displayed right to left.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Style.TextDir.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.TextDir&quot;]/Member[@signature=&quot;Style.TextDir.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Style.TextDir.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.TextDir&quot;]/Member[@signature=&quot;Style.TextDir.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Style.TextDir.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.TextDir&quot;]/Member[@signature=&quot;Style.TextDir.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Style.TextDir.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.TextDir&quot;]/Member[@signature=&quot;Style.TextDir.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.TextDir.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.TextDir&quot;]/Member[@signature=&quot;Style.TextDir.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Style.VAlign">
            <Doc>
        <summary>
          <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Style.VAlign"/> class contains all vertical alignment options.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Style.VAlign.Bottom">
            <Doc>
          <summary>Text will be bottom-aligned. </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Style.VAlign.Center">
            <Doc>
          <summary>Text will be centered vertically. </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Style.VAlign.Distributed">
            <Doc>
          <summary>Text will be distributed vertically. </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Style.VAlign.Justify">
            <Doc>
          <summary>Text will be justified vertically. </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Style.VAlign.Top">
            <Doc>
          <summary>Text will be top-aligned. </summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Style.VAlign.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.VAlign&quot;]/Member[@signature=&quot;Style.VAlign.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Style.VAlign.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.VAlign&quot;]/Member[@signature=&quot;Style.VAlign.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Style.VAlign.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.VAlign&quot;]/Member[@signature=&quot;Style.VAlign.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Style.VAlign.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.VAlign&quot;]/Member[@signature=&quot;Style.VAlign.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.VAlign.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Style&quot;]/Member[@signature=&quot;Style.VAlign&quot;]/Member[@signature=&quot;Style.VAlign.Value&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CellStyle.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;CellStyle&quot;]/Member[@signature=&quot;CellStyle.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CellStyle.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;CellStyle&quot;]/Member[@signature=&quot;CellStyle.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.CharacterRun">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CharacterRun"/> class allows you to set a font on a specified range of characters within a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartText"/> object or a cell. To return a <c>CharacterRun</c> object, use <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Cell.GetCharacters(System.Int32)"/> or <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartText.GetCharacters(System.Int32)"/>.</para>
      </summary>
      <example>
        <para>
          <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          Worksheet ws = wb.Worksheets[0];
          Cell cellA1 = ws.Cells["A1"];
          cellA1.Value = "Test";
          CharacterRun charRun = cellA1.GetCharacters(0);
        </code>
          <br/>
          <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim ws As Worksheet = wb.Worksheets(0)
          Dim cellA1 As Cell = ws.Cells("A1")
          cellA1.Value = "Test"
          Dim charRun As CharacterRun = cellA1.GetCharacters(0)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CharacterRun.Clear">
            <Doc>
        <summary>
          <para>Sets the font of the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CharacterRun"/> to the main font of the cell or <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartText"/> object.</para>
        </summary>
        <example>
          <para>
            <code>
charRun.Clear();</code>
            <br/>
            <code>
charRun.Clear()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CharacterRun.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;CharacterRun&quot;]/Member[@signature=&quot;CharacterRun.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CharacterRun.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;CharacterRun&quot;]/Member[@signature=&quot;CharacterRun.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CharacterRun.Font">
            <Doc>
        <summary>
          <para>Sets or returns the font for the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CharacterRun"/>.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Font
          Font fnt = charRun.Font;

          //--- Set Font
          charRun.Font = fnt
        </code>
            <br/>
            <code>

          '--- Get Font
          Dim oFont As Font = charRun.Font

          '--- Set Font
          charRun.Font = fnt
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CharacterRun.Length">
            <Doc>
        <summary>
          <para>Returns the length - in characters - of the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CharacterRun"/>.</para>
        </summary>
        <example>
          <para>
            <code>
int numChars = oCharacterRun.Length;</code>
            <br/>
            <code>
Dim numChars As Integer = oCharacterRun.Length</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CharacterRun.StartIndex">
            <Doc>
        <summary>
          <para>Returns the 0-based index of the first character in the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CharacterRun"/>.</para>
        </summary>
        <example>
          <para>
            <code>
int firstChar = charRun.StartIndex;</code>
            <br/>
            <code>
Dim firstChar As Integer = charRun.StartIndex</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Chart">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Chart"/> class represents an Excel chart. It is the main class for code-based chart creation and modification.</para>
      </summary>
      <remarks>
        <para>To create a <c>Chart</c> object:</para>
      </remarks>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Chart.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Chart&quot;]/Member[@signature=&quot;Chart.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Chart.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Chart&quot;]/Member[@signature=&quot;Chart.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Chart.MoveChart(SoftArtisans.OfficeWriter.ExcelWriter.Chart.ChartLocation,System.Int32)">
            <Doc>
        <summary>
          <para>Moves the chart to a different worksheet. The method specifies whether the chart should be inserted as an object within the worksheet, or converted to a chart sheet.</para>
        </summary>
        <param name="chartLocation">
          <para>http://wiki.softartisans.com/display/EW70/Chart.ChartLocation#ChartAsSheet or http://wiki.softartisans.com/display/EW70/Chart.ChartLocation#ObjectInSheet.</para>
        </param>
        <param name="sheetIndex">
          <para>The 0-based index of the worksheet to move the chart to or the index of the chartsheet to insert.</para>
        </param>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Chart.MoveChart(SoftArtisans.OfficeWriter.ExcelWriter.Chart.ChartLocation,System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Anchor)">
            <Doc>
        <summary>
          <para>Moves the chart to a different worksheet. The method specifies whether the chart should be inserted as an object within the worksheet, or converted to a chart sheet.</para>
        </summary>
        <param name="chartLocation">
          <para>http://wiki.softartisans.com/display/EW70/Chart.ChartLocation#ChartAsSheet or http://wiki.softartisans.com/display/EW70/Chart.ChartLocation#ObjectInSheet.</para>
        </param>
        <param name="sheetIndex">
          <para>The 0-based index of the worksheet to move the chart to or the index of the chartsheet to insert.</para>
        </param>
        <param name="anchor">
          <para>The postion of the top left corner of the chart in the worksheet.</para>
        </param>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Chart.MoveChart(SoftArtisans.OfficeWriter.ExcelWriter.Chart.ChartLocation,System.String,System.Int32)">
            <Doc>
        <summary>
          <para>Moves the chart to a different worksheet. The method specifies whether the chart should be inserted as an object within the worksheet, or converted to a chart sheet.</para>
        </summary>
        <param name="chartLocation">
          <para>http://wiki.softartisans.com/display/EW70/Chart.ChartLocation#ChartAsSheet or http://wiki.softartisans.com/display/EW70/Chart.ChartLocation#ObjectInSheet.</para>
        </param>
        <param name="sheetName">
          <para>New name for the sheet to which the chart is moved.</para>
        </param>
        <param name="sheetIndex">
          <para>The 0-based index of the worksheet to move the chart to or the index of the chartsheet to insert.</para>
        </param>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Chart.MoveChart(SoftArtisans.OfficeWriter.ExcelWriter.Chart.ChartLocation,System.String)">
            <Doc>
        <summary>
          <para>Moves the chart to a different worksheet. The method specifies whether the chart should be inserted as an object within the worksheet, or converted to a chart sheet.</para>
        </summary>
        <param name="chartLocation">
          <para>http://wiki.softartisans.com/display/EW70/Chart.ChartLocation#ChartAsSheet or http://wiki.softartisans.com/display/EW70/Chart.ChartLocation#ObjectInSheet.</para>
        </param>
        <param name="sheetName">
          <para>New name for the sheet to which the chart is moved.</para>
        </param>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.CategoryAxis">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.CategoryAxis"/> object representing the chart's X axis.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.ChartArea">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion"/> object, representing the chart area in the worksheet. The chart area is the entire area within the worksheet assigned to the chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.ChartSettings3D">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.ChartSettings3D"/> object representing the properties of a three-dimensional chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.ChartType">
            <Doc>
        <summary>
          <para>Sets or returns the chart's type (Area, Column, Bubble, etc.).</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.DataTable">
            <Doc>
        <summary>
          <para>For all chart types except Pie, Doughnut, Bubble, and Surface, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.DataTable"/> returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartDataTable"/> object, representing a chart's data table.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.Height">
            <Doc>
        <summary>
          <para>Sets or returns the height of the chart, in points (1/72 inch).</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.Legend">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.Legend"/> object, representing the chart's legend.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.Name">
            <Doc>
        <summary>
          <para>Sets or returns the name of the chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.ObjectPositioning">
            <Doc>
        <summary>
          <para>Sets or returns the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.ObjectPositioning"/> value that determines the chart's resize and reposition behavior when the cells in the worksheet are changed.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.PageSetup">
            <Doc>
        <summary>
          <para>Returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup"/> object for this chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.PlotArea">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion"/> object, representing the chart's plot area, the area of the chart itself.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.Position">
            <Doc>
        <summary>
          <para>Sets or returns the chart's position in the worksheet.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.PositionInCollection">
            <Doc>
        <summary>
          <para>Returns the 0-based position in the parent Charts collection. If this Chart is on its own Chartsheet, then this will return 0.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.ScatterValueAxis">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.ValueAxis"/> object representing the chart's scatter values on the X axis.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.SecondaryCategoryAxis">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.CategoryAxis"/> object, representing a chart's secondary X axis.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.SecondaryValueAxis">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.ValueAxis"/> object, representing a chart's secondary Y axis.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.SeriesCollection">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.SeriesCollection"/> object representing the set of data series in the chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.ShowRoundedCorners">
            <Doc>
        <summary>
          <para>Sets or returns whether the chart area will be sharp-cornered or round-cornered.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.Title">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartText"/> object representing the chart's title.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.ValueAxis">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.ValueAxis"/> object, representing a chart's Y axis.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.Width">
            <Doc>
        <summary>
          <para>Sets or returns the width of the chart, in points (1/72 inch).</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.ZCategoryAxis">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.CategoryAxis"/> object representing the chart's category values on the Z axis.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Chart.ChartLocation">
            <Doc>
        <summary>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Chart.ChartLocation"/> value specifies whether a chart should be an object within a worksheet, or converted to a chart sheet.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Chart.ChartLocation.ChartAsSheet">
            <Doc>
          <summary>The chart should be converted to a chart sheet.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Chart.ChartLocation.ObjectInSheet">
            <Doc>
          <summary>The chart should be an object in the specified worksheet.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Chart.ChartLocation.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Chart&quot;]/Member[@signature=&quot;Chart.ChartLocation&quot;]/Member[@signature=&quot;Chart.ChartLocation.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Chart.ChartLocation.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Chart&quot;]/Member[@signature=&quot;Chart.ChartLocation&quot;]/Member[@signature=&quot;Chart.ChartLocation.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Chart.ChartLocation.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Chart&quot;]/Member[@signature=&quot;Chart.ChartLocation&quot;]/Member[@signature=&quot;Chart.ChartLocation.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Chart.ChartLocation.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Chart&quot;]/Member[@signature=&quot;Chart.ChartLocation&quot;]/Member[@signature=&quot;Chart.ChartLocation.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.ChartLocation.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Chart&quot;]/Member[@signature=&quot;Chart.ChartLocation&quot;]/Member[@signature=&quot;Chart.ChartLocation.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartDataTable">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartDataTable"/> object represents a chart's data table. A data table is a grid that can be added to some charts that contains the numeric data used to create the chart. The data table is usually attached to the chart's category axis, replacing the tick-mark labels on the axis.</para>
      </summary>
      <remarks>
        <para>To return a <c>ChartDataTable</c>, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.DataTable"/>.</para>
      </remarks>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartDataTable.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartDataTable&quot;]/Member[@signature=&quot;ChartDataTable.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartDataTable.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartDataTable&quot;]/Member[@signature=&quot;ChartDataTable.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartDataTable.BorderLine">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine"/> object representing the border around the data table.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartDataTable.Font">
            <Doc>
        <summary>
          <para>Sets or returns the font for text in the data table.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartDataTable.Height">
            <Doc>
        <summary>
          <para>Sets or returns the height of the data table, in units of 1/4000 of the chart area.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartDataTable.ShowHorizontalBorders">
            <Doc>
        <summary>
          <para>Sets or returns whether the chart's data table will display horizontal grid lines.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartDataTable.ShowLegendKeys">
            <Doc>
        <summary>
          <para>Sets or returns whether the data table will include legend keys next to series titles.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartDataTable.ShowOutlineBorders">
            <Doc>
        <summary>
          <para>Sets or returns whether the data table will display outline gridlines.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartDataTable.ShowVerticalBorders">
            <Doc>
        <summary>
          <para>Sets or returns whether the chart's data table will display vertical grid lines.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartDataTable.Visible">
            <Doc>
        <summary>
          <para>Sets or returns whether to display a data table (in place of category axis tick mark labels). Data tables are not available for all chart types.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartDataTable.Width">
            <Doc>
        <summary>
          <para>Sets or returns the width of the data table, in units of 1/4000 of the chart area.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartDataTable.X">
            <Doc>
        <summary>
          <para>Sets or returns the x coordinate of the upper left corner of the data table, in units of 1/4000 of the chart area.</para>
        </summary>
        <remarks>
          <para>For <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.SeriesDataLabel"/> s on a column or bar chart X is the offset perpendicular to the bar or column from the default position in 1/4000 of the ChartArea. For <c>SeriesDataLabel</c> s on a pie chart X is offset angle from the default position in radians. For <c>SeriesDataLabel</c> s in all other charts types X is the offset from the default x position in 1/4000 of the ChartArea.</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartDataTable.Y">
            <Doc>
        <summary>
          <para>Sets or returns the y coordinate of the upper left corner of the data table, in units of 1/4000 of the chart area.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern">
            <Doc>
      <summary/>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartFillPattern&quot;]/Member[@signature=&quot;ChartFillPattern.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartFillPattern&quot;]/Member[@signature=&quot;ChartFillPattern.ToString()&quot;]/Doc"/>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.None">
            <Doc>
        <summary>No Pattern </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.Solid">
            <Doc>
        <summary>Solid color </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.Hatch5Percent">
            <Doc>
        <summary>5% </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.Hatch50Percent">
            <Doc>
        <summary>50% </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.LightDownwardDiagonal">
            <Doc>
        <summary>Light Downward Diagonal </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.LightVertical">
            <Doc>
        <summary>Light Vertical </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.DashedDownwardDiagonal">
            <Doc>
        <summary>Dashed Downward Diagonal </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.ZigZag">
            <Doc>
        <summary>Zig zag </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.Divot">
            <Doc>
        <summary>Divot </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.SmallGrid">
            <Doc>
        <summary>Small grid </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.Hatch10Percent">
            <Doc>
        <summary>10% </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.Hatch60Percent">
            <Doc>
        <summary>60% </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.LightUpwardDiagonal">
            <Doc>
        <summary>Light Upward Diagonal </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.LightHorizontal">
            <Doc>
        <summary>Light Horizontal </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.DashedUpwardDiagonal">
            <Doc>
        <summary>Dashed Upward Diagonal </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.Wave">
            <Doc>
        <summary>Wave </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.DottedGrid">
            <Doc>
        <summary>Dotted Grid </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.LargeGrid">
            <Doc>
        <summary>Large Grid </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.Hatch20Percent">
            <Doc>
        <summary>20% </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.Hatch70Percent">
            <Doc>
        <summary>70% </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.DarkDownwardDiagonal">
            <Doc>
        <summary>Dark Downward Diagonal </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.NarrowVertical">
            <Doc>
        <summary>Narrow Vertical </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.DashedHorizontal">
            <Doc>
        <summary>Dashed Horizontal </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.DiagonalBrick">
            <Doc>
        <summary>Diagonal Brick </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.DottedDiamond">
            <Doc>
        <summary>Dotted Diamond </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.SmallCheckerBoard">
            <Doc>
        <summary>Small Checker Board </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.Hatch25Percent">
            <Doc>
        <summary>25% </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.Hatch75Percent">
            <Doc>
        <summary>75% </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.DarkUpwardDiagonal">
            <Doc>
        <summary>Dark Upward Diagonal </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.NarrowHorizontal">
            <Doc>
        <summary>Narrow Horizontal </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.DashedVertical">
            <Doc>
        <summary>Dashed Vertical </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.HorizontalBrick">
            <Doc>
        <summary>Horizontal Brick </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.Shingle">
            <Doc>
        <summary>Shingle </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.LargeCheckerBoard">
            <Doc>
        <summary>Large Checker Board </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.Hatch30Percent">
            <Doc>
        <summary>30% </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.Hatch80Percent">
            <Doc>
        <summary>80% </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.WideDownwardDiagonal">
            <Doc>
        <summary>Wide downward diagonal </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.DarkVertical">
            <Doc>
        <summary>Dark Vertical </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.SmallConfetti">
            <Doc>
        <summary>Small Confetti </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.Weave">
            <Doc>
        <summary>Weave </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.Trellis">
            <Doc>
        <summary>Trellis </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.OutlinedDiamond">
            <Doc>
        <summary>Outlined Diamond </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.Hatch40Percent">
            <Doc>
        <summary>40% </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.Hatch90Percent">
            <Doc>
        <summary>90% </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.WideUpwardDiagonal">
            <Doc>
        <summary>Wide Upward Diagonal </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.DarkHorizontal">
            <Doc>
        <summary>Dark Horizontal </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.LargeConfetti">
            <Doc>
        <summary>Large Confetti </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.Plaid">
            <Doc>
        <summary>Plaid </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.Sphere">
            <Doc>
        <summary>Sphere </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.SolidDiamond">
            <Doc>
        <summary>Solid Diamond </summary>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.FindByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartFillPattern&quot;]/Member[@signature=&quot;ChartFillPattern.FindByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartFillPattern&quot;]/Member[@signature=&quot;ChartFillPattern.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartFillPattern.InternalEnum">
            <summary>
            These are in order in how they are listed in the documentation. In MS-XLS these are grouped
            by the AREAFORMAT index
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartInterior">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartInterior"/> object contains formatting properties of a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion"/> or an object extending <c>ChartRegion</c> ( <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.AxisLabel"/>, <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartText"/>, <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Legend"/>, or <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.SeriesDataLabel"/> ).</para>
      </summary>
      <remarks>
        <para>property of the following classes: <c>ChartRegion</c>, <c>AxisLabel</c>, <c>ChartText</c>, <c>Legend</c>, and <c>SeriesDataLabel</c>.</para>
      </remarks>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartInterior.ClearFillEffects">
            <Doc>
        <summary>
          <para>Clears any fill effect that may be present in the chart interior.</para>
        </summary>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartInterior.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartInterior&quot;]/Member[@signature=&quot;ChartInterior.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartInterior.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartInterior&quot;]/Member[@signature=&quot;ChartInterior.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartInterior.BackgroundColor">
            <Doc>
        <summary>
          <para>Sets or returns the background color of the specified chart region.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartInterior.ForegroundColor">
            <Doc>
        <summary>
          <para>Sets or returns the foreground color of the specified chart region.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartInterior.Pattern">
            <Doc>
        <summary>
          <para>Sets or returns the background pattern of the specified chart region.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartInterior.Visible">
            <Doc>
        <summary>
          <para>Sets or returns whether the specified chart region is visible.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine"/> object represents a line in a chart.</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartLine&quot;]/Member[@signature=&quot;ChartLine.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartLine&quot;]/Member[@signature=&quot;ChartLine.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.Color">
            <Doc>
        <summary>
          <para>Sets or returns the color of the line.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.Style">
            <Doc>
        <summary>
          <para>Sets or returns the line's style.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.Visible">
            <Doc>
        <summary>
          <para>Sets or returns whether the line is visible or hidden.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.Weight">
            <Doc>
        <summary>
          <para>Sets or returns the weight of the line.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineStyle">
            <Doc>
        <summary>
          <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineStyle"/> class contains all available chart line styles.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineStyle.DarkGray">
            <Doc>
          <summary>Dark gray line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineStyle.Dash">
            <Doc>
          <summary>Dashed line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineStyle.DashDot">
            <Doc>
          <summary>Dash-dot line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineStyle.DashDotDot">
            <Doc>
          <summary>Dash-dot-dot line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineStyle.Dot">
            <Doc>
          <summary>Dotted line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineStyle.LightGray">
            <Doc>
          <summary>Light gray line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineStyle.MediumGray">
            <Doc>
          <summary>Medium gray line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineStyle.None">
            <Doc>
          <summary>No line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineStyle.Solid">
            <Doc>
          <summary>Solid line</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineStyle.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartLine&quot;]/Member[@signature=&quot;ChartLine.LineStyle&quot;]/Member[@signature=&quot;ChartLine.LineStyle.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineStyle.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartLine&quot;]/Member[@signature=&quot;ChartLine.LineStyle&quot;]/Member[@signature=&quot;ChartLine.LineStyle.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineStyle.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartLine&quot;]/Member[@signature=&quot;ChartLine.LineStyle&quot;]/Member[@signature=&quot;ChartLine.LineStyle.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineStyle.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartLine&quot;]/Member[@signature=&quot;ChartLine.LineStyle&quot;]/Member[@signature=&quot;ChartLine.LineStyle.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineStyle.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartLine&quot;]/Member[@signature=&quot;ChartLine.LineStyle&quot;]/Member[@signature=&quot;ChartLine.LineStyle.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineWeight">
            <Doc>
        <summary>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineWeight"/> value determines how wide the specified line will be.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineWeight.Hair">
            <Doc>
          <summary>Very thin line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineWeight.Medium">
            <Doc>
          <summary>Medium line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineWeight.Narrow">
            <Doc>
          <summary>Thin line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineWeight.Wide">
            <Doc>
          <summary>Bold line</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineWeight.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartLine&quot;]/Member[@signature=&quot;ChartLine.LineWeight&quot;]/Member[@signature=&quot;ChartLine.LineWeight.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineWeight.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartLine&quot;]/Member[@signature=&quot;ChartLine.LineWeight&quot;]/Member[@signature=&quot;ChartLine.LineWeight.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineWeight.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartLine&quot;]/Member[@signature=&quot;ChartLine.LineWeight&quot;]/Member[@signature=&quot;ChartLine.LineWeight.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineWeight.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartLine&quot;]/Member[@signature=&quot;ChartLine.LineWeight&quot;]/Member[@signature=&quot;ChartLine.LineWeight.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine.LineWeight.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartLine&quot;]/Member[@signature=&quot;ChartLine.LineWeight&quot;]/Member[@signature=&quot;ChartLine.LineWeight.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup"/> class represents the page layout properties of a printed chart or chart sheet. To return a <c>ChartPageSetup</c> object, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.PageSetup"/></para>
      </summary>
      <remarks>
        <para>Note: Since this object is tightly related to client's printer setup, for those computers without a printer setup, changes to this object have no effect.</para>
      </remarks>
    </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup"/> class represents the page layout properties of a printed worksheet.</para>
      </summary>
      <remarks>
        <para>To return a <c>PageSetup</c> object, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.PageSetup"/>.</para>
        <para>
          <b>Note:</b>
          <br/>
          <para>Since this object is tightly related to the client's printer setup, for those computers without a printer setup, changes to this object have no effect.</para>
        </para>
      </remarks>
      <example>
        <para>
          <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          PageSetup ps = wb.Worksheets[0].PageSetup;
        </code>
          <br/>
          <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim ps As PageSetup = wb.Worksheets(0).PageSetup
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;PageSetup.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;PageSetup.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.SetPrintTitleColumns(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Sets the columns to use for the print titles. These are the columns that will be repeated on each page of a printed worksheet.</para>
        </summary>
        <param name="firstColumn">
          <para>The 0-based number of the first column to in the print title.</para>
        </param>
        <param name="numColumns">
          <para>The number of columns to include in the print title.</para>
        </param>
        <example>
          <para>
            <code>
ps.SetPrintTitleColumns(0, 5);</code>
            <br/>
            <code>
ps.SetPrintTitleColumns(0, 5)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.SetPrintTitleRows(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Sets the rows to use for the print titles. These are the rows that will be repeated on each page of a printed worksheet.</para>
        </summary>
        <param name="firstRow">
          <para>The 0-based number of the first row to in the print title.</para>
        </param>
        <param name="numRows">
          <para>The number of rows to include in the print title.</para>
        </param>
        <example>
          <para>
            <code>
ps.SetPrintTitleRows(0, 2);</code>
            <br/>
            <code>
ps.SetPrintTitleRows(0, 2)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.GetFooter(SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection.Section)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;getFooter(HeaderFooterSection.Section section)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.GetHeader(SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection.Section)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;getHeader(HeaderFooterSection.Section section)&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.BottomMargin">
            <Doc>
        <summary>
          <para>Sets or returns the value of the worksheet's bottom margin, in inches. This is the space between the worksheet data and the bottom edge of the printed page. This is set to 1 by default. The valid range of values is 0 through 100, and is also limited by the paper size.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get BottomMargin
          double btmMargin = ps.BottomMargin;

          //--- Set BottomMargin
          ps.BottomMargin = 2;
        </code>
            <br/>
            <code>

          '--- Get BottomMargin
          Dim btmMargin As Double = ps.BottomMargin

          '--- Set BottomMargin
          ps.BottomMargin = 2
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.CenterFooter">
            <Doc>
        <summary>
          <para>Sets or returns the text and formatting codes for the center footer that will appear on the printed worksheet. For instructions on using the formatting codes for headers and footers, see http://wiki.softartisans.com/display/EW70/Formatting+Headers+and+Footers.</para>
        </summary>
        <remarks>
          <para>
            <b>Note:</b>
            <br/>
            <para>Total text for all sections of the footer -- including formatting codes -- cannot exceed 255 characters.</para>
          </para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get CenterFooter
          string ctrFooter = ps.CenterFooter;

          //--- Set CenterFooter
          ps.CenterFooter = "&amp;\"Tahoma\"&amp;BCenter Footer&amp;B";
        </code>
            <br/>
            <code>

          '--- Get CenterFooter
          Dim ctrFooter As String = ps.CenterFooter

          '--- Set CenterFooter
          ps.CenterFooter = "&amp;""Tahoma""&amp;BCenter Footer&amp;B"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.CenterHeader">
            <Doc>
        <summary>
          <para>Sets or returns the text and formatting codes for the center header that will appear on the printed worksheet. For instructions on using the formatting codes for headers and footers, see http://wiki.softartisans.com/display/EW70/Formatting+Headers+and+Footers.</para>
        </summary>
        <remarks>
          <para>Note: Total text, including formatting codes, for all sections of the header cannot exceed 255 characters.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get CenterHeader
          string ctrHeader = ps.CenterHeader

          //--- Set CenterHeader
          ps.CenterHeader = "&amp;\"Tahoma\"&amp;BCenter Header&amp;B";
        </code>
            <br/>
            <code>

          '--- Get CenterHeader
          Dim ctrHeader As String = ps.CenterHeader

          '--- Set CenterHeader
          ps.CenterHeader = "&amp;""Tahoma""&amp;BCenter Header&amp;B"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.CenterHorizontally">
            <Doc>
        <summary>
          <para>Sets or returns whether or not the data of the worksheet is centered horizontally within the margins. This is is set to false by default.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get CenterHorizontally
          bool centerHoriz = ps.CenterHorizontally

          //--- Set CenterHorizontally
          ps.CenterHorizontally = true;
        </code>
            <br/>
            <code>

          '--- Get CenterHorizontally
          Dim centerHoriz As Boolean = ps.CenterHorizontally

          '--- Set CenterHorizontally
          ps.CenterHorizontally = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.CenterVertically">
            <Doc>
        <summary>
          <para>Sets or returns whether or not the data of the worksheet is centered vertically within the margins. This is is set to false by default.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get CenterVertically
          bool centerVert = ps.CenterVertically;

          //--- Set CenterVertically
          ps.CenterVertically = true;
        </code>
            <br/>
            <code>

          '--- Get CenterVertically
          Dim centerVert As Boolean = ps.CenterVertically

          '--- Set CenterVertically
          ps.CenterVertically = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.FirstPageNumber">
            <Doc>
        <summary>
          <para>Sets or returns the first page number for the printed worksheet. By default, the first page number will be 1, or, if the print job does not start with page 1, this will be the number of the first page in the sequence of pages to print. Setting this property will set the FirstPageNumberAuto property to false.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get FirstPageNumber
          int firstPage = ps.FirstPageNumber;

          //--- Set FirstPageNumber
          ps.FirstPageNumber = 3;
        </code>
            <br/>
            <code>

          '--- Get FirstPageNumber
          Dim firstPage As Integer = ps.FirstPageNumber

          '--- Set FirstPageNumber
          ps.FirstPageNumber = 3
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.FirstPageNumberAuto">
            <Doc>
        <summary>
          <para>Sets or returns whether Excel should determine the first page number for the printed worksheet. Setting the FirstPageNumber property will set this property to false.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get FirstPageNumberAuto
          bool firstPageAuto = ps.FirstPageNumberAuto;

          //--- Set FirstPageNumberAuto
          ps.FirstPageNumberAuto = true;
        </code>
            <br/>
            <code>

          '--- Get FirstPageNumberAuto
          Dim firstPageAuto As Boolean = ps.FirstPageNumberAuto

          '--- Set FirstPageNumberAuto
          ps.FirstPageNumberAuto = False
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.FitToPagesTall">
            <Doc>
        <summary>
          <para>Sets or returns <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.FitToPagesTall"/>. This is set to "auto" by default. The valid range of values is 0 through 32767. A value of 0 means "auto".</para>
        </summary>
        <remarks>
          <para>Note: The pair of properties FitToPagesWide and FitToPagesTall, and Zoom are mutually exclusive.</para>
        </remarks>
        <example>
          <code>

          //--- Get FitToPagesTall
          int pagesTall = ps.FitToPagesTall;

          //--- Set FitToPagesTell
          ps.FitToPagesTall = 2;
        </code>
          <br/>
          <code>

          '--- Get FitToPagesTall
          Dim pagesTall As Integer = ps.FitToPagesTall

          '--- Set FitPagesToTall
          ps.FitToPagesTall = 2
        </code>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.FitToPagesWide">
            <Doc>
        <summary>
          <para>Sets or returns <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.FitToPagesWide"/>. This is set to 1 by default. The valid range of values is 0 through 32767. A value of 0 means "auto".</para>
        </summary>
        <remarks>
          <para>Note: The pair of properties FitToPagesWide and FitToPagesTall, and Zoom are mutually exclusive.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get FitToPagesWide
          bool pagesWide = ps.FitToPagesWide;

          //--- Set FitToPagesWide
          ps.FitToPagesWide = 2;
        </code>
            <br/>
            <code>

          '--- Get FitToPagesWide
          Dim pagesWide As Boolean = ps.FitToPagesWide

          '--- Set FitToPagesWide
          ps.FitToPagesWide = 2
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.FooterMargin">
            <Doc>
        <summary>
          <para>Sets or returns the value of the footer margin in inches. </para>
        </summary>
        <remarks>
          <para>This is the space between the footer data and the bottom edge of the printed page. This is set to.5 by default. The valid range of values is 0 through 100, and is also limited by the paper size.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get FooterMargin
          double ftrMargin = ps.FooterMargin;

          //--- Set FooterMargin
          ps.FooterMargin = 1;
        </code>
            <br/>
            <code>

          '--- Get FooterMargin
          Dim ftrMargin As Double = ps.FooterMargin

          '--- Set FooterMargin
          ps.FooterMargin = 1
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.HeaderMargin">
            <Doc>
        <summary>
          <para>Sets or returns the value of the header margin in inches. This is the space between the header data and the top edge of the printed page. This is set to 0.5 by default. The valid range of values is 0 through 100, and is also limited by paper size.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get HeaderMargin
          double hdrMargin = ps.HeaderMargin;

          //--- Set HeaderMargin
          ps.HeaderMargin = 1;
        </code>
            <br/>
            <code>

          '--- Get HeaderMargin
          Dim hdrMargin As Double = ps.HeaderMargin

          '--- Set HeaderMargin
          ps.HeaderMargin = 1
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.LeftFooter">
            <Doc>
        <summary>
          <para>Sets or returns the text and formatting codes for the left footer that will appear on the printed worksheet. </para>
        </summary>
        <remarks>
          <para>For instructions on using the formatting codes for headers and footers, see http://wiki.softartisans.com/display/EW70/Headers+and+Footers.</para>
          <para>
            <b>Note:</b>
            <br/>
            <para>Total text, including formatting codes, for all sections of the footer cannot exceed 255 characters.</para>
          </para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get LeftFooter
          string lftFooter = ps.LeftFooter;

          //--- Set LeftFooter
          ps.LeftFooter = "&amp;\"Tahoma\"&amp;BLeft Footer&amp;B";
        </code>
            <br/>
            <code>

          '--- Get LeftFooter
          Dim lftFooter As String = ps.LeftFooter

          '--- Set LeftFooter
          ps.LeftFooter = "&amp;""Tahoma""&amp;BLeft Footer&amp;B"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.LeftHeader">
            <Doc>
        <summary>
          <para>Sets or returns the text and formatting codes for the left header that will appear on the printed worksheet. </para>
        </summary>
        <remarks>
          <para>For instructions on using the formatting codes for headers and footers, see http://wiki.softartisans.com/display/EW70/Headers+and+Footers.</para>
          <para>
            <b>Note:</b>
            <br/>
            <para>Total text, including formatting codes, for all sections of the header cannot exceed 255 characters.</para>
          </para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get LeftHeader
          string lftHeader = ps.LeftHeader;

          //--- Set LeftHeader
          ps.LeftHeader = "&amp;\"Tahoma\"&amp;BLeft Header&amp;B";
        </code>
            <br/>
            <code>

          '--- Get LeftHeader
          Dim lftHeader As String = ps.LeftHeader

          '--- Set LeftHeader
          ps.Leftheader = "&amp;""Tahoma""&amp;BLeft Header&amp;B"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.LeftMargin">
            <Doc>
        <summary>
          <para>Sets or returns the value of the left margin in inches. This is the space between the worksheet data and the left edge of the printed page. This is set to 0.75 by default. The valid range of values is 0 through 100, and is also limited by paper size.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get LeftMargin
          double lftMargin = ps.LeftMargin;

          //--- Set LeftMargin
          ps.LeftMargin = 1;
        </code>
            <br/>
            <code>

          '--- Get LeftMargin
          Dim lftMargin As Double = ps.LeftMargin

          '--- Set LeftMargin
          ps.LeftMargin = 1
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.Orientation">
            <Doc>
        <summary>
          <para>Sets or returns orientation of the printed worksheet.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Orientation
          PageSetup.PageOrientation orientation = ps.Orientation

          //--- Set Orientation
          ps.Orientation = PageSetup.PageOrientation.Landscape;
        </code>
            <br/>
            <code>

          '--- Get Orientation
          Dim orientation As PageSetup.PageOrientation = ps.Orientation

          '--- Set Orientation
          ps.Orientation = PageSetup.PageOrientation.Landscape
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PaperSize">
            <Doc>
        <summary>
          <para>Sets or returns the paper size that will be used when Excel renders and prints the worksheet.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get PaperSize
          PageSetup.PagePaperSize size = ps.PaperSize;

          //--- Set PaperSize
          ps.PaperSize = PageSetup.PagePaperSize.A4;
        </code>
            <br/>
            <code>

          '--- Get PaperSize
          Dim size As PageSetup.PagePaperSize = ps.PaperSize

          '--- Set PaperSize
          ps.PaperSize = PageSetup.PagePaperSize.A4
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PrintArea">
            <Doc>
        <summary>
          <para>Sets or returns the area of the worksheet that will be printed. Content outside of this area will not be printed.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get PrintArea
          Area prntArea = ps.PrintArea;

          //--- Set PrintArea
          ps.PrintArea = prntArea;
        </code>
            <br/>
            <code>

          '--- Get PrintArea
          Dim prntArea As Area = ps.PrintArea

          '--- Set PrintArea
          ps.PrintArea = prntArea
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PrintAsDraft">
            <Doc>
        <summary>
          <para>Sets or returns whether Excel will print the worksheet in draft quality. This can be used to reduce printing time. When this is set to <c>true</c>, Excel does not print gridlines and most graphics. This is set to false by default.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get PrintAsDraft
          bool draft = ps.PrintAsDraft;

          //--- Set PrintAsDraft
          ps.PrintAsDraft = true;
        </code>
            <br/>
            <code>

          '--- Get PrintAsDraft
          Dim draft As Boolean = ps.PrintAsDraft

          '--- Set PrintAsDraft
          ps.PrintAsDraft = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PrintCellErrorsAs">
            <Doc>
        <summary>
          <para>Sets or returns how cell errors will appear on the printed worksheet.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get PrintCellErrorAs
          PageSetup.CellErrorsAs errorsAs = ps.PrintCellErrorsAs;

          //--- Set PrintCellErrorAs
          ps.PrintCellErrorsAs = PageSetup.CellErrorsAs.Dash;
        </code>
            <br/>
            <code>

          '--- Get PrintCellErrorAs
          Dim errorsAs As PageSetup.CellErrorsAs = ps.PrintCellErrorsAs

          '--- Set PrintCellErrorAs
          ps.PrintCellErrorsAs = PageSetup.CellErrorsAs.Dash
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PrintComments">
            <Doc>
        <summary>Sets or returns whether comments on the worksheet should be printed. </summary>
        <remarks>
          <para>If the comments should be printed at the end of the worksheet, then set the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PrintCommentsAtEnd"/> property to true, otherwise the comments will be printed as they are displayed.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get PrintComments
          bool prntComments = ps.PrintComments

          //--- Set PrintComments
          ps.PrintComments = true;
        </code>
            <br/>
            <code>

          '--- Get PrintComments
          Dim prntComments As Boolean = ps.PrintComments

          '--- Set PrintComments
          ps.PrintComments = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PrintCommentsAtEnd">
            <Doc>
        <summary>
          <para>Sets or returns whether comments will be printed at the end of the worksheet, or if they will be printed as they are displayed. If set to <c>true</c>, comments will be printed at the end.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get PrintCommentsAtEnd
          bool commentsAtEnd = ps.PrintCommentsAtEnd;

          //--- Set PrintCommentsAtEnd
          ps.PrintCommentsAtEnd = true;
        </code>
            <br/>
            <code>

          '--- Get PrintCommentsAtEnd
          Dim commentsAtEnd As Boolean = ps.PrintCommentsAtEnd

          '--- Set PrintCommentsAtEnd
          ps.PrintCommentsAtEnd = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PrintGridlines">
            <Doc>
        <summary>
          <para>Sets or returns whether the worksheet's horizontal and vertical cell gridlines will be printed.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get PrintGridlines
          bool prntGridlines = ps.PrintGridlines

          //--- Set PrintGridlines
          ps.PrintGridlines = true;
        </code>
            <br/>
            <code>

          '--- Get PrintGridlines
          Dim prntGridlines As Boolean = ps.PrintGridlines

          '--- Set PrintGridlines
          ps.PrintGridlines = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PrintHeadings">
            <Doc>
        <summary>
          <para>Sets or returns whether the row and column headings will be printed for this worksheet.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get PrintHeadings
          bool prntHeadings = ps.PrintHeadings;

          //--- Set PrintHeadings
          ps.PrintHeadings = true;
        </code>
            <br/>
            <code>

          '--- Get PrintHeadings
          Dim prntHeadings As Boolean = ps.PrintHeadings

          '--- Set PrintHeadings
          ps.PrintHeadings = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PrintInBlackAndWhite">
            <Doc>
        <summary>
          <para>Sets or returns whether a worksheet formatted with colors will be printed in black and white. Set this to <c>true</c> if you are printing a colored worksheet on a black and white printer, or to reduce printing time on a color printer.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get PrintBlackAndWhite
          bool bw = ps.PrintInBlackAndWhite;

          //--- Set PrintBlackAndWhite
          ps.PrintInBlackAndWhite = true;
        </code>
            <br/>
            <code>

          '--- Get PrintBlackAndWhite
          Dim bw As Boolean = ps.PrintInBlackAndWhite

          '--- Set PrintBlackAndWhite
          ps.PrintInBlackAndWhite = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PrintOrder">
            <Doc>
        <summary>
          <para>Sets or returns the order in which data is numbered and printed when it does not fit on one page. The default order is down-then-over.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get PrintOrder
          PageSetup.PagePrintOrder order = ps.PrintOrder;

          //--- Set PrintOrder
          ps.PrintOrder = PageSetup.PagePrintOrder.OverThenDown;
        </code>
            <br/>
            <code>

          '--- Get PrintOrder
          Dim order As PageSetup.PagePrintOrder = ps.PrintOrder

          '--- Set PrintOrder
          ps.PrintOrder = PageSetup.PagePrintOrder.OverThenDown
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PrintTitles">
            <Doc>
        <summary>
          <para>Returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/> of cells that contains the print titles. This range will contain up to two <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> s, one for print title rows and another for the print title columns. These are the rows and columns that will be repeated on each printed page.</para>
        </summary>
        <example>
          <para>
            <code>
Range prntTitles = ps.PrintTitles;</code>
            <br/>
            <code>
Dim prntTitles As Range = ps.PrintTitles</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.RightFooter">
            <Doc>
        <summary>
          <para>Sets or returns the text and formatting codes for the right footer that will appear on the printed worksheet. </para>
        </summary>
        <remarks>
          <para>For instructions on using the formatting codes for headers and footers, see http://wiki.softartisans.com/display/EW70/Headers+and+Footers.</para>
          <para>
            <b>Note:</b>
            <br/>
            <para>Total text, including formatting codes, for all sections of the footer cannot exceed 255 characters.</para>
          </para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get RightFooter
          string rghtFooter = ps.RightFooter;

          //--- Set RightFooter
          ps.RightFooter = "&amp;\"Tahoma\"&amp;BRight Footer&amp;B";
        </code>
            <br/>
            <code>

          '--- Get RightFooter
          Dim rghtFooter As String = ps.RightFooter

          '--- Set RightFooter
          ps.RightFooter = "&amp;""Tahoma""&amp;BRight Footer&amp;B"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.RightHeader">
            <Doc>
        <summary>
          <para>Sets or returns the text and formatting codes for the right header that will appear on the printed worksheet. </para>
        </summary>
        <remarks>
          <para>For instructions on using the formatting codes for headers and footers, see http://wiki.softartisans.com/display/EW70/Headers+and+Footers.</para>
          <para>
            <b>Note:</b>
            <br/>
            <para>Total text, including formatting codes, for all sections of the header cannot exceed 255 characters.</para>
          </para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get RightHeader
          string rghtHeader = ps.RightHeader;

          //--- Set RightHeader
          ps.RightHeader = "&amp;\"Tahoma\"&amp;BRight Header&amp;B";
        </code>
            <br/>
            <code>

          '--- Get RightHeader
          Dim rghtHeader As String = ps.RightHeader

          '--- Set RightHeader
          ps.RightHeader = "&amp;""Tahoma""&amp;BRight Header&amp;B"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.RightMargin">
            <Doc>
        <summary>
          <para>Sets or returns the value of the right margin in inches. This is the space between the worksheet data and the right edge of the printed page. This is set to.75 by default. The valid range of values is 0 through 100, and is also limited by paper size.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get RightMargin
          double rghtMargin = ps.RightMargin;

          //--- Set RightMargin
          ps.RightMargin = 1;
        </code>
            <br/>
            <code>

          '--- Get RightMargin
          Dim rghtMargin As Double = ps.RightMargin

          '--- Set RightMargin
          ps.RightMargin = 1
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.TopMargin">
            <Doc>
        <summary>
          <para>Sets or returns the value for the top margin in inches. This is the space between the worksheet data and the top edge of the printed page. This is set to 1 by default. The valid range of values are 0 through 100, and is also limited by paper size.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get TopMargin
          double tpMargin = ps.TopMargin;

          //--- Set TopMargin
          ps.TopMargin = 1.5;
        </code>
            <br/>
            <code>

          '--- Get TopMargin
          Dim tpMargin As Double = ps.TopMargin

          '--- Set TopMargin
          ps.TopMargin = 1.5
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.UseZoom">
            <Doc>
        <summary>
          <para>Sets or returns whether the Zoom property or the FitToPagesTall and FitToPagesWide pair of properties will be used.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get UseZoom
          bool useZm = ps.UseZoom;

          //--- Set Zoom
          ps.UseZoom = false;
        </code>
            <br/>
            <code>

          '--- Get UseZoom
          Dim useZm As Boolean = ps.UseZoom

          '--- Set UseZoom
          ps.UseZoom = False
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.Zoom">
            <Doc>
        <summary>
          <para>Sets or returns the percentage by which the size of the printed worksheet is adjusted. The printed worksheet can be enlarged up to 400%, and reduced to 10%.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Zoom
          int zm = ps.Zoom;

          //--- Set Zoom
          ps.Zoom = 75;
        </code>
            <br/>
            <code>

          '--- Get Zoom
          Dim zm As integer = ps.Zoom

          '--- Set Zoom
          ps.Zoom = 75
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.CellErrorsAs">
            <Doc>
        <summary>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.CellErrorsAs"/> value determines how cell errors will appear in the printed worksheet.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.CellErrorsAs.Blank">
            <Doc>
          <summary>[blank]</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.CellErrorsAs.Dash">
            <Doc>
          <summary>--</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.CellErrorsAs.Displayed">
            <Doc>
          <summary>Displayed</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.CellErrorsAs.NA">
            <Doc>
          <summary>#NA</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.CellErrorsAs.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;PageSetup.CellErrorsAs&quot;]/Member[@signature=&quot;PageSetup.CellErrorsAs.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.CellErrorsAs.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;PageSetup.CellErrorsAs&quot;]/Member[@signature=&quot;PageSetup.CellErrorsAs.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.CellErrorsAs.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;PageSetup.CellErrorsAs&quot;]/Member[@signature=&quot;PageSetup.CellErrorsAs.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.CellErrorsAs.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;PageSetup.CellErrorsAs&quot;]/Member[@signature=&quot;PageSetup.CellErrorsAs.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.CellErrorsAs.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;PageSetup.CellErrorsAs&quot;]/Member[@signature=&quot;PageSetup.CellErrorsAs.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PageOrientation">
            <Doc>
        <summary>
          <para>
            <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PageOrientation"/> specifies the page orientation of the printed worksheet.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PageOrientation.Landscape">
            <Doc>
          <summary>Landscape</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PageOrientation.Portrait">
            <Doc>
          <summary>Portrait</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PageOrientation.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;PageSetup.PageOrientation&quot;]/Member[@signature=&quot;PageSetup.PageOrientation.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PageOrientation.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;PageSetup.PageOrientation&quot;]/Member[@signature=&quot;PageSetup.PageOrientation.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PageOrientation.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;PageSetup.PageOrientation&quot;]/Member[@signature=&quot;PageSetup.PageOrientation.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PageOrientation.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;PageSetup.PageOrientation&quot;]/Member[@signature=&quot;PageSetup.PageOrientation.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PageOrientation.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;PageSetup.PageOrientation&quot;]/Member[@signature=&quot;PageSetup.PageOrientation.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize">
            <Doc>
        <summary>
          <para>
            <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize"/> specifies the paper size for printing.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.A3">
            <Doc>
          <summary>A3</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.A4">
            <Doc>
          <summary>A4</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.A4Small">
            <Doc>
          <summary>A4 Small</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.A5">
            <Doc>
          <summary>A5</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.B4">
            <Doc>
          <summary>B4</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.B5">
            <Doc>
          <summary>B5</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.CSheet">
            <Doc>
          <summary>C Sheet</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.Default">
            <Doc>
          <summary>Default</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.DSheet">
            <Doc>
          <summary>D Sheet</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.Envelope10">
            <Doc>
          <summary>Envelope 10</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.Envelope11">
            <Doc>
          <summary>Envelope 11</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.Envelope12">
            <Doc>
          <summary>Envelope 12</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.Envelope14">
            <Doc>
          <summary>Envelope 14</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.Envelope9">
            <Doc>
          <summary>Envelope 9</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.EnvelopeB4">
            <Doc>
          <summary>Envelope B4</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.EnvelopeB5">
            <Doc>
          <summary>Envelope B5</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.EnvelopeB6">
            <Doc>
          <summary>Envelope B6</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.EnvelopeC3">
            <Doc>
          <summary>Envelope C3</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.EnvelopeC4">
            <Doc>
          <summary>Envelope C4</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.EnvelopeC5">
            <Doc>
          <summary>Envelope C5</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.EnvelopeC6">
            <Doc>
          <summary>Envelope C6</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.EnvelopeC65">
            <Doc>
          <summary>Envelope C65</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.EnvelopeDL">
            <Doc>
          <summary>Envelope DL</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.EnvelopeItaly">
            <Doc>
          <summary>Envelope Italy</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.EnvelopeMonarch">
            <Doc>
          <summary>Envelope Monarch</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.EnvelopePersonal">
            <Doc>
          <summary>Envelope Personal</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.ESheet">
            <Doc>
          <summary>E Sheet</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.Executive">
            <Doc>
          <summary>Executive</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.FanfoldLegalGerman">
            <Doc>
          <summary>Fanfold Legal German</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.FanfoldStdGerman">
            <Doc>
          <summary>Fanfold Standard German</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.FanfoldUS">
            <Doc>
          <summary>Fanfold US</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.Folio">
            <Doc>
          <summary>Folio</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.Ledger">
            <Doc>
          <summary>Ledger</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.Legal">
            <Doc>
          <summary>Legal</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.Letter">
            <Doc>
          <summary>Letter</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.LetterSmall">
            <Doc>
          <summary>Letter Small</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.Note">
            <Doc>
          <summary>Note</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.Paper10x14">
            <Doc>
          <summary>10x14</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.Paper11x17">
            <Doc>
          <summary>11x17</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.Quarto">
            <Doc>
          <summary>Quarto</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.Statement">
            <Doc>
          <summary>Statement</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.Tabloid">
            <Doc>
          <summary>Tabloid</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.User">
            <Doc>
          <summary>User</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;PageSetup.PagePaperSize&quot;]/Member[@signature=&quot;PageSetup.PagePaperSize.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;PageSetup.PagePaperSize&quot;]/Member[@signature=&quot;PageSetup.PagePaperSize.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;PageSetup.PagePaperSize&quot;]/Member[@signature=&quot;PageSetup.PagePaperSize.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;PageSetup.PagePaperSize&quot;]/Member[@signature=&quot;PageSetup.PagePaperSize.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePaperSize.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;PageSetup.PagePaperSize&quot;]/Member[@signature=&quot;PageSetup.PagePaperSize.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePrintOrder">
            <Doc>
        <summary>
          <para>
            <c>PagePrintOrder</c> specifies the order in which a worksheet should be printed.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePrintOrder.DownThenOver">
            <Doc>
          <summary>Down then over</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePrintOrder.OverThenDown">
            <Doc>
          <summary>Over then down</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePrintOrder.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;PageSetup.PagePrintOrder&quot;]/Member[@signature=&quot;PageSetup.PagePrintOrder.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePrintOrder.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;PageSetup.PagePrintOrder&quot;]/Member[@signature=&quot;PageSetup.PagePrintOrder.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePrintOrder.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;PageSetup.PagePrintOrder&quot;]/Member[@signature=&quot;PageSetup.PagePrintOrder.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePrintOrder.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;PageSetup.PagePrintOrder&quot;]/Member[@signature=&quot;PageSetup.PagePrintOrder.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.PagePrintOrder.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;PageSetup&quot;]/Member[@signature=&quot;PageSetup.PagePrintOrder&quot;]/Member[@signature=&quot;PageSetup.PagePrintOrder.Value&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPageSetup&quot;]/Member[@signature=&quot;ChartPageSetup.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPageSetup&quot;]/Member[@signature=&quot;ChartPageSetup.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup.ChartSize">
            <Doc>
        <summary>
          <para>Sets or returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup.PrintedChartSize"/> value for this char. This property affects how you can move and size the chart area, plot area, and the chart elements when printed.</para>
        </summary>
        <remarks>
          <para>If you set this to http://wiki.softartisans.com/display/EW70/ChartPageSetup.PrintedChartSize#UseFullPage, the chart's plot area and elements contained within the plot area can be sized and moved, but not the chart area. When you select the http://wiki.softartisans.com/display/EW70/ChartPageSetup.PrintedChartSize#ScaleToFitPage or  http://wiki.softartisans.com/display/EW70/ChartPageSetup.PrintedChartSize#Custom, the entire chart can be sized. With either of these set, the positions of chart elements such as titles, text boxes, and arrows shift relative to the chart area.</para>
        </remarks>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup.PrintedChartSize">
            <Doc>
        <summary>
          <para>A chart's <c>PrintedChartSize</c> value determines how you can move and size the chart area, plot area, and the chart elements when printing the chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup.PrintedChartSize.Custom">
            <Doc>
          <summary>The entire chart (the chart area) can be sized and moved.  The positions of chart elements such as titles, text boxes, and arrows shift relative to the chart area.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup.PrintedChartSize.ScaleToFitPage">
            <Doc>
          <summary>The entire chart (the chart area) can be sized and moved.  The positions of chart elements such as titles, text boxes, and arrows shift relative to the chart area.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup.PrintedChartSize.UseFullPage">
            <Doc>
          <summary>The chart's plot area and elements within the plot area can be sized and moved, but not the chart area.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup.PrintedChartSize.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPageSetup&quot;]/Member[@signature=&quot;ChartPageSetup.PrintedChartSize&quot;]/Member[@signature=&quot;ChartPageSetup.PrintedChartSize.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup.PrintedChartSize.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPageSetup&quot;]/Member[@signature=&quot;ChartPageSetup.PrintedChartSize&quot;]/Member[@signature=&quot;ChartPageSetup.PrintedChartSize.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup.PrintedChartSize.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPageSetup&quot;]/Member[@signature=&quot;ChartPageSetup.PrintedChartSize&quot;]/Member[@signature=&quot;ChartPageSetup.PrintedChartSize.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup.PrintedChartSize.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPageSetup&quot;]/Member[@signature=&quot;ChartPageSetup.PrintedChartSize&quot;]/Member[@signature=&quot;ChartPageSetup.PrintedChartSize.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup.PrintedChartSize.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPageSetup&quot;]/Member[@signature=&quot;ChartPageSetup.PrintedChartSize&quot;]/Member[@signature=&quot;ChartPageSetup.PrintedChartSize.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup.VerticalAlignment">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPageSetup&quot;]/Member[@signature=&quot;ChartPageSetup.VerticalAlignment&quot;]/Doc"/>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup.VerticalAlignment.Bottom">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPageSetup&quot;]/Member[@signature=&quot;ChartPageSetup.VerticalAlignment&quot;]/Member[@signature=&quot;ChartPageSetup.VerticalAlignment.Bottom&quot;]/Doc"/>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup.VerticalAlignment.Center">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPageSetup&quot;]/Member[@signature=&quot;ChartPageSetup.VerticalAlignment&quot;]/Member[@signature=&quot;ChartPageSetup.VerticalAlignment.Center&quot;]/Doc"/>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup.VerticalAlignment.Justify">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPageSetup&quot;]/Member[@signature=&quot;ChartPageSetup.VerticalAlignment&quot;]/Member[@signature=&quot;ChartPageSetup.VerticalAlignment.Justify&quot;]/Doc"/>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup.VerticalAlignment.Top">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPageSetup&quot;]/Member[@signature=&quot;ChartPageSetup.VerticalAlignment&quot;]/Member[@signature=&quot;ChartPageSetup.VerticalAlignment.Top&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup.VerticalAlignment.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPageSetup&quot;]/Member[@signature=&quot;ChartPageSetup.VerticalAlignment&quot;]/Member[@signature=&quot;ChartPageSetup.VerticalAlignment.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup.VerticalAlignment.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPageSetup&quot;]/Member[@signature=&quot;ChartPageSetup.VerticalAlignment&quot;]/Member[@signature=&quot;ChartPageSetup.VerticalAlignment.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup.VerticalAlignment.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPageSetup&quot;]/Member[@signature=&quot;ChartPageSetup.VerticalAlignment&quot;]/Member[@signature=&quot;ChartPageSetup.VerticalAlignment.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup.VerticalAlignment.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPageSetup&quot;]/Member[@signature=&quot;ChartPageSetup.VerticalAlignment&quot;]/Member[@signature=&quot;ChartPageSetup.VerticalAlignment.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartPageSetup.VerticalAlignment.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPageSetup&quot;]/Member[@signature=&quot;ChartPageSetup.VerticalAlignment&quot;]/Member[@signature=&quot;ChartPageSetup.VerticalAlignment.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartPrototype">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPrototype&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartType">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartType"/> class contains all available chart types. When setting a chart type, always specify both the major type and the sub-type, for example:</para>
      </summary>
    </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Category">
            <Doc>
        <summary>
          <para>Returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartType"/>'s  chart category (Column, Pie, Line, Radar, Bar, Surface, Area, Scatter, Doughnut, Bubble, or Custom).</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Is3D">
            <Doc>
        <summary>
          <para>Returns whether the chart type is three-dimensional or not.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Name">
            <Doc>
        <summary>
          <para>Returns the name of the chart type as a string.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Area">
            <Doc>
        <summary>
          <para>Enumerations for area chart types</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartPrototype">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPrototype&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartPrototype.#ctor(System.String,SoftArtisans.OfficeWriter.ExcelWriter.ChartType.ChartCategory,System.Boolean)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPrototype&quot;]/Member[@signature=&quot;ChartPrototype.ChartPrototype(String, ChartType.ChartCategory, Boolean)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartPrototype.findByValue(System.String,System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPrototype&quot;]/Member[@signature=&quot;ChartPrototype.findByValue(String, Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartPrototype.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPrototype&quot;]/Member[@signature=&quot;ChartPrototype.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartPrototype.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPrototype&quot;]/Member[@signature=&quot;ChartPrototype.Value&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartPrototype.Category">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPrototype&quot;]/Member[@signature=&quot;ChartPrototype.Category&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartPrototype.Name">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPrototype&quot;]/Member[@signature=&quot;ChartPrototype.Name&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartPrototype.Is3D">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartPrototype&quot;]/Member[@signature=&quot;ChartPrototype.Is3D&quot;]/Doc"/>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Area.Area3D">
            <Doc>
          <summary>Area chart with 3-dimensional visual effect.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Area.Stacked">
            <Doc>
          <summary>Stacked area chart.  Displays the trend of the contribution of each value over time or categories.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Area.Stacked100Percent">
            <Doc>
          <summary>100% stacked area chart.  Displays the trend of the percentage each value contributes over time or categories.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Area.Stacked3D">
            <Doc>
          <summary>Stacked area chart with 3-dimensional visual effect.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Area.Stacked3D100Percent">
            <Doc>
          <summary>100% stacked area chart with 3-dimensional visual effect.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Area.StandardArea">
            <Doc>
          <summary>Standard area chart.  Displays the trend of values over time or categories.<br/></summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Area.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartType&quot;]/Member[@signature=&quot;ChartType.Area&quot;]/Member[@signature=&quot;ChartType.Area.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Bar">
            <Doc>
        <summary>
          <para>Enumerations for bar chart types</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Bar.Clustered">
            <Doc>
          <summary>Clustered bar chart. Compares values across categories.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Bar.Clustered3D">
            <Doc>
          <summary>Clusterd bar chart with a 3-dimensional visual effect.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Bar.Stacked">
            <Doc>
          <summary>Stacked bar chart.  Compares the contribution of each value to a total across categories.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Bar.Stacked100Percent">
            <Doc>
          <summary>100% stacked bar chart.  Compares the percentage each value contributes to a total across categories.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Bar.Stacked3D">
            <Doc>
          <summary>Stacked bar chart with a 3-dimensional visual effect.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Bar.Stacked3D100Percent">
            <Doc>
          <summary>100% stacked bar chart with a 3-dimensional visual effect.<br/></summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Bar.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartType&quot;]/Member[@signature=&quot;ChartType.Bar&quot;]/Member[@signature=&quot;ChartType.Bar.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Bubble">
            <Doc>
        <summary>
          <para>Enumerations for Bubble chart types</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Bubble.Bubble3D">
            <Doc>
          <summary>Bubble chart with a 3-dimensional visual effect.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Bubble.StandardBubble">
            <Doc>
          <summary>Standard bubble chart.<br/></summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Bubble.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartType&quot;]/Member[@signature=&quot;ChartType.Bubble&quot;]/Member[@signature=&quot;ChartType.Bubble.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.ChartCategory">
            <Doc>
        <summary>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.ChartCategory"/> specifies a chart type's category.  For example, column is a chart category, while clustered column and stacked column are chart types in the column category.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.ChartCategory.Area">
            <Doc>
          <summary>Area chart</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.ChartCategory.Bar">
            <Doc>
          <summary>Bar chart</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.ChartCategory.Bubble">
            <Doc>
          <summary>Bubble chart</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.ChartCategory.Column">
            <Doc>
          <summary>Column chart</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.ChartCategory.Custom">
            <Doc>
          <summary>Custom chart</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.ChartCategory.Doughnut">
            <Doc>
          <summary>Doughnut chart</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.ChartCategory.Line">
            <Doc>
          <summary>Line chart</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.ChartCategory.Pie">
            <Doc>
          <summary>Pie chart</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.ChartCategory.Radar">
            <Doc>
          <summary>Radar chart</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.ChartCategory.Scatter">
            <Doc>
          <summary>Scatter chart</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.ChartCategory.Surface">
            <Doc>
          <summary>Surface chart</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.ChartCategory.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartType&quot;]/Member[@signature=&quot;ChartType.ChartCategory&quot;]/Member[@signature=&quot;ChartType.ChartCategory.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.ChartCategory.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartType&quot;]/Member[@signature=&quot;ChartType.ChartCategory&quot;]/Member[@signature=&quot;ChartType.ChartCategory.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.ChartCategory.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartType&quot;]/Member[@signature=&quot;ChartType.ChartCategory&quot;]/Member[@signature=&quot;ChartType.ChartCategory.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.ChartCategory.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartType&quot;]/Member[@signature=&quot;ChartType.ChartCategory&quot;]/Member[@signature=&quot;ChartType.ChartCategory.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.ChartCategory.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartType&quot;]/Member[@signature=&quot;ChartType.ChartCategory&quot;]/Member[@signature=&quot;ChartType.ChartCategory.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Column">
            <Doc>
        <summary>
          <para>Enumerations for Column chart types</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Column.Clustered">
            <Doc>
          <summary>Clustered column chart. Compares values across categories.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Column.Clustered3D">
            <Doc>
          <summary>Clustered column chart with a 3-dimensional visual effect.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Column.Column3D">
            <Doc>
          <summary>3-dimensional column chart. Compares values across categories and across series.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Column.Stacked">
            <Doc>
          <summary>Stacked column chart. Compares the contribution of each value to a total across categories.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Column.Stacked100Percent">
            <Doc>
          <summary>100% stacked column chart. Compares the percentage each value contributes to a total across categories.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Column.Stacked3D">
            <Doc>
          <summary>Stacked column chart with a 3-dimensional visual effect.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Column.Stacked3D100Percent">
            <Doc>
          <summary>100% stacked column chart with a 3-dimensional visual effect.<br/></summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Column.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartType&quot;]/Member[@signature=&quot;ChartType.Column&quot;]/Member[@signature=&quot;ChartType.Column.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Custom">
            <Doc>
        <summary>
          <para>Enumerations for Customer chart types</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Custom.Combo">
            <Doc>
          <summary>Custom chart type.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Custom.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartType&quot;]/Member[@signature=&quot;ChartType.Custom&quot;]/Member[@signature=&quot;ChartType.Custom.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Doughnut">
            <Doc>
        <summary>
          <para>Enumerations for doughnut chart types</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Doughnut.Exploded">
            <Doc>
          <summary>Exploded doughnut chart.  Like an exploded pie chart, but can contain multiple series.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Doughnut.StandardDoughnut">
            <Doc>
          <summary>Standard doughnut chart.  Like a pie chart, but can contain multiple series.<br/></summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Doughnut.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartType&quot;]/Member[@signature=&quot;ChartType.Doughnut&quot;]/Member[@signature=&quot;ChartType.Doughnut.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Line">
            <Doc>
        <summary>
          <para>Enumerations for line chart types</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Line.Line3D">
            <Doc>
          <summary>Line chart with a 3-dimensional visual effect.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Line.Stacked">
            <Doc>
          <summary>Stacked line chart.  Displays the trend of the contribution of each value over time or categories.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Line.Stacked100Percent">
            <Doc>
          <summary>100% stacked line chart.  Displays the trend of the percentage each value contributes over time or categories.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Line.StandardLine">
            <Doc>
          <summary>Standard line chart. Displays trend over time or categories.<br/></summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Line.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartType&quot;]/Member[@signature=&quot;ChartType.Line&quot;]/Member[@signature=&quot;ChartType.Line.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Pie">
            <Doc>
        <summary>
          <para>Enumerations for pie chart types</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Pie.BarOfPie">
            <Doc>
          <summary>Bar of pie chart. Pie with user-defined values extracted and combined into a stacked bar.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Pie.Pie3D">
            <Doc>
          <summary>Pie chart with a 3-dimensional visual effect.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Pie.PieExploded">
            <Doc>
          <summary>Exploded pie chart.  Displays the contribution of each value to a total while emphasizing individual values.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Pie.PieExploded3D">
            <Doc>
          <summary>Exploaded pie chart with a 3-dimensional visual effect.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Pie.PieOfPie">
            <Doc>
          <summary>Pie of pie chart.  Pie with user-defined values extracted and combined into a second pie.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Pie.StandardPie">
            <Doc>
          <summary>Standard pie chart.  Compares the contribution of each value to a total.<br/></summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Pie.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartType&quot;]/Member[@signature=&quot;ChartType.Pie&quot;]/Member[@signature=&quot;ChartType.Pie.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Radar">
            <Doc>
        <summary>
          <para>Enumerations for radar chart types</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Radar.Filled">
            <Doc>
          <summary>Filled radar chart.  Radar chart with the area covered by a data series filled with a color.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Radar.StandardRadar">
            <Doc>
          <summary>Standard radar chart.  Displays changes in values relative to a center point.<br/></summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Radar.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartType&quot;]/Member[@signature=&quot;ChartType.Radar&quot;]/Member[@signature=&quot;ChartType.Radar.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Scatter">
            <Doc>
        <summary>
          <para>Enumerations for scatter chart types</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Scatter.StandardScatter">
            <Doc>
          <summary>Scatter chart.  Compares pairs of values.<br/></summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Scatter.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartType&quot;]/Member[@signature=&quot;ChartType.Scatter&quot;]/Member[@signature=&quot;ChartType.Scatter.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Surface">
            <Doc>
        <summary>
          <para>Enumerations for surface chart types</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Surface.Contour">
            <Doc>
          <summary>Contour chart.  Surface chart viewed from above.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Surface.Surface3D">
            <Doc>
          <summary>3-dimensional surface chart.  Shows trends in values across two dimensions in a continuous curve.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Surface.Wireframe3D">
            <Doc>
          <summary>3-dimensional surface chart without color.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Surface.WireframeContour">
            <Doc>
          <summary>Contour chart without color.<br/></summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartType.Surface.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartType&quot;]/Member[@signature=&quot;ChartType.Surface&quot;]/Member[@signature=&quot;ChartType.Surface.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Charts">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Charts"/> collection contains all charts in the specified worksheet. Chart sheets are not included in this collection. To return a <c>Charts</c> collection, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Charts"/>.</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Charts.GetEnumerator">
            <Doc>
        <summary>
          <para>Returns an IEnumerator for the Charts in a Worksheet</para>
        </summary>
        <returns>
          <para>An enumerator for the Comments in a Worksheet as a System.Collections.IEnumerator</para>
        </returns>
        <example>
          <para>
            <code>
IEnumerator enumerator = ws.Charts.GetEnumerator();
</code>
            <br/>
            <code>
Dim enumerator as IEnumerator = ws.Charts.GetEnumerator()
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Charts.AddChart(SoftArtisans.OfficeWriter.ExcelWriter.Chart,SoftArtisans.OfficeWriter.ExcelWriter.Anchor)">
            <Doc>
        <summary>
          <para>Adds the specified chart to the current worksheet. This method allows you to add a chart from an external workbook to the worksheet. The chart will be auto-fitted to the default size.</para>
        </summary>
        <param name="chart">
          <para>The new Chart to add to the workbook.</para>
        </param>
        <param name="cornerTopLeft">
          <para>The place to anchor the upper left corner.</para>
        </param>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Charts.CreateChart(SoftArtisans.OfficeWriter.ExcelWriter.ChartType,SoftArtisans.OfficeWriter.ExcelWriter.Anchor)">
            <Doc>
        <summary>
          <para>Creates a new, blank chart of the specified type.</para>
        </summary>
        <param name="type">
          <para>The type of chart to create.</para>
        </param>
        <param name="cornerTopLeft">
          <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Anchor"/> representing the top left corner of the chart's position.</para>
        </param>
        <returns>
          <para>a new Chart.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Charts.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Charts&quot;]/Member[@signature=&quot;Charts.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Charts.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Charts&quot;]/Member[@signature=&quot;Charts.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Charts.Remove(SoftArtisans.OfficeWriter.ExcelWriter.Chart)">
            <Doc>
        <summary>
          <para>Permanently removes the specified chart from the worksheet.</para>
        </summary>
        <param name="Chart">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Chart"/> object representing the Chart to remove.</para>
        </param>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Charts.Remove(System.Int32)">
            <Doc>
        <summary>
          <para>Permanently removes the chart at the specified position from the worksheet.</para>
        </summary>
        <param name="position">
          <para>The 0-based index of the chart to remove. To determine a chart's index, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.Position"/>.</para>
        </param>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Charts.Count">
            <Doc>
        <summary>
          <para>Returns the number of charts in the worksheet.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Charts.Item(System.Int32)">
            <Doc>
        <summary>
          <para>Returns the chart at the specified 0-based position in the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Charts"/> collection.</para>
        </summary>
        <param name="index">
          <para>The 0-based index of the chart to retrieve. To determine a chart's index, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.Position"/>.</para>
        </param>
        <returns>
          <para>The chart at the specified index.</para>
        </returns>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Charts.Item(System.String)">
            <Doc>
        <summary>
          <para>Returns the chart with the specified name in the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Charts"/> collection.</para>
        </summary>
        <param name="name">
          <para>The name of the chart to retrieve</para>
        </param>
        <returns>
          <para>The chart with the specified name.</para>
        </returns>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartSettings3D">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartSettings3D"/> class contains the set of properties specific to three-dimensional charts. To return a <c>ChartSettings3D</c> object, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.ChartSettings3D"/>.</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartSettings3D.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartSettings3D&quot;]/Member[@signature=&quot;ChartSettings3D.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartSettings3D.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ChartSettings3D&quot;]/Member[@signature=&quot;ChartSettings3D.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartSettings3D.ChartDepth">
            <Doc>
        <summary>
          <para>Sets or returns the depth of a three-dimensional chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartSettings3D.DistanceFromEyeToChart">
            <Doc>
        <summary>
          <para>Sets or returns a perspective value, between 0 and 100 degrees, that represents the ratio of the chart's front to its back. The perspective value determines the appearance of chart depth.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartSettings3D.ElevationAngle">
            <Doc>
        <summary>
          <para>Sets or returns the elevation angle of a three-dimensional chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartSettings3D.Floor3D">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartInterior"/> object representing the floor of a three-dimensional chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartSettings3D.Floor3DBorder">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine"/> object representing the border around the floor of a three-dimensional chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartSettings3D.PlotVolumeHeight">
            <Doc>
        <summary>
          <para>Sets or returns the height of a three-dimensional chart, as a percentage of the chart's base length.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartSettings3D.RotationAngle">
            <Doc>
        <summary>
          <para>Sets or returns the rotation angle of a three-dimensional chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartSettings3D.SeriesGapWidth">
            <Doc>
        <summary>
          <para>Sets or returns the gap width between categories of series values.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartSettings3D.UseAutoScaling">
            <Doc>
        <summary>
          <para>Sets or returns whether Microsoft Excel will automatically scale a three-dimensional chart to be close to the size of its two-dimensional version.</para>
        </summary>
        <remarks>
          <para>Enabling <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartSettings3D.UseAutoScaling"/> will have no effect unless <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartSettings3D.UseRightAngleAxes"/> is set to <c>true</c>.</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartSettings3D.UseRightAngleAxes">
            <Doc>
        <summary>
          <para>Sets or returns whether the axes will be at right angles. If the method returns <c>true</c>, <c>setDistanceFromEyeToChart</c> will have no effect.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartSettings3D.Wall3D">
            <Doc>
        <summary>
          <para>Returns an <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartInterior"/> object representing the walls of a three-dimensional chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartSettings3D.Wall3DBorder">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine"/> object representing the border around the walls of a three-dimensional chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Chartsheet">
            <Doc>
      <summary>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Chartsheet"/> object represents a worksheet that contains only a chart. </summary>
      <remarks>
        <para>To create a <c>Chartsheet</c>, use <see cref="!:Worksheets.createChartsheet"/>.  To get an existing <c>Chartsheet</c>, get a  <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet"/> using <see cref="!:Worksheets[Int32]"/> and check if it is of type <c>Chartsheet</c>.</para>
      </remarks>
      <example>
        <para>
          <code>

          //--- Create a Chartsheet
          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          Worksheet ws = wb.Worksheets[0];
          Chartsheet cs = wb.Worksheets.CreateChartsheet
               (ChartType.Pie.Pie3D, "Chart");

          //--- Get the first Chartsheet from a Workbook
          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Open("C:\\MySpreadsheet.xls");
          bool found = false;
          for(int i = 0; i &lt; wb.Worksheets.Count; i++)
          {
               if (found == false)
               {
                    Worksheet ws = wb.Worksheets[i];
                    
                    if(ws is Chartsheet)
                    {
                         Chartsheet cs = (Chartsheet)ws;
                         found = true;
                    }
               }
          }
        </code>
          <br/>
          <code>

          '--- Create a Chartsheet
          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim ws As Worksheet = wb.Worksheets(0)
          Dim cs As Chartsheet = wb.Worksheets.CreateChartsheet _
               (ChartType.Pie.Pie3D, "Chart")

          '--- Get the first Chartsheet from a Workbook
          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Open("C:\MySpreadsheet.xls")
          Dim found As Boolean = False
          Dim i As Integer
          For i = 0 To wb.Worksheets.Count - 1
               If found = False Then
                    Dim ws As Worksheet = wb.Worksheets(i)

                    If ws Is Chartsheet Then
                         Dim cs As Chartsheet = CType(ws, Chartsheet)
                         found = True
                    End If
               End If
          Next
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet">
            <Doc>
      <summary>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet"/> class represents a single Excel worksheet. </summary>
      <remarks>
        <para>To add a Worksheet to a Workbook, call <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets.CreateWorksheet(System.String)"/>.  To get an existing Worksheet call <see cref="!:Worksheets[]"/>.</para>
      </remarks>
      <example>
        <para>
          <code>
          //--- Create a new Worksheet
          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          Worksheet ws = wb.Worksheets.CreateWorksheet("Sheet2");

          //--- Get an existing Worksheet by index
          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          Worksheets ws = wb.Worksheets[0];

          //--- Get an existing Worksheet by name
          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          Worksheet ws = wb.Worksheets["Sheet1"];
</code>
          <br/>
          <code>
          '--- Create a new Worksheet
          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim ws As Worksheet = wb.Worksheets.CreateWorksheet("Sheet2")

          '--- Get an existing Worksheet by index
          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim ws As Worksheet = wb.Worksheets(0)

          '--- Get an existing Worksheet by name
          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim ws As Worksheet = wb.Worksheets("Sheet2")
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CopyPaste(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Area,SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties)">
            <Doc>
        <summary>Copies an area of cells from another <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet"/> to cells in this worksheet.</summary>
        <param name="destCell">
          <para>A string indicating the upper-left cell of the destination area.</para>
        </param>
        <param name="sourceArea">
          <para>An area from the source workbook from which to copy.</para>
        </param>
        <param name="properties">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties"/> object that specifies the types of data to copy.</para>
        </param>
        <returns>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object representing the set of cells populated with the copied values.</para>
        </returns>
        <remarks>
          <para>The copied data will <u>overwrite</u> the contents of the cells in this worksheet.  You may specify the types of data copied (cell value, formulas, comments, formatting, etc.) using the CopyPasteProperties object.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Open the workbook and worksheet from which we will copy cells.
          Workbook sourceWb = xla.Open("MyDataSource.xls");
          Worksheet sourceWs = sourceWb[0];

          //--- Create the workbook and and get the worksheet
          //--- into which we will paste cells.
          Workbbok destWb = xla.Create("MyNewWorkbook");
          Worksheet destWs = destWb[0];

          //--- Define the area of cells to copy.
          Area srcArea = sourceWs.CreateArea("A1:F20");

          //--- Copy cell values, formulas and cell and number formatting.
          CopyPasteProperties copyPasteProps =
               sourceWb.CreateCopyPasteProperties(
               CopyPasteProperties.CopyPasteType.ValueFormulasAndFormatting);

          //--- Paste the data onto the destination worksheet.
          destWs.CopyPaste("A1", srcArea, copyPasteProps);
        </code>
            <br/>
            <code>

          '--- Open the workbook and worksheet from which we will copy cells.
          Dim sourceWb As Workbook = xla.Open("MyDataSource.xls")
          Dim sourceWs As Worksheet = sourceWb(0)

          '--- Create the workbook and and get the worksheet
          '--- into which we will paste cells.
          Dim destWb As Workbook = xla.Create("MyNewWorkbook")
          Dim destWs As Worksheet = destWb(0)

          '--- Define the area of cells to copy.
          Dim srcArea As Area = sourceWs.CreateArea("A1:F20")

          '--- Copy cell values, formulas and cell and number formatting.
          Dim copyPasteProps As CopyPasteProperties = _
               sourceWb.CreateCopyPasteProperties( _
               CopyPasteProperties.CopyPasteType.ValueFormulasAndFormatting)

          '--- Paste the data onto the destination worksheet.
          destWs.CopyPaste("A1", srcArea, copyPasteProps)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CopyPaste(System.Int32,System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Area,SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties)">
            <Doc>
        <summary>Copies an area of cells from another <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet"/> to cells in this worksheet.</summary>
        <param name="firstRow">
          <para>The zero-based index of the first row in destination area.</para>
        </param>
        <param name="firstCol">
          <para>The zero-based index of the first column in the destination area.</para>
        </param>
        <param name="sourceArea">
          <para>An area from the source workbook from which to copy.</para>
        </param>
        <param name="properties">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties"/> object that specifies the types of data to copy.</para>
        </param>
        <returns>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object representing the set of cells populated with the copied values.</para>
        </returns>
        <remarks>
          <para>The copied data will <u>overwrite</u> the contents of the cells in this worksheet.  You may specify the types of data copied (cell value, formulas, comments, formatting, etc.) using the CopyPasteProperties object.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Open the workbook and worksheet from which we will copy cells.
          Workbook sourceWb = xla.Open("MyDataSource.xls");
          Worksheet sourceWs = sourceWb[0];

          //--- Create the workbook and and get the worksheet
          //--- into which we will paste cells.
          Workbbok destWb = xla.Create("MyNewWorkbook");
          Worksheet destWs = destWb[0];

          //--- Define the area of cells to copy.
          Area srcArea = sourceWs.CreateArea("A1:F20");

          //--- Copy cell values, formulas and cell and number formatting.
          CopyPasteProperties copyPasteProps =
               sourceWb.CreateCopyPasteProperties(
               CopyPasteProperties.CopyPasteType.ValueFormulasAndFormatting);

          //--- Paste the data onto the destination worksheet.
          destWs.CopyPaste(0, 0, srcArea, copyPasteProps);
        </code>
            <br/>
            <code>

          '--- Open the workbook and worksheet from which we will copy cells.
          Dim sourceWb As Workbook = xla.Open("MyDataSource.xls")
          Dim sourceWs As Worksheet = sourceWb(0)

          '--- Create the workbook and and get the worksheet
          '--- into which we will paste cells.
          Dim destWb As Workbook = xla.Create("MyNewWorkbook")
          Dim destWs As Worksheet = destWb(0)

          '--- Define the area of cells to copy.
          Dim srcArea As Area = sourceWs.CreateArea("A1:F20")

          '--- Copy cell values, formulas and cell and number formatting.
          Dim copyPasteProps As CopyPasteProperties = _
               sourceWb.CreateCopyPasteProperties( _
               CopyPasteProperties.CopyPasteType.ValueFormulasAndFormatting)

          '--- Paste the data onto the destination worksheet.
          destWs.CopyPaste(0, 0, srcArea, copyPasteProps)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CopyPaste(SoftArtisans.OfficeWriter.ExcelWriter.Cell,SoftArtisans.OfficeWriter.ExcelWriter.Area,SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties)">
            <Doc>
        <summary>Copies an area of cells from another <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet"/> to cells in this worksheet.</summary>
        <param name="destCell">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/> indicating the upper-left cell of the destination area.</para>
        </param>
        <param name="sourceArea">
          <para>An area from the source workbook from which to copy.</para>
        </param>
        <param name="properties">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties"/> object that specifies the types of data to copy.</para>
        </param>
        <returns>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object representing the set of cells populated with the copied values.</para>
        </returns>
        <remarks>
          <para>The copied data will <u>overwrite</u> the contents of the cells in this worksheet.  You may specify the types of data copied (cell value, formulas, comments, formatting, etc.) using the CopyPasteProperties object.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Open the workbook and worksheet from which we will copy cells.
          Workbook sourceWb = xla.Open("MyDataSource.xls");
          Worksheet sourceWs = sourceWb[0];

          //--- Create the workbook and and get the worksheet
          //--- into which we will paste cells.
          Workbbok destWb = xla.Create("MyNewWorkbook");
          Worksheet destWs = destWb[0];

          //--- Define the area of cells to copy.
          Area srcArea = sourceWs.CreateArea("A1:F20");

          //--- Copy cell values, formulas and cell and number formatting.
          CopyPasteProperties copyPasteProps =
               sourceWb.CreateCopyPasteProperties(
               CopyPasteProperties.CopyPasteType.ValueFormulasAndFormatting);

          //--- Paste the data onto the destination worksheet.
          Cell whereToPaste = destSheet["A1"];
          destWs.CopyPaste(whereToPaste, srcArea, copyPasteProps);
        </code>
            <br/>
            <code>

          '--- Open the workbook and worksheet from which we will copy cells.
          Dim sourceWb As Workbook = xla.Open("MyDataSource.xls")
          Dim sourceWs As Worksheet = sourceWb(0)

          '--- Create the workbook and and get the worksheet
          '--- into which we will paste cells.
          Dim destWb As Workbook = xla.Create("MyNewWorkbook")
          Dim destWs As Worksheet = destWb(0)

          '--- Define the area of cells to copy.
          Dim srcArea As Area = sourceWs.CreateArea("A1:F20")

          '--- Copy cell values, formulas and cell and number formatting.
          Dim whereToPaste As Cell = destSheet("A1")
          Dim copyPasteProps As CopyPasteProperties = _
               sourceWb.CreateCopyPasteProperties( _
               CopyPasteProperties.CopyPasteType.ValueFormulasAndFormatting)

          '--- Paste the data onto the destination worksheet.
          destWs.CopyPaste("A1", srcArea, copyPasteProps)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CopyPaste(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Area)">
            <Doc>
        <summary>Copies an area of cells from another <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet"/> to cells in this worksheet.</summary>
        <param name="destCell">
          <para>A string indicating the upper-left cell of the destination area.</para>
        </param>
        <param name="sourceArea">
          <para>An area from the source workbook from which to copy.</para>
        </param>
        <returns>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object representing the set of cells populated with the copied values.</para>
        </returns>
        <remarks>
          <para>The copied data will <u>overwrite</u> the contents of the cells in this worksheet.  The method behaves as if you had passed in CopyPasteProperties object initialized with http://wiki.softartisans.com/display/EW70/CopyPasteProperties.CopyPasteType#All.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Open the workbook and worksheet from which we will copy cells.
          Workbook sourceWb = xla.Open("MyDataSource.xls");
          Worksheet sourceWs = sourceWb[0];

          //--- Create the workbook and and get the worksheet
          //--- into which we will paste cells.
          Workbbok destWb = xla.Create("MyNewWorkbook");
          Worksheet destWs = destWb[0];

          //--- Define the area of cells to copy.
          Area srcArea = sourceWs.CreateArea("A1:F20");

          //--- Paste the data onto the destination worksheet.
          //--- Copy all supported data types (excluding row height and column width).
          destWs.CopyPaste("A1", srcArea);
        </code>
            <br/>
            <code>

          '--- Open the workbook and worksheet from which we will copy cells.
          Dim sourceWb As Workbook = xla.Open("MyDataSource.xls")
          Dim sourceWs As Worksheet = sourceWb(0)

          '--- Create the workbook and and get the worksheet
          '--- into which we will paste cells.
          Dim destWb As Workbook = xla.Create("MyNewWorkbook")
          Dim destWs As Worksheet = destWb(0)

          '--- Define the area of cells to copy.
          Dim srcArea As Area = sourceWs.CreateArea("A1:F20")

          '--- Paste the data onto the destination worksheet.
          '--- Copy all supported data types (excluding row height and column width).
          destWs.CopyPaste("A1", srcArea)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CopyPaste(System.Int32,System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Area)">
            <Doc>
        <summary>Copies an area of cells from another <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet"/> to cells in this worksheet.</summary>
        <param name="firstRow">
          <para>The zero-based index of the first row in destination area.</para>
        </param>
        <param name="firstCol">
          <para>The zero-based index of the first column in the destination area.</para>
        </param>
        <param name="sourceArea">
          <para>An area from the source workbook from which to copy.</para>
        </param>
        <returns>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object representing the set of cells populated with the copied values.</para>
        </returns>
        <remarks>
          <para>The copied data will <u>overwrite</u> the contents of the cells in this worksheet.   The method behaves as if you had passed in CopyPasteProperties object initialized with http://wiki.softartisans.com/display/EW70/CopyPasteProperties.CopyPasteType#All.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Open the workbook and worksheet from which we will copy cells.
          Workbook sourceWb = xla.Open("MyDataSource.xls");
          Worksheet sourceWs = sourceWb[0];

          //--- Create the workbook and and get the worksheet
          //--- into which we will paste cells.
          Workbbok destWb = xla.Create("MyNewWorkbook");
          Worksheet destWs = destWb[0];

          //--- Define the area of cells to copy.
          Area srcArea = sourceWs.CreateArea("A1:F20");

          //--- Paste the data onto the destination worksheet.
          //--- Copy all supported data types (excluding row height and column width).
          destWs.CopyPaste(0, 0, srcArea);
        </code>
            <br/>
            <code>

          '--- Open the workbook and worksheet from which we will copy cells.
          Dim sourceWb As Workbook = xla.Open("MyDataSource.xls")
          Dim sourceWs As Worksheet = sourceWb(0)

          '--- Create the workbook and and get the worksheet
          '--- into which we will paste cells.
          Dim destWb As Workbook = xla.Create("MyNewWorkbook")
          Dim destWs As Worksheet = destWb(0)

          '--- Define the area of cells to copy.
          Dim srcArea As Area = sourceWs.CreateArea("A1:F20")

          '--- Paste the data onto the destination worksheet.
          '--- Copy all supported data types (excluding row height and column width).
          destWs.CopyPaste(0, 0, srcArea)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CopyPaste(SoftArtisans.OfficeWriter.ExcelWriter.Cell,SoftArtisans.OfficeWriter.ExcelWriter.Area)">
            <Doc>
        <summary>
          <para>Copies an area of cells from another <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet"/> to cells in this worksheet. </para>
        </summary>
        <param name="destCell">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/> indicating the upper-left cell of the destination area.</para>
        </param>
        <param name="sourceArea">
          <para>An area from the source workbook from which to copy.</para>
        </param>
        <returns>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object representing the set of cells populated with the copied values.</para>
        </returns>
        <remarks>
          <para>The copied data will <u>overwrite</u> the contents of the cells in this worksheet.   The method behaves as if you had passed in CopyPasteProperties object initialized with http://wiki.softartisans.com/display/EW70/CopyPasteProperties.CopyPasteType#All.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Open the workbook and worksheet from which we will copy cells.
          Workbook sourceWb = xla.Open("MyDataSource.xls");
          Worksheet sourceWs = sourceWb[0];

          //--- Create the workbook and and get the worksheet
          //--- into which we will paste cells.
          Workbbok destWb = xla.Create("MyNewWorkbook");
          Worksheet destWs = destWb[0];

          //--- Define the area of cells to copy.
          Area srcArea = sourceWs.CreateArea("A1:F20");

          // Paste the data onto the destination worksheet.
          // Copy all supported data types (excluding row height and column width).
          Cell whereToPaste = destSheet["A1"];
          destWs.CopyPaste(whereToPaste, srcArea);
        </code>
            <br/>
            <code>

          '--- Open the workbook and worksheet from which we will copy cells.
          Dim sourceWb As Workbook = xla.Open("MyDataSource.xls")
          Dim sourceWs As Worksheet = sourceWb(0)

          '--- Create the workbook and and get the worksheet
          '--- into which we will paste cells.
          Dim destWb As Workbook = xla.Create("MyNewWorkbook")
          Dim destWs As Worksheet = destWb(0)

          '--- Define the area of cells to copy.
          Dim srcArea As Area = sourceWs.CreateArea("A1:F20")

          '--- Paste the data onto the destination worksheet.
          '--- Copy all supported data types (excluding row height and column width).
          Dim whereToPaste As Cell = destSheet("A1")
          destWs.CopyPaste(whereToPaste, srcArea)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CreateAnchor(System.Int32,System.Int32,System.Double,System.Double)">
            <Doc>
        <summary>Creates an anchor at a specified position in the worksheet. </summary>
        <param name="rowNumber">
          <para>The 0-based row number of the cell in which the anchor will be positioned.</para>
        </param>
        <param name="columnNumber">
          <para>The 0-based column number of the cell in which the anchor will be positioned.</para>
        </param>
        <param name="offsetX">
          <para>The X offset from the cell's left side as a percentage of the cell's width.  If this worksheet is a chartsheet, this value is a percentage of the chart's width. This value must be between 0 and 100.</para>
        </param>
        <param name="offsetY">
          <para>The Y offset from the top of the cell as a percentage of the cell's height.  If this worksheet is a chartsheet, this value is a percentage of the chart's height. This value must be between 0 and 100.</para>
        </param>
        <returns>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Anchor"/> object.</para>
        </returns>
        <remarks>
          <para>An anchor represents the position of a floating (non-cell data) object within a spreadsheet. The position is maintained as a row number + a percentage of the row's width and a column number + a percentage of the column's height.</para>
          <para>If this Worksheet is actually a Chartsheet, the rowNumber and columnNumber values are disregarded and the offsetX and offsetY values are interperted to be a percentage of the Chart's width and height, respectivly.</para>
        </remarks>
        <example>
          <para>
            <code>
Anchor anch = ws.CreateAnchor(4, 1, 30, 50);</code>
            <br/>
            <code>
Dim anch As Anchor = ws.CreateAnchor(4, 1, 30, 50)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CreateArea(System.Int32,System.Int32,System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Defines a rectangular <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> of cells in the worksheet.</para>
        </summary>
        <param name="firstRow">
          <para>0-based first row of the area.</para>
        </param>
        <param name="firstColumn">
          <para>0-based first column of the area.</para>
        </param>
        <param name="numRows">
          <para>Number of rows in the area. Maximum: 65536.</para>
        </param>
        <param name="numColumns">
          <para>Number of columns in the area. Maximum: 256.</para>
        </param>
        <returns>
          <para>An <c>Area</c> object.</para>
        </returns>
        <example>
          <para>
            <code>
Area a = ws.CreateArea(4, 4, 15, 6);</code>
            <br/>
            <code>
Dim a As Area = ws.CreateArea(4, 4, 15, 6)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CreateArea(System.String)">
            <Doc>
        <summary>
          <para>Defines a rectangular <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> of cells in the worksheet.</para>
        </summary>
        <param name="areaFormula">
          <para>A formula representing the area, e.g. "A3:B5". The formula must be local to the worksheet and should not contain a sheet reference.</para>
        </param>
        <returns>
          <para>An <c>Area</c> object.</para>
        </returns>
        <example>
          <para>
            <code>
Area a = ws.CreateArea("B7:H24");</code>
            <br/>
            <code>
Dim a As Area = ws.CreateArea("B7:H24")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CreateAreaOfColumns(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Returns an <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object representing all the cells in a specified group of columns. An area is a rectangular collection of cells.</para>
        </summary>
        <param name="firstCol">
          <para>The 0-based index of the first column.</para>
        </param>
        <param name="numCols">
          <para>The number of columns to include.</para>
        </param>
        <returns>
          <para>An <c>Area</c> object representing the set of cells in the specified columns.</para>
        </returns>
        <example>
          <para>
            <code>
Area a = ws.CreateAreaOfColumns(0, 25);</code>
            <br/>
            <code>
Dim a As Area = ws.CreateAreaOfColumns(0, 25)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CreateAreaOfRows(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Returns an <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object representing all the cells in a specified group of rows. An area is a rectangular collection of cells.</para>
        </summary>
        <param name="firstRow">
          <para>The 0-based index of the first row.</para>
        </param>
        <param name="numRows">
          <para>The number of rows to include.</para>
        </param>
        <returns>
          <para>An <c>Area</c> object representing the set of cells in the specified rows.</para>
        </returns>
        <example>
          <para>
            <code>
Area a = ws.CreateAreaOfRows(0, 25);</code>
            <br/>
            <code>
Dim a As Area = ws.CreateAreaOfRows(0, 25)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CreateNamedRange(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <Doc>
        <summary>
          <para>Creates a named range, containing one area. A range is a collection of areas; an area is a rectangular collection of cells.</para>
        </summary>
        <param name="firstRow">
          <para>0-based first row of the range.</para>
        </param>
        <param name="firstColumn">
          <para>0-based first column column of the range.</para>
        </param>
        <param name="numRows">
          <para>Number of rows in the area. Maximum: 65536.</para>
        </param>
        <param name="numColumns">
          <para>Number of columns in the range. Maximum: 256.</para>
        </param>
        <param name="rangeName">
          <para>The name of the new range.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/> object.</para>
        </returns>
        <example>
          <para>
            <code>
Range rng = ws.CreateNamedRange(4, 4, 15, 6, "Range1");</code>
            <br/>
            <code>
Dim rng As Range = ws.CreateNamedRange(4, 4, 15, 6, "Range1")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CreateNamedRange(System.String,System.String)">
            <Doc>
        <summary>
          <para>Creates a named range from a specified formula. A range is a collection of areas; an area is a rectangular collection of cells. This method can be used to create a non-rectangular range containing multiple rectangular areas.</para>
        </summary>
        <param name="rangeFormula">
          <para>Formula representing the range, for example "=Sheet1!A1:G10". The formula must be three-dimensional (specify a sheet), and can include only sheet and cell references, and operators joining those references (range ':', intersection ' ', and union ',').</para>
        </param>
        <param name="rangeName">
          <para>The name of the new range.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/> object.</para>
        </returns>
        <example>
          <para>
            <code>

          Range rng =
               ws.CreateRange("=Sheet1!$B$12:$H$21 Sheet1!$F$18:$K$29", "Range1");
        </code>
            <br/>
            <code>

          Dim rng As Range = _
               ws.CreateRange("=Sheet1!$B$12:$H$21 Sheet1!$F$18:$K$29", "Range1")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CreateRange(System.String)">
            <Doc>
        <summary>
          <para>Creates a range from a specified formula. A range is a collection of areas; an area is a rectangular collection of cells. This method can be used to create a non-rectangular range containing multiple rectangular areas.</para>
        </summary>
        <param name="rangeFormula">
          <para>Formula representing the range, for example "=Sheet1!A1:G10". The formula must be three-dimensional (specify a sheet), and can include only sheet and cell references, and operators joining those references (range ':', intersection ' ', and union ','). Functions that return ranges cannot be used.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/> object.</para>
        </returns>
        <example>
          <para>
            <code>

          Range rng =
               ws.CreateRange("=Sheet1!$B$12:$H$21 Sheet1!$F$18:$K$29");
        </code>
            <br/>
            <code>

          Dim rng As Range = _
               ws.CreateRange("=Sheet1!$B$12:$H$21 Sheet1!$F$18:$K$29")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.DeleteColumn(System.Int32)">
            <Doc>
        <summary>
          <para>Deletes a column and its contents from the worksheet. Columns after the deleted column will be moved to the left.</para>
        </summary>
        <param name="columnNumber">
          <para>The 0-based number of the column to remove.</para>
        </param>
        <example>
          <para>
            <code>
ws.DeleteColumn(9);</code>
            <br/>
            <code>
ws.DeleteColumn(9)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.DeleteColumns(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Deletes a number of columns and its contents from the worksheet. Columns after the deleted columns will be moved to the left.</para>
        </summary>
        <param name="columnNumber">
          <para>The 0-based number of the column to remove.</para>
        </param>
        <param name="columnCount">
          <para>The number of columns to delete.</para>
        </param>
        <example>
          <para>
            <code>
ws.DeleteColumns(3,4);</code>
            <br/>
            <code>
ws.DeleteColumns(3,4)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.DeleteRow(System.Int32)">
            <Doc>
        <summary>
          <para>Deletes a specified row and its contents from the worksheet. Rows below the deleted row will be moved up.</para>
        </summary>
        <param name="rowNumber">
          <para>The 0-based number of the row to remove.</para>
        </param>
        <example>
          <para>
            <code>
ws.DeleteRow(70);</code>
            <br/>
            <code>
ws.DeleteRow(70)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.DeleteRows(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Deletes a specified number of rows and its contents from the worksheet. Rows below the deleted rows will be moved up.</para>
        </summary>
        <param name="rowNumber">
          <para>The 0-based number of the row to remove.</para>
        </param>
        <param name="rowCount">
          <para>The number of the rows to remove.</para>
        </param>
        <example>
          <para>
            <code>
ws.DeleteRows(70, 500);</code>
            <br/>
            <code>
ws.DeleteRows(70, 500)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheet&quot;]/Member[@signature=&quot;Worksheet.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.GetColumnProperties(System.Int32)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ColumnProperties"/> object representing the column specified by index.</para>
        </summary>
        <param name="columnIndex">
          <para>The 0-based index of the column.</para>
        </param>
        <returns>
          <para>A <c>ColumnProperties</c> object representing the specified column.</para>
        </returns>
        <example>
          <para>
            <code>
ColumnProperties colProps = ws.GetColumnProperties(0);</code>
            <br/>
            <code>
Dim colProps As ColumnProperties = ws.GetColumnProperties(0)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheet&quot;]/Member[@signature=&quot;Worksheet.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.GetNamedObject(System.String)">
            <Doc>
        <summary>
          <para>Returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject"/> object that represents the name of a specified array, number, picture, or range. If the named object does not exist, the method returns null.</para>
        </summary>
        <param name="name">
          <para>A string representation of the object's name.</para>
        </param>
        <returns>
          <para>A <c>NamedObject</c> object that represents the name of a specified array, number, picture, or range. If the named object does not exist, the method returns null.</para>
        </returns>
        <example>
          <para>
            <code>
NamedObject obj = ws.GetNamedObject("MyNamedObject");</code>
            <br/>
            <code>
Dim obj As NamedObject = ws.GetNamedObject("MyNamedObject")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.GetNamedRange(System.String)">
            <Doc>
        <summary>
          <para>Returns the named <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/> object that specified by name. If the named range does not exist, the method returns null.</para>
        </summary>
        <param name="name">
          <para>The name of the range.</para>
        </param>
        <returns>
          <para>A named <c>Range</c> object, or null if the range does not exist.</para>
        </returns>
        <example>
          <para>
            <code>
Range named = ws.GetNamedRange("MyNamedRange");</code>
            <br/>
            <code>
Dim named As Range = ws.GetNamedRange("MyNamedRange")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.GetRowProperties(System.Int32)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.RowProperties"/> object representing the row specified by index.</para>
        </summary>
        <param name="rowIndex">
          <para>The 0-based index of the row.</para>
        </param>
        <returns>
          <para>A <c>RowProperties</c> object representing the specified row.</para>
        </returns>
        <example>
          <para>
            <code>
RowProperties rowProps = ws.GetRowProperties(0);</code>
            <br/>
            <code>
Dim rowProps As RowProperties = ws.GetRowProperties(0)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.GroupColumns(System.Int32,System.Int32,System.Boolean)">
            <Doc>
        <summary>
          <para>Groups or outlines a contiguous set of columns.</para>
        </summary>
        <param name="startColumnIndex">
          <para>The 0-based index of the starting column.</para>
        </param>
        <param name="numColumns">
          <para>The number of Columns to group.</para>
        </param>
        <param name="collapsed">
          <para>Whether or not the group is collapsed.</para>
        </param>
        <example>
          <para>
            <code>
ws.GroupColumns(0, 5, true);</code>
            <br/>
            <code>
ws.GroupColumns(0, 5, True)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.GroupRows(System.Int32,System.Int32,System.Boolean)">
            <Doc>
        <summary>
          <para>Groups or outlines a contiguous set of rows.</para>
        </summary>
        <param name="startRowIndex">
          <para>The 0-based index of the starting row.</para>
        </param>
        <param name="numRows">
          <para>The number of rows to group.</para>
        </param>
        <param name="collapsed">
          <para>Whether or not the group is collapsed.</para>
        </param>
        <example>
          <para>
            <code>
ws.GroupRows(0, 15, true);</code>
            <br/>
            <code>
ws.GroupRows(0, 15, True)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.ImportData(System.Object[][],SoftArtisans.OfficeWriter.ExcelWriter.Cell)">
            <Doc>
        <summary>
          <para>Imports data from a two-dimensional array of objects to cells in the worksheet. </para>
        </summary>
        <param name="data">
          <para>A two-dimensional array of values to import to the worksheet.<br/>The first dimension corresponds to column and the second to row (that is, Object[column][row]).<br/>Thus, an array of data  <br/><code>{{"A","X"},{"B","Y"},{"C","Z"}}</code>  would be inserted into the worksheet as:</para>
          <list type="table">
            <item>
              <term>A</term>
              <description>X</description>
            </item>
            <item>
              <term>B</term>
              <description>Y</description>
            </item>
            <item>
              <term>C</term>
              <description>Z</description>
            </item>
          </list>
        </param>
        <param name="startCell">
          <para>The cell at which to start entering the imported values.</para>
        </param>
        <returns>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object representing the set of cells populated with the imported values.</para>
        </returns>
        <remarks>
          <para>The new data will  <u>overwrite</u>  values and formulas in the target worksheet cells, but existing formatting will be preserved.</para>
        </remarks>
        <example>
          <para>
            <code>
Area importedArea = ws.ImportData(dataArray, cel);</code>
            <br/>
            <code>
Dim importedArea As Area = ws.ImportData(dataArray, cel)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.ImportData(System.Object[][],System.String[],SoftArtisans.OfficeWriter.ExcelWriter.Cell,SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties)">
            <Doc>
        <summary>
          <para>Imports data from a two-dimensional array of objects to cells in the worksheet. The new data will  <u>overwrite</u>  values and formulas in the target worksheet cells, but existing formatting will be preserved.</para>
        </summary>
        <param name="data">
          <para>A two-dimensional array of values to import to the worksheet.<br/>By default, the first dimension corresponds to column and the second to row (that is, Object[column][row]).<br/>Thus, an array of data  { {"A","X"},{"B","Y"},{"C","Z"} }  would be inserted into the worksheet as:</para>
          <list type="table">
            <item>
              <term>A</term>
              <description>X</description>
            </item>
            <item>
              <term>B</term>
              <description>Y</description>
            </item>
            <item>
              <term>C</term>
              <description>Z</description>
            </item>
          </list>
          <para>If you enable <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.Transpose"/> , the format will be [row][column], so:<br/>{ {"A","B","C"},{"X","Y","Z"} }  would be inserted into the worksheet as:<br/></para>
          <list type="table">
            <item>
              <term>A</term>
              <description>X</description>
            </item>
            <item>
              <term>B</term>
              <description>Y</description>
            </item>
            <item>
              <term>C</term>
              <description>Z</description>
            </item>
          </list>
        </param>
        <param name="columnNames">
          <para>An array of column names for the imported data. <c>columnNames</c> and the column dimension of <c>data</c> must contain the same number of elements.</para>
        </param>
        <param name="startCell">
          <para>The cell at which to start entering the imported values.</para>
        </param>
        <param name="props">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties"/> object that contains a set of properties that will determine the behavior of the data import.</para>
        </param>
        <returns>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object representing the set of cells populated with the imported values.</para>
        </returns>
        <example>
          <para>
            <code>
Area importedArea = ws.ImportData(dataArray, fieldNames, cel, importProps);</code>
            <br/>
            <code>
Dim importedArea As Area = ws.ImportData(dataArray, fieldNames, cel, importProps)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.ImportData(System.Data.DataTable,SoftArtisans.OfficeWriter.ExcelWriter.Cell)">
            <Doc>
        <summary>
          <para>Imports data from an ADO.NET <see cref="T:System.Data.DataTable"/>  to cells in the worksheet. The new data will <u>overwrite</u> values and formulas in the target worksheet cells, but existing formatting will be preserved.</para>
        </summary>
        <param name="data">
          <para>The <c>DataTable</c> to import.</para>
        </param>
        <param name="startCell">
          <para>The cell at which to start entering the imported values.</para>
        </param>
        <returns>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object representing the set of cells populated with the imported values.</para>
        </returns>
        <example>
          <para>
            <code>
Area importedArea = ws.ImportData(dataDT, cel);</code>
            <br/>
            <code>
Dim importedArea As Area = ws.ImportData(dataDT, cel)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.ImportData(System.Data.DataTable,SoftArtisans.OfficeWriter.ExcelWriter.Cell,SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties)">
            <Doc>
        <summary>
          <para>Imports data from an ADO.NET <see cref="T:System.Data.DataTable"/>  to cells in the worksheet. The new data will <u>overwrite</u> values and formulas in the target worksheet cells, but existing formatting will be preserved.</para>
        </summary>
        <param name="data">
          <para>The <c>DataTable</c> to import.</para>
        </param>
        <param name="startCell">
          <para>The cell at which to start entering the imported values.</para>
        </param>
        <param name="props">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties"/> object that contains a set of properties that will determine the behavior of the data import.</para>
        </param>
        <returns>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object representing the set of cells populated with the imported values.</para>
        </returns>
        <example>
          <para>
            <code>
Area importedArea = ws.ImportData(dataDT, cel, importProps);</code>
            <br/>
            <code>
Dim importedArea As Area = ws.ImportData(dataDT, cel, importProps)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.ImportData(System.Data.DataView,SoftArtisans.OfficeWriter.ExcelWriter.Cell)">
            <Doc>
        <summary>
          <para>Imports data from an ADO.NET <see cref="T:System.Data.DataView"/> to cells in the worksheet. The new data will <u>overwrite</u> values and formulas in the target worksheet cells, but existing formatting will be preserved.</para>
        </summary>
        <param name="data">
          <para>The <c>DataView</c> to import.</para>
        </param>
        <param name="startCell">
          <para>The cell at which to start entering the imported values.</para>
        </param>
        <returns>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object representing the set of cells populated with the imported values.</para>
        </returns>
        <example>
          <para>
            <code>
Area importedArea = ws.ImportData(dataDV, cel);</code>
            <br/>
            <code>
Dim importedArea As Area = ws.ImportData(dataDV, cel)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.ImportData(System.Data.DataView,SoftArtisans.OfficeWriter.ExcelWriter.Cell,SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties)">
            <Doc>
        <summary>
          <para>Imports data from an ADO.NET <see cref="T:System.Data.DataView"/> to cells in the worksheet. The new data will <u>overwrite</u> values and formulas in the target worksheet cells, but existing formatting will be preserved.</para>
        </summary>
        <param name="data">
          <para>The <c>DataView</c> to import.</para>
        </param>
        <param name="startCell">
          <para>The cell at which to start entering the imported values.</para>
        </param>
        <param name="props">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties"/> object that contains a set of properties that will determine the behavior of the data import.</para>
        </param>
        <returns>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object representing the set of cells populated with the imported values.</para>
        </returns>
        <example>
          <para>
            <code>
Area importedArea = ws.ImportData(dataDV, cel, importProps);</code>
            <br/>
            <code>
Dim importedArea As Area = ws.ImportData(dataDV, cel, importProps)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.ImportData(System.Object[0:,0:],SoftArtisans.OfficeWriter.ExcelWriter.Cell)">
            <Doc>
        <summary>
          <para>Imports data from a rectangular array of objects to cells in the worksheet. The new data will <u>overwrite</u> values and formulas in the target worksheet cells, but existing formatting will be preserved.</para>
        </summary>
        <param name="data">
          <para>A rectangular array of values to import to the worksheet. The first dimension corresponds to row and the second to column.<br/>Thus, an array of data  { {"A","X"},{"B","Y"},{"C","Z"} }  would be inserted into the worksheet as:</para>
          <list type="table">
            <item>
              <term>A</term>
              <description>X</description>
            </item>
            <item>
              <term>B</term>
              <description>Y</description>
            </item>
            <item>
              <term>C</term>
              <description>Z</description>
            </item>
          </list>
        </param>
        <param name="startCell">
          <para>The cell at which to start entering the imported values.</para>
        </param>
        <returns>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object representing the set of cells populated with the imported values.</para>
        </returns>
        <example>
          <para>
            <code>
Area importedArea = ws.ImportData(dataArray, cel);</code>
            <br/>
            <code>
Dim importedArea As Area = ws.ImportData(dataArray, cel)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.ImportData(System.Object[0:,0:],System.String[],SoftArtisans.OfficeWriter.ExcelWriter.Cell,SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties)">
            <Doc>
        <summary>
          <para>Imports data from a rectangular array of objects to cells in the worksheet. The new data will <u>overwrite</u> values and formulas in the target worksheet cells, but existing formatting will be preserved.</para>
        </summary>
        <param name="data">
          <para>A rectangular array of values to import to the worksheet. The first dimension corresponds to row and the second to column.<br/>Thus, an array of data  { {"A","X"},{"B","Y"},{"C","Z"} }  would be inserted into the worksheet as:</para>
          <list type="table">
            <item>
              <term>A</term>
              <description>X</description>
            </item>
            <item>
              <term>B</term>
              <description>Y</description>
            </item>
            <item>
              <term>C</term>
              <description>Z</description>
            </item>
          </list>
          <para>If you enable <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.Transpose"/> , the format will be [row][column], so:<br/>{ {"A","B","C"},{"X","Y","Z"} }  would be inserted into the worksheet as:<br/></para>
          <list type="table">
            <item>
              <term>A</term>
              <description>X</description>
            </item>
            <item>
              <term>B</term>
              <description>Y</description>
            </item>
            <item>
              <term>C</term>
              <description>Z</description>
            </item>
          </list>
        </param>
        <param name="columnNames">
          <para>An array of column names for the imported data. <c>columnNames</c> and the column dimension of <c>data</c> must contain the same number of elements.</para>
        </param>
        <param name="startCell">
          <para>The cell at which to start entering the imported values.</para>
        </param>
        <param name="props">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties"/> object that contains a set of properties that will determine the behavior of the data import.</para>
        </param>
        <returns>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object representing the set of cells populated with the imported values.</para>
        </returns>
        <example>
          <para>
            <code>
Area importedArea = ws.ImportData(dataArray, fieldNames, cel, importProps);</code>
            <br/>
            <code>
Dim importedArea As Area = ws.ImportData(dataArray, fieldNames, cel, importProps)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.ImportData(System.Data.IDataReader,SoftArtisans.OfficeWriter.ExcelWriter.Cell)">
            <Doc>
        <summary>
          <para>Imports data from an <see cref="T:System.Data.IDataReader"/> to cells in the worksheet. The new data will <u>overwrite</u> values and formulas in the target worksheet cells, but existing formatting will be preserved.</para>
        </summary>
        <param name="data">
          <para>An instance of <see cref="T:System.Data.SqlClient.SqlDataReader"/>, <see cref="T:System.Data.OleDb.OleDbDataReader"/> or <code>
Microsoft.AnalysisServices.AdomdClient.AdomdDataReader</code><br/>.</para>
        </param>
        <param name="startCell">
          <para>The cell at which to start entering the imported values.</para>
        </param>
        <returns>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object representing the set of cells populated with the imported values.</para>
        </returns>
        <example>
          <para>
            <code>
Area importedArea = ws.ImportData(dataDR, cel);</code>
            <br/>
            <code>
Dim importedArea As Area = ws.ImportData(dataDR, cel)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.ImportData(System.Data.IDataReader,SoftArtisans.OfficeWriter.ExcelWriter.Cell,SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties)">
            <Doc>
        <summary>
          <para>Imports data from an <see cref="T:System.Data.IDataReader"/> to cells in the worksheet. The new data will <u>overwrite</u> values and formulas in the target worksheet cells, but existing formatting will be preserved.</para>
        </summary>
        <param name="data">
          <para>An instance of <see cref="T:System.Data.SqlClient.SqlDataReader"/>, <see cref="T:System.Data.OleDb.OleDbDataReader"/> or <code>
Microsoft.AnalysisServices.AdomdClient.AdomdDataReader</code><br/>.</para>
        </param>
        <param name="startCell">
          <para>The cell at which to start entering the imported values.</para>
        </param>
        <param name="props">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties"/> object that contains a set of properties that will determine the behavior of the data import.</para>
        </param>
        <returns>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object representing the set of cells populated with the imported values.</para>
        </returns>
        <example>
          <para>
            <code>
Area importedArea = ws.ImportData(dataDR, cel, importProps);</code>
            <br/>
            <code>
Dim importedArea As Area = ws.ImportData(dataDR, cel, importProps)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.InsertColumn(System.Int32)">
            <Doc>
        <summary>
          <para>Inserts a column in the worksheet to the left of the specified column.</para>
        </summary>
        <param name="columnNumber">
          <para>The 0-based number of the column to insert.</para>
        </param>
        <example>
          <para>
            <code>
ws.InsertColumn(3);</code>
            <br/>
            <code>
ws.InsertColumn(3)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.InsertColumn(System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Style.ColumnInsertBehavior)">
            <Doc>
        <summary>
          <para>Inserts a column in the worksheet to the left of the specified column, copying the style based on the <c>copyBehavior</c> parameter.</para>
        </summary>
        <param name="columnNumber">
          <para>The 0-based number of the column to insert.</para>
        </param>
        <param name="columnCellsCopyBehavior">
          <para>The Style.ColumnInsertBehavior that defines the source style for each cell in the new column. Each cell in the new column will be given the style of its neighbor identified in this parameter.</para>
        </param>
        <example>
          <para>
            <code>
ws.InsertColumn(3, Style.InsertBehavior.CopyFromLeft);</code>
            <br/>
            <code>
ws.InsertColumn(3, Style.InsertBehavior.CopyFromLeft)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.InsertColumn(System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Style.ColumnInsertBehavior,SoftArtisans.OfficeWriter.ExcelWriter.Style.ColumnInsertBehavior)">
            <Doc>
        <summary>
          <para>Inserts a column in the worksheet to the left of the specified column, copying the style based on the <c>copyBehavior</c> parameter.</para>
        </summary>
        <param name="columnNumber">
          <para>The 0-based number of the column to insert.</para>
        </param>
        <param name="columnCellsCopyBehavior">
          <para>The Style.ColumnInsertBehavior that defines the source style for each cell in the new column. Each cell in the new column will be given the style of its neighbor identified in this parameter.</para>
        </param>
        <param name="columnCopyBehavior">
          <para>The Style.ColumnInsertBehavior that defines how the default column style will be set for the new column. This style is cells before the 'columnCellsCopyBehavior', so the 'columnCellsCopyBehavior' can be used to override the column-wide style.</para>
        </param>
        <example>
          <para>
            <code>
ws.InsertColumn(3, Style.InsertBehavior.CopyFromLeft);</code>
            <br/>
            <code>
ws.InsertColumn(3, Style.InsertBehavior.CopyFromLeft)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.InsertColumns(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Inserts a block of columns in the worksheet to the left of the specified column.</para>
        </summary>
        <param name="columnNumber">
          <para>The 0-based number of the column to insert.</para>
        </param>
        <param name="columnCount">
          <para>The number of columns to insert.</para>
        </param>
        <example>
          <para>
            <code>
ws.InsertColumns(3, 10);</code>
            <br/>
            <code>
ws.InsertColumns(3, 10)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.InsertColumns(System.Int32,System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Style.ColumnInsertBehavior)">
            <Doc>
        <summary>
          <para>Inserts a block of columns in the worksheet to the left of the specified column, copying the style based on the <c>copyBehavior</c> parameter.</para>
        </summary>
        <param name="columnNumber">
          <para>The 0-based number of the column to insert.</para>
        </param>
        <param name="columnCount">
          <para>The number of columns to insert.</para>
        </param>
        <param name="columnCellsCopyBehavior">
          <para>The Style.ColumnInsertBehavior that defines the source style for each cell in the new column. Each cell in the new column will be given the style of its neighbor identified in this parameter.</para>
        </param>
        <example>
          <para>
            <code>
ws.InsertColumn(3, 10, Style.InsertBehavior.CopyFromLeft);</code>
            <br/>
            <code>
ws.InsertColumn(3, 10, Style.InsertBehavior.CopyFromLeft)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.InsertColumns(System.Int32,System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Style.ColumnInsertBehavior,SoftArtisans.OfficeWriter.ExcelWriter.Style.ColumnInsertBehavior)">
            <Doc>
        <summary>
          <para>Inserts a block of columns in the worksheet to the left of the specified column, copying the style based on the <c>copyBehavior</c> parameter.</para>
        </summary>
        <param name="columnNumber">
          <para>The 0-based number of the column to insert.</para>
        </param>
        <param name="columnCount">
          <para>The number of columns to insert.</para>
        </param>
        <param name="columnCellsCopyBehavior">
          <para>The Style.ColumnInsertBehavior that defines the source style for each cell in the new column. Each cell in the new column will be given the style of its neighbor identified in this parameter.</para>
        </param>
        <param name="columnCopyBehavior">
          <para>The Style.ColumnInsertBehavior that defines how the default column style will be set for the new column. This style is cells before the 'columnCellsCopyBehavior', so the 'columnCellsCopyBehavior' can be used to override the column-wide style.</para>
        </param>
        <example>
          <para>
            <code>
ws.InsertColumn(3, 10, Style.InsertBehavior.CopyFromLeft);</code>
            <br/>
            <code>
ws.InsertColumn(3, 10, Style.InsertBehavior.CopyFromLeft)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.InsertHorizontalPageBreak(SoftArtisans.OfficeWriter.ExcelWriter.Cell)">
            <Doc>
        <summary>
          <para>Inserts a horizontal page break in the worksheet after the specified cell.</para>
        </summary>
        <param name="afterCell">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/> object representing the cell at which to insert a horizontal page break.</para>
        </param>
        <example>
          <para>
            <code>
ws.InsertHorizontalPageBreak(ws.Cells["A25"]);</code>
            <br/>
            <code>
ws.InsertHorizontalPageBreak(ws.Cells("A25"))</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.InsertRow(System.Int32)">
            <Doc>
        <summary>
          <para>Inserts a row in the worksheet above the specified row.</para>
        </summary>
        <param name="rowNumber">
          <para>The 0-based number of the row to insert.</para>
        </param>
        <example>
          <para>
            <code>
ws.InsertRow(3);</code>
            <br/>
            <code>
ws.InsertRow(3)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.InsertRow(System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Style.RowInsertBehavior)">
            <Doc>
        <summary>
          <para>Inserts a row in the worksheet above the specified row.</para>
        </summary>
        <param name="rowNumber">
          <para>The 0-based number of the row to insert.</para>
        </param>
        <param name="rowCellsCopyBehavior">
          <para>The Style.RowInsertBehavior that defines the source style for each cell in the new row. Each cell in the new row will be given the style of its neighbor identified in this parameter.</para>
        </param>
        <example>
          <para>
            <code>
  ws.InsertRow(3, Style.InsertBehavior.CopyAreaFromBelow);</code>
            <br/>
            <code>
ws.InsertRow(3, Style.InsertBehavior.CopyAreaFromBelow)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.InsertRow(System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Style.RowInsertBehavior,SoftArtisans.OfficeWriter.ExcelWriter.Style.RowInsertBehavior)">
            <Doc>
        <summary>
          <para>Inserts a row in the worksheet above the specified row.</para>
        </summary>
        <param name="rowNumber">
          <para>The 0-based number of the row to insert.</para>
        </param>
        <param name="rowCellsCopyBehavior">
          <para>The Style.RowInsertBehavior that defines the source style for each cell in the new row. Each cell in the new row will be given the style of its neighbor identified in this parameter.</para>
        </param>
        <param name="rowCopyBehavior">
          <para>The Style.RowInsertBehavior that defines how the default row style will be set for the new row. This style is cells before the 'rowCellsCopyBehavior', so the 'rowCellsCopyBehavior' can be used to override the row-wide style.</para>
        </param>
        <example>
          <para>
            <code>

          ws.InsertRow(3,
               Style.InsertBehavior.CopyAreaFromBelow,
               Style.RowInsertBehavior.Ignore);
        </code>
            <br/>
            <code>

          ws.InsertRow(3, _
               Style.InsertBehavior.CopyAreaFromBelow, _
               Style.RowInsertBehavior.Ignore)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.InsertRows(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Inserts a number of rows in the worksheet above the specified row.</para>
        </summary>
        <param name="rowNumber">
          <para>The 0-based number of the row to insert.</para>
        </param>
        <param name="rowCount">
          <para>The number of rows to insert.</para>
        </param>
        <example>
          <para>
            <code>
ws.InsertRows(3, 100);</code>
            <br/>
            <code>
ws.InsertRows(3, 100)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.InsertRows(System.Int32,System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Style.RowInsertBehavior)">
            <Doc>
        <summary>
          <para>Inserts a number of rows in the worksheet above the specified row.</para>
        </summary>
        <param name="rowNumber">
          <para>The 0-based number of the row to insert.</para>
        </param>
        <param name="rowCount">
          <para>The number of rows to insert.</para>
        </param>
        <param name="rowCellsCopyBehavior">
          <para>The Style.RowInsertBehavior that defines the source style for each cell in the new row. Each cell in the new row will be given the style of its neighbor identified in this parameter.</para>
        </param>
        <example>
          <para>
            <code>
ws.InsertRows(3, 100, Style.InsertBehavior.CopyAreaFromBelow);</code>
            <br/>
            <code>
ws.InsertRows(3, 100, Style.InsertBehavior.CopyAreaFromBelow)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.InsertRows(System.Int32,System.Int32,SoftArtisans.OfficeWriter.ExcelWriter.Style.RowInsertBehavior,SoftArtisans.OfficeWriter.ExcelWriter.Style.RowInsertBehavior)">
            <Doc>
        <summary>
          <para>Inserts a number of rows in the worksheet above the specified row.</para>
        </summary>
        <param name="rowNumber">
          <para>The 0-based number of the row to insert.</para>
        </param>
        <param name="rowCount">
          <para>The number of rows to insert.</para>
        </param>
        <param name="rowCellsCopyBehavior">
          <para>The Style.RowInsertBehavior that defines the source style for each cell in the new row. Each cell in the new row will be given the style of its neighbor identified in this parameter.</para>
        </param>
        <param name="rowCopyBehavior">
          <para>The Style.RowInsertBehavior that defines how the default row style will be set for the new row. This style is cells before the 'rowCellsCopyBehavior', so the 'rowCellsCopyBehavior' can be used to override the row-wide style.</para>
        </param>
        <example>
          <para>
            <code>

          ws.InsertRows(3,
               100,
               Style.InsertBehavior.CopyAreaFromBelow,
               Style.RowInsertBehavior.Ignore);
        </code>
            <br/>
            <code>

          ws.InsertRows(3, _
               100, _
               Style.InsertBehavior.CopyAreaFromBelow, _
               Style.RowInsertBehavior.Ignore)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.InsertVerticalPageBreak(SoftArtisans.OfficeWriter.ExcelWriter.Cell)">
            <Doc>
        <summary>
          <para>Inserts a vertical page break in the worksheet to right of the specified cell.</para>
        </summary>
        <param name="rightOfCell">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/> object representing the cell at which to insert a vertical page break.</para>
        </param>
        <example>
          <para>
            <code>
ws.InsertVerticalPageBreak(ws.Cells["G1"]);</code>
            <br/>
            <code>
ws.InsertVerticalPageBreak(ws.Cells("G1"))</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Protect(System.String)">
            <Doc>
        <summary>
          <para>Write-protects the worksheet. A user will not be able to modify the worksheet in Excel without entering the specified password. This method does not encrypt the worksheet.</para>
        </summary>
        <param name="password">
          <para>The password to use to protect the worksheet. If the password is "" or null, the worksheet will be protected without a password.</para>
        </param>
        <remarks>
          <para>To further protect your spreadsheet, you can protect the Workbook's structure using the <see cref="!:Workbook.Protect(String)"/> method or password encrypt the file using the <see cref="!:Workbook.EncryptPassword"/> property.</para>
        </remarks>
        <example>
          <para>
            <code>
ws.Protect("MyPassword");</code>
            <br/>
            <code>
ws.Protect("MyPassword")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Select">
            <Doc>
        <summary>
          <para>Selects the current worksheet and deselects all others. To select multiple worksheets, use <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets.Select(System.Object[])"/>.</para>
        </summary>
        <example>
          <para>
            <code>
ws.Select();</code>
            <br/>
            <code>
ws.Select()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.UngroupColumns(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Ungroups a contiguous set of columns.</para>
        </summary>
        <param name="startColumnIndex">
          <para>The 0-based index of the starting column.</para>
        </param>
        <param name="numColumns">
          <para>The number of Columns to ungroup.</para>
        </param>
        <example>
          <para>
            <code>
ws.UngroupColumns(0, 5);</code>
            <br/>
            <code>
ws.UngroupColumns(0, 5)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.UngroupRows(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Ungroups a contiguous set of rows.</para>
        </summary>
        <param name="startRowIndex">
          <para>The 0-based index of the starting row.</para>
        </param>
        <param name="numRows">
          <para>The number of rows to ungroup.</para>
        </param>
        <example>
          <para>
            <code>
ws.UngroupRows(0, 15);</code>
            <br/>
            <code>
ws.UngroupRows(0, 15)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Unprotect">
            <Doc>
        <summary>
          <para>Removes the write-protection from the worksheet.</para>
        </summary>
        <example>
          <para>
            <code>
ws.Unprotect();</code>
            <br/>
            <code>
ws.Unprotect()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Cells">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Cells"/> collection that contains all cells in the worksheet.</para>
        </summary>
        <example>
          <para>
            <code>
Cells cls = ws.Cells;</code>
            <br/>
            <code>
Dim cls As Cells = ws.Cells</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Charts">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Charts"/> collection containing all the charts contained as objects within this worksheet. Use this collection to add, access, and remove charts from the worksheet.</para>
        </summary>
        <example>
          <para>
            <code>
Charts allCharts = ws.Charts;</code>
            <br/>
            <code>
Dim allCharts As Charts = ws.Charts</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Comments">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Comments"/> collection that contains all comments in the worksheet.</para>
        </summary>
        <example>
          <para>
            <code>
Comments cmnts = ws.Comments;</code>
            <br/>
            <code>
Dim cmnts As Comments = ws.Comments</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.FirstShownColumn">
            <Doc>
        <summary>
          <para>Sets or returns the 0-based index of the first column that is shown in the worksheet.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get FirstShownColumn
          int firstCol = ws.FirstShownColumn;

          //--- Set FirstShownColumn
          ws.FirstShownColumn = 5;
        </code>
            <br/>
            <code>

          '--- Get FirstShownColumn
          Dim firstCol As Integer = ws.FirstShownColumn

          '--- Set FirstShownColumn
          ws.FirstShownColumn = 5
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.FirstShownRow">
            <Doc>
        <summary>
          <para>Sets or returns the 0-based index of the first row that is shown in the worksheet.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get FirstShownRow
          int firstRow = ws.FirstShownRow;

          //--- Set FirstShownRow
          ws.FirstShownRow = 5;
        </code>
            <br/>
            <code>

          '--- Get FirstShownRow
          Dim firstRow As Integer = ws.FirstShownRow

          '--- Set FirstShownRow
          ws.FirstShownRow = 5
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.FreezePanes">
            <Doc>
        <summary>
          <para>Freezes panes in a worksheet or returns the cell at which the panes are split. Set the property to a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/> object. The worksheet will be split above the cell, to the left of it, or both.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get FreezePanes
          Cell freezeCell = ws.FreezePanes;

          //--- Set FreezePanes
          ws.FreezePanes = ws.Cells["C5"];
        </code>
            <br/>
            <code>

          '--- Get FreezePanes
          Dim freezeCell As Cell = ws.FreezePanes

          '--- Set FreezePanes
          ws.FreezePanes = ws.Cells("C5");
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.GridlinesColor">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Color"/> object representing the color of the gridlines in the worksheet.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get GridlinesColor
          Color gridColor = ws.GridlinesColor;

          //--- Set GridlinesColor
          ws.GridlinesColor = wb.Palette.GetClosestColor(System.Drawing.Color.Blue);
        </code>
            <br/>
            <code>

          '--- Get GridlinesColor
          Dim gridColor As Color = ws.GridlinesColor

          '--- Set GridlinesColor
          ws.GridlinesColor = wb.Palette.GetClosestColor(System.Drawing.Color.Blue)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Hyperlinks">
            <Doc>
        <summary>
          <para>Returns the collection of hyperlinks in the worksheet.</para>
        </summary>
        <example>
          <para>
            <code>
Hyperlinks links = ws.Hyperlinks;</code>
            <br/>
            <code>
Dim links As Hyperlinks = ws.Hyperlinks</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.IsProtected">
            <Doc>
        <summary>
          <para>Returns whether or not the worksheet is write-protected.</para>
        </summary>
        <example>
          <para>
            <code>
bool writeProtected = ws.IsProtected;</code>
            <br/>
            <code>
Dim writeProtected As Boolean = ws.IsProtected</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.IsSelected">
            <Doc>
        <summary>
          <para>Returns whether this worksheet is selected. Multiple worksheets can be selected.</para>
        </summary>
        <example>
          <para>
            <code>
bool selected = ws.IsSelected;</code>
            <br/>
            <code>
Dim selected As Boolean = ws.IsSelected</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Item(System.String)">
            <Doc>
        <summary>
          <para>Returns the cell at the specified Excel-style reference. This property is an indexer for the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet"/> class.</para>
        </summary>
        <param name="rowNumber">
          <para>The Excel-style reference of the cell to retrieve.</para>
        </param>
        <param name="columnNumber">
          <para>The Excel-style reference of the cell to retrieve.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/> object representing the cell at the specified Excel-style reference.</para>
        </returns>
        <example>
          <para>
            <code>
          //--- Get Cell by Excel-style reference
          Cell cellA1 = ws["A1"];
        </code>
            <br/>
            <code>
          '--- Get Cell by Excel-style reference
          Dim cellA1 As Cell = ws("A1")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Item(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Returns the cell at a specified row and column position. This property is an indexer for the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet"/> class.</para>
        </summary>
        <param name="rowNumber">
          <para>The 0-based row number of the cell to retrieve.</para>
        </param>
        <param name="columnNumber">
          <para>The 0-based column number of the cell to retrieve.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/> object representing the cell at the specified position.</para>
        </returns>
        <example>
          <para>
            <code>

          //--- Get Cell by index
          Cell cellA1 = ws[0,0];
        </code>
            <br/>
            <code>

          '--- Get Cell by index
          Dim cellA1 As Cell = ws(0,0)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Name">
            <Doc>
        <summary>
          <para>Sets or returns the name of the worksheet.  Sheet names are limited to 255 characters and must not contain the following characters: \ / ? [ ] : '</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get SheetName
          string sheetName = ws.Name;

          //--- Set SheetName
          ws.Name = "SheetOne";
        </code>
            <br/>
            <code>

          '--- Get SheetName
          Dim sheetName As String = ws.Name

          '--- Set SheetName
          ws.Name = "SheetOne"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.PageSetup">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.PageSetup"/> object representing page layout properties of a printed worksheet.</para>
        </summary>
        <example>
          <para>
            <code>
PageSetup ps = ws.PageSetup;</code>
            <br/>
            <code>
Dim ps As PageSetup = ws.PageSetup</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Pictures">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Pictures"/> collection containing all pictures in the worksheet. Use this collection to add, access, and remove pictures from the worksheet.</para>
        </summary>
        <example>
          <para>
            <code>
Pictures allPictures = ws.Pictures;</code>
            <br/>
            <code>
Dim allPictures = ws.Pictures</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.PopulatedCells">
            <Doc>
        <summary>
          <para>Returns a rectanglular area of cells from the first (top, left) populated cell to the last (bottom, right) populated cell in the worksheet. The area returned will include cells that contain no data but have been formatted.</para>
        </summary>
        <example>
          <para>
            <code>
Area a = ws.PopulatedCells;</code>
            <br/>
            <code>
Dim a As Area = ws.PopulatedCells</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Position">
            <Doc>
        <summary>
          <para>Returns the 0-based index of the worksheet in the collection of all sheets in the workbook.</para>
        </summary>
        <example>
          <para>
            <code>
int sheetPosition = ws.Position;</code>
            <br/>
            <code>
Dim sheetPosition As Integer = ws.Position</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.ProtectPasswordHash">
            <Doc>
        <summary>
          <para>Sets or returns the password hash that is used to write-protect (not encrypt) the worksheet.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get ProtectPasswordHash
          int passwordHash = ws.ProtectPasswordHash;

          //--- Set ProtectPasswordHash
          ws.ProtectPasswordHash = 12345;
        </code>
            <br/>
            <code>

          '--- Get ProtectPasswordHash
          Dim passwordHash = ws.ProtectPasswordHash

          '--- Set ProtectPasswordHash
          ws.ProtectPasswordHash = 12345
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.ShapeGroups">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Groups"/> collection containing all shape groups within the worksheet.</para>
        </summary>
        <example>
          <para>
            <code>
Groups allGroups = ws.Groups;</code>
            <br/>
            <code>
Dim allGroups As Groups = ws.Groups</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Shapes">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Shapes"/> collection containing all shapes within the worksheet.</para>
        </summary>
        <example>
          <para>
            <code>
Shapes allShapes = ws.Shapes;</code>
            <br/>
            <code>
Dim allShapes As Shapes = ws.Shapes</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.ShowFormulas">
            <Doc>
        <summary>
          <para>Sets or returns whether formulas or their calculated values will be displayed in the worksheet. Calculated values are displayed by default.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get ShowFormulas
          bool displayFormulas = ws.ShowFormulas;

          //--- Set ShowFormulas
          ws.ShowFormulas = true;
        </code>
            <br/>
            <code>

          '--- Get ShowFormulas
          Dim displayFormulas As Boolean = ws.ShowFormulas

          '--- Set ShowFormulas
          ws.ShowFormulas = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.ShowGridlines">
            <Doc>
        <summary>
          <para>Sets or returns whether gridlines should be shown in the worksheet. Gridlines are shown by default.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get ShowGridlines
          bool showGrid = ws.ShowGridlines;

          //--- Set ShowGridlines
          ws.ShowGridlines = false;
        </code>
            <br/>
            <code>

          '--- Get ShowGridlines
          Dim showGrid As Boolean = ws.ShowGridlines

          '--- Set ShowGridlines
          ws.ShowGridlines = False
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.ShowRowColHeaders">
            <Doc>
        <summary>
          <para>Sets or returns whether column and row headers will be displayed in the worksheet. The headers are displayed by default.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get ShowRowColHeaders
          bool showHeaders = ws.ShowRowColHeaders;

          //--- Set ShowRowColHeaders
          ws.ShowRowColHeaders = false;
        </code>
            <br/>
            <code>

          '--- Get ShowRowColHeaders
          Dim showHeaders As Boolean = ws.ShowRowColHeaders

          '--- Set ShowRowColHeaders
          ws.ShowRowColHeaders = False
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.ShowZeroValues">
            <Doc>
        <summary>
          <para>Sets or returns whether zero values in cells will be displayed in the worksheet. Zero values are displayed by default.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get ShowZeroValues
          bool showZeroes = ws.ShowZeroValues;

          //--- Set ShowZeroValues
          ws.ShowZeroValues = true;
        </code>
            <br/>
            <code>

          '--- Get ShowZeroValues
          Dim showZeros As Boolean = ws.ShowZeroValues

          '--- Set ShowZeroValues
          ws.ShowZeroValues = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.StandardHeight">
            <Doc>
        <summary>
          <para>Sets or returns the height of the "Standard Row" in points (1/72 of an inch). This must be a value that when converted to character widths is between 0 - 409.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get StandardHeight
          ws.StandardHeight = 35;

          //--- Set StandardHeight
          double rowHeight = ws.StandardHeight;
        </code>
            <br/>
            <code>

          '--- Get StandardHeight
          ws.StandardHeight = 35

          '--- Set StandardHeight
          Dim rowHeight As Double = ws.StandardHeight
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.StandardWidth">
            <Doc>
        <summary>
          <para>Sets or returns the width of the "Standard Column", in points (1/72 of an inch). This must be a value that when converted to character widths is between 0 - 255.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get StandardWidth
          ws.StandardWidth = 100;

          //--- Set StandardWidth
          double colWidth = ws.StandardWidth;
        </code>
            <br/>
            <code>

          '--- Get StandardWidth
          ws.StandardWidth = 100

          '--- Set StandardWidth
          Dim colWidth As Double = ws.StandardWidth
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.StandardWidthInChars">
            <Doc>
        <summary>
          <para>Sets or returns the width of the "Standard Column" as a number of '0' characters in the font of the 'Normal' style. This must be a value between 0 - 255.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get StandardWidthInChars
          ws.StandardWidthInChars = 20;

          //--- Set StandardWidthInChars
          double colWidth = ws.StandardWidthInChars;
        </code>
            <br/>
            <code>

          '--- Get StandardWidthInChars
          ws.StandardWidthInChars = 20

          '--- Set StandardWidthInChars
          Dim colWidth As Double = ws.StandardWidthInChars
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SummaryColumns">
            <Doc>
        <summary>
          <para>When grouping columns, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SummaryColumns"/> determines where the summary columns for the groups are located. By default the summary rows are located to the right of the groupings.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get SummaryColumns
          Worksheet.SummaryColumnsLocation location = ws.SummaryColumns;

          //--- Set SummaryColumns
          ws.SummaryColumns = Worksheet.SummaryColumnsLocation.Left;
        </code>
            <br/>
            <code>

          '--- Get SummaryColumns
          Dim location As Worksheet.SummaryColumnsLocation = ws.SummaryColumns

          '--- Set SummaryColumns
          ws.SummaryColumns = Worksheet.SummaryColumnsLocation.Left
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SummaryRows">
            <Doc>
        <summary>
          <para>When grouping rows, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SummaryRows"/> determines where the summary rows for the groups are located. By default the summary rows are located below the groupings.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get SummaryRows
          Worksheet.SummaryRowsLocation location = ws.SummaryRows;

          //--- Set SummaryRows
          ws.SummaryRows = Worksheet.SummaryLocation.Above;
        </code>
            <br/>
            <code>

          '--- Get SummaryRows
          Dim location As Worksheet.SummaryRowsLocation = ws.SummaryRows

          '--- Set SummaryRows
          ws.SummaryRows = Worksheet.SummaryLocation.Above
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.TabColor">
            <Doc>
        <summary>
          <para>Sets or returns the color of the worksheet's sheet name tab.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Set TabColor
          ws.TabColor = wb.Palette.GetClosestColor(System.Drawing.Color.Red);

          //--- Get TabColor
          Color tabClr = ws.TabColor;
        </code>
            <br/>
            <code>

          '--- Set TabColor
          ws.TabColor = wb.Palette.GetClosestColor(System.Drawing.Color.Red)

          '--- Get TabColor
          Dim tabClr As Color = ws.TabColor
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.ViewState">
            <Doc>
        <summary>
          <para>Sets or returns the worksheet's viewing mode, which may be either normal or page break mode.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get ViewState
          Worksheet.SheetViewState state = ws.ViewState;

          //--- Set ViewState
          ws.ViewState = Worksheet.SheetViewState.PageBreak;
        </code>
            <br/>
            <code>

          '--- Get ViewState
          Dim state As Worksheet.SheetViewState = ws.ViewState

          '--- Set ViewState
          ws.ViewState = Worksheet.SheetViewState.PageBreak
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Visibility">
            <Doc>
        <summary>
          <para>Sets or returns the visibility setting of the worksheet.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Visibility
          Worksheet.Visibility vis = ws.Visibility;

          //--- Set Visibility
          ws.Visibility = Worksheet.SheetVisibility.Hidden;
        </code>
            <br/>
            <code>

          '--- Get Visibility
          Dim vis As Worksheet.Visibility = ws.Visibility

          '--- Set Visibility
          ws.Visibility = Worksheet.SheetVisibility.Hidden
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Workbook">
            <Doc>
        <summary>
          <para>Returns the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Workbook"/> object in which this worksheet resides.</para>
        </summary>
        <example>
          <para>
            <code>
Workbook wkbk = sheet.Worksheet;</code>
            <br/>
            <code>
Dim wkbk as Workbook = sheet.Workbook</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.ZoomPercentage">
            <Doc>
        <summary>
          <para>Sets or returns the percentage of standard size by which the worksheet will be magnified or reduced. Set this property to a value between 10 and 400.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Zoom
          int zoom = ws.ZoomPercentage;

          //--- Set Zoom
          ws.ZoomPercentage = 50;
        </code>
            <br/>
            <code>

          '--- Get Zoom
          Dim zoom As Integer = ws.ZoomPercentage

          '--- Set Zoom
          ws.ZoomPercentage = 50
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.NamedRanges">
            <Doc>
        <summary>
          <para>Returns the named ranges of the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet"/> as an array of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject"/> objects as an <see cref="T:System.Collections.IEnumerable"/> collection.  Though the named ranges are not returned in any particular order, they iterable.</para>
        </summary>
        <example>
          <para>
            <code>

          NamedObject[] ranges = ws.NamedRanges;
        </code>
            <br/>
            <code>

          Dim ranges as NamedObject() = ws.NamedRanges
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Constants">
            <Doc>
        <summary>
          <para>Defines a set of constants related to worksheets.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Constants.MAX_COLUMNS">
            <Doc>
          <summary>A constant holding the maximum index of a column on a worksheet, 255.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Constants.MAX_ROWS">
            <Doc>
          <summary>A constant holding the maximum index of a row on a worksheet, 65535.</summary>
        </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SheetViewState">
            <Doc>
        <summary>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SheetViewState"/> value specifies the view state of a worksheet in Excel.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SheetViewState.Normal">
            <Doc>
          <summary>Normal</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SheetViewState.PageBreak">
            <Doc>
          <summary>Page break</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SheetViewState.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheet&quot;]/Member[@signature=&quot;Worksheet.SheetViewState&quot;]/Member[@signature=&quot;Worksheet.SheetViewState.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SheetViewState.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheet&quot;]/Member[@signature=&quot;Worksheet.SheetViewState&quot;]/Member[@signature=&quot;Worksheet.SheetViewState.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SheetViewState.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheet&quot;]/Member[@signature=&quot;Worksheet.SheetViewState&quot;]/Member[@signature=&quot;Worksheet.SheetViewState.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SheetViewState.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheet&quot;]/Member[@signature=&quot;Worksheet.SheetViewState&quot;]/Member[@signature=&quot;Worksheet.SheetViewState.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SheetViewState.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheet&quot;]/Member[@signature=&quot;Worksheet.SheetViewState&quot;]/Member[@signature=&quot;Worksheet.SheetViewState.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SheetVisibility">
            <Doc>
        <summary>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SheetVisibility"/> value specifies the visibility level of a worksheet.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SheetVisibility.Hidden">
            <Doc>
          <summary>The worksheet will be hidden when the workbook is opened in Excel.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SheetVisibility.VeryHidden">
            <Doc>
          <summary>The worksheet will be hidden and cannot be made visible from the Excel user interface.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SheetVisibility.Visible">
            <Doc>
          <summary>The worksheet will be shown when the workbook is opened in Excel.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SheetVisibility.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheet&quot;]/Member[@signature=&quot;Worksheet.SheetVisibility&quot;]/Member[@signature=&quot;Worksheet.SheetVisibility.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SheetVisibility.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheet&quot;]/Member[@signature=&quot;Worksheet.SheetVisibility&quot;]/Member[@signature=&quot;Worksheet.SheetVisibility.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SheetVisibility.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheet&quot;]/Member[@signature=&quot;Worksheet.SheetVisibility&quot;]/Member[@signature=&quot;Worksheet.SheetVisibility.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SheetVisibility.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheet&quot;]/Member[@signature=&quot;Worksheet.SheetVisibility&quot;]/Member[@signature=&quot;Worksheet.SheetVisibility.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SheetVisibility.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheet&quot;]/Member[@signature=&quot;Worksheet.SheetVisibility&quot;]/Member[@signature=&quot;Worksheet.SheetVisibility.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SummaryColumnsLocation">
            <Doc>
        <summary>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SummaryColumnsLocation"/>  value specifies the location of the summary column for a set of grouped columns.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SummaryColumnsLocation.Left">
            <Doc>
          <summary>To the left of the grouped columns</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SummaryColumnsLocation.Right">
            <Doc>
          <summary>To the right of the grouped columns</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SummaryColumnsLocation.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheet&quot;]/Member[@signature=&quot;Worksheet.SummaryColumnsLocation&quot;]/Member[@signature=&quot;Worksheet.SummaryColumnsLocation.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SummaryColumnsLocation.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheet&quot;]/Member[@signature=&quot;Worksheet.SummaryColumnsLocation&quot;]/Member[@signature=&quot;Worksheet.SummaryColumnsLocation.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SummaryColumnsLocation.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheet&quot;]/Member[@signature=&quot;Worksheet.SummaryColumnsLocation&quot;]/Member[@signature=&quot;Worksheet.SummaryColumnsLocation.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SummaryColumnsLocation.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheet&quot;]/Member[@signature=&quot;Worksheet.SummaryColumnsLocation&quot;]/Member[@signature=&quot;Worksheet.SummaryColumnsLocation.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SummaryColumnsLocation.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheet&quot;]/Member[@signature=&quot;Worksheet.SummaryColumnsLocation&quot;]/Member[@signature=&quot;Worksheet.SummaryColumnsLocation.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SummaryRowsLocation">
            <Doc>
        <summary>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SummaryColumnsLocation"/>  value specifies the location of the summary row for a set of grouped rows.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SummaryRowsLocation.Above">
            <Doc>
          <summary>Above the grouped rows</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SummaryRowsLocation.Below">
            <Doc>
          <summary>Below the grouped rows</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SummaryRowsLocation.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheet&quot;]/Member[@signature=&quot;Worksheet.SummaryRowsLocation&quot;]/Member[@signature=&quot;Worksheet.SummaryRowsLocation.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SummaryRowsLocation.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheet&quot;]/Member[@signature=&quot;Worksheet.SummaryRowsLocation&quot;]/Member[@signature=&quot;Worksheet.SummaryRowsLocation.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SummaryRowsLocation.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheet&quot;]/Member[@signature=&quot;Worksheet.SummaryRowsLocation&quot;]/Member[@signature=&quot;Worksheet.SummaryRowsLocation.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SummaryRowsLocation.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheet&quot;]/Member[@signature=&quot;Worksheet.SummaryRowsLocation&quot;]/Member[@signature=&quot;Worksheet.SummaryRowsLocation.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.SummaryRowsLocation.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheet&quot;]/Member[@signature=&quot;Worksheet.SummaryRowsLocation&quot;]/Member[@signature=&quot;Worksheet.SummaryRowsLocation.Value&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Chartsheet.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Chartsheet&quot;]/Member[@signature=&quot;Chartsheet.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Chartsheet.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Chartsheet&quot;]/Member[@signature=&quot;Chartsheet.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Chartsheet.Chart">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Chartsheet.Chart"/> object representing the chart in the chart sheet.</para>
        </summary>
        <example>
          <para>
            <code>
Chart c = cs.Chart;</code>
            <br/>
            <code>
Dim c As Chart = cs.Chart</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartTextCollection">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartTextCollection"/> contains all <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartText"/> objects in the specified chart..</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartTextCollection.AddChartText(SoftArtisans.OfficeWriter.ExcelWriter.ChartText)">
            <Doc>
        <summary>
          <para>Adds an existing <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartText"/> object to this <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartTextCollection"/>.</para>
        </summary>
        <param name="text">
          <para>The <c>ChartText</c> object to add.</para>
        </param>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartTextCollection.CreateChartText">
            <Doc>
        <summary>
          <para>Create a new blank <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartText"/> object which is automatically added to the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartTextCollection"/>.</para>
        </summary>
        <returns>
          <para>A new <c>ChartText</c> object.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartTextCollection.CreateChartText(System.String)">
            <Doc>
        <summary>
          <para>Create a new <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartText"/> object with the specified string as its text. The new object is automatically added to the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartTextCollection"/>.</para>
        </summary>
        <param name="text">
          <para>The text to display in the new <c>ChartText</c> object.</para>
        </param>
        <returns>
          <para>A new <c>ChartText</c> object.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartTextCollection.Remove(SoftArtisans.OfficeWriter.ExcelWriter.ChartText)">
            <Doc>
        <summary>
          <para>Permanently removes a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartText"/> object from the collection.</para>
        </summary>
        <param name="chartText">
          <para>The <c>ChartText</c> object to remove.</para>
        </param>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ChartTextCollection.Remove(System.Int32)">
            <Doc>
        <summary>
          <para>Permanently removes a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartText"/> object from the collection.</para>
        </summary>
        <param name="position">
          <para>The 0-based position of the <c>ChartText</c> in the collection.</para>
        </param>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartTextCollection.Count">
            <Doc>
        <summary>
          <para>Returns number of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartText"/> objects in the collection.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartTextCollection.Item(System.Int32)">
            <Doc>
        <summary>
          <para>Returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartText"/> object at the specified index.</para>
        </summary>
        <param name="index">
          <para>The 0-based index of the <c>ChartText</c> to retrieve.</para>
        </param>
        <returns>
          <para>The <c>ChartText</c> object at the specified index.</para>
        </returns>
        <remarks>
          <para>The <c>ChartText</c> property is the indexer for the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartTextCollection"/> class.</para>
        </remarks>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Color">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Color"/> class represents a single color in a spreadsheet's color palette. </para>
      </summary>
      <remarks>Each Excel document has a single color palette that manages the colors for formatting and some drawing layer colors. A color palette contains 56 colors that may be referenced. Each of these 56 colors may be customized, but changing a color in the palette will affect all formatting that uses the referenced color. To get a <c>Color</c> object, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.Palette"/> to get to the Workbook's palette, then use one of the Palette's methods to get a <c>Color</c>.</remarks>
      <example>
        <para>
          <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          Palette p = wb.Palette;
          SoftArtisans.OfficeWriter.ExcelApplication.Color clr =
               p.GetClosestColor(System.Drawing.Color.Blue);
        </code>
          <br/>
          <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim p As Palette = wb.Palette()
          Dim clr As SoftArtisans.OfficeWriter.ExcelApplication.Color = _
               p.GetClosestColor(System.Drawing.Color.Blue)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Color.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Color&quot;]/Member[@signature=&quot;Color.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Color.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Color&quot;]/Member[@signature=&quot;Color.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Color.ToString">
            <Doc>
        <summary>
          <para>Returns a string representation of the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Color"/> object.</para>
        </summary>
        <returns>
          <para>A string representation of the <c>Color</c> object.</para>
        </returns>
        <example>
          <para>
            <code>
string color = clr.ToString();</code>
            <br/>
            <code>
Dim color As String = clr.ToString()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Color.Blue">
            <Doc>
        <summary>
          <para>Returns the blue component of the color's RGB value.</para>
        </summary>
        <example>
          <para>
            <code>
int blue = clr.Blue;</code>
            <br/>
            <code>
Dim blue As Integer = clr.Blue</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Color.Green">
            <Doc>
        <summary>
          <para>Returns the green component of color's the RGB value.</para>
        </summary>
        <example>
          <para>
            <code>
int green = clr.Green;</code>
            <br/>
            <code>
Dim green As Integer = clr.Green</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Color.IsCustomColor">
            <Doc>
        <summary>
          <para>Returns whether or not the color is a custom color that is not part of Excel's default color palette.</para>
        </summary>
        <example>
          <para>
            <code>
bool customColor = clr.IsCustomColor;</code>
            <br/>
            <code>
Dim customColor As Boolean = clr.IsCustomColor</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Color.IsPaletteColor">
            <Doc>
        <summary>
          <para>Returns whether or not the color is stored in Excel's default color palette.</para>
        </summary>
        <example>
          <para>
            <code>
bool paletteColor = clr.IsPaletteColor;</code>
            <br/>
            <code>
Dim paletteColor As Boolean = clr.IsPaletteColor</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Color.PaletteIndex">
            <Doc>
        <summary>
          <para>Returns the 0-based index of the color in the spreadsheet's color palette.</para>
        </summary>
        <example>
          <para>
            <code>
int colorIndex = clr.PaletteIndex;</code>
            <br/>
            <code>
Dim colorIndex As Integer = clr.PaletteIndex</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Color.Red">
            <Doc>
        <summary>
          <para>Returns the red component of the color's RGB value.</para>
        </summary>
        <example>
          <para>
            <code>
int red = clr.Red;</code>
            <br/>
            <code>
Dim red As Integer = clr.Red</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Color.IsSystemColor">
            <Doc>
        <summary>
          <para>Returns whether or not the color is a system color that cannot be changed.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Color.SystemColor">
            <Doc>
        <summary>
          <para>System colors that can be used as colors in ExcelWriter</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Color.SystemColor.AutomaticFill">
            <Doc>
          <summary>Automatic fill color</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Color.SystemColor.AutomaticLine">
            <Doc>
          <summary>Automatic line color</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Color.SystemColor.Black">
            <Doc>
          <summary>Black</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Color.SystemColor.Blue">
            <Doc>
          <summary>Blue</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Color.SystemColor.Cyan">
            <Doc>
          <summary>Cyan</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Color.SystemColor.Green">
            <Doc>
          <summary>Green</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Color.SystemColor.Magenta">
            <Doc>
          <summary>Magenta</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Color.SystemColor.Red">
            <Doc>
          <summary>Red</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Color.SystemColor.White">
            <Doc>
          <summary>White</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Color.SystemColor.Yellow">
            <Doc>
          <summary>Yellow</summary>
        </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ColumnProperties">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ColumnProperties"/> class represents a single column in a worksheet.</para>
      </summary>
      <remarks>
        <para>To return a <c>ColumnProperties</c> object, use <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.GetColumnProperties(System.Int32)"/>. The following sample gets the column properties for the first column of the first worksheet.</para>
      </remarks>
      <example>
        <para>
          <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          Worksheet ws = wb.Worksheets[0];
          ColumnProperties colProps = ws.GetColumnProperties(0);
        </code>
          <br/>
          <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim ws As Worksheet = wb.Worksheets(0)
          Dim colProps As ColumnProperties = ws.GetColumnProperties(0)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ColumnProperties.ApplyStyle(SoftArtisans.OfficeWriter.ExcelWriter.Style)">
            <Doc>
        <summary>
          <para>Applies a style to the column. When a style is applied - rather than set (see <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ColumnProperties.Style"/> ) - only the differences between the new style and style properties previously assigned to the column (through the ExcelWriter API or in Microsoft Excel) will take effect. For example, if a cell in the column has a background color and the new style applied does not contain a background color, the cell's color will not be affected.</para>
        </summary>
        <param name="style">
          <para>The <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ColumnProperties.Style"/> object to apply to the row.</para>
        </param>
        <example>
          <para>
            <code>
colProps.ApplyStyle(styl);</code>
            <br/>
            <code>
colProps.ApplyStyle(styl)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ColumnProperties.AutoFitWidth">
            <Doc>
        <summary>
          <para>Automatically sets the width of the column to the width of the widest cell value in the column.</para>
        </summary>
        <example>
          <para>
            <code>
colProps.AutoFitWidth();</code>
            <br/>
            <code>
colProps.AutoFitWidth()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ColumnProperties.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ColumnProperties&quot;]/Member[@signature=&quot;ColumnProperties.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ColumnProperties.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ColumnProperties&quot;]/Member[@signature=&quot;ColumnProperties.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ColumnProperties.ColumnNumber">
            <Doc>
        <summary>
          <para>Returns the column's 0-based index.</para>
        </summary>
        <example>
          <para>
            <code>
int colNum = colProps.ColumnNumber;</code>
            <br/>
            <code>
Dim colNum As Integer = colProps.ColumnNumber</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ColumnProperties.Hidden">
            <Doc>
        <summary>
          <para>Sets or returns whether or not the column will be hidden when the workbook is opened in Excel.</para>
        </summary>
        <example>
          <para>
            <code>

          bool hideCol = colProps.Hidden;
          colProps.Hidden = false;
        </code>
            <br/>
            <code>

          Dim hideCol As Boolean = colProps.Hidden
          colProps.Hidden = False
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ColumnProperties.OutlineCollapsed">
            <Doc>
        <summary>
          <para>Sets or returns whether the column's outlined column group is collapsed. If the outline is collapsed, the column is hidden.</para>
        </summary>
        <example>
          <para>
            <code>

          bool collapsed = colProps.OutlineCollapsed;
          colProps.OutlineCollapsed = true;
        </code>
            <br/>
            <code>

          Dim collapsed As Boolean = colProps.OutlineCollapsed
          colProps.OutlineCollapsed = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ColumnProperties.OutlineLevel">
            <Doc>
        <summary>
          <para>Sets or returns the outline level of the column, as a value between 0 and 7. The outline level is used to control grouping in Excel. For example, to group several columns, set their outline levels to 1; to group a subset of columns within the group, set their outline levels to 2.</para>
        </summary>
        <example>
          <para>
            <code>

          int groupLevel = colProps.OutlineLevel;
          colProps.OutlineLevel = 4;
        </code>
            <br/>
            <code>

          Dim groupLevel As Integer = colProps.OutlineLevel
          colProps.OutlineLevel = 4
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ColumnProperties.PaddingInChars">
            <Doc>
        <summary>
          <para>Returns 'padding' (in characters) that needs to be added to the column width (in characters) to get true width of this column. </para>
        </summary>
        <remarks>
          <para>For example, let's say we have ten columns that are 3.71 characters wide. What is the width of a merged cell that spans all ten columns? To find the width in characters you have to include padding 10*(WidthInChar+PaddingInChars). For Arial 10 the padding is 0.71 and the width is 44.20</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ColumnProperties.Style">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ColumnProperties.Style"/> object that determines how cells in the column look, including number format, font, orientation, etc.</para>
        </summary>
        <example>
          <para>
            <code>
Style styl = colProps.Style;</code>
            <br/>
            <code>
Dim styl As Style = colProps.Style</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ColumnProperties.Width">
            <Doc>
        <summary>
          <para>Sets or returns the width of the column in points (1/72 of an inch).</para>
        </summary>
        <example>
          <para>
            <code>

          double colWidth = colProps.Width;
          colProps.Width = 100;
        </code>
            <br/>
            <code>

          Dim colWidth As Double = colProps.Width
          colProps.Width = 100
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ColumnProperties.WidthInChars">
            <Doc>
        <summary>
          <para>Sets or returns the width of the column as a number of '0' characters in the font of the 'Normal' style. This must be a value between 0 - 255.</para>
        </summary>
        <remarks>
          <para>While a cell can show more than 255 characters, a column may not exceed 255 characters in width.</para>
        </remarks>
        <example>
          <para>
            <code>

          double colWidth = colProps.WidthInChars;
          colProps.WidthInChars = 20;
        </code>
            <br/>
            <code>

          Dim colWidth As Double = colProps.WidthInChars
          colProps.WidthInChars = 20
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Comment">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Comment"/> object represents a note attached to a cell, or group of merged cells, separate from other cell content. A <c>Comment</c> must be associated with a cell, and may only be created using set <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Comment.Visible"/> to <c>true</c>.</para>
      </summary>
    </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Shape">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Shape"/> class allows the appearance and behavior of drawing object to be manipulated. On its own, <c>Shape</c> represents a simple auto shape, such as a line, rectangle, or oval. A shape may also represent the display area of a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Comment"/> or the size, position, and formatting of a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Picture"/>.</para>
      </summary>
      <remarks>
        <para>Once a <c>Shape</c> is created with a particular <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType"/>, the type may not be changed. Instead, delete the shape and create a new one with the appropriate type.</para>
        <para>To create a <c>Shape</c> object, call <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Shapes.CreateShape(SoftArtisans.OfficeWriter.ExcelWriter.ShapeType,SoftArtisans.OfficeWriter.ExcelWriter.Anchor)"/>.</para>
      </remarks>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Shape.ClearRichTextFormatting">
            <Doc>
        <summary>
          <para>Clears all rich text formatting within the shape. The font of the shape text will be set to the font set (through the ExcelWriter API) for the cell the shape is attached to.</para>
        </summary>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Shape.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Shape&quot;]/Member[@signature=&quot;Shape.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Shape.GetCharacters(System.Int32)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CharacterRun"/> object representing a range of characters within the comment text. Use this to set the font on specified characters within the text.</para>
        </summary>
        <param name="startIndex">
          <para>The 0-based character position at which to begin the character run.</para>
        </param>
        <returns>
          <para>A <c>CharacterRun</c> object representing a range of characters within the comment text.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Shape.GetCharacters(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CharacterRun"/> object representing a range of characters within the comment text. Use this to set the font on specified characters within the text.</para>
        </summary>
        <param name="startIndex">
          <para>The character position at which to begin the character run.</para>
        </param>
        <param name="length">
          <para>The length of the character run.</para>
        </param>
        <returns>
          <para>A <c>CharacterRun</c> object representing a range of characters within the cell.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Shape.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Shape&quot;]/Member[@signature=&quot;Shape.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Shape.SetCustomFillColor(System.Int32,System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Sets the fill color for the shape to be the specified custom RGB value, and returns the generated <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Color"/>. This method allows a shape to have a color not defined in the worksheet's <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Palette"/>.</para>
        </summary>
        <param name="red">
          <para>The red component of the RGB value.</para>
        </param>
        <param name="green">
          <para>The green component of the RGB value.</para>
        </param>
        <param name="blue">
          <para>The blue component of the RGB value.</para>
        </param>
        <returns>
          <para>A <c>Color</c> object representing the fill color.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Shape.SetCustomLineColor(System.Int32,System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Sets the line color for the shape to be the specified custom RGB value, and returns the generated <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Color"/>. This method allows a shape to have a line color not defined in the worksheet's <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Palette"/>.</para>
        </summary>
        <param name="red">
          <para>The red component of the RGB value.</para>
        </param>
        <param name="green">
          <para>The green component of the RGB value.</para>
        </param>
        <param name="blue">
          <para>The blue component of the RGB value.</para>
        </param>
        <returns>
          <para>A <c>Color</c> object representing the line color.</para>
        </returns>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Shape.FillColor">
            <Doc>
        <summary>
          <para>Sets or returns the shape's fill color.  The color may be either a custom color or a palette color.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Shape.FitToText">
            <Doc>
        <summary>
          <para>Sets or returns whether the shape will be automatically sized to fit the text.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Shape.Height">
            <Doc>
        <summary>
          <para>Sets or returns the height of the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Shape"/>.  </para>
        </summary>
        <remarks>
          <para>If the <c>Shape</c> is directly within a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet"/>, the height is in points (1/72 inch).  If the <c>Shape</c> is within <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Chartsheet"/>, the height is a percentage of the chart's height (0-100).</para>
          <para>If you set a shape's height (or <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Shape.Width"/>) to a value read from a spreadsheet, the shape may lose precision due to the way Excel stores shape dimensions.</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Shape.HorizontalAlignment">
            <Doc>
        <summary>
          <para>Sets or returns the horizontal alignment of text within the shape.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Shape.LineColor">
            <Doc>
        <summary>
          <para>Sets or returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Shape"/> 's line color.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Shape.LockAspectRatio">
            <Doc>
        <summary>
          <para>Sets or returns whether the aspect ratio of the shape will be locked in Excel. This setting has no effect within ExcelWriter.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Shape.Name">
            <Doc>
        <summary>
          <para>Returns the name associated with this shape.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Shape.ObjectPositioning">
            <Doc>
        <summary>
          <para>Sets or returns the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Shape.ObjectPositioning"/> value that determines the shape's resize and reposition behavior when the cells in the worksheet are changed.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Shape.Position">
            <Doc>
        <summary>
          <para>Sets or returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Shape"/> 's position in the worksheet.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Shape.Rotation">
            <Doc>
        <summary>
          <para>Sets or returns the rotation angle of the shape.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Shape.Text">
            <Doc>
        <summary>
          <para>Sets or returns the text displayed within the shape.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Shape.Type">
            <Doc>
        <summary>
          <para>Returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Shape"/> object's type. This property may not be changed.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Shape.VerticalAlignment">
            <Doc>
        <summary>
          <para>Sets or returns the vertical alignment of text within the shape.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Shape.Width">
            <Doc>
        <summary>Sets or returns the width of the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Shape"/>. </summary>
        <remarks>
          <para>If the <c>Shape</c> is directly within a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet"/>, the width is in points (1/72 inch).  If the <c>Shape</c> is within <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Chartsheet"/>, the width is a percentage of the chart's width (0-100).</para>
          <para>If you set a shape's width (or <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Shape.Height"/>) to a value read from a spreadsheet, the shape may lose precision due to the way Excel stores shape dimensions.</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Shape.FillTransparency">
            <Doc>
        <summary>
          <para>Sets or returns the fill transparency the shape as a real number value between 0 (opaque) and 1 (transparent).</para>
        </summary>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Comment.ClearRichTextFormatting">
            <Doc>
        <summary>
          <para>Clears all rich text formatting within the comment. The font of the comment text will be set to the font set (through the ExcelWriter API) for the cell the comment is attached to.</para>
        </summary>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Comment.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Comment&quot;]/Member[@signature=&quot;Comment.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Comment.GetCharacters(System.Int32)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CharacterRun"/> object representing a range of characters within the comment text. Use this to set the font on specified characters within the text.</para>
        </summary>
        <param name="startIndex">
          <para>The 0-based character position at which to begin the character run.</para>
        </param>
        <returns>
          <para>A <c>CharacterRun</c> object representing a range of characters within the comment text.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Comment.GetCharacters(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CharacterRun"/> object representing a range of characters within the comment text. Use this to set the font on specified characters within the text.</para>
        </summary>
        <param name="startIndex">
          <para>The character position at which to begin the character run.</para>
        </param>
        <param name="length">
          <para>The length of the character run.</para>
        </param>
        <returns>
          <para>A <c>CharacterRun</c> object representing a range of characters within the cell.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Comment.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Comment&quot;]/Member[@signature=&quot;Comment.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Comment.Author">
            <Doc>
        <summary>
          <para>Sets or returns the author of the comment. This information is displayed in the status bar in Excel when a comment is selected.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Comment.Cell">
            <Doc>
        <summary>
          <para>This returns the Cell object that this comment is associated with.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Comment.FitToText">
            <Doc>
        <summary>
          <para>Sets or returns whether the comment's shape will be automatically sized to fit the text.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Comment.HorizontalAlignment">
            <Doc>
        <summary>
          <para>Sets or returns the horizontal alignment of text within the shape.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Comment.Shape">
            <Doc>
        <summary>
          <para>Return a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Comment.Shape"/> object representing the display area of the comment. The <c>Shape</c> object may be used to set advanced formatting options such as fill, border, size, or position.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Comment.Text">
            <Doc>
        <summary>
          <para>Sets or returns the body text of the comment.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Comment.VerticalAlignment">
            <Doc>
        <summary>
          <para>Sets or returns the vertical alignment of text within the shape.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Comment.Visible">
            <Doc>
        <summary>
          <para>Sets or returns whether the comment will be visible when the document is opened in Excel. By default, the comment will be hidden, and will be displayed only if the user hovers over the comment's cell.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Comments">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Comments"/> collection contains all <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Comment"/> objects in the worksheet. To return a <c>Comments</c> collection, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Comments"/>.</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Comments.GetEnumerator">
            <Doc>
        <summary>
          <para>Returns an IEnumerator for the Comments in a Worksheet</para>
        </summary>
        <returns>
          <para>An enumerator for the Comments in a Worksheet as a System.Collections.IEnumerator</para>
        </returns>
        <example>
          <para>
            <code>
IEnumerator enumerator = ws.Comments.GetEnumerator();
</code>
            <br/>
            <code>
Dim enumerator as IEnumerator = ws.Comments.GetEnumerator()
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Comments.CreateComment(SoftArtisans.OfficeWriter.ExcelWriter.Cell)">
            <Doc>
        <summary>
          <para>Creates a comment and associates it with the specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/>.</para>
        </summary>
        <param name="cell">
          <para>The cell to associate the comment with.</para>
        </param>
        <returns>
          <para>The new comment.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Comments.CreateComment(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Creates a comment and associates it with the cell with the specified row and column coordinates.</para>
        </summary>
        <param name="row">
          <para>The row for the new comment (0-based).</para>
        </param>
        <param name="column">
          <para>The column for the new comment (0-based).</para>
        </param>
        <returns>
          <para>The new comment.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Comments.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Comments&quot;]/Member[@signature=&quot;Comments.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Comments.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Comments&quot;]/Member[@signature=&quot;Comments.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Comments.Remove(System.Int32)">
            <Doc>
        <summary>
          <para>Removes the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Comment"/> object at the specified position from the collection.</para>
        </summary>
        <param name="position">
          <para>The 0-based position of the <c>Comment</c> to remove.</para>
        </param>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Comments.Count">
            <Doc>
        <summary>
          <para>Returns the number of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Comment"/> objects in the collection.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Comments.Item(System.Int32)">
            <Doc>
        <summary>
          <para>Returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Comment"/> object at the specified position in the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Comments"/> collection.</para>
        </summary>
        <param name="position">
          <para>A valid index between 0 and <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Comments.Count"/>.</para>
        </param>
        <returns>
          <para>The <c>Comment</c> object at the specified position.</para>
        </returns>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Comments.Item(System.String)">
            <Doc>
        <summary>
          <para>Returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Comment"/> object with the specified name in the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Comments"/> collection.</para>
        </summary>
        <param name="position">
          <para>A valid name of a <c>Comment</c> in the <c>Comments</c> collection.</para>
        </param>
        <returns>
          <para>The <c>Comment</c> object with the specified name.</para>
        </returns>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition"/> object represents a condition within a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat"/>, a format that Excel will apply to a cell or group of cells if a specified condition is met. </para>
      </summary>
      <remarks>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat"/> object contains up to three <c>Condition</c> objects and a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/> object representing the set of cells on which the conditions will be tested.</para>
        <para>To create a <c>Condition</c> object, call one of the <c>ConditionalFormat</c> object's <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat.CreateCondition(SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison,System.String)"/> methods.</para>
      </remarks>
      <example>
        <para>
          <code>
ExcelApplication xla = new ExcelApplication();
Workbook wb = xla.Create();
Range rng = wb.Worksheets[0].CreateRange("$B$2:$F$10");
ConditionalFormat condFmt = wb.CreateConditionalFormat();
Condition cond =
     condFmt.CreateCondition(
     Condition.Comparison.CellValueGreaterThan, 
     "=100");
Font fnt = cond.Style.Font;
fnt.Bold = true;
fnt.Color = wb.Palette.GetClosestColor(100, 100, 255);
rng.SetConditionalFormat(condFmt);
</code>
          <br/>
          <code>
Dim xla As New ExcelApplication()
Dim wb As Workbook = xla.Create()
Dim rng As Range = wb.Worksheets(0).CreateRange("$B$2:$F$10")
Dim condFmt As ConditionalFormat = wb.CreateConditionalFormat()
Dim cond As Condition = _
     condFmt.CreateCondition( _
     Condition.Comparison.CellValueGreaterThan, _
     "=100")
Dim fnt As Font = cond.Style.Font
fnt.Bold = true
fnt.Color = wb.Palette.GetClosestColor(100, 100, 255)
rng.SetConditionalFormat(condFmt)
</code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Condition.ApplyStyle(SoftArtisans.OfficeWriter.ExcelWriter.Style)">
            <Doc>
        <summary>
          <para>Applies the specified <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Style"/> to the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition"/>'s current <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Style"/>. </para>
        </summary>
        <param name="style">
          <para>The <c>Style</c> object to<br/>apply to the <c>Condition</c>'s current <c>Style</c>.</para>
        </param>
        <remarks>
          <para>A <c>Condition</c>'s <c>Style</c> is the formatting that will be set on a conditionally formatted cell if the condition is met. When a <c>Style</c> is <b>applied</b> (rather than <b>set</b> using the <c>Style</c> property), only the differences between the new <c>Style</c> and existing <c>Style</c> properties will take effect. To completely replace a <c>Condition</c>'s <c>Style</c> with a new one, set <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Style"/>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          ConditionalFormat condFmt = wb.CreateConditionalFormat();
          Condition cond =
               condFmt.CreateCondition(
               Condition.Comparison.CellValueGreaterThan,
               "=100");
          cond.Style.BackgroundColor = Palette.SystemColor.Green;
          Style styleBold = wb.CreateStyle();
          styleBold.Font.Bold = true;
          cond.ApplyStyle(styleBold);
          Range rng = wb.Worksheets[0].CreateRange("$B$2:$F$10");
          rng.SetConditionalFormat(condFmt);
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim condFmt As ConditionalFormat = wb.CreateConditionalFormat()
          Dim cond As Condition = _
               condFmt.CreateCondition( _
               Condition.Comparison.CellValueGreaterThan, _
               "=100")
          cond.Style.BackgroundColor = Palette.SystemColor.Green
          Dim styleBold As Style = wb.CreateStyle()
          styleBold.Font.Bold = True
          cond.ApplyStyle(styleBold)
          Dim rng As Range = wb.Worksheets[0].CreateRange("$B$2:$F$10")
          rng.SetConditionalFormat(condFmt)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Condition.ChangeCondition(SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison,System.String)">
            <Doc>
        <summary>
          <para>Resets the current <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition"/>'s <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison"/> type and formula. The method takes one formulas, and therefore must take a <c>Comparison</c> that requires one formulas, such as http://wiki.softartisans.com/display/EW70/Condition.Comparison#CellValueLessThan.</para>
        </summary>
        <param name="comparisonType">
          <para>The type of comparison Excel will use when comparing a cell value to the result of <c>formula</c>. The comparison type must require only one formula and may be set to one of the following values: http://wiki.softartisans.com/display/EW70/Condition.Comparison#FormulaEvaluates, <c>Comparison.CellValueLessThan</c>, http://wiki.softartisans.com/display/EW70/Condition.Comparison#CellValueGreaterThan, http://wiki.softartisans.com/display/EW70/Condition.Comparison#CellValueLessThanOrEqualTo, http://wiki.softartisans.com/display/EW70/Condition.Comparison#CellValueGreaterThanOrEqualTo, http://wiki.softartisans.com/display/EW70/Condition.Comparison#CellValueEqualTo, or http://wiki.softartisans.com/display/EW70/Condition.Comparison#CellValueNotEqualTo.</para>
        </param>
        <param name="formula">
          <para>The result of this formula will be compared to each cell value in the set of cells associated with the conditional format.</para>
        </param>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          ConditionalFormat condFmt = wb.CreateConditionalFormat();
          Condition cond =
               condFmt.CreateCondition(
               Condition.Comparison.CellValueBetween,
               "=100",
               "=150");
          cond.ChangeCondition(
               Condition.Comparison.CellValueGreaterThan, "=100");
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim condFmt As ConditionalFormat = wb.CreateConditionalFormat()
          Dim cond As Condition = _
               condFmt.CreateCondition( _
               Condition.Comparison.CellValueBetween, _
               "=100", _
               "=150")
          cond.ChangeCondition( _
               Condition.Comparison.CellValueGreaterThan, "=100")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Condition.ChangeCondition(SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison,System.String,System.String)">
            <Doc>
        <summary>
          <para>Resets the current <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition"/>'s <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison"/> type and minimum and maximum formulas. The method takes two formulas, and therefore must take a <c>Comparison</c> that requires two formulas, such as http://wiki.softartisans.com/display/EW70/Condition.Comparison#CellValueBetween.</para>
        </summary>
        <param name="comparisonType">
          <para>The type of comparison Excel will use when comparing a cell value to <c>formula1</c> and <c>formula2</c>. The comparison type must require two formulas and may be set to one of the following values: <c>Comparison.CellValueBetween</c> or http://wiki.softartisans.com/display/EW70/Condition.Comparison#CellValueNotBetween.</para>
        </param>
        <param name="formula1">
          <para>The formula to use for the minumum value.</para>
        </param>
        <param name="formula2">
          <para>The formula to use for the maximum value.</para>
        </param>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          ConditionalFormat condFmt = wb.CreateConditionalFormat();
          Condition cond =
               condFmt.CreateCondition(
               Condition.Comparison.CellValueGreaterThan,
               "=100");
          cond.ChangeCondition(
               Condition.Comparison.CellValueBetween,
               "=100",
               "=150");
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim condFmt As ConditionalFormat = wb.CreateConditionalFormat()
          Dim cond As Condition = _
               condFmt.CreateCondition( _
               Condition.Comparison.CellValueGreaterThan, _
               "=100")
          cond.ChangeCondition( _
               Condition.Comparison.CellValueBetween, _
               "=100", _
               "=150")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Condition&quot;]/Member[@signature=&quot;Condition.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Condition.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Condition&quot;]/Member[@signature=&quot;Condition.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Condition.ComparisonType">
            <Doc>
        <summary>
          <para>Returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition"/>'s <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison"/> value, which determines whether each cell value will be compared with one or two other values, or if a formula will be evaluated for each cell.</para>
        </summary>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          ConditionalFormat condFmt = wb.CreateConditionalFormat();
          Condition cond =
               condFmt.CreateCondition(
               Condition.Comparison.CellValueGreaterThan,
               "=100");
          Condition.Comparison compType = cond.ComparisonType;
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim condFmt As ConditionalFormat = wb.CreateConditionalFormat()
          Dim cond As Condition = _
               condFmt.CreateCondition( _
               Condition.Comparison.CellValueGreaterThan, _
               "=100")
          Dim compType As Condition.Comparison = cond.ComparisonType
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Formula1">
            <Doc>
        <summary>If the comparison is between a cell value and two values, this is the minimum value; otherwise this is is the formula to be evaluated for the condition.</summary>
        <remarks>
          <para>If the value of <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Condition.ComparisonType"/> is a comparison between a cell value and a single value (e.g., http://wiki.softartisans.com/display/EW70/Condition.Comparison#CellValueEqualTo), <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Formula1"/> sets or returns a formula whose result will be compared with each cell value in the set of conditionally formatted cells. </para>
          <para>If <c>Condition.ComparisonType</c> is a comparison between a cell value and two values (e.g., http://wiki.softartisans.com/display/EW70/Condition.Comparison#CellValueBetween), <c>Formula1</c> sets or returns a formula whose result will be the minimum comparison value. </para>
          <para>If the value of <c>Condition.ComparisonType</c> is http://wiki.softartisans.com/display/EW70/Condition.Comparison#FormulaEvaluation, <c>Formula1</c> sets or returns a formula that evaluates to <c>true</c> or <c>false</c>.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          ConditionalFormat condFmt = wb.CreateConditionalFormat();
          Condition cond =
               condFmt.CreateCondition(
               Condition.Comparison.CellValueGreaterThan,
               "=100");
          cond.Formula1 = "=99";
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim condFmt As ConditionalFormat = wb.CreateConditionalFormat()
          Dim cond As Condition = _
               condFmt.CreateCondition( _
               Condition.Comparison.CellValueGreaterThan, _
               "=100")
          cond.Formula1 = "=99"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Formula2">
            <Doc>
        <summary>
          <para>If the value of <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Condition.ComparisonType"/> is a comparison between a cell value and two values (e.g., http://wiki.softartisans.com/display/EW70/Condition.Comparison#CellValueBetween), <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Formula2"/><br/>sets or returns a formula whose result will be the maximum comparison value.</para>
        </summary>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          ConditionalFormat condFmt = wb.CreateConditionalFormat();
          Condition cond =
               condFmt.CreateCondition(
               Condition.Comparison.CellValueBetween,
               "=100",
               "=150");
          cond.Formula2 = "=200";
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim condFmt As ConditionalFormat = wb.CreateConditionalFormat()
          Dim cond As Condition = _
               condFmt.CreateCondition( _
               Condition.Comparison.CellValueBetween, _
               "=100", _
               "=150")
          cond.Formula2 = "=200"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Style">
            <Doc>
        <summary>
          <para>Sets or returns the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Style"/> that will be set on conditionally formatted cells when the current <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition"/> is met.</para>
        </summary>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          Range rng = wb.Worksheets[0].CreateRange("$B$2:$F$10");
          ConditionalFormat condFmt = wb.CreateConditionalFormat();
          Condition cond =
               condFmt.CreateCondition(
               Condition.Comparison.CellValueGreaterThan,
               "=100");
          Font fnt = cond.Style.Font;
          fnt.Bold = true;
          fnt.Color = wb.Palette.GetClosestColor(100, 100, 255);
          rng.SetConditionalFormat(condFmt);
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim rng As Range = wb.Worksheets(0).CreateRange("$B$2:$F$10")
          Dim condFmt As ConditionalFormat = wb.CreateConditionalFormat()
          Dim cond As Condition = _
               condFmt.CreateCondition( _
               Condition.Comparison.CellValueGreaterThan, _
               "=100")
          Dim fnt As Font = cond.Style.Font
          fnt.Bold = true fnt.Color = wb.Palette.GetClosestColor(100, 100, 255)
          rng.SetConditionalFormat(condFmt)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison">
            <Doc>
        <summary>
          <para>The value of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison"/> determines whether the value of a conditionally formatted cell will be compared with one or two other values, or if a formula will be evaluated for each cell.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison.CellValueBetween">
            <Doc>
          <summary>Conditional formatting will be applied if a cell's value is<br/>between two specified values.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison.CellValueEqualTo">
            <Doc>
          <summary>Conditional formatting will be applied if a cell's value is<br/>equal to the specified value.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison.CellValueGreaterThan">
            <Doc>
          <summary>Conditional formatting will be applied if a cell's value is greater than the<br/>specified value.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison.CellValueGreaterThanOrEqualTo">
            <Doc>
          <summary>Conditional formatting will be applied if a cell's value is greater than or<br/>equal to the specified value.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison.CellValueLessThan">
            <Doc>
          <summary>Conditional formatting will be applied if a cell's value is<br/>less than the specified value.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison.CellValueLessThanOrEqualTo">
            <Doc>
          <summary>Conditional formatting will be applied if a cell's value is less than or equal<br/>to the specified value.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison.CellValueNotBetween">
            <Doc>
          <summary>Conditional formatting will be applied if a cell's value is<br/>not between two specified values.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison.CellValueNotEqualTo">
            <Doc>
          <summary>Conditional formatting will be applied if a cell's value is<br/>not equal to the specified value.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison.FormulaEvaluation">
            <Doc>
          <summary>The condition's <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Formula1"/> property will be a<br/>formula that evaluates to True or False.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Condition&quot;]/Member[@signature=&quot;Condition.Comparison&quot;]/Member[@signature=&quot;Condition.Comparison.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Condition&quot;]/Member[@signature=&quot;Condition.Comparison&quot;]/Member[@signature=&quot;Condition.Comparison.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison.FormattingType">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Condition&quot;]/Member[@signature=&quot;Condition.Comparison&quot;]/Member[@signature=&quot;Condition.Comparison.FormattingType&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison.NumberOfFormulas">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Condition&quot;]/Member[@signature=&quot;Condition.Comparison&quot;]/Member[@signature=&quot;Condition.Comparison.NumberOfFormulas&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Condition&quot;]/Member[@signature=&quot;Condition.Comparison&quot;]/Member[@signature=&quot;Condition.Comparison.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat"/> object represents a conditional format that Excel will apply to a cell or group of cells if a specified condition is met.  Each <c>ConditionalFormat</c> object contains up to three <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition"/> and a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat.Range"/> object representing the set of cells on which the conditions will be tested.</para>
      </summary>
      <remarks>
        <para>To create a <c>ConditionalFormat</c>, call the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Workbook"/> object's <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateConditionalFormat"/> method.</para>
      </remarks>
      <example>
        <para>
          <code>
ExcelApplication xla = new ExcelApplication();
Workbook wb = xla.Create();
ConditionalFormat cf = wb.CreateConditionalFormat();
</code>
          <br/>
          <code>
Dim xla As New ExcelApplication()
Dim wb As Workbook = xla.Create()
Dim cf As ConditionalFormat = wb.CreateConditionalFormat()
</code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat.CreateCondition(SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison,System.String)">
            <Doc>
        <summary>
          <para>Creates a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition"/> of the specified <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Condition.ComparisonType"/>.</para>
        </summary>
        <param name="comparisonType">A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition"/> constant representing the type of comparison Excel will use when comparing a cell value to the result of the parameter <c>formula</c>.   The comparison type must require only one formula and may be set to one of the following values: http://wiki.softartisans.com/display/EW70/Condition.Comparison#FormulaEvaluates, http://wiki.softartisans.com/display/EW70/Condition.Comparison#CellValueLessThan, http://wiki.softartisans.com/display/EW70/Condition.Comparison#CellValueGreaterThan, http://wiki.softartisans.com/display/EW70/Condition.Comparison#CellValueLessThanOrEqualTo, http://wiki.softartisans.com/display/EW70/Condition.Comparison#CellValueGreaterThanOrEqualTo, http://wiki.softartisans.com/display/EW70/Condition.Comparison#CellValueEqualTo, or http://wiki.softartisans.com/display/EW70/Condition.Comparison#CellValueNotEqualTo.</param>
        <param name="formula">
          <para>The result of this formula will be compared to each cell value in the set of cells associated with the conditional format.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition"/> object representing the condition created.</para>
        </returns>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          Range rng = wb.Worksheets[0].CreateRange("$B$2:$F$10");
          ConditionalFormat condFmt = wb.CreateConditionalFormat();
          Condition cond =
               condFmt.CreateCondition(
               Condition.Comparison.CellValueGreaterThan,
               "=100");
          Font fnt = cond.Style.Font;
          fnt.Bold = true;
          fnt.Color = wb.Palette.GetClosestColor(100, 100, 255);
          rng.SetConditionalFormat(condFmt);
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim rng As Range = wb.Worksheets(0).CreateRange("$B$2:$F$10")
          Dim condFmt As ConditionalFormat = wb.CreateConditionalFormat()
          Dim cond As Condition = _
               condFmt.CreateCondition( _
               Condition.Comparison.CellValueGreaterThan, _
               "=100")
          Dim fnt As Font = cond.Style.Font
          fnt.Bold = True
          fnt.Color = wb.Palette.GetClosestColor(100, 100, 255)
          rng.SetConditionalFormat(condFmt)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat.CreateCondition(SoftArtisans.OfficeWriter.ExcelWriter.Condition.Comparison,System.String,System.String)">
            <Doc>
        <summary>
          <para>Creates a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition"/> of the specified <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Condition.ComparisonType"/>.</para>
        </summary>
        <param name="comparisonType">A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition"/> constant representing the type of comparison Excel will use when comparing a cell value to the parameters <c>formula1</c> and <c>formula2</c>.   The comparison type must require two formulas and may be set to one of the following values: http://wiki.softartisans.com/display/EW70/Condition.Comparison#CellValueBetween or http://wiki.softartisans.com/display/EW70/Condition.Comparison#CellValueNotBetween..</param>
        <param name="formula1">
          <para>The formula to use for the minumum value.</para>
        </param>
        <param name="formula2">
          <para>The formula to use for the maximum value.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition"/> object representing the condition created.</para>
        </returns>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          Range rng = wb.Worksheest[0].CreateRange("$B$2:$F$10");
          ConditionalFormat condFmt = wb.CreateConditionalFormat();
          Condition cond =
               condFmt.CreateCondition(
               Condition.Comparison.CellValueBetween,
               "=100",
               "=150");
          Font fnt = cond.Style.Font;
          fnt.Bold = true;
          fnt.Color = wb.Palette.GetClosestColor(100, 100, 255);
          rng.SetConditionalFormat(condFmt);
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim rng As Range = wb.Worksheets(0).CreateRange("$B$2:$F$10")
          Dim condFmt As ConditionalFormat = wb.CreateConditionalFormat()
          Dim cond As Condition = _
               condFmt.CreateCondition( _
               Condition.Comparison.CellValueBetween, _
               "=100", _
               "=150")
          Dim fnt As Font = cond.Style.Font
          fnt.Bold = True
          fnt.Color = wb.Palette.GetClosestColor(100, 100, 255)
          rng.SetConditionalFormat(condFmt)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ConditionalFormat&quot;]/Member[@signature=&quot;ConditionalFormat.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ConditionalFormat&quot;]/Member[@signature=&quot;ConditionalFormat.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat.RemoveCondition(System.Int32)">
            <Doc>
        <summary>
          <para>Removes the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition"/> at the specified index from the conditional format.</para>
        </summary>
        <param name="index">
          <para>The 0-based index of the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition"/> object to remove.</para>
        </param>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          ConditionalFormat condFmt = wb.CreateConditionalFormat();
          Condition cond1 =
               condFmt.CreateCondition(
               Condition.Comparison.CellValueBetween,
               "=100",
               "=150");
          Condition cond2 =
               condFmt.CreateCondition(
               Condition.Comparison.CellValueGreaterThan,
               "=100");
          condFmt.RemoveCondition(0);
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim  condFmt As ConditionalFormat = wb.CreateConditionalFormat()
          Dim cond1 As Condition = _
               condFmt.CreateCondition( _
               Condition.Comparison.CellValueGreaterThan, _
               "=100")
          Dim cond2 As Condition = _
               condFmt.CreateCondition( _
               Condition.Comparison.CellValueBetween, _
               "=100", _
               "=150")
          condFmt.RemoveCondition(0)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat.RemoveCondition(SoftArtisans.OfficeWriter.ExcelWriter.Condition)">
            <Doc>
        <summary>
          <para>Removes the specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition"/> from the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat"/> object.</para>
        </summary>
        <param name="condition">
          <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition"/> object to remove.</para>
        </param>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          ConditionalFormat condFmt = wb.CreateConditionalFormat();
          Condition cond1 =
               condFmt.CreateCondition(
               Condition.Comparison.CellValueBetween,
               "=100",
               "=150");
          Condition cond2 =
               condFmt.CreateCondition(
               Condition.Comparison.CellValueGreaterThan,
               "=100");
          condFmt.RemoveCondition(cond2);
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim condFmt As ConditionalFormat = wb.CreateConditionalFormat()
          Dim cond1 As Condition = _
               condFmt.CreateCondition( _
               Condition.Comparison.CellValueGreaterThan, _
               "=100")
          Dim cond2 As Condition = _
               condFmt.CreateCondition( _
               Condition.Comparison.CellValueBetween, _
               "=100", _
               "=150")
          condFmt.RemoveCondition(cond2)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat.Count">
            <Doc>
        <summary>
          <para>Returns the number of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition"/> objects in the current <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat"/> object.</para>
        </summary>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          ConditionalFormat cf = wb.CreateConditionalFormat();
          int numConditions = cf.Count;
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim cf As ConditionalFormat = wb.CreateConditionalFormat()
          Dim numConditions As Integer = cf.Count
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat.Item(System.Int32)">
            <Doc>
        <summary>
          <para>Returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Condition"/> object at the specified 0-based index. </para>
        </summary>
        <param name="index">
          <para>The 0-based index of the <c>Condition</c> object.</para>
        </param>
        <remarks>
          <para>The index determines the order in which conditions will be evaluated.  A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat"/> may contain up to three <c>Condition</c> objects.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();

          //--- Create a range of the cells that will have the conditional formatting.
          Range vRange = wb.Worksheets[0].CreateRange("$B$2:$F$10");
          Area vArea = vRange.Areas[0];

          //--- Get the conditional format for the first cell within this range.
          ConditionalFormat vCndFmt = vArea[0,0].ConditionalFormat;

          //--- Modify the first condition.
          Condition vCondition = vCondFmt.Condition[0];
          vCondition.ChangeConditionType(Condition.Comparison.CellValueLessThan, "=100");

          vRange.SetConditionalFormat(vCondFmt);
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()

          '--- Create a range of the cells that will have the conditional formatting.
          Dim rng As Range = wb.Worksheets(0).CreateRange("$B$2:$F$10")
          Dim ar As Area = rng.Areas(0)

          '--- Get the conditional format for the first cell within this range.
          Dim CondFmt As ConditionalFormat = ar(0,0).ConditionalFormat

          '--- Modify the first condition.
          Dim cond As Condition = CondFmt.Condition(0)
          cond.ChangeConditionType(Condition.Comparison.CellValueLessThan, "=100")

          rng.SetConditionalFormat(vCndFmt)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat.Range">
            <Doc>
        <summary>
          <para>Returns the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat.Range"/> of cells that is conditionally formatted by the current <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat"/> object.</para>
        </summary>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          ConditionalFormat cf = wb.CreateConditionalFormat();
          Range cfRange = cf.Range;
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim cf As ConditionalFormat = wb.CreateConditionalFormat()
          Dim cfRange As Range = cf.Range
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties"/> object represents the types of data that will be copied from a worksheet when you call the <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CopyPaste(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Area,SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties)"/> method. </para>
      </summary>
      <remarks>
        <para>You can use the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyPasteType"/> enumeration to specify the type of data that will be copied. If you set <c>CopyPasteType</c> to http://wiki.softartisans.com/display/EW70/CopyPasteProperties.CopyPasteType#None, then you must set individual properties on the <c>CopyPasteProperties</c> object before calling the <c>CopyPaste()</c> method.</para>
        <para>To create a CopyPasteProperties object, call the <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateCopyPasteProperties(SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyPasteType)"/> method on a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Workbook"/> object.</para>
      </remarks>
      <example>
        <para>
          <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          CopyPasteProperties properties =
               wb.CreateCopyPasteProperties(CopyPasteProperties.CopyPasteType.All);
          Area areaToCopy = wb.Worksheets[0].CreateArea(0, 0, 3, 3);
          Worksheet ws = wb.Worksheets[0];
          ws.CopyPaste(0, 0, areaToCopy, properties);
        </code>
          <br/>
          <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim properties As CopyPasteProperties = _
               wb.CreateCopyPasteProperties(CopyPasteProperties.CopyPasteType.All)
          Dim areaToCopy as Area = wb.Worksheets(0).CreateArea(0, 0, 3, 3)
          Dim ws as Worksheet = wb.Worksheets(0)
          ws.CopyPaste(0, 0, areaToCopy, properties)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;CopyPasteProperties&quot;]/Member[@signature=&quot;CopyPasteProperties.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;CopyPasteProperties&quot;]/Member[@signature=&quot;CopyPasteProperties.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyColumnWidth">
            <Doc>
        <summary>
          <para>A boolean value indicating whether or not to copy column width.  </para>
        </summary>
        <remarks>
          <para>If this value is set to true, then column width of rows in the destination worksheet will be adjusted to match the column width from the corresponding column in the source worksheet.  It is recommended that you do not turn on this setting without testing the results as multiple copy-paste operations into a worksheet may have undesired affects.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Is the property object set to copy column width?
          boolean willCopyColumnWidth = copyPasteProperties.CopyColumnWidth;

          //--- Set the property object to copy cell values.
          copyPasteProperties.CopyColumnWidth = true;
        </code>
            <br/>
            <code>

          '--- Is the property object set to copy column width?
          Dim willCopyColumnWidth As Boolean = copyPasteProperties.CopyColumnWidth

          '--- Set the property object to copy column width.
          copyPasteProperties.CopyColumnWidth = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyComments">
            <Doc>
        <summary>
          <para>A boolean value indicating whether or not to copy comments.  If this value is set to true, then any comments attached to cells in the copy area will be copied.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Is the property object set to copy comments?
          boolean willCopyComments = copyPasteProperties.CopyComments;

          //--- Set the property object to copy cell values.
          copyPasteProperties.CopyComments = true;
        </code>
            <br/>
            <code>

          '--- Is the property object set to copy comments?
          Dim willCopyComments As Boolean = copyPasteProperties.CopyComments

          '--- Set the property object to copy comments.
          copyPasteProperties.CopyComments = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyFormatting">
            <Doc>
        <summary>
          <para>A boolean value indicating whether or not to copy cell formatting.  Cell formatting includes font, color, number formatting, fill color, fill pattern and borders.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Is the property object set to copy cell formatting?
          boolean willCopyFormatting = copyPasteProperties.CopyFormatting;

          //--- Set the property object to copy cell formatting.
          copyPasteProperties.CopyFormatting = true;
        </code>
            <br/>
            <code>

          '--- Is the property object set to copy cell formatting?
          Dim willCopyFormatting As Boolean = copyPasteProperties.CopyFormatting

          '--- Set the property object to copy cell formatting.
          copyPasteProperties.CopyFormatting = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyFormulas">
            <Doc>
        <summary>
          <para>A boolean value indicating whether or not to copy cell formulas.  </para>
        </summary>
        <remarks>
          <para>If this property is set to true, then the formula will be copied.  If this value is set to false and the CopyValues property is set to true, then only the final result of the formula, and not the formula itself, will be copied.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Is the property object set to copy formulas?
          boolean willCopyFormulas = copyPasteProperties.CopyFormulas;

          //--- Set the property object to copy formulas.
          copyPasteProperties.CopyFormulas = true;
        </code>
            <br/>
            <code>

          '--- Is the property object set to copy formulas?
          Dim willCopyFormulas As Boolean = copyPasteProperties.CopyFormulas

          '--- Set the property object to copy cell values.
          copyPasteProperties.CopyFormulas = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyMergedCells">
            <Doc>
        <summary>
          <para>A boolean value indicating whether or not to copy merged cells. </para>
        </summary>
        <remarks>
          <para>If this value is set to false, any content inside merged cells in the source worksheet will be ignored.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Is the property object set to copy merged cells?
          boolean willCopyMergedCells = copyPasteProperties.CopyMergedCells;

          //--- Set the property object to copy cell values.
          copyPasteProperties.CopyMergedCells = true;
        </code>
            <br/>
            <code>

          '--- Is the property object set to copy merged cells?
          Dim willCopyMergedCells As Boolean = copyPasteProperties.CopyMergedCells

          '--- Set the property object to copy merged cells.
          copyPasteProperties.CopyMergedCells = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyRowHeight">
            <Doc>
        <summary>
          <para>A boolean value indicating whether or not to copy row height.  </para>
        </summary>
        <remarks>
          <para>If this value is set to true, then row height of rows in the destination worksheet will be adjusted to match the row height from the corresponding row in the source worksheet.  It is recommended that you do not turn on this setting without testing the results as multiple copy-paste operations into a worksheet may have undesired affects.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Is the property object set to copy row height?
          boolean willCopyRowHeight = copyPasteProperties.CopyRowHeight;

          //--- Set the property object to copy cell values.
          copyPasteProperties.CopyRowHeight = true;
        </code>
            <br/>
            <code>

          '--- Is the property object set to copy row height?
          Dim willCopyRowHeight As Boolean = copyPasteProperties.CopyRowHeight

          '--- Set the property object to copy row height.
          copyPasteProperties.CopyRowHeight = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyValues">
            <Doc>
        <summary>
          <para>A boolean value indicating whether or not to copy cell values.  If the CopyFormulas property is set to false, then the final value of any formulas will be copied.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Is the property object set to copy cell values?
          boolean willCopyValues = copyPasteProperties.CopyValues;

          //--- Set the property object to copy cell values.
          copyPasteProperties.CopyValues = true;
        </code>
            <br/>
            <code>

          '--- Is the property object set to copy cell values?
          Dim willCopyValues As Boolean = copyPasteProperties.CopyValues

          '--- Set the property object to copy cell values.
          copyPasteProperties.CopyValues = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyPasteType">
            <Doc>
        <summary>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyPasteType"/> value specifies the type of data that will be copied.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyPasteType.All">
            <Doc>
          <summary>Copies all currently supported types, except for row height and column width.  Note: The behavior of <c>All</c> may change in the future as additional features are added to the <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CopyPaste(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Area,SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties)"/> method.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyPasteType.AllPlusRowHeightAndColumnWidth">
            <Doc>
          <summary>Copies all currently supported types, including row height and column width.  Note: If you call <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CopyPaste(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Area,SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties)"/> multiple times on the same worksheet, using this setting may have undesired results.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyPasteType.FormulasAndFormatting">
            <Doc>
          <summary>Copy formulas and cell and number formatting.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyPasteType.None">
            <Doc>
          <summary>Copies nothing.  You must then set the behavior of CopyPaste by setting individual properties on the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties"/> object before calling the <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CopyPaste(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Area,SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties)"/> method.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyPasteType.ValuesAndFormatting">
            <Doc>
          <summary>Copy cell values and cell and number formatting.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyPasteType.ValuesFormulasAndFormatting">
            <Doc>
          <summary>Copy cell values, formulas, and cell and number formatting.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyPasteType.ValuesOnly">
            <Doc>
          <summary>Copy only cell values.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyPasteType.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;CopyPasteProperties&quot;]/Member[@signature=&quot;CopyPasteProperties.CopyPasteType&quot;]/Member[@signature=&quot;CopyPasteProperties.CopyPasteType.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyPasteType.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;CopyPasteProperties&quot;]/Member[@signature=&quot;CopyPasteProperties.CopyPasteType&quot;]/Member[@signature=&quot;CopyPasteProperties.CopyPasteType.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyPasteType.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;CopyPasteProperties&quot;]/Member[@signature=&quot;CopyPasteProperties.CopyPasteType&quot;]/Member[@signature=&quot;CopyPasteProperties.CopyPasteType.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyPasteType.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;CopyPasteProperties&quot;]/Member[@signature=&quot;CopyPasteProperties.CopyPasteType&quot;]/Member[@signature=&quot;CopyPasteProperties.CopyPasteType.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyPasteType.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;CopyPasteProperties&quot;]/Member[@signature=&quot;CopyPasteProperties.CopyPasteType&quot;]/Member[@signature=&quot;CopyPasteProperties.CopyPasteType.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties"/> contains a set of properties that can be used when importing data into a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet"/> or <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/>. To return a <c>DataImportProperties</c> object, call <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateDataImportProperties"/>.</para>
      </summary>
      <example>
        <para>
          <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          DataImportProperties importProps = wb.CreateDataImportProperties();
        </code>
          <br/>
          <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim importProps As DataImportProperties = wb.CreateDataImportProperties()
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.ALLCOLUMNS">
            <Doc>
        <summary>
          <para>255</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.ALLROWS">
            <Doc>
        <summary>
          <para>65536</para>
        </summary>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataImportProperties&quot;]/Member[@signature=&quot;DataImportProperties.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataImportProperties&quot;]/Member[@signature=&quot;DataImportProperties.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.ColumnIndexFilter">
            <Doc>
        <summary>
          <para>Use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.ColumnIndexFilter"/> to select  specific columns within the imported data.  Only the specified columns will be imported to the worksheet.</para>
        </summary>
        <remarks>
          <para>If the length of the specified array is greater than  <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.MaxColumns"/>, or exceeds the size of the target area  and <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.Truncate"/> is set to <c>true</c>,  the smaller value will be used.</para>
          <para>Using  <c>ColumnIndexFilter</c> overwrites  any previous <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.ColumnNameFilter"/> setting.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get ColumnIndexFilter
          int[] arrFilter = importProps.ColumnIndexFilter;

          //--- Set ColumnIndexFilter
          importProps.ColumnIndexFilter = arrFilter;
        </code>
            <br/>
            <code>

          '--- Get ColumnIndexFilter
          Dim arrFilter() As Integer = importProps.ColumnIndexFilter

          '--- Set ColumnIndexFilter
          importProps.ColumnIndexFilter = arrFilter
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.ColumnNameFilter">
            <Doc>
        <summary>
          <para>Use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.ColumnNameFilter"/> to select  specific columns within the imported data.  Only the  specified columns will be imported to the worksheet.</para>
        </summary>
        <remarks>
          <para>If the length of the specified array is greater than  <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.MaxColumns"/>, or exceeds the size of the target area  and <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.Truncate"/> is set to <c>true</c>,  the smaller value will be used.</para>
          <para>Using   <c>ColumnNameFilter</c> overwrites  any previous <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.ColumnIndexFilter"/> setting.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get ColumnNameFilter
          string[] arrNames = importProps.ColumnNameFilter;

          //--- Set ColumnNameFilter
          importProps.ColumnNameFilter = arrNames;
        </code>
            <br/>
            <code>

          '--- Get ColumnNameFilter
          Dim arrNames() As String = importProps.ColumnNameFilter

          '--- Set ColumnNameFilter
          importProps.ColumnNameFilter = arrNames
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.IgnoreNulls">
            <Doc>
        <summary>
          <para>Sets or returns whether NULL values in the imported dataset be ignored or converted to blank cells. Blank cells will override existing formulas or cell values.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get IgnoreNulls
          bool ignoreNulls = importProps.ignoreNulls;

          //--- Set IgnoreNull
          importProps.IgnoreNulls = true;
        </code>
            <br/>
            <code>

          '--- Get IgnoreNulls
          Dim ignoreNulls As Boolean = importProps.IgnoreNulls

          '--- Set IgnoreNulls
          importProps.IgnoreNulls = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.MaxColumns">
            <Doc>
        <summary>
          <para>Sets or returns the maximum number of columns to import from the data source.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get MaxColumns
          int maxCols = importProps.MaxColumns;

          //--- Set MaxColumns
          importProps.MaxColumns = 20;
        </code>
            <br/>
            <code>

          '--- Get MaxColumns
          Dim maxCols As Integer = importProps.MaxColumns

          '--- Set MaxColumns
          importProps.MaxColumns = 20
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.MaxRows">
            <Doc>
        <summary>
          <para>Sets or returns the maximum number of rows to import from the data source.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get MaxRows
          int maxRows = importProps.MaxRows;

          //--- Set MaxRows
          importProps.MaxRows = 20;
        </code>
            <br/>
            <code>

          '--- Get MaxRows
          Dim maxRows As Integer = importProps.MaxRows

          '--- Set MaxRows
          importProps.MaxRows = 20
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.Transpose">
            <Doc>
        <summary>
          <para>When data is imported from a two-dimensional or rectangular array, the first dimension of the array corresponds to row and the second to column. </para>
        </summary>
        <remarks>
          <para>
            <code>
{{"A","X"},{"B","Y"},{"C","Z"}}
</code>
            <br/>Would be entered in the worksheet as:</para>
          <list type="table">
            <item>
              <term>A</term>
              <description>X</description>
            </item>
            <item>
              <term>B</term>
              <description>Y</description>
            </item>
            <item>
              <term>C</term>
              <description>Z</description>
            </item>
          </list>
          <para>If <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.Transpose"/> is set to <c>true</c>, the format will be [column][row] and  <br/><code>
{{"A","B","C"},{"X","Y","Z"}}
</code> would be inserted as:</para>
          <list type="table">
            <item>
              <term>A</term>
              <description>X</description>
            </item>
            <item>
              <term>B</term>
              <description>Y</description>
            </item>
            <item>
              <term>C</term>
              <description>Z</description>
            </item>
          </list>
          <para>Transpose is a read/write property.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get Transpose
          boolean transpose = importProps.Transpose;

          //--- Set Transpose
          importProps.Transpose = true;
        </code>
            <br/>
            <code>

          '--- Get Transpose
          Dim transpose As Boolean = importProps.Transpose

          '--- Set Transpose
          importProps.Transpose = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.Truncate">
            <Doc>
        <summary>
          <para>Sets whether ExcelWriter should truncate imported data rows and columns that do not fit within the target rows and columns in the spreadsheet. If <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.Truncate"/> is not enabled, an exception will be thrown if the number of rows or columns imported exceeds the number of target rows or columns in the spreadsheet.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Truncate
          bool truncate = importProps.Truncate;

          //--- Set Truncate
          importProps.Truncate = true;
        </code>
            <br/>
            <code>

          '--- Get Truncate
          Dim truncate As Boolean = importProps.Truncate

          '--- Set Truncate
          importProps.Truncate = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.TruncateColumns">
            <Doc>
        <summary>
          <para>Sets or returns whether imported data columns will be truncated if the number of columns imported exceeds the number of target columns in the spreadsheet.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get TruncateColumns
          bool truncateCols = importProps.TruncateColumns;

          //--- Set TruncateColumns
          importProps.TruncateColumns = true;
        </code>
            <br/>
            <code>

          '--- Get TruncateColumns
          Dim truncateCols As Boolean = importProps.TruncateColumns

          '--- Set TruncateColumns
          importProps.TruncateColumns = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.TruncateRows">
            <Doc>
        <summary>
          <para>Sets or returns whether imported data rows will be truncated if the number of rows imported exceeds the number of target rows in the spreadsheet.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get TruncateRows
          bool truncateRows = importProps.TruncateRows;

          //--- Set TruncateRows
          importProps.TruncateRows = true;
        </code>
            <br/>
            <code>

          '--- Get TruncateRows
          Dim truncateRows As Boolean = importProps.TruncateRows

          '--- Set TruncateRows
          importProps.TruncateRows = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.UseColumnNames">
            <Doc>
        <summary>
          <para>Sets or returns whether to import column names to the first row (or first column if <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties.Transpose"/> is set to <c>true</c> ) of the imported data's target cells.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get UseColumnNames
          bool importColNames = importProps.UseColumnNames

          //--- Set UseColumnNames
          importProps.UseColumnNames = true;
        </code>
            <br/>
            <code>

          '--- Get UseColumnNames
          Dim importColNames As Boolean = oDataImportProperties.UseColumnNames

          '--- Set UseColumnNames
          importProps.UseColumnNames = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.DataPoint">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataPoint"/> object represents a data point in a chart. To return a <c>DataPoint</c> object, use <see cref="!:Series[Int32]"/>.</para>
      </summary>
      <remarks>
        <para>The <c>DataPoint</c> class extends <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion"/>.</para>
      </remarks>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataPoint.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataPoint&quot;]/Member[@signature=&quot;DataPoint.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataPoint.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataPoint&quot;]/Member[@signature=&quot;DataPoint.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataPoint.DistanceFromCenter">
            <Doc>
        <summary>
          <para>Sets or returns the distance from the center of a pie chart as a percentage of the diameter.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataPoint.Interior">
            <Doc>
        <summary>
          <para>Returns a http://wiki.softartisans.com/display/EW70/ChartInterior+object, representing the area of a data point.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataPoint.IsOnSecondaryPieorBar">
            <Doc>
        <summary>
          <para>Sets or returns whether this data point is located on the secondary pie or bar in a Pie of Pie or Bar of Pie chart. For this to take effect, you must set <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSplitType"/> to http://wiki.softartisans.com/display/EW70/SettingsPieDoughnut.BopPopSplit#Custom.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataPoint.Label">
            <Doc>
        <summary>
          <para>Returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.SeriesDataLabel"/> object for the data point.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataPoint.LegendEntryFont">
            <Doc>
        <summary>
          <para>Sets or returns the font for this point's legend entry. This only applies when the series contains a single data point, as in pie charts.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataPoint.Line">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine"/> object representing either the border around this data point - for most chart types - or the data point line itself, for line charts.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataPoint.Marker">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker"/> object, representing the data marker of a point on a line, radar, or scatter series.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataPoint.ShowLegendEntry">
            <Doc>
        <summary>
          <para>Sets or returns whether the entry in the legend for this series will be shown. This only applies when the series contains a single data point, as in pie charts.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker"/> class represents the style and formatting of data markers in line, radar, and scatter charts. To return a <c>DataPointMarker</c> object, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.DataPointMarker"/>.</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataPointMarker&quot;]/Member[@signature=&quot;DataPointMarker.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataPointMarker&quot;]/Member[@signature=&quot;DataPointMarker.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.BackgroundColor">
            <Doc>
        <summary>
          <para>Sets or returns the background color of series data markers.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.ForegroundColor">
            <Doc>
        <summary>
          <para>Sets or returns the foreground color of series data markers.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.HasShadow">
            <Doc>
        <summary>
          <para>Sets or returns whether data markers will be displayed with a shadow effect.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.MarkerType">
            <Doc>
        <summary>
          <para>Sets or returns a data marker type for the series.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.ShowBackgroundColor">
            <Doc>
        <summary>
          <para>Sets or returns whether the background color of series data markers will be visible or transparent.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.ShowForegroundColor">
            <Doc>
        <summary>
          <para>Sets or returns whether the foreground color of series data markers will be visible or transparent.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.Size">
            <Doc>
        <summary>
          <para>Sets or returns the size of series data markers, in points (1/72 inch).</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.Visible">
            <Doc>
        <summary>
          <para>Sets or returns whether data markers will be hidden or displayed.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.ShapeType">
            <Doc>
        <summary>
          <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.ShapeType"/> class contains all available data point marker shapes.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.ShapeType.Circle">
            <Doc>
          <summary>Circle</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.ShapeType.Diamond">
            <Doc>
          <summary>Diamond</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.ShapeType.DowJones">
            <Doc>
          <summary>Dow Jones</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.ShapeType.None">
            <Doc>
          <summary>Data point markers will not be displayed.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.ShapeType.PlusSign">
            <Doc>
          <summary>Plus sign</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.ShapeType.Square">
            <Doc>
          <summary>Square</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.ShapeType.StandardDeviation">
            <Doc>
          <summary>Standard deviation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.ShapeType.Star">
            <Doc>
          <summary>Star</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.ShapeType.Triangle">
            <Doc>
          <summary>Triangular</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.ShapeType.X">
            <Doc>
          <summary>X</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.ShapeType.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataPointMarker&quot;]/Member[@signature=&quot;DataPointMarker.ShapeType&quot;]/Member[@signature=&quot;DataPointMarker.ShapeType.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.ShapeType.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataPointMarker&quot;]/Member[@signature=&quot;DataPointMarker.ShapeType&quot;]/Member[@signature=&quot;DataPointMarker.ShapeType.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.ShapeType.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataPointMarker&quot;]/Member[@signature=&quot;DataPointMarker.ShapeType&quot;]/Member[@signature=&quot;DataPointMarker.ShapeType.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.ShapeType.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataPointMarker&quot;]/Member[@signature=&quot;DataPointMarker.ShapeType&quot;]/Member[@signature=&quot;DataPointMarker.ShapeType.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataPointMarker.ShapeType.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataPointMarker&quot;]/Member[@signature=&quot;DataPointMarker.ShapeType&quot;]/Member[@signature=&quot;DataPointMarker.ShapeType.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation"/>  object represents a rule for validating data entered in cells.  The rule may be applied to a cell or a set of cells.  The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Workbook"/> class contains several <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateDataValidation(SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType,SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ComparisonType,System.String,System.String)"/> methods for creating <c>DataValidation</c>  objects.  To apply a <c>DataValidation</c>  object to a cell or group of cells, use <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Area.SetDataValidation(SoftArtisans.OfficeWriter.ExcelWriter.DataValidation)"/> or <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Range.SetDataValidation(SoftArtisans.OfficeWriter.ExcelWriter.DataValidation)"/>.</para>
      </summary>
      <remarks>
        <para>In Microsoft Excel, data validation rules are created through the <b>Data Validation</b> dialog.  To open this dialog, open the <b>Data</b> menu and select <b>Validation</b>.</para>
      </remarks>
      <example>
        <para>
          <code>

          ExcelApplication xlw = new ExcelApplication();
          Workbook wb = xlw.Create();

          //--- Create a data validation rule:
          DataValidation dv = wb.CreateDataValidation(
               DataValidation.ValidationType.WholeNumber,
               DataValidation.ComparisonType.Between,
               "=1", "=100");
          String formula = "Sheet1!A2:F33 Sheet2!A5:D15";

          //--- Apply the rule to a Range:
          wb.CreateRange(formula).SetDataValidation(dv);
        </code>
          <br/>
          <code>

          Dim xlw As New ExcelApplication()
          Dim wb As Workbook = xlw.Create()

          '--- Create a data validation rule:
          Dim dv As DataValidation = wb.CreateDataValidation( _
               DataValidation.ValidationType.WholeNumber, _
               DataValidation.ComparisonType.Between, _
               "=1", "=100")
          Dim formula As String = "Sheet1!A2:F33 Sheet2!A5:D15"

          '--- Apply the rule to a Range:
          wb.CreateRange(formula).SetDataValidation(dv)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.Clear">
            <Doc>
        <summary>
          <para>Sets all properties of the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation"/> object to an uninitialized state.</para>
        </summary>
        <example>
          <para>
            <code>
cell.DataValidation.Clear();</code>
            <br/>
            <code>
cell.DataValidation.Clear()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataValidation&quot;]/Member[@signature=&quot;DataValidation.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataValidation&quot;]/Member[@signature=&quot;DataValidation.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.SetAllowedType(SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType,SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ComparisonType,System.Object,System.Object)">
            <Doc>
        <summary>
          <para>Sets the allowed data type, comparison type, and minimum and maximum values to use when validating a cell entry.</para>
        </summary>
        <param name="allowedType">
          <para>The data type allowed in the cell.</para>
        </param>
        <param name="comparison">
          <para>The comparison used to validate the cell's value.</para>
        </param>
        <param name="minimumValue">
          <para>A primitive or Date representing the cell's maximum value.</para>
        </param>
        <param name="maximumValue">
          <para>A primitive or Date representing the cell's minimum value.</para>
        </param>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.SetAllowedType(SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType,SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ComparisonType,System.Object)">
            <Doc>
        <summary>
          <para>Sets the allowed data type, comparison type, and minimum value to use when validating a cell entry. </para>
        </summary>
        <param name="allowedType">
          <para>The data type allowed in the cell.</para>
        </param>
        <param name="comparison">
          <para>The comparison used to validate the cell's value.</para>
        </param>
        <param name="value">
          <para>A primitive or Date representing data validation's constraint value.</para>
        </param>
        <remarks>
          <para>This method may only be used for ValidationTypes other than List and Custom.  This method may only be used for ComparisonTypes other than Between and NotBetween. See object documentation for the ValidationType parameter type combinations accepted by this method.</para>
        </remarks>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.SetAllowedType(SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType,System.Object)">
            <Doc>
        <summary>
          <para>Sets the allowed data type and a set of valid values to use when validating a cell entry. </para>
        </summary>
        <param name="allowedType">
          <para>The data type allowed in the cell.</para>
        </param>
        <param name="sourceArray">
          <para>For 'List' allowed type: the array of valid values for the cell.</para>
        </param>
        <remarks>
          <para>This method may only be used for ValidationTypes of List, Custom, or AnyValue. See object documentation for the ValidationType parameter type combinations accepted by this method.</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.AllowedType">
            <Doc>
        <summary>
          <para>Returns the type of value that may be entered in a cell.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.Comparison">
            <Doc>
        <summary>
          <para>Returns the type of comparison that will be used to validate a value entered in a cell with a data validation rule.  </para>
        </summary>
        <remarks>
          <para>For validation types where ComparisonType is not allowed, (List, Custom, and AnyValue) this method will throw an exception.</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ErrorAlert">
            <Doc>
        <summary>
          <para>Sets or returns  the content of the error alert message displayed when invalid data is entered in a cell.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ErrorAlertStyle">
            <Doc>
        <summary>
          <para>Sets or returns the style of error alert to display if error alerts are enabled.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ErrorAlertTitle">
            <Doc>
        <summary>
          <para>Sets or returns  the title of the error alert dialog that is displayed when invalid data is entered in a cell.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.IgnoreBlanks">
            <Doc>
        <summary>
          <para>Sets or returns whether the data validation rule should ignore blank cells.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.InputMessage">
            <Doc>
        <summary>
          <para>Sets or returns the content of the input message dialog that is displayed when the user selects a cell with a data validation rule.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.MaximumValue">
            <Doc>
        <summary>
          <para>Sets or returns the maximum value that may be entered in a cell with a data validation rule. </para>
        </summary>
        <remarks>
          <para>See object documentation for the ValidationType value type combinations accepted by this method.  For ValidationTypes (AnyValue, List, Custom) and ComparisonTypes (anything other than Between and NotBetween) which do not support a maximum value,  this method will throw an exception.</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.MinimumValue">
            <Doc>
        <summary>
          <para>Sets or returns the minimum value that may be entered in a cell with a data validation rule. </para>
        </summary>
        <remarks>
          <para>See object documentation for the ValidationType value type combinations accepted by this method.  For ValidationTypes which do not support a minimum value, (DataValidation.ValidationType.AnyValue) this method will throw an exception.</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ShowErrorAlert">
            <Doc>
        <summary>
          <para>Sets or returns whether Excel should display an error alert if invalid data is entered.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ShowInputMessage">
            <Doc>
        <summary>
          <para>Sets or returns whether to show a message when the user selects a cell to which a data validation rule applies.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.Title">
            <Doc>
        <summary>
          <para>Sets or returns the title of the input message dialog that is displayed when the user selects a cell with a data validation rule.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.UseListDropdown">
            <Doc>
        <summary>
          <para>Sets or returns whether a drop-down list will be used to display valid values.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ComparisonType">
            <Doc>
        <summary>
          <para>The type of comparison that will be used for validating the value of the cell.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ComparisonType.Between">
            <Doc>
          <summary>Between</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ComparisonType.EqualTo">
            <Doc>
          <summary>Equal to</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ComparisonType.GreaterThan">
            <Doc>
          <summary>Greater than</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ComparisonType.GreaterThanOrEqualTo">
            <Doc>
          <summary>Greater than or equal to</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ComparisonType.LessThan">
            <Doc>
          <summary>Less than</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ComparisonType.LessThanOrEqualTo">
            <Doc>
          <summary>Less than or equal to</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ComparisonType.NotBetween">
            <Doc>
          <summary>Not between</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ComparisonType.NotEqualTo">
            <Doc>
          <summary>Not Equal to</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ComparisonType.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataValidation&quot;]/Member[@signature=&quot;DataValidation.ComparisonType&quot;]/Member[@signature=&quot;DataValidation.ComparisonType.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ComparisonType.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataValidation&quot;]/Member[@signature=&quot;DataValidation.ComparisonType&quot;]/Member[@signature=&quot;DataValidation.ComparisonType.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ComparisonType.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataValidation&quot;]/Member[@signature=&quot;DataValidation.ComparisonType&quot;]/Member[@signature=&quot;DataValidation.ComparisonType.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ComparisonType.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataValidation&quot;]/Member[@signature=&quot;DataValidation.ComparisonType&quot;]/Member[@signature=&quot;DataValidation.ComparisonType.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ComparisonType.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataValidation&quot;]/Member[@signature=&quot;DataValidation.ComparisonType&quot;]/Member[@signature=&quot;DataValidation.ComparisonType.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ErrorAlertStyleType">
            <Doc>
        <summary>
          <para>Type style of the icon in the error alert message box.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ErrorAlertStyleType.Information">
            <Doc>
          <summary>A white bubble with a blue 'i'.  The message box buttons will be: 'OK' and 'Cancel'.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ErrorAlertStyleType.Stop">
            <Doc>
          <summary>A red circle with a white 'X'.  The message box buttons will be: 'Retry' and 'Cancel'.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ErrorAlertStyleType.Warning">
            <Doc>
          <summary>A yellow triangle with a black '!'.  The message box buttons will be: 'Yes', 'No', and 'Cancel'.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ErrorAlertStyleType.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataValidation&quot;]/Member[@signature=&quot;DataValidation.ErrorAlertStyleType&quot;]/Member[@signature=&quot;DataValidation.ErrorAlertStyleType.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ErrorAlertStyleType.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataValidation&quot;]/Member[@signature=&quot;DataValidation.ErrorAlertStyleType&quot;]/Member[@signature=&quot;DataValidation.ErrorAlertStyleType.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ErrorAlertStyleType.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataValidation&quot;]/Member[@signature=&quot;DataValidation.ErrorAlertStyleType&quot;]/Member[@signature=&quot;DataValidation.ErrorAlertStyleType.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ErrorAlertStyleType.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataValidation&quot;]/Member[@signature=&quot;DataValidation.ErrorAlertStyleType&quot;]/Member[@signature=&quot;DataValidation.ErrorAlertStyleType.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ErrorAlertStyleType.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataValidation&quot;]/Member[@signature=&quot;DataValidation.ErrorAlertStyleType&quot;]/Member[@signature=&quot;DataValidation.ErrorAlertStyleType.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType">
            <Doc>
        <summary>
          <para>The data type allowed as the cell's value.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType.AnyValue">
            <Doc>
          <summary>Anything</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType.Custom">
            <Doc>
          <summary>A custom type</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType.Date">
            <Doc>
          <summary>A date</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType.Decimal">
            <Doc>
          <summary>A floating point number</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType.List">
            <Doc>
          <summary>A list</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType.TextLength">
            <Doc>
          <summary>A text list</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType.Time">
            <Doc>
          <summary>A time</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType.WholeNumber">
            <Doc>
          <summary>A whole number</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataValidation&quot;]/Member[@signature=&quot;DataValidation.ValidationType&quot;]/Member[@signature=&quot;DataValidation.ValidationType.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataValidation&quot;]/Member[@signature=&quot;DataValidation.ValidationType&quot;]/Member[@signature=&quot;DataValidation.ValidationType.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataValidation&quot;]/Member[@signature=&quot;DataValidation.ValidationType&quot;]/Member[@signature=&quot;DataValidation.ValidationType.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataValidation&quot;]/Member[@signature=&quot;DataValidation.ValidationType&quot;]/Member[@signature=&quot;DataValidation.ValidationType.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DataValidation&quot;]/Member[@signature=&quot;DataValidation.ValidationType&quot;]/Member[@signature=&quot;DataValidation.ValidationType.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties"/> object represents properties of a spreadsheet. These properties are displayed in the file's Properties sheet which can be opened in Excel (File -&gt; Properties), or by right-clicking the file icon and selecting "Properties." The <c>DocumentProperties</c> class can be used to remove personal information from an existing spreadsheet, or to populate searchable fields that can be used to locate the file.</para>
      </summary>
      <remarks>
        <para>To return a <c>DocumentProperties</c> object, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.DocumentProperties"/>.</para>
      </remarks>
      <example>
        <para>
          <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          DocumentProperties docProps = wb.DocumentProperties;
        </code>
          <br/>
          <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim docProps = wb.DocumentProperties
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.Clear">
            <Doc>
        <summary>
          <para>Clears all properties contained in the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties"/> object, removing them from the workbook's Properties sheet.</para>
        </summary>
        <example>
          <para>
            <code>
docProps.Clear();</code>
            <br/>
            <code>
docProps.Clear()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DocumentProperties&quot;]/Member[@signature=&quot;DocumentProperties.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.GetCustomProperty(System.String)">
            <Doc>
        <summary>
          <para>Returns the value of the custom property for the specified key. The return value can be of the following types, depending on the property: String, Double, Integer, Boolean or DateTime.  (To create a custom property, use <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.SetCustomProperty(System.String,System.Object)"/>.)</para>
        </summary>
        <param name="key">
          <para>The key or name of the custom property.</para>
        </param>
        <returns>
          <para>The value of the custom property.</para>
        </returns>
        <example>
          <para>
            <code>
Object reviewedBy = docProps.GetCustomProperty("Reviewed by");</code>
            <br/>
            <code>
Dim reviewedBy As Object = docProps.GetCustomProperty("Reviewed by")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DocumentProperties&quot;]/Member[@signature=&quot;DocumentProperties.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.RestoreDefaults">
            <Doc>
        <summary>
          <para>Restores document properties values to the default set of properties and clears all others. The default set of properties are Application, CreationDate, and LastSavedDate.</para>
        </summary>
        <example>
          <para>
            <code>
docProps.RestoreDefaults();</code>
            <br/>
            <code>
docProps.RestoreDefaults()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.SetCustomProperty(System.String,System.Object)">
            <Doc>
        <summary>
          <para>Use <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.SetCustomProperty(System.String,System.Object)"/> to create a custom document property.  Pass the method the name and value of the property.  The value can be one of the following types, depending on the property: String, Double, Integer, Boolean, or DateTime.</para>
        </summary>
        <param name="key">
          <para>The key or name of the custom property.</para>
        </param>
        <param name="value">
          <para>The value of the custom property.</para>
        </param>
        <example>
          <para>
            <code>
docProps.SetCustomProperty("Reviewed by", "J. Smith");</code>
            <br/>
            <code>
docProps.SetCustomProperty("Reviewed by", "J. Smith")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.Application">
            <Doc>
        <summary>
          <para>Sets or Returns the name of the Application that created the spreadsheet.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Application
          string app = docProps.Application;

          //--- Set Application
          docProps.Application = "SoftArtisans ExcelWriter";
        </code>
            <br/>
            <code>

          '--- Get Application
          Dim app As String = docProps.Application

          '--- Set Application
          docProps.Application = "SoftArtisans ExcelWriter"
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.Author">
            <Doc>
        <summary>
          <para>Sets or returns the author of the spreadsheet. Excel allows you to search for a file by author.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Application
          string author = docProps.Author;

          //--- Set Author
          docProps.Author = "J. Smith";
        </code>
            <br/>
            <code>

          '--- Get Application
          Dim author As String = docProps.Author

          '--- Set Author
          docProps.Author = "J. Smith"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.Category">
            <Doc>
        <summary>
          <para>Sets or returns the category of the spreadsheet. Excel allows you to search for a file by category.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Category
          string category = docProps.Category;

          //--- Set Category
          docProps.Category = "Sales Reports";
        </code>
            <br/>
            <code>

          '--- Get Category
          Dim category As String = docProps.Category

          '--- Set Category
          docProps.Category = "Sales Reports"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.Comments">
            <Doc>
        <summary>
          <para>Sets or returns the value of the Comments field in a workbook's Properties sheet. Excel allows you to search for a file using this value.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Comments
          string comments = docProps.Comments;

          //--- Set Comments
          docProps.Comments = "Generated by ExcelWriter";
        </code>
            <br/>
            <code>

          '--- Get Comments
          Dim comments As String = docProps.Comments

          '--- Set Comments
          docProps.Comments = "Generated by ExcelWriter"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.Company">
            <Doc>
        <summary>
          <para>Sets or returns the value of the Company field in a workbook's Properties sheet. Excel allows you to search for a file using this value.</para>
        </summary>
        <example>
          <code>

          //--- Get Company
          string company = docProps.Company;

          //--- Set Company
          docProps.Company = "SoftArtisans";
        </code>
          <br/>
          <code>

          '--- Get Company
          Dim company As String = docProps.Company

          '--- Set Company
          docProps.Company = "SoftArtisans"
        </code>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.CreationDate">
            <Doc>
        <summary>
          <para>Sets or returns the workbook's creation date. By default, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.CreationDate"/> returns the spreadsheet's actual creation date. You can set <c>CreationDate</c> to a different date, but this will not change the creation date displayed in the spreadsheet's Properties sheet.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get CreationDate
          DateTime createDate = docProps.CreationDate;

          //--- Set CreationDate
          docProps.CreationDate = new DateTime(2005, 08, 04);
        </code>
            <br/>
            <code>

          '--- Get CreationDate
          Dim createDate As DateTime = docProps.CreationDate

          '--- Set CreationDate
          docProps.CreationDate = New DateTime(2005, 08, 04)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.Item(SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn)">
            <Doc>
        <summary>
          <para>Returns the value of a specified built-in property. The value can be one of the following types, depending on the property: String, Double, Integer, Boolean or DateTime.</para>
        </summary>
        <param name="property">
          <para>The built-in property.</para>
        </param>
        <returns>
          <para>The value of the built-in property.</para>
        </returns>
        <example>
          <para>
            <code>

          //--- Get Property
          Object title = docProps[DocumentProperties.BuiltIn.Title];

          //--- Set Property
          docProps[DocumentProperties.BuiltIn.Title] = "xlw";
        </code>
            <br/>
            <code>

          '--- Get Property
          Dim title As Object = docProps(DocumentProperties.BuiltIn.Title)

          '--- Set Property
          docProps(DocumentProperties.BuiltIn.Title) = "xlw"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.Item(System.String)">
            <Doc>
        <summary>
          <para>Returns the value of a specified property. The value can be one of the following types, depending on the property: String, Double, Integer, Boolean or DateTime.</para>
        </summary>
        <param name="property">
          <para>The built-in property.</para>
        </param>
        <returns>
          <para>The value of the built-in property.</para>
        </returns>
        <example>
          <para>
            <code>

          //--- Get Property
          Object application = docProps["Application"];

          //--- Set Property
          docProps["Application"] = "xlw";
        </code>
            <br/>
            <code>

          '--- Get Property
          Dim application As Object = docProps("Application")

          '--- Set Property
          docProps("Application") = "xlw"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.Keywords">
            <Doc>
        <summary>
          <para>Sets or returns keywords that can be used to search for the spreadsheet. In Excel, a file's keywords are displayed in the Summary page of the Properties sheet.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Keywords
          string keywords = docProps.Keywords;

          //--- Set Keywords
          docProps.Keywords = "ExcelWriter, WordWriter, OfficeWriter";
        </code>
            <br/>
            <code>

          '--- Get Keywords
          Dim keywords As String = docProps.Keywords

          '--- Set Keywords
          docProps.Keywords = "ExcelWriter, WordWriter, OfficeWriter"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.LastSavedDate">
            <Doc>
        <summary>
          <para>Sets or returns the date on which the current spreadsheet was last saved. This value is not set by default, is not displayed in the spreadsheet's Properties sheet, and cannot be used to search for a file.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get LastSavedDate
          DateTime savedDate = docProps.LastSavedDate;

          //--- Set LastSavedDate
          docProps.LastSavedDate = new DateTime(2005, 08, 04);
        </code>
            <br/>
            <code>

          '--- Get LastSavedDate
          Dim savedDate As DateTime = docProps.LastSavedDate

          '--- Set LastSavedDate
          docProps.LastSavedDate = New DateTime(2005, 08, 04)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.Manager">
            <Doc>
        <summary>
          <para>Sets or returns the value of the Manager field in the spreadsheet's Properties sheet. Excel allows you to search for a file using this value.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Manager
          string manager = docProps.Manager;

          //--- Set Manager
          docProps.Manager = "J. Smith";
        </code>
            <br/>
            <code>

          '--- Get Manager
          Dim manager As String = docProps.Manager

          '--- Set Manager
          docProps.Manager = "J. Smith"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.Title">
            <Doc>
        <summary>
          <para>Sets or returns the value of the Title field in a workbook's Properties sheet. Excel allows you to search for a file using this value.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Title
          string title = docProps.Title;

          //--- Set Title
          docProps.Title = "Employees";
        </code>
            <br/>
            <code>

          '--- Get Title
          Dim title As String = docProps.Title

          '--- Set Title
          docProps.Title = "Employees"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn">
            <Doc>
        <summary>
          <para>
            <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn"/> contains a set of built-in document property fields.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn.Application">
            <Doc>
          <summary>Application</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn.Author">
            <Doc>
          <summary>Author</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn.Category">
            <Doc>
          <summary>Category</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn.Comments">
            <Doc>
          <summary>Comments</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn.Company">
            <Doc>
          <summary>Company</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn.CreationDate">
            <Doc>
          <summary>File creation date</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn.EditTime">
            <Doc>
          <summary>Edit time</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn.Keywords">
            <Doc>
          <summary>Keywords</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn.LastPrintedDate">
            <Doc>
          <summary>Last date the workbook was printed</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn.LastSavedBy">
            <Doc>
          <summary>User that saved the workbook last</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn.LastSavedDate">
            <Doc>
          <summary>Date the workbook was last save</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn.LinksUpToDate">
            <Doc>
          <summary>Whether or not links in the workbook are up-to-date</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn.Manager">
            <Doc>
          <summary>Manager</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn.Notes">
            <Doc>
          <summary>Notes</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn.RevisionNumber">
            <Doc>
          <summary>Revision number</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn.ScaleOrCrop">
            <Doc>
          <summary>Scale or crop</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn.Subject">
            <Doc>
          <summary>Subject</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn.Title">
            <Doc>
          <summary>Title</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DocumentProperties&quot;]/Member[@signature=&quot;DocumentProperties.BuiltIn&quot;]/Member[@signature=&quot;DocumentProperties.BuiltIn.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DocumentProperties&quot;]/Member[@signature=&quot;DocumentProperties.BuiltIn&quot;]/Member[@signature=&quot;DocumentProperties.BuiltIn.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DocumentProperties&quot;]/Member[@signature=&quot;DocumentProperties.BuiltIn&quot;]/Member[@signature=&quot;DocumentProperties.BuiltIn.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DocumentProperties&quot;]/Member[@signature=&quot;DocumentProperties.BuiltIn&quot;]/Member[@signature=&quot;DocumentProperties.BuiltIn.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.DocumentProperties.BuiltIn.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;DocumentProperties&quot;]/Member[@signature=&quot;DocumentProperties.BuiltIn&quot;]/Member[@signature=&quot;DocumentProperties.BuiltIn.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar">
            <Doc>
      <summary>
        <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar"/> object represents series error bars. Error bars graphically express potential error amounts relative to each data marker in a data series. You can add error bars to data series in two-dimensional area, bar, column, line, scatter, and bubble charts. In scatter and bubble charts, you can display error bars for x values, y values, or both.</para>
      </summary>
      <remarks>
        <para>To return an <c>ErrorBar</c> object representing Y Error bars, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.ErrorBarX"/>.</para>
      </remarks>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ErrorBar&quot;]/Member[@signature=&quot;ErrorBar.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ErrorBar&quot;]/Member[@signature=&quot;ErrorBar.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.CustomMinusFormula">
            <Doc>
        <summary>
          <para>Sets or returns a custom negative error value for the error bars.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.CustomPlusFormula">
            <Doc>
        <summary>
          <para>Sets or returns a custom positive error value for the error bars.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.Direction">
            <Doc>
        <summary>
          <para>Sets or returns the direction in which the error bars will be displayed.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.Line">
            <Doc>
        <summary>
          <para>Returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine"/> object used to format the appearance of the error bar's line.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.TShaped">
            <Doc>
        <summary>
          <para>Sets or returns whether the error bars will be T shaped.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.Value">
            <Doc>
        <summary>
          <para>Sets or returns the error amount. The meaning of this value is dependent on the value of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.ErrorValueType"/>.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.ValueType">
            <Doc>
        <summary>
          <para>Sets or returns the type of value to use as the error amount. Depending on the error type, the amount may be a fixed value, percentage, standard deviation, standard error, or a custom value.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.BarDirection">
            <Doc>
        <summary>
          <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.BarDirection"/> class contains the available direction combinations for error bar display.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.BarDirection.Both">
            <Doc>
          <summary>Both positive and negative error bars will be displayed.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.BarDirection.Minus">
            <Doc>
          <summary>Negative error bars will be displayed.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.BarDirection.None">
            <Doc>
          <summary>Error bars will not be displayed.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.BarDirection.Plus">
            <Doc>
          <summary>Positive error bars will be displayed.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.BarDirection.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ErrorBar&quot;]/Member[@signature=&quot;ErrorBar.BarDirection&quot;]/Member[@signature=&quot;ErrorBar.BarDirection.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.BarDirection.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ErrorBar&quot;]/Member[@signature=&quot;ErrorBar.BarDirection&quot;]/Member[@signature=&quot;ErrorBar.BarDirection.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.BarDirection.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ErrorBar&quot;]/Member[@signature=&quot;ErrorBar.BarDirection&quot;]/Member[@signature=&quot;ErrorBar.BarDirection.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.BarDirection.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ErrorBar&quot;]/Member[@signature=&quot;ErrorBar.BarDirection&quot;]/Member[@signature=&quot;ErrorBar.BarDirection.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.BarDirection.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ErrorBar&quot;]/Member[@signature=&quot;ErrorBar.BarDirection&quot;]/Member[@signature=&quot;ErrorBar.BarDirection.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.ErrorValueType">
            <Doc>
        <summary>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.ErrorValueType"/> value specifies an error bar's error value type.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.ErrorValueType.Custom">
            <Doc>
          <summary>The error value specified by <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.Value"/> is a custom value.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.ErrorValueType.FixedValue">
            <Doc>
          <summary>The error value specified by <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.Value"/> is a fixed value.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.ErrorValueType.Percentage">
            <Doc>
          <summary>The error value specified by <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.Value"/> is a percentage.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.ErrorValueType.StandardDeviation">
            <Doc>
          <summary>The error value specified by <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.Value"/> is a standard deviation.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.ErrorValueType.StandardError">
            <Doc>
          <summary>Standard error</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.ErrorValueType.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ErrorBar&quot;]/Member[@signature=&quot;ErrorBar.ErrorValueType&quot;]/Member[@signature=&quot;ErrorBar.ErrorValueType.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.ErrorValueType.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ErrorBar&quot;]/Member[@signature=&quot;ErrorBar.ErrorValueType&quot;]/Member[@signature=&quot;ErrorBar.ErrorValueType.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.ErrorValueType.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ErrorBar&quot;]/Member[@signature=&quot;ErrorBar.ErrorValueType&quot;]/Member[@signature=&quot;ErrorBar.ErrorValueType.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.ErrorValueType.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ErrorBar&quot;]/Member[@signature=&quot;ErrorBar.ErrorValueType&quot;]/Member[@signature=&quot;ErrorBar.ErrorValueType.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar.ErrorValueType.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ErrorBar&quot;]/Member[@signature=&quot;ErrorBar.ErrorValueType&quot;]/Member[@signature=&quot;ErrorBar.ErrorValueType.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication">
            <Doc>
      <summary>
        <para>
          <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication"/> is the main class for pure code-based workbook generation (for information about template-based workbook generation, see <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate"/> ). This class is an engine used to open, create, and write (save or stream to a browser) workbooks. A single instance of <c>ExcelApplication</c> can generate multiple workbooks.</para>
      </summary>
      <remarks>
        <para>A generated workbook is represented by the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Workbook"/> class.</para>
        <para>To create an instance of <c>ExcelApplication</c>:</para>
        <para>In C#:</para>
        <list type="bullet">
          <item>
            <description>Import <c>ExcelApplication</c> to the C# page: <code>
using SoftArtisans.OfficeWriter.ExcelWriter;</code></description>
          </item>
        </list>
        <list type="bullet">
          <item>
            <description>Create an <c>ExcelApplication</c> object: <code>
ExcelApplication xla = new ExcelApplication();</code></description>
          </item>
        </list>
        <para>In VB.NET:</para>
        <list type="bullet">
          <item>
            <description>Import <c>ExcelApplication</c> to the VB.NET page: <code>
Imports SoftArtisans.OfficeWriter.ExcelWriter</code></description>
          </item>
        </list>
        <list type="bullet">
          <item>
            <description>Create an <c>ExcelApplication</c> object: <br/><br/><code>Dim xla As New ExcelApplication()</code></description>
          </item>
        </list>
      </remarks>
    </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication.mModel">
            <summary>
            The model for this class
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication.#ctor">
            <Doc>
        <summary>
          <para>Creates a new <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication"/> object</para>
        </summary>
        <example>
          <para>
            <code>
ExcelApplication xla = new ExcelApplication();
</code>
            <br/>
            <code>
Dim xla As New ExcelApplication()
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication.Create">
            <Doc>
        <summary>
          <para>Creates a new workbook containing 1 worksheet. The sheet is blank when the workbook is created, and standard font, style, and format settings applied.</para>
        </summary>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Workbook"/> object representing the created workbook.</para>
        </returns>
        <example>
          <para>
            <code>

          Workbook wb = xla.Create();
        </code>
            <br/>
            <code>
Dim wb As Workbook = xla.Create()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication.Open(System.String)">
            <Doc>
        <summary>
          <para>Opens an existing Excel spreadsheet.</para>
        </summary>
        <param name="fileName">
          <para>The path and name of the file to open. The path can be relative or  absolute. The file must be a BIFF8 format (Excel 97 or later) .xls file.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Workbook"/> object representing the file opened.</para>
        </returns>
        <exception cref="T:System.Exception">
          <para>If the file cannot be found or opened, or if ExcelWriter cannot parse the file as a BIFF8 file.</para>
        </exception>
        <remarks>
          <para>ExcelWriter supports  Excel's BIFF8 (Excel 97 or later) format only.  Do not use  this method  to open BIFF7 (Excel 95) files.</para>
        </remarks>
        <example>
          <para>
            <code>

          Workbook wb = xla.Open(@"C:\Reports\Report.xls");
        </code>
            <br/>
            <code>
Dim wb As Workbook = xla.Open("C:\Reports\Report.xls")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication.Open(System.IO.Stream)">
            <Doc>
        <summary>
          <para>Opens an Excel workbook from a  stream and returns a  <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Workbook"/>  object.</para>
        </summary>
        <param name="stream">
          <para>A System.IO.Stream containing a BIFF8 format (Excel 97 or later) .xls file.</para>
        </param>
        <returns>
          <para>A <c>Workbook</c> object representing the file opened.</para>
        </returns>
        <exception cref="T:System.Exception">
          <para>If the file cannot be found or opened, or if the file is not a BIFF8 format (Excel 97 or later) .xls file.</para>
        </exception>
        <remarks>
          <para>ExcelWriter supports  Excel's BIFF8 (Excel 97 or later) format only.  Do not use this method  to open BIFF7 (Excel 95) files.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          FileStream fStrm = new FileStream(@"C:\Sales\2003\June.xls", FileMode.Open);
          Workbook wb = xla.Open(fStrm);
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim fStrm As FileStream = New FileStream("C:\Sales\2003\June.xls", FileMode.Open)
          Dim wb As Workbook = xla.Open(fStrm)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication.Open(System.String,System.String)">
            <Doc>
        <summary>
          <para>Opens an existing Excel spreadsheet.</para>
        </summary>
        <param name="fileName">
          <para>The path and name of the file to open. The path can be relative or absolute. The file must be a BIFF8 format (Excel 97 or later) .xls file.</para>
        </param>
        <param name="decryptPassword">
          <para>The password used to encrypt the spreadsheet. Standard "Office 97/2000 Compatible" encryption is used  to encrypt the spreadsheet. This is the default encryption used by Excel 97 and later versions.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Workbook"/> object representing the file opened.</para>
        </returns>
        <exception cref="T:System.Exception">
          <para>If the file cannot be found or opened, or if the file is not a BIFF8 format (Excel 97 or later) .xls file.</para>
        </exception>
        <remarks>
          <para>ExcelWriter supports  Excel's BIFF8 (Excel 97 or later) format only.  Do not use  this method  to open BIFF7 (Excel 95) files.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Open(@"C:\Reports\Report.xls", "MyPassword");
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Open("C:\Reports\Report.xls", "MyPassword")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication.Open(System.IO.Stream,System.String)">
            <Doc>
        <summary>
          <para>Opens an Excel workbook from a  stream and returns a  <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Workbook"/>  object.</para>
        </summary>
        <param name="stream">
          <para>A System.IO.Stream containing a BIFF8 format (Excel 97 or later) .xls file.</para>
        </param>
        <param name="decryptPassword">
          <para>The password used to encrypt the spreadsheet. Standard "Office 97/2000 Compatible" encryption is used  to encrypt the spreadsheet. This is the default encryption used by Excel 97 and later versions.</para>
        </param>
        <returns>
          <para>A <c>Workbook</c> object representing the file to open.</para>
        </returns>
        <exception cref="T:System.Exception">
          <para>If the file cannot be found or opened, or if the file is not a BIFF8 format (Excel 97 or later) .xls file.</para>
        </exception>
        <remarks>
          <para>ExcelWriter supports  Excel's BIFF8 (Excel 97 or later) format only.  Do not use this method  to open BIFF7 (Excel 95) files.</para>
        </remarks>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          FileStream fStrm = new FileStream(@"C:\Sales\2003\June.xls", FileMode.Open);
          Workbook wb = xla.Open(fStrm, "MyPassword");
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim fStrm As FileStream = New FileStream("C:\Sales\2003\June.xls")
          Dim wb As Workbook = xla.Open(fStrm, "MyPassword")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication.Open(SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate)">
            <Doc>
        <summary>
          <para>Opens a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Workbook"/> from an <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelTemplate"/> object.</para>
        </summary>
        <param name="excelTemplate">
          <para>An <c>ExcelTemplate</c> object representing the workbook to open.</para>
        </param>
        <returns>
          <para>Workbook that is opened.</para>
        </returns>
        <exception cref="T:System.Exception">
          <para>If there is a problem creating, opening, or writing to the  file specified, or reading from the <c>Workbook</c> object.</para>
        </exception>
        <example>
          <para>
            <code>

          ExcelTemplate xlt = new ExcelTemplate();

          //--- Do something with template here

          ExcelApplication xla = new ExcelApplication();
          xla.Open(xlt);
        </code>
            <br/>
            <code>

          Dim xlt As New ExcelTemplate()

          '--- Do something with template here

          Dim xla As New ExcelApplication()
          xla.Open(xlt)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication.Save(SoftArtisans.OfficeWriter.ExcelWriter.Workbook,System.String)">
            <Doc>
        <summary>
          <para>Saves a specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Workbook"/> as a BIFF8 format (Excel 97 or later) .xls file.</para>
        </summary>
        <param name="workbook">
          <para>A <c>Workbook</c> object representing the workbook to save.</para>
        </param>
        <param name="fileName">
          <para>Specifies a complete path and file name for the Workbook. ExcelWriter will save the file to this location. If a file with the same name exists, it will be overwritten by the new Excel file.</para>
        </param>
        <exception cref="T:System.Exception">
          <para>If there is a problem creating, opening, or writing to the file specified, or reading from the workbook object.</para>
        </exception>
        <example>
          <para>
            <code>

          ExcelApplication oExcelApp = new ExcelApplication();
          Workbook wb = oExcelApp.Create();
          oExcelApp.Save(wb,@"C:\Sales2003\June.xls");
        </code>
            <br/>
            <code>

          Dim oExcelApp As New ExcelApplication()
          Dim wb As Workbook = oExcelApp.Create()
          oExcelApp.Save(wb, "C:\Sales2003\June.xls")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication.Save(SoftArtisans.OfficeWriter.ExcelWriter.Workbook,System.IO.Stream)">
            <Doc>
        <summary>
          <para>Saves a specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Workbook"/> as a BIFF8 format (Excel 97 or later).xls file.</para>
        </summary>
        <param name="workbook">
          <para>A <c>Workbook</c> object representing the workbook to save.</para>
        </param>
        <param name="stream">
          <para>The output stream to write to. This stream must be open and writable. ExcelWriter will not close this stream; the calling program is responsible for closing the stream and releasing the resource.</para>
        </param>
        <exception cref="T:System.Exception">
          <para>If there is a problem creating, opening, or writing to the file specified, or reading from the workbook object.</para>
        </exception>
        <example>
          <para>
            <code>

          ExcelApplication oExcelApp = new ExcelApplication();
          Workbook wb = oExcelApp.Create();
          FileStream fstream = new FileStream(@"C:\temp\outfile.xls",
               FileMode.Create);
          oExcelApp.Save(wb,fstream);
        </code>
            <br/>
            <code>

          Dim oExcelApp As New ExcelApplication()
          Dim wb As Workbook = oExcelApp.Create()
          Dim fstream As New FileStream("C:\temp\outfile.xls", _
               FileMode.Create)
          oExcelApp.Save(wb, fstream)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication.Save(SoftArtisans.OfficeWriter.ExcelWriter.Workbook,System.Web.HttpResponse,System.String,System.Boolean)">
            <Doc>
        <summary>
          <para>Streams the specified workbook to the client.  It should be the only method that uses the response object, as it automatically  sets response headers, clears the body of the response, and flushes it to the client.</para>
        </summary>
        <param name="workbook">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Workbook"/> object representing the workbook to save.</para>
        </param>
        <param name="response">
          <para>A <see cref="!:System.Http.Response"/> object, usually  <see cref="!:Page.Response"/>.</para>
        </param>
        <param name="fileName">
          <para>Specifies a file name for the workbook. This name will be displayed in the download dialog when the file is streamed to the browser.</para>
        </param>
        <param name="openInBrowser">
          <para>If true, the spreadsheet will be opened in place in Internet Explorer, rather than spawning a seperate Excel window.</para>
        </param>
        <exception cref="T:System.Exception">
          <para>If there is an error obtaining the response stream from the Response object.</para>
        </exception>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();

          //--- Do something here
          xla.Save(wb, Page.Response, "generated.xls", false);
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()

          '--- Do something here
          xla.Save(wb, Page.Response, "generated.xls", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication.Save(SoftArtisans.OfficeWriter.ExcelWriter.Workbook,System.Web.HttpResponse,System.String,System.Boolean,System.String)">
            <Doc>
        <summary>
          <para>Streams the specified workbook to the client.  It should be the only method that uses the response object, as it automatically sets response headers, clears the body of the response, and flushes it to the client.</para>
        </summary>
        <param name="workbook">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Workbook"/> object representing the workbook to save.</para>
        </param>
        <param name="response">
          <para>A <see cref="!:System.Http.Response"/> object, usually  <see cref="!:Page.Response"/>.</para>
        </param>
        <param name="fileName">
          <para>Specifies a file name for the workbook. This name will be displayed in the download dialog when the file is streamed to the browser.</para>
        </param>
        <param name="openInBrowser">
          <para>If true, the spreadsheet will be opened in place in Internet Explorer, rather than spawning a seperate Excel window.</para>
        </param>
        <param name="contentType">
          <para>The content-type header sent to the browser with the generated spreadsheet.</para>
        </param>
        <exception cref="T:System.Exception">
          <para>If there is an error obtaining the response stream from the Response object.</para>
        </exception>
        <example>
          <para>
            <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = oExcelApp.Create();

          //--- Do something here
          xla.Save(wb, Page.Response, "generated.xls", false, "application/unknown");
        </code>
            <br/>
            <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()

          '--- Do something here
          xla.Save(wb, Page.Response, "generated.xls", False, "application/unknown")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication.LicenseKey">
            <Doc>
        <summary>
          <para>The <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication.LicenseKey"/> property is provided to assist in debugging  license-related issues.  The property sets or returns the license key  that enables ExcelWriter.  The key is stored in the registry. It contains  information about ExcelWriter, including product name, platform, and version.</para>
        </summary>
        <remarks>
          <para>For assistance with licensing issues, contact SoftArtisans Technical Services (http://support.softartisans.com).</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get LicenseKey
          string version = xla.LicenseKey;

          //--- Set LicenseKey
          xla.LicenseKey = "XXXXXX-XXXX-XXXX-XXXXXX";
        </code>
            <br/>
            <code>

          '--- Get LicenseKey
          Dim version As String = xla.LicenseKey

          '--- Set LicenseKey
          xla.LicenseKey = "XXXXXX-XXXX-XXXX-XXXXXX"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication.Version">
            <Doc>
        <summary>
          <para>Returns the exact version of ExcelWriter. The format of the version string returned is:</para>
        </summary>
        <remarks>
          <para>
            <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication.Version"/> is a  <b>Read Only</b>  property.</para>
        </remarks>
        <example>
          <para>
            <code>
string ver = xla.Version;</code>
            <br/>
            <code>
Dim ver As String = xla.Version</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelWriterException">
            <Doc>
      <summary>
        <para>All methods in the ExcelWriter API can throw an exception of type ExcelWriterException.</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelWriterException.#ctor(System.Exception)">
            <summary> 
            TODO: This is unused. Maybe we should delete it?
            </summary>
            <param name="cause">
            The exception that caused this exception. 
            This will be appended to this exceptions stack trace.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Font">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Font"/> object represents a font style that you can use when creating a reusable <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Style"/> object, or when setting the style of a cell or set of cells. To set or return a <c>Font</c> object, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.Font"/>.</para>
      </summary>
      <example>
        <para>
          <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          SoftArtisans.OfficeWriter.ExcelWriter.Style styl = wb.CreateStyle();
          SoftArtisans.OfficeWriter.ExcelWriter.Font fnt = styl.Font;
        </code>
          <br/>
          <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim styl As SoftArtisans.OfficeWriter.ExcelWriter.Style = wb.CreateStyle()
          Dim fnt As SoftArtisans.OfficeWriter.ExcelWriter.Font = styl.Font
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Font.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Font.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Font.Bold">
            <Doc>
        <summary>
          <para>Sets or returns whether text will be displayed in bold face.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Bold
          bool isBold = fnt.Bold;

          //--- Set Bold
          fnt.Bold = true;
        </code>
            <br/>
            <code>

          '--- Get Bold
          Dim isBold As Boolean = fnt.Bold

          '--- Set Bold
          fnt.Bold = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Font.Color">
            <Doc>
        <summary>
          <para>Sets or returns the color of the font.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Color
          Color fontClr = fnt.Color;

          //--- Set Color
          fnt.Color = wb.Palette.GetClosestColor(100, 100, 255);
        </code>
            <br/>
            <code>

          '--- Get Color
          Dim fontClr As Color = fnt.Color

          '--- Set Color
          fnt.Color = wb.Palette.GetClosestColor(100, 100, 255)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Font.Italic">
            <Doc>
        <summary>
          <para>Sets or returns whether text will be italicized.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Italic
          bool isItalic = fnt.Italic;

          //--- Set Italic
          fnt.Italic = true;
        </code>
            <br/>
            <code>

          '--- Get Italic
          Dim isItalic As Boolean = fnt.Italic

          '--- Set Italic
          fnt.Italic = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Font.Name">
            <Doc>
        <summary>
          <para>Sets or returns the name of the font (e.g., "Arial"). The font must be available on the client's system for Excel to use it; if it is not available, Excel will use a default font.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Name
          string fontName = fnt.Name;

          //--- Set Name
          fnt.Name = "Times New Roman";
        </code>
            <br/>
            <code>

          '--- Get Name
          Dim fontName As String = fnt.Name

          '--- Set Name
          fnt.name = "Times New Roman"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Font.ScriptStyle">
            <Doc>
        <summary>Sets or returns the vertical position of the font in relation to other text. </summary>
        <remarks>
          <para>If the vertical position is http://wiki.softartisans.com/display/EW70/Font.VerticalPosition#Superscript, the font will be slightly higher than other text. If the vertical position is http://wiki.softartisans.com/display/EW70/Font.VerticalPosition#Subscript, the font will be slightly lower than other text. If the vertical position is set to http://wiki.softartisans.com/display/EW70/Font.VerticalPosition#None, the font will be displayed normally.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get ScriptStyle
          Font.VerticalPosition scrStyle = fnt.ScripstStyle;

          //--- Set ScriptStyle
          fnt.ScriptStyle = Font.VerticalPosition.Subscript;
        </code>
            <br/>
            <code>

          '--- Get ScriptStyle
          Dim scrStyle As Font.VerticalPosition = fnt.ScriptStyle

          '--- Set ScriptStyle
          fnt.ScriptStyle = Font.VerticalPosition.Subscript
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Font.Size">
            <Doc>
        <summary>
          <para>Sets or returns the font size, in points.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Size
          double fontSize = fnt.Size;

          //--- Set Size
          fnt.Size = 12;
        </code>
            <br/>
            <code>

          '--- Get Size
          Dim fontSize As Double = fnt.Size

          '--- Set Size
          fnt.Size = 12
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Font.Strikethrough">
            <Doc>
        <summary>
          <para>Sets or returns whether strikethrough formatting will be applied to the font.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Strikethrough
          bool isStrikethrough = fnt.Strikethrough;

          //--- Set Strikethrough
          fnt.Strikethrough = true;
        </code>
            <br/>
            <code>

          '--- Get Strikethrough
          Dim isStrikethrough As Boolean = fnt.Strikethrough

          '--- Set Strikethrough
          fnt.Strikethrough = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Font.Underline">
            <Doc>
        <summary>
          <para>Sets or returns the underline style for this font.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Underline
          Font.UnderlineStyle underStyle = fnt.Underline;

          //--- Set Underline
          fnt.Underline = Font.UnderlineStyle.Double;
        </code>
            <br/>
            <code>

          '--- Get Underline
          Dim underStyle As Font.UnderlineStyle = fnt.Underline

          '--- Set Underline
          fnt.Underline = Font.UnderlineStyle.Double
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Font.UnderlineStyle">
            <Doc>
        <summary>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Font.UnderlineStyle"/> value specifies an underline style for a font.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Font.UnderlineStyle.Accounting">
            <Doc>
          <summary>Accounting style underline.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Font.UnderlineStyle.Double">
            <Doc>
          <summary>Double underline.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Font.UnderlineStyle.DoubleAccounting">
            <Doc>
          <summary>Double accounting underline.<br/></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Font.UnderlineStyle.None">
            <Doc>
          <summary>Text is not underlined.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Font.UnderlineStyle.Single">
            <Doc>
          <summary>Single underline.<br/></summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Font.UnderlineStyle.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.UnderlineStyle&quot;]/Member[@signature=&quot;Font.UnderlineStyle.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Font.UnderlineStyle.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.UnderlineStyle&quot;]/Member[@signature=&quot;Font.UnderlineStyle.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Font.UnderlineStyle.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.UnderlineStyle&quot;]/Member[@signature=&quot;Font.UnderlineStyle.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Font.UnderlineStyle.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.UnderlineStyle&quot;]/Member[@signature=&quot;Font.UnderlineStyle.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Font.UnderlineStyle.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.UnderlineStyle&quot;]/Member[@signature=&quot;Font.UnderlineStyle.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Font.VerticalPosition">
            <Doc>
        <summary>
          <para>A vertical value specifies the vertical position of a font in relation to other text.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Font.VerticalPosition.None">
            <Doc>
          <summary>Standard vertical position</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Font.VerticalPosition.Subscript">
            <Doc>
          <summary>The font will be slightly lower than other text.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Font.VerticalPosition.Superscript">
            <Doc>
          <summary>The font will be slightly higher than other text.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Font.VerticalPosition.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.VerticalPosition&quot;]/Member[@signature=&quot;Font.VerticalPosition.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Font.VerticalPosition.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.VerticalPosition&quot;]/Member[@signature=&quot;Font.VerticalPosition.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Font.VerticalPosition.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.VerticalPosition&quot;]/Member[@signature=&quot;Font.VerticalPosition.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Font.VerticalPosition.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.VerticalPosition&quot;]/Member[@signature=&quot;Font.VerticalPosition.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Font.VerticalPosition.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.VerticalPosition&quot;]/Member[@signature=&quot;Font.VerticalPosition.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.GlobalStyle">
            <Doc>
      <summary>
        <para>ExcelWriter creates three style types: <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.GlobalStyle"/>, <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NamedStyle"/>, and <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CellStyle"/>. All three style types derive from the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Style"/> class, and <c>NamedStyle</c> derives from <c>GlobalStyle</c>.</para>
      </summary>
      <remarks>
        <para>A style can be <u>set</u> or <u>applied</u> to cells, rows, columns, ranges, and areas. When a style is <u>set</u>, it is cloned and the object to which the style is assigned acquires all of that style's properties, including font properties and number formatting. When a style is <u>applied</u>, only the differences between the new style and existing style properties (assigned through the ExcelWriter API or in Microsoft Excel) will take effect. For example, if the cell has a background color and the new style applied does not contain a background color, the cell's color will not be affected.  However, if the new style includes a background color, it will replace the existing background color of the cell.</para>
        <para>To <u>set</u> a style, use the <c>Style</c> property. To <u>apply</u> a style, call <c>ApplyStyle</c>. Both are accessible through the following objects: <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/>, <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/>, <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/>, <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.RowProperties"/>, and <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ColumnProperties"/>.</para>
      </remarks>
      <example>
        <para>
          <code>

          Style styleMoneyFormat = wb.CreateStyle();
          styleMoneyFormat.NumberFormat = "$#,##0";
          Style styleTitle = wb.CreateStyle();
          styleTitle.Font.Size = 14;
          styleTitle.Font.Color = wb.Palette.GetClosestColor(100, 100, 255);
        </code>
          <br/>
          <code>

          Dim styleMoneyFormat As Style = wb.CreateStyle()
          styleMoneyFormat.NumberFormat = "$#,##0"
          Dim styleTitle As Style = wb.CreateStyle()
          styleTitle.Font.Size = 14
          styleTitle.Font.Color = wb.Palette.GetClosestColor(100, 100, 255)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.GlobalStyle.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;GlobalStyle&quot;]/Member[@signature=&quot;GlobalStyle.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.GlobalStyle.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;GlobalStyle&quot;]/Member[@signature=&quot;GlobalStyle.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Group">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Group"/> is a type of shape that contains other shapes. Currently, groups may not be created or have their contents modified. They may be moved, resized, and deleted.</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Group.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Group&quot;]/Member[@signature=&quot;Group.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Group.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Group&quot;]/Member[@signature=&quot;Group.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Group.Height">
            <Doc>
        <summary>
          <para>Sets or returns the height of the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Group"/>, in points (1/72 inch).</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Group.Position">
            <Doc>
        <summary>
          <para>Sets or returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Group"/> 's position in the worksheet.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Group.Type">
            <Doc>
        <summary>
          <para>Returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType"/> of the group, which is always http://wiki.softartisans.com/display/EW70/ShapeType#Group.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Group.Width">
            <Doc>
        <summary>
          <para>Sets or returns the width of the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Group"/>, in points (1/72 inch).</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Groups">
            <Doc>
      <summary>
        <para>
          <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Groups"/> provides access to the collection of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Group"/> objectss contained within a drawing. Currently, only top level groups may be accessed. Nested groups are not supported. Additionally, a group may not be created or have its contents modified. However, a group can be moved, resized, and removed from a drawing.  To return a <c>Groups</c> collection, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.ShapeGroups"/>.</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Groups.GetEnumerator">
            <Doc>
        <summary>
          <para>Returns an IEnumerator for the Groups in a Worksheet</para>
        </summary>
        <returns>
          <para>An enumerator for the Groups in a Worksheet as a System.Collections.IEnumerator</para>
        </returns>
        <example>
          <para>
            <code>
IEnumerator enumerator = ws.ShapeGroups.GetEnumerator();
</code>
            <br/>
            <code>
Dim enumerator as IEnumerator = ws.ShapeGroups.GetEnumerator()
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Groups.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Groups&quot;]/Member[@signature=&quot;Groups.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Groups.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Groups&quot;]/Member[@signature=&quot;Groups.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Groups.ListGroups">
            <Doc>
        <summary>
          <para>Returns an array of all the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Group"/> objects in the collection.</para>
        </summary>
        <returns>
          <para>An array of all the <c>Group</c> objects in the collection.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Groups.Remove(SoftArtisans.OfficeWriter.ExcelWriter.Group)">
            <Doc>
        <summary>
          <para>Removes the specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Group"/> object from the collection.</para>
        </summary>
        <param name="group">
          <para>The <c>Group</c> object to remove.</para>
        </param>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Groups.Remove(System.Int32)">
            <Doc>
        <summary>
          <para>Removes the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Group"/> object at the specified 0-based position in the collection.</para>
        </summary>
        <param name="position">
          <para>The 0-based index of the <c>Group</c> object to remove.</para>
        </param>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Groups.Count">
            <Doc>
        <summary>
          <para>Returns the number of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Group"/> objects in the collection.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterPicture">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterPicture"/> object represents a picture embedded in a Header or Footer.</para>
      </summary>
      <remarks>
        <para>Use this class in order to set the size of a picture within a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection"/>.  In order to return a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterPicture"/> object, use the <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection.GetPicture"/> method.</para>
      </remarks>
      <example>
        <para>
          <code>
HeaderFooterPicture hfp = header.GetPicture();

//--- Set height to 20 pixels
hfp.Height = 20;
</code>
          <br/>
          <code>
Dim hfp As HeaderFooterPicture = header.GetPicture()

'--- Set height to 20 pixels
hfp.Height = 20
</code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterPicture.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;HeaderFooterPicture&quot;]/Member[@signature=&quot;HeaderFooterPicture.Equals&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterPicture.Height">
            <Doc>
        <summary>
          <para>Sets the height in pixels of a picture embedded within a header or footer</para>
        </summary>
        <example>
          <para>
            <code>
HeaderFooterPicture hfp = header.GetPicture();

//--- Set height of picture to 20 pixels
hfp.Height = 20;
</code>
            <br/>
            <code>
Dim hfp As HeaderFooterPicture = header.GetPicture()

'--- Set height of picture to 20 pixels
hfp.Height = 20
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterPicture.Width">
            <Doc>
        <summary>
          <para>Sets the width of a picture embedded in a header or footer</para>
        </summary>
        <example>
          <para>
            <code>
HeaderFooterPicture hfp = header.GetPicture();
 
//--- Set width of picture to 20 pixels
hfp.Width = 20;
</code>
            <br/>
            <code>
Dim hfp As HeaderFooterPicture = header.GetPicture()
 
'--- Set width of picture to 20 pixels
hfp.Width = 20
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterPicture.LockAspectRatio">
            <Doc>
        <summary>
          <para>Locks the aspect ratio of the picture.</para>
        </summary>
        <remarks>
          <para>Use this property to maintain or break the same aspect ratio for a picture in a header or footer while resizing.  The default value is true.</para>
        </remarks>
        <example>
          <para>
            <code>
HeaderFooterPicture hfp = header.GetPicture();

//--- Lock the aspect ratio of the picture so that it is not
//--- stretched as it is resized
hfp.LockAspectRatio = true;
hfp.Height = 20;
hfp.Width = 30;
</code>
            <br/>
            <code>
Dim hfp As HeaderFooterPicture = header.GetPicture()

'--- Lock the aspect ratio of the picture so that it is not
'--- stretched as it is resized
hfp.LockAspectRatio = True
hfp.Height = 20
hfp.Width = 30
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection"/> class represents an area of the header or footer.  It allows you to set and retrieve the content in that area.</para>
      </summary>
      <remarks>
        <para>To retrieve a <c>HeaderFooterSection</c> object, call one of the following methods:</para>
        <para>
          <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.GetHeader(SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection.Section)"/>
          <br/>
          <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.GetFooter(SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection.Section)"/>
        </para>
      </remarks>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection.GetText">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;HeaderFooterSection&quot;]/Member[@signature=&quot;GetText()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection.GetPicture">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;HeaderFooterSection&quot;]/Member[@signature=&quot;GetPicture()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection.SetContent(System.String,System.IO.Stream)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;HeaderFooterSection&quot;]/Member[@signature=&quot;SetContent(string text, Stream picture)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection.SetContent(System.String,System.String)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;HeaderFooterSection&quot;]/Member[@signature=&quot;SetContent(string text, string picture)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection.SetContent(System.String)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;HeaderFooterSection&quot;]/Member[@signature=&quot;SetContent(string text)&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection.Section">
            <Doc>
        <summary>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection.Section"/> value specifies a section of the header or footer.</para>
        </summary>
        <remarks>
          <para>Use these values when calling <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.GetHeader(SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection.Section)"/> or <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.PageSetup.GetFooter(SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection.Section)"/> to specify which area of the header or footer you want to retrieve.</para>
        </remarks>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection.Section.Right">
            <Doc>
          <summary>The right portion of the header or footer </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection.Section.Center">
            <Doc>
          <summary>The center portion of the header or footer </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection.Section.Left">
            <Doc>
          <summary>The left portion of the header or footer </summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection.Section.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;HeaderFooterSection&quot;]/Member[@signature=&quot;HeaderFooterSection.Section&quot;]/Member[@signature=&quot;HeaderFooterSection.Section.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection.Section.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;HeaderFooterSection&quot;]/Member[@signature=&quot;HeaderFooterSection.Section&quot;]/Member[@signature=&quot;HeaderFooterSection.Section.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection.Section.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;HeaderFooterSection&quot;]/Member[@signature=&quot;HeaderFooterSection.Section&quot;]/Member[@signature=&quot;HeaderFooterSection.Section.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection.Section.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;HeaderFooterSection&quot;]/Member[@signature=&quot;HeaderFooterSection.Section&quot;]/Member[@signature=&quot;HeaderFooterSection.Section.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.HeaderFooterSection.Section.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;HeaderFooterSection&quot;]/Member[@signature=&quot;HeaderFooterSection.Section&quot;]/Member[@signature=&quot;HeaderFooterSection.Section.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlink">
            <Doc>
      <summary>
        <para>Represents a hyperlink in an <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlink.Area"/> (which may contain only one cell). To create a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlink"/> object, call <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Cell.CreateHyperlink(System.String)"/> or <see cref="!:Area.CreateHyperlink(String)"/>. To get an existing <c>Hyperlink</c>, use</para>
      </summary>
      <example>
        <para>
          <code>

          //--- Create a hyperlink
          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          Worksheet ws = wb.Worksheets[0];
          Cell cellA1 = ws.Cells["A1"];
          cellA1.Value = "SoftArtisans";
          Hyperlink link = cellA1.CreateHyperlink("http://www.softartisans.com");

          //--- Get an existing hyperlink
          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Open("@C:\MySpreadsheet.xls");
          Worksheet ws = wb.Worksheets[0];
          Hyperlink firstLink = ws.Hyperlinks[0];
        </code>
          <br/>
          <code>

          '--- Create a hyperlink
          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim ws As Worksheet = wb.Worksheets(0)
          Dim cellA1 As Cell = ws.Cells("A1")
          cellA1.Value = "SoftArtisans"
          Dim link As Hyperlink = cellA1.CreateHyperlink("http://www.softartisans.com")

          '--- Get an existing hyperlink
          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim ws As Worksheet = wb.Worksheets(0)
          Hyperlink firstLink = ws.Hyperlinks(0)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlink.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Hyperlink&quot;]/Member[@signature=&quot;Hyperlink.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlink.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Hyperlink&quot;]/Member[@signature=&quot;Hyperlink.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlink.Area">
            <Doc>
        <summary>
          <para>Returns the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlink.Area"/> that the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlink"/> object is associated with. The set of cells that the <c>Area</c> object represents functions as a single hyperlink to the same href.</para>
        </summary>
        <example>
          <para>
            <code>
Area linkArea = link.Area;</code>
            <br/>
            <code>
Dim linkArea As Area = link.Area</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlink.Href">
            <Doc>
        <summary>
          <para>Sets or returns the hyperlink's href value.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Href
          string linkHref = link.Href;

          //--- Set Href
          link.Href = "http://www.softartisans.com";
        </code>
            <br/>
            <code>

          '--- Get Href
          Dim linkHref As String = link.Href

          link.Href = "http://www.softartisans.com"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlink.Text">
            <Doc>
        <summary>
          <para>Sets or returns the hyperlink's displayed text.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Text
          string linkText = link.Text;

          //--- Set Text
          link.Text = "SoftArtisans";
        </code>
            <br/>
            <code>

          '--- Get Text
          Dim linkText As String = link.Text

          '--- Set Text
          link.Text = "SoftArtisans"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlinks">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlinks"/> collection contains all hyperlinks in a worksheet. The <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Hyperlinks"/> property returns a <c>Hyperlinks</c> collection.</para>
      </summary>
      <example>
        <para>
          <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Open(@"C:\MySpreadsheet.xls");
          Worksheet ws = wb.Worksheets[0];
          Hyperlinks links = ws.Hyperlinks;
        </code>
          <br/>
          <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Open("C:\MySpreadsheet.xls")
          Dim ws As Worksheet = wb.Worksheets(0)
          Dim links As Hyperlinks = ws.Hyperlinks
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlinks.GetEnumerator">
            <Doc>
        <summary>
          <para>Returns an IEnumerator for the Hyperlinks in a Worksheet</para>
        </summary>
        <returns>
          <para>An enumerator for the Hyperlinks in a Worksheet as a System.Collections.IEnumerator</para>
        </returns>
        <example>
          <para>
            <code>
IEnumerator enumerator = ws.Hyperlinks.GetEnumerator();
</code>
            <br/>
            <code>
Dim enumerator as IEnumerator = ws.Hyperlinks.GetEnumerator()
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlinks.CreateHyperlink(SoftArtisans.OfficeWriter.ExcelWriter.Area,System.String)">
            <Doc>
        <summary>
          <para>Creates a new hyperlink in the specified area of cells. All cell values in the area will be converted to hyperlinks.</para>
        </summary>
        <param name="area">
          <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object representing the cells that will be converted to hyperlinks.</para>
        </param>
        <param name="href">
          <para>The hyperlink's destination.</para>
        </param>
        <returns>
          <para>A new <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlink"/> object with the specified destination URL.</para>
        </returns>
        <example>
          <para>
            <code>
links.CreateHyperlink(a, "http://www.softartisans.com");</code>
            <br/>
            <code>
links.CreateHyperlink(a, "http://www.softartisans.com")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlinks.CreateHyperlink(SoftArtisans.OfficeWriter.ExcelWriter.Area,System.String,System.String)">
            <Doc>
        <summary>
          <para>Creates a new hyperlink in the specified area of cells. All cell values in the area will be converted to hyperlinks.</para>
        </summary>
        <param name="area">
          <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object representing the cells that will be converted to hyperlinks.</para>
        </param>
        <param name="href">
          <para>The hyperlink's destination.</para>
        </param>
        <param name="text">
          <para>The text to display in the link.</para>
        </param>
        <returns>
          <para>A new <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlink"/> object with the specified destination URL and display text.</para>
        </returns>
        <example>
          <para>
            <code>
links.CreateHyperlink(a, "http://www.softartisans.com", "SoftArtisans");</code>
            <br/>
            <code>
links.CreateHyperlink(a, "http://www.softartisans.com", "SoftArtisans")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlinks.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Hyperlinks&quot;]/Member[@signature=&quot;Hyperlinks.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlinks.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Hyperlinks&quot;]/Member[@signature=&quot;Hyperlinks.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlinks.Count">
            <Doc>
        <summary>
          <para>Returns the number of hyperlinks in the worksheet.</para>
        </summary>
        <example>
          <para>
            <code>
int numLinks = links.Count;</code>
            <br/>
            <code>
Dim numLinks As Integer = links.Count</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlinks.Item(System.Int32)">
            <Doc>
        <summary>
          <para>Returns the hyperlink at the specified 0-based index in the collection of hyperlinks in the worksheet.</para>
        </summary>
        <param name="index">
          <para>The 0-based index of the hyperlink in the collection.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Hyperlink"/> object representing the hyperlink at the specified index in the collection of hyperlinks in the worksheet.</para>
        </returns>
        <remarks>
          <para>Hyperlinks are not stored in the order in which they were created.</para>
        </remarks>
        <example>
          <para>
            <code>
Hyperlink link = links.Hyperlink[0];</code>
            <br/>
            <code>
Dim link As Hyperlink = links.Hyperlink(0)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Legend">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Legend"/> object represents a chart's legend. To return <c>Legend</c> object, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.Legend"/>.</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Legend.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Legend&quot;]/Member[@signature=&quot;Legend.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Legend.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Legend&quot;]/Member[@signature=&quot;Legend.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Legend.Location">
            <Doc>
        <summary>
          <para>Sets or returns how the legend will be positioned in relation to the chart's plot area.</para>
        </summary>
        <remarks>
          <para>If you set <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Legend.LegendLocation"/> to any position except NotDocked, the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion"/> properties <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.Height"/>, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.Width"/>, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.X"/>, and <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.Y"/> will be automatically updated to reflect the new position.</para>
          <para>If you manually set any of the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion"/> properties <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.Height"/>, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.Width"/>, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.X"/>, or <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.Y"/>, the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Legend.LegendLocation"/> will be set to NotDocked.</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Legend.Vertical">
            <Doc>
        <summary>
          <para>Sets or returns whether the legend will be displayed vertically.</para>
        </summary>
        <remarks>
          <para>If you change the value of <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Legend.Vertical"/>, the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion"/> properties <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.Height"/>, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.Width"/>, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.X"/>, and <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.ChartRegion.Y"/> will be automatically updated to reflect the new position.  Additionally, the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Legend.Location"/> property will be changed to NotDocked.</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Legend.Visible">
            <Doc>
        <summary>
          <para>Sets or returns whether the chart legend will be displayed.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Legend.LegendLocation">
            <Doc>
        <summary>
          <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Legend.LegendLocation"/> class contains all available legend positions relative to a chart's plot area.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Legend.LegendLocation.Bottom">
            <Doc>
          <summary>The legend will be at the bottom of the plot area and horizontally centered.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Legend.LegendLocation.Corner">
            <Doc>
          <summary>The legend will be in the top-right corner of the plot area.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Legend.LegendLocation.Left">
            <Doc>
          <summary>The legend will be to the left of the chart and vertically centered.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Legend.LegendLocation.NotDocked">
            <Doc>
          <summary>Not docked</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Legend.LegendLocation.Right">
            <Doc>
          <summary>The legend will be to the right of the chart and vertically centered.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Legend.LegendLocation.Top">
            <Doc>
          <summary>The legend will be at the top of the plot area and horizontally centered.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Legend.LegendLocation.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Legend&quot;]/Member[@signature=&quot;Legend.LegendLocation&quot;]/Member[@signature=&quot;Legend.LegendLocation.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Legend.LegendLocation.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Legend&quot;]/Member[@signature=&quot;Legend.LegendLocation&quot;]/Member[@signature=&quot;Legend.LegendLocation.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Legend.LegendLocation.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Legend&quot;]/Member[@signature=&quot;Legend.LegendLocation&quot;]/Member[@signature=&quot;Legend.LegendLocation.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Legend.LegendLocation.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Legend&quot;]/Member[@signature=&quot;Legend.LegendLocation&quot;]/Member[@signature=&quot;Legend.LegendLocation.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Legend.LegendLocation.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Legend&quot;]/Member[@signature=&quot;Legend.LegendLocation&quot;]/Member[@signature=&quot;Legend.LegendLocation.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject">
            <Doc>
      <summary>A <c>NamedObject</c> object may refer to an array, number, picture, or range. To create a <c>NamedObject</c> in an Excel file, use the corresponding method for the specific object you wish to create (<see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Pictures.CreatePicture(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Anchor)"/>, <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateRange(System.String)"/>, etc).  To get a <c>NamedObject</c> from an existing file, use <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.GetNamedObject(System.String)"/>, passing in the name of the object you wish to get.</summary>
      <example>
        <para>The following sample gets a <c>NamedObject</c> from a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Workbook"/>.<br/><code>
          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Open(@"C:\MySpreadsheet.xls");
          NamedObject namedObj = wb.GetNamedObject("MyNamedObject");
</code><br/><code>
          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Open("C:\MySpreadsheet.xls")
          Dim namedObj As NamedObject = wb.GetNamedObject("MyNamedObject")
</code></para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NamedObject&quot;]/Member[@signature=&quot;NamedObject.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NamedObject&quot;]/Member[@signature=&quot;NamedObject.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.Formula">
            <Doc>
        <summary>
          <para>If the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject"/> refers to a named range, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.Formula"/> returns the formula associated with the range, e.g. "=Sheet1!A1:G10".</para>
        </summary>
        <example>
          <para>
            <code>
String rangeFormula = namedObj.Formula;</code>
            <br/>
            <code>
Dim rangeFormula As String = namedObj.Formula</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.Name">
            <Doc>
        <summary>
          <para>Returns the name string that the specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject"/> object represents.</para>
        </summary>
        <example>
          <para>
            <code>
String objectName = namedObj.Name;</code>
            <br/>
            <code>
Dim objectName As String = namedObj.Name</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.NamedObjectType">
            <Doc>
        <summary>
          <para>Returns the type of object that the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject"/> refers to.</para>
        </summary>
        <example>
          <para>
            <code>
NamedObject.ReturnType type = namedObj.NameType;</code>
            <br/>
            <code>
Dim type As NamedObject.ReturnType = namedObj.NameType</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.NameScope">
            <Doc>
        <summary>
          <para>Returns the scope of the name, relative to the Excel workbook.</para>
        </summary>
        <example>
          <para>
            <code>
Object nameValue = namedObj.Value;</code>
            <br/>
            <code>
Dim nameValue As Object = namedObj.Value</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.Value">
            <Doc>
        <summary>
          <para>Returns the object referenced by this <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject"/>. The object may be of any of the following types: Range, Picture, Array, Number. To determine the object type, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.NamedObjectType"/>.</para>
        </summary>
        <example>
          <para>
            <code>
Object nameValue = namedObj.Value;</code>
            <br/>
            <code>
Dim nameValue As Object = namedObj.Value</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.BuiltInName">
            <Doc>
        <summary>
          <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.BuiltInName"/> class contains all built-in object names.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.BuiltInName.Auto_Activate">
            <Doc>
          <summary>Auto_Activate</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.BuiltInName.Auto_Close">
            <Doc>
          <summary>Auto_Close</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.BuiltInName.Auto_Deactivate">
            <Doc>
          <summary>Auto_Deactivate</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.BuiltInName.Auto_Open">
            <Doc>
          <summary>Auto_Open</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.BuiltInName.Consolidate_Area">
            <Doc>
          <summary>Consolidate_Area</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.BuiltInName.Criteria">
            <Doc>
          <summary>Criteria</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.BuiltInName.Data_Form">
            <Doc>
          <summary>Data_Form</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.BuiltInName.Database">
            <Doc>
          <summary>Database</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.BuiltInName.Extract">
            <Doc>
          <summary>Extract</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.BuiltInName.FilterDatabase">
            <Doc>
          <summary>FilterDatabase</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.BuiltInName.Print_Area">
            <Doc>
          <summary>Print_Area</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.BuiltInName.Print_Titles">
            <Doc>
          <summary>Print_Titles</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.BuiltInName.Recorder">
            <Doc>
          <summary>Recorder</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.BuiltInName.Sheet_Title">
            <Doc>
          <summary>Sheet_Title</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.BuiltInName.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NamedObject&quot;]/Member[@signature=&quot;NamedObject.BuiltInName&quot;]/Member[@signature=&quot;NamedObject.BuiltInName.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.BuiltInName.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NamedObject&quot;]/Member[@signature=&quot;NamedObject.BuiltInName&quot;]/Member[@signature=&quot;NamedObject.BuiltInName.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.BuiltInName.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NamedObject&quot;]/Member[@signature=&quot;NamedObject.BuiltInName&quot;]/Member[@signature=&quot;NamedObject.BuiltInName.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.BuiltInName.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NamedObject&quot;]/Member[@signature=&quot;NamedObject.BuiltInName&quot;]/Member[@signature=&quot;NamedObject.BuiltInName.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.BuiltInName.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NamedObject&quot;]/Member[@signature=&quot;NamedObject.BuiltInName&quot;]/Member[@signature=&quot;NamedObject.BuiltInName.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.ReturnType">
            <Doc>
        <summary>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.ReturnType"/> value specifies the type of object a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject"/> refers to.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.ReturnType.Array">
            <Doc>
          <summary>Array</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.ReturnType.ExternalReference">
            <Doc>
          <summary>ExternalReference</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.ReturnType.Formula">
            <Doc>
          <summary>Formula</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.ReturnType.Number">
            <Doc>
          <summary>Number</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.ReturnType.Picture">
            <Doc>
          <summary>Picture</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.ReturnType.Range">
            <Doc>
          <summary>Range</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.ReturnType.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NamedObject&quot;]/Member[@signature=&quot;NamedObject.ReturnType&quot;]/Member[@signature=&quot;NamedObject.ReturnType.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.ReturnType.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NamedObject&quot;]/Member[@signature=&quot;NamedObject.ReturnType&quot;]/Member[@signature=&quot;NamedObject.ReturnType.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.ReturnType.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NamedObject&quot;]/Member[@signature=&quot;NamedObject.ReturnType&quot;]/Member[@signature=&quot;NamedObject.ReturnType.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.ReturnType.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NamedObject&quot;]/Member[@signature=&quot;NamedObject.ReturnType&quot;]/Member[@signature=&quot;NamedObject.ReturnType.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.ReturnType.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NamedObject&quot;]/Member[@signature=&quot;NamedObject.ReturnType&quot;]/Member[@signature=&quot;NamedObject.ReturnType.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.Scope">
            <Doc>
        <summary>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.Scope"/> value specifies the scope of the object that a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject"/> refers to.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.Scope.External">
            <Doc>
          <summary>External</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.Scope.Workbook">
            <Doc>
          <summary>Workbook</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.Scope.Worksheet">
            <Doc>
          <summary>Worksheet</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.Scope.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NamedObject&quot;]/Member[@signature=&quot;NamedObject.Scope&quot;]/Member[@signature=&quot;NamedObject.Scope.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.Scope.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NamedObject&quot;]/Member[@signature=&quot;NamedObject.Scope&quot;]/Member[@signature=&quot;NamedObject.Scope.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.Scope.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NamedObject&quot;]/Member[@signature=&quot;NamedObject.Scope&quot;]/Member[@signature=&quot;NamedObject.Scope.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject.Scope.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NamedObject&quot;]/Member[@signature=&quot;NamedObject.Scope&quot;]/Member[@signature=&quot;NamedObject.Scope.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.NamedStyle">
            <Doc>
      <summary>
        <para>ExcelWriter creates three style types: <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.GlobalStyle"/>, <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NamedStyle"/>, and <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CellStyle"/>. All three style types derive from the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Style"/> class, and <c>NamedStyle</c> derives from <c>GlobalStyle</c>.</para>
      </summary>
      <remarks>
        <para>A style can be  <u>set</u>  or  <u>applied</u>  to cells, rows, columns, ranges, and areas. When a style is  <u>set</u> , it is cloned and the object to which the style is assigned acquires all of that style's properties, including font proprties and number formatting. When a style is  <u>applied</u> , only the differences between the new style and existing style properties (assigned through the ExcelWriter API or in Microsoft Excel) will take effect. For example, if the cell has a background color and the new style applied does not contain a background color, the cell's color will not be affected. However, if the new style includes a background color, it will replace the existing background color of the cell.</para>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication"/> object contains a collection of <c>NamedStyle</c> s, which - unlike <c>GlobalStyle</c> s are accessible after the workbook is saved. This allows you to dynamically create a template, save it to disk, re-open it to populate it with data, and then apply your newly-created style. This collection of <c>NamedStyle</c> s includes Excel's built-in styles (such as the NORMAL style) and any user-defined styles in a workbook opened with the ExcelApplication object.</para>
        <para>To create a <c>NamedStyle</c>, call <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateNamedStyle(System.String)"/>.</para>
        <para>To return a <c>NamedStyle</c>, call <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.GetNamedStyle(System.String)"/>.</para>
      </remarks>
      <example>
        <para>
          <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();

          //--- Create a named style.
          Style myItalicStyle = wb.CreateNamedStyle("ItalicStyle");

          //--- Turn on italics for the named style.
          myGlobalStyle.Font.Italics = true;

          //--- Get a "total" cell
          Cell totalCell = wb.Worksheets[0].Cells[4, 4];

          //--- Check its value and apply style if necessary
          if(totalCell.Value &gt; TARGET_TOTAL_VALUE)
               totalCell.ApplyStyle(myItalicStyle);
        </code>
          <br/>
          <code>

          Dim xla As New ExcelApplication()
          Workbook wb = xla.Create()

          '--- Create a named style.
          Dim myItalicStyle As Style = wb.CreateNamedStyle("ItalicStyle")

          '--- Turn on italics for the named style
          myGlobalStyle.Font.Italics = True

          '--- Get a "total" cell
          Dim totalCall As Cell = wb.Worksheets(0).Cells(4, 4)

          '--- Check its value and apply style if necessary
          If totalCell.Value &gt; TARGET_TOTAL_VALUE Then
               totalCell.ApplyStyle(myItalicStyle)
          End If
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NamedStyle.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NamedStyle&quot;]/Member[@signature=&quot;NamedStyle.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NamedStyle.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NamedStyle&quot;]/Member[@signature=&quot;NamedStyle.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.NamedStyle.Name">
            <Doc>
        <summary>
          <para>Returns the style's name. This can be used to access the style later, and will appear in the Styles dialog in Excel.</para>
        </summary>
        <example>
          <para>
            <code>
String styleName = namedStyl.Name;</code>
            <br/>
            <code>
Dim styleName As String = namedStyl.Name</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat">
            <Doc>
      <summary>
        <para>
          <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat"/> is a helper class that creates custom number format strings, which are used for formatting numbers and dates.   Use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Style.NumberFormat"/> to set a number format for a specific style.</para>
      </summary>
      <example>
        <para>
          <code>

          //--- Open a workbook.
          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Open(@"C:\report.xls");

          //--- Create a style.
          Style percentStyle = wb.CreateStyle();

          //--- Specify that the number format for the style is a percentage with three
          //--- decimal places (0.000%).
          //--- The following line is equivalent to percentStyle.NumberFormat = "0.000%"
          percentStyle.NumberFormat = wb.NumberFormat.CreatePercentage(3);
        </code>
          <br/>
          <code>

          '--- Open a workbook.
          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Open("C:\report.xls")

          '--- Create a style.
          Dim percentStyle As Style = wb.CreateStyle()

          '--- Specify that the number format for the style is a percentage with three
          '--- decimal places (0.000%).
          '--- The following line is equivalent to percentStyle.NumberFormat = "0.000%"
          percentStyle.NumberFormat = wb.NumberFormat.CreatePercentage(3)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.CreateAccounting(System.Int32,System.Boolean,SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color)">
            <Doc>
        <summary>
          <para>Creates an accounting format string.</para>
        </summary>
        <param name="numDecimalPlaces">
          <para>The number of decimal places to display.</para>
        </param>
        <param name="useDollarSign">
          <para>If <c>true</c>, the dollar sign will be displayed.</para>
        </param>
        <param name="negativeColor">
          <para>A color to use when displaying negative numbers.  <c>negativeColor</c> may be null.</para>
        </param>
        <returns>
          <para>An accounting format string.</para>
        </returns>
        <example>
          <para>
            <code>

          //--- Create a style.
          Style styl = wb.CreateStyle();

          //--- The following creates the format
          //--- "_($* #,##0.00_);[Green]_($* #,##0.00_);_(* \"-\"_);_(@_)"
          styl.NumberFormat = wb.NumberFormat.CreateAccounting(2,
               true,
               NumberFormat.Color.Green);
        </code>
            <br/>
            <code>

          '--- Create a style.
          Dim styl As Style = wb.CreateStyle()

          '--- The following creates the format
          '--- "_($* #,##0.00_);[Green]_($* #,##0.00_);_(* \"-\"_);_(@_)"
          styl.NumberFormat = wb.NumberFormat.CreateAccounting(2, _
               True, _
               NumberFormat.Color.Green)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.CreateCurrency(System.Int32,System.Boolean,System.Boolean,System.Boolean,SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color)">
            <Doc>
        <summary>
          <para>Creates a format string for displaying currency values.</para>
        </summary>
        <param name="numDecimalPlaces">
          <para>The number of decimal places to display.</para>
        </param>
        <param name="useDollarSign">
          <para>If <c>true</c>, the dollar sign will be displayed.</para>
        </param>
        <param name="useNegativeSign">
          <para>If <c>true</c>, the negative sign will be used for negative values.</para>
        </param>
        <param name="useParensForNegatives">
          <para>If <c>true</c>, negative numbers will be shown in parentheses.</para>
        </param>
        <param name="negativeColor">
          <para>A color to use when displaying negative numbers.  <c>negativeColor</c> may be null.</para>
        </param>
        <returns>
          <para>A currency format string.</para>
        </returns>
        <example>
          <para>
            <code>

          //--- Create a style.
          Style styl = wb.CreateStyle();

          //--- The following assigns the currency string "$#,##0.00;[Red]-$#,##0.00"
          //--- to the style.
          styl.NumberFormat =
               wb.NumberFormat.CreateCurrency(2,
               true,
               true,
               false,
               NumberFormat.Color.Red);
        </code>
            <br/>
            <code>

          '--- Create a style.
          Dim styl As Style = wb.CreateStyle()

          '--- The following assigns the currency string "$#,##0.00;[Red]-$#,##0.00"
          '--- to the style.
          styl.NumberFormat = wb.NumberFormat.CreateCurrency(2, _
               True, _
               True, _
               False, _
               NumberFormat.Color.Red)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.CreateCurrency(System.Int32,System.Boolean,System.Boolean,SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color,System.String,System.String,System.Boolean,System.Boolean)">
            <Doc>
        <summary>
          <para>Creates a format string for displaying currency values, and allows locale-specific currency symbols.</para>
        </summary>
        <param name="numDecimalPlaces">
          <para>The number of decimal places to display.</para>
        </param>
        <param name="useNegativeSign">
          <para>If <c>true</c>, the negative sign will be used for negative values.</para>
        </param>
        <param name="useParensForNegatives">
          <para>If <c>true</c>, negative numbers will be shown in parentheses.</para>
        </param>
        <param name="negativeColor">
          <para>A color to use when displaying negative numbers.  <c>negativeColor</c> may be null.</para>
        </param>
        <param name="currencySymbol">
          <para>A string representing the currency symbol.  This could be the individual Unicode character for the currency symbol (such as the dollar, pound, euro, etc) or the alphabetic representation of the currency symbol (such as USD, GBP, EUR, etc).  If this value is null, no currency string or formatting will be inserted.</para>
        </param>
        <param name="localeCode">
          <para>A string representing the Windows locale code, used for determining display on localized versions of Excel.  This is optional, and can be null.</para>
        </param>
        <param name="currencyAtFront">
          <para>If the currencySymbol is non-null, this param determines if the currency string will appear before the number or after.  If true, the symbol will appear before the value.  If currencySymbol is null, this value is ignored.</para>
        </param>
        <param name="spaceBetween">
          <para>If the currencySymbol is non-null, and this param is true, a space will appear between the currency symbol and the value.  If currencySymbol is null, this value is ignored.</para>
        </param>
        <returns>
          <para>A currency format string.</para>
        </returns>
        <example>
          <para>
            <code>

          //--- Create a style.
          Style styl = wb.CreateStyle();

          //--- The following assigns the currency string "[$â‚¬-2] #,##0.00;[Red][$â‚¬-2] #,##0.00"
          //--- to the style, which will use the Euro symbol prior to the values, with the
          //--- color red for negative values.
          styl.NumberFormat = wb.NumberFormat.CreateCurrency(2,
               false,
               false,
               NumberFormat.Color.Red,
               "â‚¬",
               "2",
               true,
               true);
        </code>
            <br/>
            <code>

          '--- Create a style.
          Dim styl As Style = wb.CreateStyle()

          '--- The following assigns the currency string "[$â‚¬-2] #,##0.00;[Red][$â‚¬-2] #,##0.00"
          '--- to the style, which will use the Euro symbol prior to the values, with the
          '--- color red for negative values.
          styl.NumberFormat = wb.NumberFormat.CreateCurrency(2, _
               False, _
               False, _
               NumberFormat.Color.Red, _
               "â‚¬", _
               "2", _
               True, _
               True)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.CreateFraction(System.Int32)">
            <Doc>
        <summary>
          <para>Creates a string for displaying fractions.</para>
        </summary>
        <param name="numDigits">
          <para>The number of digits to display.</para>
        </param>
        <returns>
          <para>A fraction format string.</para>
        </returns>
        <example>
          <para>
            <code>

          //--- Create a style.
          Style styl = wb.CreateStyle();

          //--- Create the fraction format "# ???/???".
          styl.NumberFormat = wb.NumberFormat.CreateFraction(3);
        </code>
            <br/>
            <code>

          '--- Create a style.
          Dim styl As Style = wb.CreateStyle()

          '--- Create the fraction format "# ???/???"
          styl.NumberFormat = wb.NumberFormat.CreateFraction(3)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.CreateFraction(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Creates a string for displaying fractions.</para>
        </summary>
        <param name="numDigits">
          <para>The number of digits to display.</para>
        </param>
        <param name="denominator">
          <para>The value to use as denominator.</para>
        </param>
        <returns>
          <para>A fraction format string.</para>
        </returns>
        <example>
          <para>
            <code>

          //--- Create a style.
          Style styl = wb.CreateStyle();

          //--- Create the fraction format "# ??/10".
          styl.NumberFormat = wb.NumberFormat.CreateFraction(2, 10);
        </code>
            <br/>
            <code>

          '--- Create a style.
          Dim styl As Style = wb.CreateStyle()

          '--- Create the fraction format "# ??/10".
          styl.NumberFormat = wb.NumberFormat.CreateFraction(2, 10)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.CreateNumber(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color)">
            <Doc>
        <summary>
          <para>Creates a format string for displaying numbers.</para>
        </summary>
        <param name="numDecimalPlaces">
          <para>The number of decimal places to display.</para>
        </param>
        <param name="dropTrailingZeros">
          <para>If <c>true</c>, trailing zeros will be dropped.  If <c>false</c>, trailing zeros will be displayed.</para>
        </param>
        <param name="use1000Seperator">
          <para>If <c>true</c>, the 1000 separator (,) will be displayed.</para>
        </param>
        <param name="useNegativeSign">
          <para>If <c>true</c>, the negative sign will be used.</para>
        </param>
        <param name="useParensForNegatives">
          <para>If <c>true</c>, negative numbers will be shown in parentheses.</para>
        </param>
        <param name="negativeColor">
          <para>A color to use when displaying negative numbers.  <c>negativeColor</c> may be null.</para>
        </param>
        <returns>
          <para>A number format string.</para>
        </returns>
        <example>
          <para>
            <code>

          //--- Create a style.
          Style styl = wb.CreateStyle();

          //--- The following assigns the number string "#,##0.##;-#,##0.##"
          //--- to the style.
          styl.NumberFormat =
               wb.NumberFormat.CreateNumber(2,
               true,
               true,
               true,
               false,
               NumberFormat.Color.Red);
        </code>
            <br/>
            <code>

          '--- Create a style.
          Dim styl As Style = wb.CreateStyle()

          '--- The following assigns the number string "#,##0.##;-#,##0.##"
          '--- to the style.
          styl.NumberFormat = _
               wb.NumberFormat.CreateNumber(2, _
               True, _
               True, _
               True, _
               False, _
               NumberFormat.Color.Redl)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.CreatePercentage(System.Int32)">
            <Doc>
        <summary>
          <para>Creates a string for displaying percentages.</para>
        </summary>
        <param name="numDecimalPlaces">
          <para>The number of decimal places to display.</para>
        </param>
        <returns>
          <para>A format string for percentages.</para>
        </returns>
        <example>
          <para>
            <code>

          //--- Create a style.
          Style styl = wb.CreateStyle();

          //--- Create the percentage format "0.000%".
          styl.NumberFormat = wb.NumberFormat.CreatePercentage(3);
        </code>
            <br/>
            <code>

          '--- Create a style.
          Dim styl As Style = wb.CreateStyle()

          '--- Create the percentage format "0.000%".
          styl.NumberFormat = wb.NumberFormat.CreatePercentage(3)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.CreateScientific(System.Int32)">
            <Doc>
        <summary>
          <para>Creates a scientific number format string.</para>
        </summary>
        <param name="numDecimalPlaces">
          <para>The number of decimal places to display.</para>
        </param>
        <returns>
          <para>A scientific number format string.</para>
        </returns>
        <example>
          <para>
            <code>

          //--- Create a style.
          Style styl = wb.CreateStyle();

          //--- Create the scientific format "0.000E+00".
          styl.NumberFormat = wb.NumberFormat.CreateScientific(3);
        </code>
            <br/>
            <code>

          '--- Create a style.
          Dim styl As Style = wb.CreateStyle()

          '--- Create the scientific format "0.000E+00".
          styl.NumberFormat = wb.NumberFormat.CreateScientific(3)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NumberFormat&quot;]/Member[@signature=&quot;NumberFormat.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NumberFormat&quot;]/Member[@signature=&quot;NumberFormat.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color">
            <Doc>
        <summary>
          <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color"/> enumeration contains the colors that can be used to display negative numbers in a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat"/>.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color.Black">
            <Doc>
          <summary>Negative values will be black.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color.Blue">
            <Doc>
          <summary>Negative values will be blue.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color.Cyan">
            <Doc>
          <summary>Negative values will be cyan.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color.Green">
            <Doc>
          <summary>Negative values will be green.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color.Magenta">
            <Doc>
          <summary>Negative values will be magenta.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color.None">
            <Doc>
          <summary>Negative values will be the same color as positive values.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color.Red">
            <Doc>
          <summary>Negative values will be red.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color.White">
            <Doc>
          <summary>Negative values will be white.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color.Yellow">
            <Doc>
          <summary>Negative values will be yellow.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NumberFormat&quot;]/Member[@signature=&quot;NumberFormat.Color&quot;]/Member[@signature=&quot;NumberFormat.Color.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NumberFormat&quot;]/Member[@signature=&quot;NumberFormat.Color&quot;]/Member[@signature=&quot;NumberFormat.Color.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NumberFormat&quot;]/Member[@signature=&quot;NumberFormat.Color&quot;]/Member[@signature=&quot;NumberFormat.Color.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NumberFormat&quot;]/Member[@signature=&quot;NumberFormat.Color&quot;]/Member[@signature=&quot;NumberFormat.Color.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Color.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;NumberFormat&quot;]/Member[@signature=&quot;NumberFormat.Color&quot;]/Member[@signature=&quot;NumberFormat.Color.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.DateFormat">
            <Doc>
        <summary>
          <para>
            <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat"/> values for Date data types</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.DateFormat.DayMonthYear">
            <Doc>
          <summary>d-mmm-yyyy;@ For example, 2-Feb-08.)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.DateFormat.DayOfWeekMonthDayYear">
            <Doc>
          <summary>dddd, mmmm dd, yyyy (For example, Saturday, February 2, 2008.)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.DateFormat.FullTextMonthDayYear">
            <Doc>
          <summary>mmmm d, yyyy;@ (For example, February 2, 2008.)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.DateFormat.FullTextMonthYear">
            <Doc>
          <summary>mmmm-yy;@ (For example, February-08.)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.DateFormat.MonthDay">
            <Doc>
          <summary>m/d;@<br/>(For example 2/2 for February 2nd.)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.DateFormat.MonthDayYear">
            <Doc>
          <summary>m/d/yy;@<br/>(For example, 2/2/08.)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.DateFormat.MonthDayYearHourMinute12">
            <Doc>
          <summary>m/d/yy h:mm AM/PM;@ (For example, 2/2/08 12:00 AM)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.DateFormat.MonthDayYearHourMinute24">
            <Doc>
          <summary>m/d/yy h:mm;@ (For example, 2/2/08 0:00)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.DateFormat.MonthDayYearPreserveLeadingZero">
            <Doc>
          <summary>mm/dd/yy;@<br/>(For example, 02/02/08.)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.DateFormat.MonthSingleLetter">
            <Doc>
          <summary>mmmmm;@ (For example, D for December or S for Septmeber.)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.DateFormat.MonthSingleLetterYear">
            <Doc>
          <summary>mmmmm-yy;@ (For example, F-08 for February 2008.)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.DateFormat.TextDayMonth">
            <Doc>
          <summary>d-mmm;@<br/>(For example, 2-Feb.)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.DateFormat.TextDayMonthYear">
            <Doc>
          <summary>d-mmm-yy;@<br/>(For example, 2-Feb-08.)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.DateFormat.TextDayMonthYearPreserveLeadingZero">
            <Doc>
          <summary>dd-mmm-yy;@<br/>(For example, 02-Feb-08.)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.DateFormat.TextMonthYear">
            <Doc>
          <summary>mmm-yy;@ (For example, Feb-08.)</summary>
        </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Special_EN_US">
            <Doc>
        <summary>
          <para>
            <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat"/> values for specialized American numbers</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Special_EN_US.PhoneNumber">
            <Doc>
          <summary>[&lt;=9999999]###-####;<br/><br/>(###) ###-####</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Special_EN_US.SocialSecurityNumber">
            <Doc>
          <summary>000-00-0000</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Special_EN_US.ZipCode">
            <Doc>
          <summary>00000</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.Special_EN_US.ZipCodePlus4">
            <Doc>
          <summary>00000-0000</summary>
        </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.TimeFormat">
            <Doc>
        <summary>
          <para>
            <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat"/> values for Time data types</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.TimeFormat.ElapsedTimeInHours">
            <Doc>
          <summary>[h]:mm:ss;@ (For example, 846312:00:00. For elapsed time Microsoft uses the start date of January 1, 1900.)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.TimeFormat.ElapsedTimeInMinutes">
            <Doc>
          <summary>[mm]:ss;@ (For example, 50778720:00. For elapsed time Microsoft uses the start date of January 1, 1900.)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.TimeFormat.ElapsedTimeInSeconds">
            <Doc>
          <summary>[ss];@ (For example, 3046723200. For elapsed time Microsoft uses the start date of January 1, 1900.)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.TimeFormat.HourMinute12">
            <Doc>
          <summary>h:mm AM/PM;@ (For example, 12:00 AM.)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.TimeFormat.HourMinute24">
            <Doc>
          <summary>h:mm;@    (For example, 0:00.)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.TimeFormat.HourMinuteSecond12">
            <Doc>
          <summary>h:mm:ss AM/PM;@ (For example, 12:00:00 AM.)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.TimeFormat.HourMinuteSecond24">
            <Doc>
          <summary>h:mm:ss;@ (For example, 0:00:00.)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.NumberFormat.TimeFormat.MinuteSecondTenths">
            <Doc>
          <summary>mm:ss.0;@ (For example, 00:00.0.)</summary>
        </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ObjectPositioning">
            <Doc>
      <summary>
        <para>Enumeration of the available resize and reposition behaviors of an object when the cells in the spreadsheet it spans are changed.</para>
      </summary>
    </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ObjectPositioning.MoveAndNoResize">
            <Doc>
        <summary>Move the object and do not resizt it according to cell size</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ObjectPositioning.MoveAndResize">
            <Doc>
        <summary>Move the object and resize it according to cell size</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ObjectPositioning.NoMoveAndNoResize">
            <Doc>
        <summary>Do not move the object and do not change its size</summary>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ObjectPositioning.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ObjectPositioning&quot;]/Member[@signature=&quot;ObjectPositioning.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ObjectPositioning.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ObjectPositioning&quot;]/Member[@signature=&quot;ObjectPositioning.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ObjectPositioning.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ObjectPositioning&quot;]/Member[@signature=&quot;ObjectPositioning.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ObjectPositioning.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ObjectPositioning&quot;]/Member[@signature=&quot;ObjectPositioning.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ObjectPositioning.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ObjectPositioning&quot;]/Member[@signature=&quot;ObjectPositioning.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Othersheet">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Othersheet"/> object represents a sheet that is not a worksheet or a chartsheet. This sheet represents VBA Module and dialog sheets. These are not currently implemented by ExcelWriter</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Othersheet.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Othersheet&quot;]/Member[@signature=&quot;Othersheet.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Othersheet.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Othersheet&quot;]/Member[@signature=&quot;Othersheet.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Palette">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Palette"/> class represents Excel's color palette. </para>
      </summary>
      <remarks>
        <para>Each Excel document has a single color palette that manages the colors for formatting and some drawing layer colors. A color palette contains 56 colors that may be referenced. Each of these 56 colors may be customized, but changing a color in the palette will affect all formatting that uses the referenced color. A workbook's color palette is accessible through <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.Palette"/>.</para>
      </remarks>
      <example>
        <para>
          <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          Palette pal = wb.Palette;
        </code>
          <br/>
          <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim pal As Palette = wb.Palette
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Palette.MaxColorIndex">
            <Doc>
        <summary>
          <para>The maximum valid index of a color within the palette.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Palette.MaxRGBValue">
            <Doc>
        <summary>
          <para>The maximum value that an RGB component value may have.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Palette.MinColorIndex">
            <Doc>
        <summary>
          <para>The minimum valid index of a color within the palette.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Palette.MinRGBValue">
            <Doc>
        <summary>
          <para>The minimum value that an RGB component value may have.</para>
        </summary>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Palette.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Palette&quot;]/Member[@signature=&quot;Palette.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Palette.GetClosestColor(System.Int32,System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Returns the color in the palette closest to the specified RGB value. The closest match is defined as the color in the palette that has the minimum difference between the specified RGB value and its RGB value.</para>
        </summary>
        <param name="red">
          <para>The red component of the desired color. Must be between 0 and 255.</para>
        </param>
        <param name="green">
          <para>The green component of the desired color. Must be between 0 and 255.</para>
        </param>
        <param name="blue">
          <para>The blue component of the desired color. Must be between 0 and 255.</para>
        </param>
        <returns>
          <para>The closest color in the palette to the specified RGB value</para>
        </returns>
        <example>
          <para>
            <code>
Color clr = pal.GetClosestColor(162, 221, 139);</code>
            <br/>
            <code>
Dim clr As Color = pal.GetCloestColor(162, 221, 139)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Palette.GetClosestColor(System.Drawing.Color)">
            <Doc>
        <summary>
          <para>Returns the color in the palette closest to the specified color. The closest match is defined as the color in the palette that has the minimum difference between RGB value of the specified color and its RGB value.</para>
        </summary>
        <param name="color">
          <para>The desired color.</para>
        </param>
        <returns>
          <para>The closest color in the palette to the specified RGB value</para>
        </returns>
        <example>
          <para>
            <code>
Color clr = pal.GetClosestColor(System.Drawing.Color.Red);</code>
            <br/>
            <code>
Dim clr As Color = pal.GetClosestColor(System.Drawing.Color.Red)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Palette.GetColor(System.Int32,System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Returns the color in the palette that has the specified RGB value. An exception will be thrown if no color in the palette has the specified RGB value.</para>
        </summary>
        <param name="red">
          <para>The red component of the desired color. Must be between 0 and 255.</para>
        </param>
        <param name="green">
          <para>the green component of the desired color. Must be between 0 and 255.</para>
        </param>
        <param name="blue">
          <para>the blue component of the desired color. Must be between 0 and 255.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Color"/> object representing the color with the specified RGB value.</para>
        </returns>
        <example>
          <para>
            <code>
Color blue = pal.GetColor(0, 0, 255);</code>
            <br/>
            <code>
Dim blue As Color = pal.GetColor(0, 0, 255)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Palette.GetColor(System.Drawing.Color)">
            <Doc>
        <summary>
          <para>Returns the color in the palette identical to the specified color. An exception will be thrown if the color is not in the palette.</para>
        </summary>
        <param name="color">
          <para>The desired color.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Color"/> object in the palette that matches the specified color.</para>
        </returns>
        <example>
          <para>
            <code>
Color clr = pal.GetColor(System.Drawing.Color.Red);</code>
            <br/>
            <code>
Dim clr As Color = pal.GetColor(System.Drawing.Color.Red)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Palette.GetColorAt(System.Int32)">
            <Doc>
        <summary>
          <para>Returns the color at the specified 0-based index within the Palette.</para>
        </summary>
        <param name="index">
          <para>The 0-based index of the color to return. Must be between 0 and 55.</para>
        </param>
        <returns>
          <para>The color at the specified index.</para>
        </returns>
        <example>
          <para>
            <code>
Color clr = pal.GetColorAt(4);</code>
            <br/>
            <code>
Dim clr As Color = pal.GetColorAt(4)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Palette.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Palette&quot;]/Member[@signature=&quot;Palette.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Palette.SetColor(SoftArtisans.OfficeWriter.ExcelWriter.Color,System.Int32,System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Changes the RGB value of a specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Color"/> object. <c>Color</c> must exist in the palette.</para>
        </summary>
        <param name="color">
          <para>The <c>Color</c> object to modify. This must be a Palette color (i.e. <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Color.IsPaletteColor"/> must return true).</para>
        </param>
        <param name="red">
          <para>The red component of the desired color. Must be between 0 and 255.</para>
        </param>
        <param name="green">
          <para>The green component of the desired color. Must be between 0 and 255.</para>
        </param>
        <param name="blue">
          <para>The blue component of the desired color. Must be between 0 and 255.</para>
        </param>
        <example>
          <para>
            <code>
palette.SetColor(clr, 162, 221, 138);</code>
            <br/>
            <code>
palette.SetColor(clr, 162, 221, 138)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Palette.SetColorAt(System.Int32,System.Int32,System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Replaces the color at the specified index with a new color.</para>
        </summary>
        <param name="index">
          <para>The 0-based index of the color to modify. Must be between 0 and 55.</para>
        </param>
        <param name="red">
          <para>The red component of the desired color. Must be between 0 and 255.</para>
        </param>
        <param name="green">
          <para>The green component of the desired color. Must be between 0 and 255.</para>
        </param>
        <param name="blue">
          <para>The blue component of the desired color. Must be between 0 and 255.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Color"/> object representing the new color at the specified index in the palette.</para>
        </returns>
        <example>
          <para>
            <code>
pal.SetColorAt(4, 162, 221, 138);</code>
            <br/>
            <code>
pal.SetColorAt(4, 162, 221, 138)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Palette.SystemColor">
            <Doc>
        <summary>
          <para>Primary System Colors</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Palette.SystemColor.AutomaticFill">
            <Doc>
          <summary>Default color for fills and backgrounds, usually white</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Palette.SystemColor.AutomaticLine">
            <Doc>
          <summary>Default color for lines, usually Black</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Palette.SystemColor.Black">
            <Doc>
          <summary>Black.  RGB: 0,0,0; Hex: #000000</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Palette.SystemColor.Blue">
            <Doc>
          <summary>Blue. RGB: 0, 0, 255; Hex: #0000FF</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Palette.SystemColor.Cyan">
            <Doc>
          <summary>Cyan.  RGB: 0, 255, 255; Hex: #00FFFF</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Palette.SystemColor.Green">
            <Doc>
          <summary>Green.  RGB: 0, 255, 0; Hex: #00FF000</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Palette.SystemColor.Magenta">
            <Doc>
          <summary>Magenta.  RGB: 255, 0, 255; Hex: #FF00FF</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Palette.SystemColor.Red">
            <Doc>
          <summary>Red.  RGB: 255, 0, 0; Hex: #FF0000</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Palette.SystemColor.White">
            <Doc>
          <summary>White.  RGB: 255, 255, 255; Hex: #FFFFFF</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Palette.SystemColor.Yellow">
            <Doc>
          <summary>Yellow.  RGB: 255, 255, 0; Hex: #FFFF00</summary>
        </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Pattern">
            <Doc>
      <summary>
        <para>Pattern contains all available background patterns for charts and pictures. </para>
      </summary>
      <remarks>
        <para>Note that the pattern you select will appear in front of the object's background color. The examples in the following table assume a white background color.</para>
        <para>Additionally, the pattern names do not match up cleanly with the names of the patterns available for <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartInterior"/> objects.  The corresponding names are listed below.</para>
      </remarks>
    </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.DiagonalCrosshatch">
            <Doc>
        <summary>Diagonal crosshatch pattern </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.DiagonalStripe">
            <Doc>
        <summary>Diagonal stripe pattern. </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.Gray12">
            <Doc>
        <summary>12.5-percent grey pattern. </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.Gray25">
            <Doc>
        <summary>25-percent gray pattern. </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.Gray50">
            <Doc>
        <summary>50-percent gray pattern. </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.Gray6">
            <Doc>
        <summary>6.25-percent grey pattern. </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.Gray75">
            <Doc>
        <summary>75-percent gray pattern. </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.HorizontalStripe">
            <Doc>
        <summary>Horizontal stripe pattern. </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.None">
            <Doc>
        <summary>No pattern type applied.</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.ReverseDiagonalStripe">
            <Doc>
        <summary>Reverse diagonal stripe patter </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.Solid">
            <Doc>
        <summary>Solid pattern type. </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.ThickDiagonalCrosshatch">
            <Doc>
        <summary>Thick diagonal crosshatch pattern. </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.ThinDiagonalCrosshatch">
            <Doc>
        <summary>Thin diagonal crosshatch pattern. </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.ThinDiagonalStripe">
            <Doc>
        <summary>Thin diagonal stripe pattern. </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.ThinHorizontalCrosshatch">
            <Doc>
        <summary>Thin horizontal crosshatch pattern. </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.ThinHorizontalStripe">
            <Doc>
        <summary>Thin horizontal stripe pattern. </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.ThinReverseDiagonalStripe">
            <Doc>
        <summary>Thin reverse diagonal stripe pattern. </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.ThinVerticalStripe">
            <Doc>
        <summary>Thin vertical stripe pattern. </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.VerticalStripe">
            <Doc>
        <summary>Vertical stripe pattern. </summary>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Pattern&quot;]/Member[@signature=&quot;Pattern.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Pattern&quot;]/Member[@signature=&quot;Pattern.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Pattern&quot;]/Member[@signature=&quot;Pattern.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Pattern&quot;]/Member[@signature=&quot;Pattern.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Pattern.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Pattern&quot;]/Member[@signature=&quot;Pattern.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Picture">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Picture"/> object represents a picture in a worksheet and allows the size, position, and content of the picture to be managed. Once created, the data of a picture may not be changed or replaced with the data of another picture. Instead, delete the picture and create a new one.</para>
      </summary>
      <remarks>
        <para>To create a <c>Picture</c> object, call <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Pictures.CreatePicture(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Anchor)"/>.</para>
      </remarks>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Picture.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Picture&quot;]/Member[@signature=&quot;Picture.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Picture.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Picture&quot;]/Member[@signature=&quot;Picture.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Picture.Height">
            <Doc>
        <summary>
          <para>Sets or returns the height of the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Picture"/>, in points (1/72 inch).</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Picture.LockAspectRatio">
            <Doc>
        <summary>
          <para>Sets or returns whether the aspect ratio of the picture will be locked in Excel. This setting has no effect within ExcelWriter.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Picture.Name">
            <Doc>
        <summary>
          <para>Sets or returns the picture's name.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Picture.PictureData">
            <Doc>
        <summary>
          <para>Returns a new byte array containing the data of the picture as it would appear in an image file.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Picture.Position">
            <Doc>
        <summary>
          <para>Sets or returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Picture"/> 's position in the worksheet.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Picture.Shape">
            <Doc>
        <summary>
          <para>Returns the underlying <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Picture.Shape"/> object for this <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Picture"/>, allowing advanced formatting to be set.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Picture.Width">
            <Doc>
        <summary>
          <para>Sets or returns the width of the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Picture"/>, in points (1/72 inch).</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Pictures">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Pictures"/> collection represents the set of pictures in a worksheet. To return a <c>Pictures</c> collection, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Pictures"/>.</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Pictures.GetEnumerator">
            <Doc>
        <summary>
          <para>Returns an IEnumerator for the Pictures in a Worksheet</para>
        </summary>
        <returns>
          <para>An enumerator for the Pictures in a Worksheet as a System.Collections.IEnumerator</para>
        </returns>
        <example>
          <para>
            <code>
IEnumerator enumerator = ws.Pictures.GetEnumerator();
</code>
            <br/>
            <code>
Dim enumerator as IEnumerator = ws.Pictures.GetEnumerator()
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Pictures.CreatePicture(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Anchor)">
            <Doc>
        <summary>
          <para>Creates a new <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Picture"/> object from an existing image.</para>
        </summary>
        <param name="pictureFile">
          <para>The file to create the picture from. This file should be in JPEG, PNG, BMP, or GIF format and accessible in the context ExcelWriter is running in.</para>
        </param>
        <param name="position">
          <para>The position to place the upper-left corner of the new picture.</para>
        </param>
        <returns>
          <para>A <c>Picture</c> object.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Pictures.CreatePicture(System.IO.Stream,SoftArtisans.OfficeWriter.ExcelWriter.Anchor)">
            <Doc>
        <summary>
          <para>Creates a new <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Picture"/> object from an existing image.</para>
        </summary>
        <param name="pictureStream">
          <para>A stream containing data for a JPEG, PNG, BMP, or GIF       formatted image. The calling application is responsible for      closing this stream.</para>
        </param>
        <param name="position">
          <para>The position to place the upper-left corner of the new picture.</para>
        </param>
        <returns>
          <para>A <c>Picture</c> object.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Pictures.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Pictures&quot;]/Member[@signature=&quot;Pictures.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Pictures.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Pictures&quot;]/Member[@signature=&quot;Pictures.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Pictures.ListPictures">
            <Doc>
        <summary>
          <para>Returns an array of all the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Picture"/> objects in the worksheet.</para>
        </summary>
        <returns>
          <para>An array of all the <c>Picture</c> objects in the workbook.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Pictures.Remove(SoftArtisans.OfficeWriter.ExcelWriter.Picture)">
            <Doc>
        <summary>
          <para>Deletes the specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Picture"/> object from the worksheet.</para>
        </summary>
        <param name="picture">
          <para>The <c>Picture</c> object to remove.</para>
        </param>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Pictures.Remove(System.Int32)">
            <Doc>
        <summary>
          <para>Deletes the specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Picture"/> object from the worksheet.</para>
        </summary>
        <param name="position">
          <para>The 0-based position of the <c>Picture</c> object in the array returned by <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Pictures.ListPictures"/>.</para>
        </param>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Pictures.Count">
            <Doc>
        <summary>
          <para>Returns the number of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Picture"/> objects in the collection.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Pictures.Item(System.Int32)">
            <Doc>
        <summary>
          <para>Returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Picture"/> object at the specified position in the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Pictures"/> collection. <c>Picture</c> is the indexer for the <c>Pictures</c> class.</para>
        </summary>
        <param name="index">
          <para>A valid index between 0 and <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Pictures.Count"/>.</para>
        </param>
        <returns>
          <para>The <c>Picture</c> object at the specified position.</para>
        </returns>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Pictures.Item(System.String)">
            <Doc>
        <summary>
          <para>Returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Picture"/> object with the specified name in the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Pictures"/> collection. <c>Picture</c> is the indexer for the <c>Pictures</c> class.</para>
        </summary>
        <param name="name">
          <para>A name assigned by Excel to a Picture.</para>
        </param>
        <returns>
          <para>The <c>Picture</c> object with the specified name.</para>
        </returns>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Range">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/> object represents a range in a workbook.</para>
      </summary>
      <remarks>
        <para>A range is a collection of areas. An area is a rectangular collection of cells. The areas in a range may be non-adjacent, and a range can include areas in different worksheets.</para>
        <para>To create a <c>Range</c> (without a name), call one of the following methods:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateRange(System.String)"/>
            </description>
          </item>
          <item>
            <description>
              <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CreateRange(System.String)"/>
            </description>
          </item>
        </list>
        <para>If a range is named, it will be accessible when the workbook is opened in  Microsoft Excel. To create a named range, call one of the following methods:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateNamedRange(System.String,System.String)"/>
            </description>
          </item>
          <item>
            <description>
              <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CreateNamedRange(System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/>
            </description>
          </item>
          <item>
            <description>
              <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CreateNamedRange(System.String,System.String)"/>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>
          <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          wb.Worksheets.CreateWorksheet("Sheet2");
          Range rng = wb.CreateRange("=Sheet1!A1:A3, Sheet2!A2:C5");
        </code>
          <br/>
          <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          wb.Worksheets.CreateWorksheet("Sheet2")
          Dim rng As Range = wb.CreateRange("=Sheet1!A1:A3, Sheet2!A2:C5")
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Range.ApplyStyle(SoftArtisans.OfficeWriter.ExcelWriter.Style)">
            <Doc>
        <summary>
          <para>Applies a style to the area. When a style is applied - rather than set (see <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Range.SetStyle(SoftArtisans.OfficeWriter.ExcelWriter.Style)"/> ) - only the differences between the new style and style properties previously assigned to the range (through the ExcelWriter API) will take effect. For example, if the range has a background color and the new style applied does not contain a background color, the area's color will not be affected.</para>
        </summary>
        <param name="style">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Style"/> object representing the style to apply to the cell.</para>
        </param>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Range.ClearContent">
            <Doc>
        <summary>
          <para>Clears the content of all cells in the range. Calling this method is equivalent to setting an range's style to "Normal" and its cell values to null.</para>
        </summary>
        <example>
          <para>
            <code>
rng.ClearContent();</code>
            <br/>
            <code>
rng.ClearContent()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Range.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Range&quot;]/Member[@signature=&quot;Range.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Range.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Range&quot;]/Member[@signature=&quot;Range.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Range.JoinRange(SoftArtisans.OfficeWriter.ExcelWriter.Range)">
            <Doc>
        <summary>
          <para>Adds another range to this range.</para>
        </summary>
        <param name="range">
          <para>The range to be added to the current range.</para>
        </param>
        <example>
          <para>
            <code>
rng.JoinRange(rng2);</code>
            <br/>
            <code>
rng.JoinRange(rng2)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Range.RemoveConditionalFormat">
            <Doc>
        <summary>
          <para>This method removes any ConditionalFormat objects from the Range.</para>
        </summary>
        <example>
          <para>
            <code>
range.RemoveConditionalFormat();</code>
            <br/>
            <code>
range.RemoveConditionalFormat()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Range.SetConditionalFormat(SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat)">
            <Doc>
        <summary>
          <para>This method copies the specified ConditionaFormat object and associates it with this Range. If any ConditionalFormat objects already exist within the Range, they will be removed and replaced by the specifed one.</para>
        </summary>
        <param name="conditionalFormat"/>
        <example>
          <para>
            <code>
range.SetConditionalFormat(condFmt);</code>
            <br/>
            <code>
range.SetConditionalFormat(condFmt)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Range.SetDataValidation(SoftArtisans.OfficeWriter.ExcelWriter.DataValidation)">
            <Doc>
        <summary>
          <para>Assigns a data validation rule to all cells in the Range.</para>
        </summary>
        <param name="dataValidation">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation"/> object representing the data validation rule to assign to the Range.</para>
        </param>
        <example>
          <para>
            <code>
rng.SetDataValidation(myDataValidation);</code>
            <br/>
            <code>
rng.SetDataValidation(myDataValidation)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Range.SetStyle(SoftArtisans.OfficeWriter.ExcelWriter.Style)">
            <Doc>
        <summary>
          <para>Sets the style for every cell in this range. When a style is set - rather than applied (see <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Range.ApplyStyle(SoftArtisans.OfficeWriter.ExcelWriter.Style)"/> ) - all previously assigned style properties, including font and number formatting, will be overwritten for all cells in the range.</para>
        </summary>
        <param name="style">
          <para>The Style object to assign to the range.</para>
        </param>
        <example>
          <para>
            <code>
rng.SetStyle(styl);</code>
            <br/>
            <code>
rng.SetStyle(styl)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Range.ToString">
            <Doc>
        <summary>
          <para>Returns a string representation of the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object.</para>
        </summary>
        <returns>
          <para>A string representation of the <c>Area</c> object.</para>
        </returns>
        <example>
          <para>
            <code>
string color = area.ToString();</code>
            <br/>
            <code>
Dim color As String = area.ToString()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Range.AreaCount">
            <Doc>
        <summary>
          <para>Returns the number of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> objects contained in this <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/>.</para>
        </summary>
        <example>
          <para>
            <code>
int numAreas = rng.AreaCount;</code>
            <br/>
            <code>
Dim numAreas As Integer = rng.AreaCount</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Range.Areas">
            <Doc>
        <summary>
          <para>Returns an array of the rectangular areas contained in the Range.</para>
        </summary>
        <example>
          <para>
            <code>
Area[] rectAreas = rng.Areas;</code>
            <br/>
            <code>
Dim rectAreas() As Area = rng.Areas</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Range.BorderAround">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Border"/> object that represents a border around the range.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get BorderAround
          Border b = rng.BorderAround;

          //--- Set BorderAround
          rng.BorderAround = b;
        </code>
            <br/>
            <code>

          '--- Get BorderAround
          Dim b As Border = rng.BorderAround

          '--- Set BorderAround
          rng.BorderAround = b
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Range.FirstCellStyle">
            <Doc>
        <summary>
          <para>Returns the style for the first cell in the range. Changes to this style will apply  <u>only</u>  to the first cell. To assign this style to the entire Range, set <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Range.SetStyle(SoftArtisans.OfficeWriter.ExcelWriter.Style)"/> to this <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Style"/> reference.</para>
        </summary>
        <example>
          <para>
            <code>
Style firstStyle = rng.FirstCellStyle;</code>
            <br/>
            <code>
Dim firstStyle As Style = rng.FirstCellStyle</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Range.Item(System.Int32)">
            <Doc>
        <summary>
          <para>Returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object at the specified 0-based index.</para>
        </summary>
        <param name="index">
          <para>The index of the <c>Area</c> to get.</para>
        </param>
        <returns>
          <para>The <c>Area</c> at the specified 0-based index.</para>
        </returns>
        <example>
          <para>
            <code>
Area a = rng[0];</code>
            <br/>
            <code>
Dim a As Area = rng(0)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.RowProperties">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.RowProperties"/> class represents a single row in a worksheet. To return a <c>RowProperties</c> object, use <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.GetRowProperties(System.Int32)"/>.</para>
      </summary>
      <example>
        <para>
          <code>

          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();
          Worksheet ws = wb.Worksheets[0];
          RowProperties rowProps = ws.GetRowProperties(0);
        </code>
          <br/>
          <code>

          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()
          Dim ws As Worksheet = wb.Worksheets(0)
          Dim rowProps As RowProperties = ws.GetRowProperties(0)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.RowProperties.ApplyStyle(SoftArtisans.OfficeWriter.ExcelWriter.Style)">
            <Doc>
        <summary>
          <para>Applies a style to the row. </para>
        </summary>
        <param name="style">
          <para>The <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.RowProperties.Style"/> object to apply to the row.</para>
        </param>
        <remarks>
          <para>When a style is applied - rather than set (see <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.RowProperties.Style"/> ) - only the differences between the new style and style properties previously assigned to the row (through the ExcelWriter API or in Microsoft Excel) will take effect. For example, if a cell in the row has a background color and the new style applied does not contain a background color, the cell's color will not be affected. However, if the new style includes a background color, it will replace the existing background color of the cell.</para>
        </remarks>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.RowProperties.AutoFitHeight">
            <Doc>
        <summary>
          <para>Sets the width of the row to the height of the tallest cell value in the row.</para>
        </summary>
        <example>
          <para>
            <code>
rowProps.AutoFitHeight();</code>
            <br/>
            <code>
rowProps.AutoFitHeight()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.RowProperties.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;RowProperties&quot;]/Member[@signature=&quot;RowProperties.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.RowProperties.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;RowProperties&quot;]/Member[@signature=&quot;RowProperties.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.RowProperties.Height">
            <Doc>
        <summary>
          <para>Sets or returns the height of the row in points (1/72 of an inch).</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Height
          double rowHeight = rowProps.Height;
          
          //--- Set Height
          rowProps.Height = 35;
        </code>
            <br/>
            <code>

          '--- Get Height
          Dim rowHeight As Double = rowProps.Height

          '--- Set Height
          rowProps.Height = 35
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.RowProperties.Hidden">
            <Doc>
        <summary>
          <para>Sets or returns whether or not the row will be hidden when the workbook is opened in Excel.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Hidden
          bool hideRow = rowProps.Hidden;

          //--- Set Hidden
          rowProps.Hidden = false;
        </code>
            <br/>
            <code>

          '--- Get Hidden
          Dim hideRow As Boolean = rowProps.Hidden

          '--- Set Hidden
          rowProps.Hidden = False
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.RowProperties.OutlineCollapsed">
            <Doc>
        <summary>
          <para>Sets or returns whether the row's outlined row group is collapsed. If the outline is collapsed, the row is hidden.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get OutlineCollapsed
          bool collapsed = rowProps.OutlineCollapsed;

          //--- Set OutlineCollapsed
          rowProps.OutlineCollapsed = true;
        </code>
            <br/>
            <code>

          '--- Get OutlineCollapsed
          Dim collapsed As Boolean = rowProps.OutlineCollapsed

          '--- Set OutlineCollapsed
          rowProps.OutlineCollapsed = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.RowProperties.OutlineLevel">
            <Doc>
        <summary>
          <para>Sets or returns the outline level of the row, as a value between 0 and 7. The outline level is used to control grouping in Excel. For example, to group several rows, set their outline levels to 1; to group a subset of rows within the group, set their outline levels to 2.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get OutlineLevel
          int level = rowProps.OutlineLevel;

          //--- Set OutlineLevel
          rowProps.OutlineLevel = 4;
        </code>
            <br/>
            <code>

          '--- Get OutlineLevel
          Dim level As Integer = rowProps.OutlineLevel

          '--- Set OutlineLevel
          rowProps.OutlineLevel = 4
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.RowProperties.RowNumber">
            <Doc>
        <summary>
          <para>Returns the row's 0-based index.</para>
        </summary>
        <example>
          <para>
            <code>
int rowNum = rowProps.RowNumber;</code>
            <br/>
            <code>
Dim rowNum As Integer = rowProps.RowNumber</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.RowProperties.Style">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.RowProperties.Style"/> object that determines how cells in the row look, including number format, font, orientation, etc. Accessing this style will not affect the formatting of other cells with the same global style.</para>
        </summary>
        <remarks>
          <para>When a style is <u>set</u> on a column - rather than <u>applied</u> (see <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.RowProperties.ApplyStyle(SoftArtisans.OfficeWriter.ExcelWriter.Style)"/>) - all properties of the style take effect on the cells in that row.  Properties not explicitly set on the new style default to Normal style values.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get Style
          Style rowStyle = rowProps.Style;

          //--- Set Style
          rowProps.Style = styl;
        </code>
            <br/>
            <code>

          '--- Get Style
          Dim rowStyle As Style = rowProps.Style

          '--- Set Style
          rowProps.Style = styl
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Series">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Series"/> object represents a single data series in a chart. To return a <c>Series</c> object, use one of the <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection.CreateSeries(System.String,SoftArtisans.OfficeWriter.ExcelWriter.ChartType,SoftArtisans.OfficeWriter.ExcelWriter.AxisType)"/> methods.</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Series.ChangeConfiguration(SoftArtisans.OfficeWriter.ExcelWriter.ChartType,SoftArtisans.OfficeWriter.ExcelWriter.AxisType)">
            <Doc>
        <summary>
          <para>Changes the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.ChartType"/> and <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.AxisType"/> of the series at the same time. Certain combinations of charts do not allow these operations to be performed sequentially. For example, if a chart contains two pies on the primary axis and a line on the secondary, you cannot change the chart or axis type of a pie unless the changes are simultaneous.</para>
        </summary>
        <param name="type">
          <para>A <c>ChartType</c> value.</para>
        </param>
        <param name="axisType">
          <para>An <c>AxisType</c> value.</para>
        </param>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Series.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Series&quot;]/Member[@signature=&quot;Series.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Series.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Series&quot;]/Member[@signature=&quot;Series.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.AxisType">
            <Doc>
        <summary>
          <para>If the chart contains two X or Y axes, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.AxisType"/> sets or returns whether the series is associated with the primary or secondary axis.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.BubbleSizes">
            <Doc>
        <summary>
          <para>Sets or returns property returns null.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.ChartType">
            <Doc>
        <summary>
          <para>If the chart is a column-line chart, <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.ChartType"/> sets or returns the type of chart the series is associated with.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.DataLabels">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.SeriesDataLabel"/> object for formatting series data labels.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.DataPointMarker">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.DataPointMarker"/> object representing the data markers of a line, radar, or scatter series.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.ErrorBarX">
            <Doc>
        <summary>
          <para>Returns an <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar"/> object representing the X error bars for the series. Error bars graphically express potential error amounts relative to each data marker in a data series. You can add error bars to data series in two-dimensional area, bar, column, line, scatter, and bubble charts. In scatter and bubble charts, you can display error bars for x values, y values, or both.</para>
        </summary>
        <remarks>
          <para>An exception will be thrown if the current series does not support X error bars.</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.ErrorBarY">
            <Doc>
        <summary>
          <para>Returns an <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ErrorBar"/> object representing the Y error bars for the series. </para>
        </summary>
        <remarks>
          <para>Error bars graphically express potential error amounts relative to each data marker in a data series. You can add error bars to data series in two-dimensional area, bar, column, line, scatter, and bubble charts. In scatter and bubble charts, you can display error bars for x values, y values, or both.</para>
          <para>An exception will be thrown if the current series does not support Y error bars. The following types of series do not support Y error bars:</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.HasShadow">
            <Doc>
        <summary>
          <para>Sets or returns whether the series will be displayed with a shadow effect.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.HasSmoothedLine">
            <Doc>
        <summary>
          <para>Sets or returns returns whether data points  <u>in a scatter series</u>  are connected by smoothed lines, that is, whether interpolated values, rather than real values, are displayed.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.Interior">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartInterior"/> object, representing the area of the data series.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.Item(System.Int32)">
            <Doc>
        <summary>
          <para>Returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataPoint"/> object at the specified 0-based index.</para>
        </summary>
        <param name="index">
          <para>The 0-based index of the <c>DataPoint</c> to retrieve.</para>
        </param>
        <returns>
          <para>The <c>DataPoint</c> object at the specified index.</para>
        </returns>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.LegendEntryFont">
            <Doc>
        <summary>
          <para>Sets or returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Font"/> object for the series legend entry.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.Line">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine"/> object representing either the border around the series - for most chart types - or the series line itself, for line charts.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.Name">
            <Doc>
        <summary>
          <para>Sets or returns the name of the series.  See also <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.NameFormula"/>.</para>
        </summary>
        <remarks>If a name is not set, a default series name will be used in the worksheet. The default name format is the series number.</remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.NameFormula">
            <Doc>
        <summary>
          <para>Sets or returns the formula containing the name of the series.  See also <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.Name"/>.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.ScatterValues">
            <Doc>
        <summary>
          <para>Sets or returns the range of cells containing the values of a scatter chart data series.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.SettingsBarColumn">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.SettingsBarColumn"/> object representing the series properties unique to bar and column charts.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.SettingsLineAreaScatter">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.SettingsLineAreaScatter"/> object representing the series properties unique to line, area, and scatter charts.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.SettingsPieDoughnut">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.SettingsPieDoughnut"/> object representing the series properties unique to pie and doughnut charts.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.ShowLegendEntry">
            <Doc>
        <summary>
          <para>Sets or returns whether the legend entry for this series will be shown.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.Trendlines">
            <Doc>
        <summary>
          <para>Returns the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.Trendlines"/> collection for the series. A trendline graphically shows trends in a data series, such as increased sales over a period of months.</para>
        </summary>
        <remarks>
          <para>An exception will be thrown if the current series does not support trendlines. The following types of series do not support trendlines:</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.Values">
            <Doc>
        <summary>
          <para>Sets or returns the range of cells containing the values of a chart data series.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.VaryColorsByPoint">
            <Doc>
        <summary>
          <para>Sets or returns whether colors will be different for each data point in the series.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection"/> class contains the set of data series in a worksheet. </para>
      </summary>
      <remarks>
        <para>To return a <c>SeriesCollection</c> object, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Chart.SeriesCollection"/>.</para>
      </remarks>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection.GetEnumerator">
            <Doc>
        <summary>
          <para>Returns an IEnumerator for the SeriesCollection of a Chart</para>
        </summary>
        <returns>
          <para>An enumerator for the SeriesCollection of a Chart as a System.Collections.IEnumerator</para>
        </returns>
        <example>
          <para>
            <code>
IEnumerator enumerator = chart.SeriesCollection.GetEnumerator();
</code>
            <br/>
            <code>
Dim enumerator as IEnumerator = chart.SeriesCollection.GetEnumerator()
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection.CreateSeries(System.String,SoftArtisans.OfficeWriter.ExcelWriter.ChartType,SoftArtisans.OfficeWriter.ExcelWriter.AxisType)">
            <Doc>
        <summary>
          <para>Creates a new <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Series"/> that is automatically added to the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection"/>.</para>
        </summary>
        <param name="valueFormula">
          <para>A formula representing the cells that contain the source data for the new series.</para>
        </param>
        <param name="chartType">
          <para>The type of series to add. The method will throw an exception if the specified type is not compatible with an existing series type in the chart.</para>
        </param>
        <param name="axisType">
          <para>Specifies whether the series will be associated with the primary or secondary axis.</para>
        </param>
        <returns>
          <para>A <c>Series</c> object representing the new data series.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection.CreateSeries(SoftArtisans.OfficeWriter.ExcelWriter.Range,SoftArtisans.OfficeWriter.ExcelWriter.ChartType,SoftArtisans.OfficeWriter.ExcelWriter.AxisType)">
            <Doc>
        <summary>
          <para>Creates a new <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Series"/> that is automatically added to the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection"/>.</para>
        </summary>
        <param name="range">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/> object representing the cells that contain the source data for the new series.</para>
        </param>
        <param name="chartType">
          <para>The type of series to add. This method will throw an exception if the specified type is not compatible with an existing series type in the chart.</para>
        </param>
        <param name="axisType">
          <para>Specifies whether the series will be associated with the primary or secondary axis.</para>
        </param>
        <returns>
          <para>A <c>Series</c> object representing the new data series.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection.CreateSeries(SoftArtisans.OfficeWriter.ExcelWriter.Area,SoftArtisans.OfficeWriter.ExcelWriter.ChartType,SoftArtisans.OfficeWriter.ExcelWriter.AxisType)">
            <Doc>
        <summary>
          <para>Creates a new <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Series"/> that is automatically added to the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection"/>.</para>
        </summary>
        <param name="area">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object representing the cells that contain the source data for the new series.</para>
        </param>
        <param name="chartType">
          <para>The type of series to add. This method will throw an exception if the specified type is not compatible with an existing series type in the chart.</para>
        </param>
        <param name="axisType">
          <para>Specifies whether the series will be associated with the primary or secondary axis.</para>
        </param>
        <returns>
          <para>A <c>Series</c> object representing the new data series.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection.CreateSeries(System.String)">
            <Doc>
        <summary>
          <para>Creates a new <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Series"/> that is automatically added to the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection"/>. The series will be plotted on the primary axis, and its type will be the chart's <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartType"/>.</para>
        </summary>
        <param name="valueFormula">
          <para>A formula representing the cells that contain the source data for the new series.</para>
        </param>
        <returns>
          <para>A <c>Series</c> object representing the new data series.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection.CreateSeries(SoftArtisans.OfficeWriter.ExcelWriter.Range)">
            <Doc>
        <summary>
          <para>Creates a new <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Series"/> that is automatically added to the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection"/>. The series will be plotted on the primary axis, and its type will be the chart's <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartType"/>.</para>
        </summary>
        <param name="range">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/> object representing the cells that contain the source data for the new series.</para>
        </param>
        <returns>
          <para>A <c>Series</c> object representing the new data series.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection.CreateSeries(SoftArtisans.OfficeWriter.ExcelWriter.Area)">
            <Doc>
        <summary>
          <para>Creates a new <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Series"/> that is automatically added to the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection"/>. The series will be plotted on the primary axis, and its type will be the chart's <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartType"/>.</para>
        </summary>
        <param name="area">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> object representing the cells that contain the source data for the new series.</para>
        </param>
        <returns>
          <para>A <c>Series</c> object representing the new data series.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;SeriesCollection&quot;]/Member[@signature=&quot;SeriesCollection.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;SeriesCollection&quot;]/Member[@signature=&quot;SeriesCollection.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection.Remove(System.Int32)">
            <Doc>
        <summary>
          <para>Removes the specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Series"/> from the collection.</para>
        </summary>
        <param name="index">
          <para>The 0-based index of the <c>Series</c> to remove.</para>
        </param>
        <returns>
          <para>The removed <c>Series</c>.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection.Remove(SoftArtisans.OfficeWriter.ExcelWriter.Series)">
            <Doc>
        <summary>
          <para>Removes the specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Series"/> from the collection.</para>
        </summary>
        <param name="series">
          <para>The <c>Series</c> to remove.</para>
        </param>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection.CategoryData">
            <Doc>
        <summary>
          <para>Sets or Returns a formula representing a set of values for the primary category (x) axis. The formula returned does not contain x axis data for a scatter series; <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection.CategoryData"/> will return an empty string. To get scatter series data use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.ScatterValues"/>.  This method for a bubble chart has no effect.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection.Count">
            <Doc>
        <summary>
          <para>Returns the number of data series in the collection.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection.Item(System.Int32)">
            <Doc>
        <summary>
          <para>Returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Series"/> at the specified index.</para>
        </summary>
        <param name="index">
          <para>The 0-based index of the <c>Series</c> to return.</para>
        </param>
        <returns>
          <para>The <c>Series</c> at the specified index.</para>
        </returns>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SeriesCollection.SecondaryCategoryData">
            <Doc>
        <summary>
          <para>Sets or Returns a formula representing a set of values for the secondary category (x) axis.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.SeriesDataLabel">
            <Doc>
      <summary>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.SeriesDataLabel"/> represents the appearance of series labels.</summary>
      <remarks>
        <para>To returns a <c>SeriesDataLabel</c> object, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.DataLabels"/>.</para>
      </remarks>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SeriesDataLabel.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;SeriesDataLabel&quot;]/Member[@signature=&quot;SeriesDataLabel.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SeriesDataLabel.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;SeriesDataLabel&quot;]/Member[@signature=&quot;SeriesDataLabel.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SeriesDataLabel.DataLabelPlacement">
            <Doc>
        <summary>
          <para>Sets or returns where the data label should be placed relative to its data point</para>
        </summary>
        <remarks>
          <para>Set the position of each <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.SeriesDataLabel"/> using the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataLabelPlacementType"/> enum.</para>
        </remarks>
        <example>
          <para>
            <code>
//--- Create chart
Chart chart = ws.Charts.CreateChart(ChartType.Column.Stacked, ws.CreateAnchor(10, 0, 0, 0));

//--- Create data series
Series series = chart.SeriesCollection.CreateSeries("A1:A10");

//--- Set the data label position for the first SeriesDataLabel to OutsideEnd
series[0].Label.DataLabelPlacement = DataLabelPlacementType.OutsideEnd;
</code>
            <br/>
            <code>
'--- Create chart
Dim chart As Chart = ws.Charts.CreateChart(ChartType.Column.Stacked, ws.CreateAnchor(10, 0, 0, 0))

'--- Create data series
Dim series As Series = chart.SeriesCollection.CreateSeries("A1:A10")

'--- Set the data label position for the first SeriesDataLabel to OutsideEnd
series(0).Label.DataLabelPlacement = DataLabelPlacementType.OutsideEnd
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SeriesDataLabel.ContainsBubbleSize">
            <Doc>
        <summary>
          <para>Sets or returns whether the data label will contain the bubble size. This will only be displayed in bubble charts.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SeriesDataLabel.ContainsCategoryName">
            <Doc>
        <summary>
          <para>Sets or returns whether series data labels will contain the category name (x value).</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SeriesDataLabel.ContainsSeriesName">
            <Doc>
        <summary>
          <para>Sets or returns whether the data labels will contain the series name.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SeriesDataLabel.ContainsValue">
            <Doc>
        <summary>
          <para>Sets or returns whether the data label will contain the actual (y) value for the data point.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SeriesDataLabel.ContainsValueAsPercentage">
            <Doc>
        <summary>
          <para>Sets or returns whether the data label will contain the (y) value for the data point as a percentage. Only doughnut and pie charts can dispay values as percentages.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SeriesDataLabel.LabelItemSeperator">
            <Doc>
        <summary>
          <para>Sets or returns the string seperating the different elements in the data label.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SeriesDataLabel.ShowLegendKey">
            <Doc>
        <summary>
          <para>Sets or returns whether the data label will contain the legend key for the series.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.DataLabelPlacementType">
            <Doc>
      <summary>
        <para>The possible positions of a data label relative to its data point.</para>
      </summary>
      <remarks>
        <para>
          <b>Note:</b>
          <br/>
          <para>If you attempt to use a DataLabelPlacementType that does not correspond with the series' ChartType, you will receive the error "Error setting Data Label Placement: The data label placement type is not valid for this type of chart".</para>
        </para>
      </remarks>
      <example>
        <para>
          <code>
//--- Create chart
Chart chart = ws.Charts.CreateChart(ChartType.Column.Stacked, ws.CreateAnchor(10, 0, 0, 0));

//--- Create data series
Series series = chart.SeriesCollection.CreateSeries("A1:A10");

//--- Set the data label position for the first SeriesDataLabel to OutsideEnd
series[0].Label.DataLabelPlacement = DataLabelPlacementType.OutsideEnd;
</code>
          <br/>
          <code>
'--- Create chart
Dim chart As Chart = ws.Charts.CreateChart(ChartType.Column.Stacked, ws.CreateAnchor(10, 0, 0, 0))

'--- Create data series
Dim series As Series = chart.SeriesCollection.CreateSeries("A1:A10")

'--- Set the data label position for the first SeriesDataLabel to OutsideEnd
series(0).Label.DataLabelPlacement = DataLabelPlacementType.OutsideEnd
</code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataLabelPlacementType.Default">
            <Doc>
        <summary>The default data label position for column, bar, bubble, doughnut, line, and scatter charts </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataLabelPlacementType.OutsideEnd">
            <Doc>
        <summary>Places the data label on the outside of the data point in pie, column, and bar charts </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataLabelPlacementType.InsideEnd">
            <Doc>
        <summary>Places the data label inside the data point, near its edge in column, bar, and pie charts </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataLabelPlacementType.Center">
            <Doc>
        <summary>Places the data label in the center of the data point in bubble, line, and scatter charts </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataLabelPlacementType.InsideBase">
            <Doc>
        <summary>Places the data label on the inside of the data point, near its base in column and bar charts </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataLabelPlacementType.Above">
            <Doc>
        <summary>Places the data label above the data point in bubble, line, and scatter charts </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataLabelPlacementType.Below">
            <Doc>
        <summary>Places the data label below the data point in bubble, line, and scatter charts </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataLabelPlacementType.Left">
            <Doc>
        <summary>Places the data label to the left of the data point in bubble, line, and scatter charts </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataLabelPlacementType.Right">
            <Doc>
        <summary>Places the data label to the right of the data point in bubble, line, and scatter charts </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataLabelPlacementType.Auto">
            <Doc>
        <summary>Automatically place the data label depending on the space available. This is only available for pie charts, for which it sets the data label placement to "Best Fit" </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.DataLabelPlacementType.MovedByUser">
            <Doc>
        <summary>Place the data label at an arbitrary x and y position for any chart type </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.SettingsBarColumn">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.SettingsBarColumn"/> class contains all settings that are specific to bar and column charts. To return a <c>SettingsBarColumn</c> object,</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SettingsBarColumn.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;SettingsBarColumn&quot;]/Member[@signature=&quot;SettingsBarColumn.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SettingsBarColumn.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;SettingsBarColumn&quot;]/Member[@signature=&quot;SettingsBarColumn.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsBarColumn.DataShapeType">
            <Doc>
        <summary>
          <para>Sets or returns the shape type used for three-dimensional charts.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsBarColumn.Overlap">
            <Doc>
        <summary>
          <para>Sets or returns the overlap between bars or columns for a category. The value will must be between -100 and 100. The higher the value, the greater the overlap within the category.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsBarColumn.SpaceBetweenCategories">
            <Doc>
        <summary>
          <para>Sets or returns the space between categories in bar and column charts.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.SettingsBarColumn.ShapeType">
            <Doc>
        <summary>
          <para>
            <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.SettingsBarColumn.ShapeType"/> class contains the shapes that can be used for three-dimensional column and bar charts.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.SettingsBarColumn.ShapeType.Box">
            <Doc>
          <summary>Box</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.SettingsBarColumn.ShapeType.Cone">
            <Doc>
          <summary>Cone</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.SettingsBarColumn.ShapeType.CutCone">
            <Doc>
          <summary>CutCone</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.SettingsBarColumn.ShapeType.CutPyramid">
            <Doc>
          <summary>CutPyramid</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.SettingsBarColumn.ShapeType.Cylinder">
            <Doc>
          <summary>Cylinder</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.SettingsBarColumn.ShapeType.Pyramid">
            <Doc>
          <summary>Pyramid</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SettingsBarColumn.ShapeType.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;SettingsBarColumn&quot;]/Member[@signature=&quot;SettingsBarColumn.ShapeType&quot;]/Member[@signature=&quot;SettingsBarColumn.ShapeType.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SettingsBarColumn.ShapeType.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;SettingsBarColumn&quot;]/Member[@signature=&quot;SettingsBarColumn.ShapeType&quot;]/Member[@signature=&quot;SettingsBarColumn.ShapeType.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SettingsBarColumn.ShapeType.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;SettingsBarColumn&quot;]/Member[@signature=&quot;SettingsBarColumn.ShapeType&quot;]/Member[@signature=&quot;SettingsBarColumn.ShapeType.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SettingsBarColumn.ShapeType.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;SettingsBarColumn&quot;]/Member[@signature=&quot;SettingsBarColumn.ShapeType&quot;]/Member[@signature=&quot;SettingsBarColumn.ShapeType.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsBarColumn.ShapeType.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;SettingsBarColumn&quot;]/Member[@signature=&quot;SettingsBarColumn.ShapeType&quot;]/Member[@signature=&quot;SettingsBarColumn.ShapeType.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.SettingsLineAreaScatter">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.SettingsLineAreaScatter"/> class contains all settings that are specific to line, area, and scatter charts. To return a <c>SettingsLineAreaScatter</c> object,</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SettingsLineAreaScatter.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;SettingsLineAreaScatter&quot;]/Member[@signature=&quot;SettingsLineAreaScatter.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SettingsLineAreaScatter.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;SettingsLineAreaScatter&quot;]/Member[@signature=&quot;SettingsLineAreaScatter.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsLineAreaScatter.DropLine">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine"/> object representing the drop lines of a line, area, or scatter series.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsLineAreaScatter.HighLowLine">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine"/> object representing the high-low lines of a line or scatter series.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsLineAreaScatter.ShowDropLines">
            <Doc>
        <summary>
          <para>Sets or returns whether series drop-lines will be displayed in the chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsLineAreaScatter.ShowHighLowLines">
            <Doc>
        <summary>
          <para>Sets or returns whether series high-low lines will be displayed in the chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsLineAreaScatter.ShowUpDownBars">
            <Doc>
        <summary>
          <para>Sets or returns whether series up/down bars will be displayed in the chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsLineAreaScatter.UpDownBar">
            <Doc>
        <summary>
          <para>Returns an <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsLineAreaScatter.UpDownBar"/> object representing the up/down bars of a line series.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut"/> class contains all settings that are specific to pie and doughnut charts. To return a <c>SettingsPieDoughnut</c> object,</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;SettingsPieDoughnut&quot;]/Member[@signature=&quot;SettingsPieDoughnut.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;SettingsPieDoughnut&quot;]/Member[@signature=&quot;SettingsPieDoughnut.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.AngleOfFirstSlice">
            <Doc>
        <summary>
          <para>Sets or returns the angle of the first slice in the pie or doughnut chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopGapSize">
            <Doc>
        <summary>
          <para>Sets or returns the size of the gap between pies in a pie of pie chart or between bar and pie in a bar of pie chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSecondChartSize">
            <Doc>
        <summary>
          <para>Sets or returns the size of the second chart in a pie of pie or bar of pie chart, as a percentage of the size of the first chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSeriesLines">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine"/> object representing the series lines from the main pie chart to the secondary chart in a bar of pie or pie of pie chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSplitPercentage">
            <Doc>
        <summary>
          <para>Sets or returns a percentage that determines which of a chart's data points will be included in the bar of a bar of pie chart, or second pie of a pie of pie chart. </para>
        </summary>
        <remarks>
          <para>The data points included in the second chart are those with percentages less than the specified percentage. The percentage only takes effect if the chart's <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSplitType"/> is set to http://wiki.softartisans.com/display/EW70/SettingsPieDoughnut.BopPopSplit#Percent.</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSplitPosition">
            <Doc>
        <summary>
          <para>Sets or returns a number of positions that determines which of a chart's data points will be included in the bar of a bar of pie chart, or second pie of a pie of pie chart. </para>
        </summary>
        <remarks>
          <para>The bar or second pie will contain the chart's last  <i>n</i>  data points, where  <i>n</i>  is the number of positions set. The position only takes effect if the chart's <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSplitType"/> is set to http://wiki.softartisans.com/display/EW70/SettingsPieDoughnut.BopPopSplit#Position.</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSplitType">
            <Doc>
        <summary>
          <para>Sets or returns how data will be split in the bar of a bar of pie chart, or second pie of a pie of pie chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSplitValue">
            <Doc>
        <summary>
          <para>Sets or returns a value that determines which of a chart's data points will be included in the bar of a bar of pie chart, or second pie of a pie of pie chart. The data points included in the second chart are those with values less than the specified value. The value only takes effect if the chart's <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSplitType"/> is set to value.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.LeaderLines">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine"/> object representing the leader lines in the pie chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.ShowLeaderLines">
            <Doc>
        <summary>
          <para>Sets or returns whether lines from the slices to their data labels will be shown.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.SizeOfCenterHole">
            <Doc>
        <summary>
          <para>Sets or returns the size of the center hole of a doughnut chart as a percentage of the doughnut size.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.SlicesDistanceFromCenter">
            <Doc>
        <summary>
          <para>Sets or returns the distance - in an exploded pie chart - of slices from the chart's center.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.UseDefaultSplitValue">
            <Doc>
        <summary>
          <para>Sets or returns whether the two parts of the bar of pie or pie of pie chart will be split using the default value, which is determined by Excel.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSplit">
            <Doc>
        <summary>
          <para>A <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSplitValue"/> determines what type of values will be included in the bar of a bar of pie chart, or second pie of a pie of pie chart.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSplit.Custom">
            <Doc>
          <summary>Defaults to http://wiki.softartisans.com/display/EW70/#Position</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSplit.Percent">
            <Doc>
          <summary>The bar or second pie will include data points with percentages less than the percentage specified by<br/><see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSplitPercentage"/>.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSplit.Position">
            <Doc>
          <summary>The bar or second pie will contain the first chart's last  <i>n</i>  data points, where  <i>n</i>  is the number specified by <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSplitPosition"/>.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSplit.Value">
            <Doc>
          <summary>The bar or second pie will include data points with values less than the value specified by <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSplitValue"/>.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSplit.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;SettingsPieDoughnut&quot;]/Member[@signature=&quot;SettingsPieDoughnut.BopPopSplit&quot;]/Member[@signature=&quot;SettingsPieDoughnut.BopPopSplit.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSplit.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;SettingsPieDoughnut&quot;]/Member[@signature=&quot;SettingsPieDoughnut.BopPopSplit&quot;]/Member[@signature=&quot;SettingsPieDoughnut.BopPopSplit.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSplit.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;SettingsPieDoughnut&quot;]/Member[@signature=&quot;SettingsPieDoughnut.BopPopSplit&quot;]/Member[@signature=&quot;SettingsPieDoughnut.BopPopSplit.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSplit.toInt">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;SettingsPieDoughnut&quot;]/Member[@signature=&quot;SettingsPieDoughnut.BopPopSplit&quot;]/Member[@signature=&quot;SettingsPieDoughnut.BopPopSplit.toInt()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.SettingsPieDoughnut.BopPopSplit.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;SettingsPieDoughnut&quot;]/Member[@signature=&quot;SettingsPieDoughnut.BopPopSplit&quot;]/Member[@signature=&quot;SettingsPieDoughnut.BopPopSplit.ToString()&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Shapes">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Shapes"/> collection contains all <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Shape"/> objects in the worksheet. To return a <c>Shapes</c> collection, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Shapes"/>.</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Shapes.GetEnumerator">
            <Doc>
        <summary>
          <para>Returns an IEnumerator for the Shapes in a Worksheet</para>
        </summary>
        <returns>
          <para>An enumerator for the Shapes in a Worksheet as a System.Collections.IEnumerator</para>
        </returns>
        <example>
          <para>
            <code>
IEnumerator enumerator = ws.Shapes.GetEnumerator();
</code>
            <br/>
            <code>
Dim enumerator as IEnumerator = ws.Shapes.GetEnumerator()
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Shapes.AddShape(SoftArtisans.OfficeWriter.ExcelWriter.Shape)">
            <Doc>
        <summary>
          <para>Adds the specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Shape"/> object to the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Shapes"/> collection.</para>
        </summary>
        <param name="shape">
          <para>The <c>Shape</c> object to add to the collection.</para>
        </param>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Shapes.CreateShape(SoftArtisans.OfficeWriter.ExcelWriter.ShapeType,SoftArtisans.OfficeWriter.ExcelWriter.Anchor)">
            <Doc>
        <summary>
          <para>Creates a shape with the specified position and type. The specified shape type must not be http://wiki.softartisans.com/display/EW70/ShapeType#Picture, http://wiki.softartisans.com/display/EW70/ShapeType#Group, http://wiki.softartisans.com/display/EW70/ShapeType#Comment, or http://wiki.softartisans.com/display/EW70/ShapeType#Unknown. The new shape is automatically added to the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Shapes"/> collection.</para>
        </summary>
        <param name="type">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType"/> value representing the type of shape to create.</para>
        </param>
        <param name="aPosition">
          <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Anchor"/> object representing the position of the new shape in the worksheet.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Shape"/> object representing the new shape.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Shapes.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Shapes&quot;]/Member[@signature=&quot;Shapes.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Shapes.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Shapes&quot;]/Member[@signature=&quot;Shapes.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Shapes.ListShapes">
            <Doc>
        <summary>
          <para>Lists all the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Shape"/> object in the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Shapes"/> collection. This does not return the underlying collection, so changes to the returned value will have no effect on future calls to this <c>Shapes</c> object.</para>
        </summary>
        <returns>
          <para>An array of all the <c>Shape</c> objects in the collection.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Shapes.Remove(SoftArtisans.OfficeWriter.ExcelWriter.Shape)">
            <Doc>
        <summary>
          <para>Removes the specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Shape"/> object from the collection. If the specified <c>Shape</c> object does not exist in the collection, no change is made.</para>
        </summary>
        <param name="shape">
          <para>The <c>Shape</c> object to remove from the collection.</para>
        </param>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Shapes.Remove(System.Int32)">
            <Doc>
        <summary>
          <para>Removes the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Shape"/> object at the specified position from the collection. The position will correspond to the position of the <c>Shape</c> within the array returned by <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Shapes.ListShapes"/>.</para>
        </summary>
        <param name="position">
          <para>The 0-based position of the <c>Shape</c> to remove.</para>
        </param>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Shapes.Count">
            <Doc>
        <summary>
          <para>Returns the number of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Shape"/> objects in the collection.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Shapes.Item(System.Int32)">
            <Doc>
        <summary>
          <para>Returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Shape"/> object at the specified position in the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Shapes"/> collection.</para>
        </summary>
        <param name="position">
          <para>A valid index between 0 and <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Shapes.Count"/>.</para>
        </param>
        <returns>
          <para>The <c>Shape</c> object at the specified position.</para>
        </returns>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Shapes.Item(System.String)">
            <Doc>
        <summary>
          <para>Returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Shape"/> object with the specified name in the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Shapes"/> collection.</para>
        </summary>
        <param name="name">
          <para>The name of the <c>Shape</c> to return.</para>
        </param>
        <returns>
          <para>The <c>Shape</c> object with the specified name.</para>
        </returns>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType"/> class contains the Excel shape types supported by ExcelWriter.</para>
      </summary>
    </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Arc">
            <Doc>
        <summary>Arc</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.BentArrow">
            <Doc>
        <summary>BentArrow</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.BentUpArrow">
            <Doc>
        <summary>BentUpArrow</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Bevel">
            <Doc>
        <summary>Bevel</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.BlockArc">
            <Doc>
        <summary>Block arc</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.BracePair">
            <Doc>
        <summary>Brace pair</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.BracketPair">
            <Doc>
        <summary>Bracket pair</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Can">
            <Doc>
        <summary>Can</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Chart">
            <Doc>
        <summary>Chart</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Chart2">
            <Doc>
        <summary>Chart2</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Chevron">
            <Doc>
        <summary>Chevron</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.CircularArrow">
            <Doc>
        <summary>CircularArrow</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.ComboBox">
            <Doc>
        <summary>ComboBox</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Comment">
            <Doc>
        <summary>Comment</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Cube">
            <Doc>
        <summary>Cube</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.CurvedDownArrow">
            <Doc>
        <summary>CurvedDownArrow</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.CurvedLeftArrow">
            <Doc>
        <summary>CurvedLeftArrow</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.CurvedRightArrow">
            <Doc>
        <summary>CurvedRightArrow</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.CurvedUpArrow">
            <Doc>
        <summary>CurvedUpArrow</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Diamond">
            <Doc>
        <summary>Diamond</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Donut">
            <Doc>
        <summary>Donut</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.DoubleWave">
            <Doc>
        <summary>DoubleWave</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.DownArrow">
            <Doc>
        <summary>DownArrow</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.DownArrowCallout">
            <Doc>
        <summary>DownArrowCallout</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.DownRibbon">
            <Doc>
        <summary>DownRibbon</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Ellipse">
            <Doc>
        <summary>Ellipse</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.EllipseDownRibbon">
            <Doc>
        <summary>EllipseDownRibbon</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.EllipseUpRibbon">
            <Doc>
        <summary>EllipseUpRibbon</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Explosion1">
            <Doc>
        <summary>Explosion1</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Explosion2">
            <Doc>
        <summary>Explosion2</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartCollate">
            <Doc>
        <summary>FlowChartCollate</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartConnector">
            <Doc>
        <summary>FlowChartConnector</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartDecision">
            <Doc>
        <summary>FlowChartDecision</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartDelay">
            <Doc>
        <summary>FlowChartDelay</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartDisplay">
            <Doc>
        <summary>FlowChartDisplay</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartDocument">
            <Doc>
        <summary>FlowChartDocument</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartExtract">
            <Doc>
        <summary>FlowChartExtract</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartInputOutput">
            <Doc>
        <summary>FlowChartInputOutput</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartInternalStorage">
            <Doc>
        <summary>FlowChartInternalStorage</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartMagneticDisk">
            <Doc>
        <summary>FlowChartMagneticDisk</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartMagneticDrum">
            <Doc>
        <summary>FlowChartMagneticDrum</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartMagneticTape">
            <Doc>
        <summary>FlowChartMagneticTape</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartManualInput">
            <Doc>
        <summary>FlowChartManualInput</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartManualOperation">
            <Doc>
        <summary>FlowChartManualOperation</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartMerge">
            <Doc>
        <summary>FlowChartMerge</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartMultidocument">
            <Doc>
        <summary>FlowChartMultidocument</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartOfflineStorage">
            <Doc>
        <summary>FlowChartOfflineStorage</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartOnlineStorage">
            <Doc>
        <summary>FlowChartOnlineStorage</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartOr">
            <Doc>
        <summary>FlowChartOr</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartPredefinedProcess">
            <Doc>
        <summary>FlowChartPredefinedProcess</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartPreparation">
            <Doc>
        <summary>FlowChartPreparation</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartProcess">
            <Doc>
        <summary>FlowChartProcess</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartPunchedCard">
            <Doc>
        <summary>FlowChartPunchedCard</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartPunchedTape">
            <Doc>
        <summary>FlowChartPunchedTape</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartSort">
            <Doc>
        <summary>FlowChartSort</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartSummingJunction">
            <Doc>
        <summary>FlowChartSummingJunction</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FlowChartTerminator">
            <Doc>
        <summary>FlowChartTerminator</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.FoldedCorner">
            <Doc>
        <summary>Folded corner</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Group">
            <Doc>
        <summary>Group</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Heart">
            <Doc>
        <summary>Heart</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Hexagon">
            <Doc>
        <summary>Hexagon</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.HorizontalScroll">
            <Doc>
        <summary>HorizontalScroll</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.IsocelesTriangle">
            <Doc>
        <summary>Isoceles triangle</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.LeftArrow">
            <Doc>
        <summary>LeftArrow</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.LeftArrowCallout">
            <Doc>
        <summary>LeftArrowCallout</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.LeftBrace">
            <Doc>
        <summary>Left brace</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.LeftBracket">
            <Doc>
        <summary>Left bracket</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.LeftRightArrow">
            <Doc>
        <summary>LeftRightArrow</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.LeftRightArrowCallout">
            <Doc>
        <summary>LeftRightArrowCallout</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.LeftRightUpArrow">
            <Doc>
        <summary>LeftRightUpArrow</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.LeftUpArrow">
            <Doc>
        <summary>LeftUpArrow</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.LightningBolt">
            <Doc>
        <summary>Lightning bolt</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Line">
            <Doc>
        <summary>Line</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.mLookup">
            <summary> 
            A mapping of keys to ShapeTypes 
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Moon">
            <Doc>
        <summary>Moon</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.NotchedRightArrow">
            <Doc>
        <summary>NotchedRightArrow</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Octagon">
            <Doc>
        <summary>Octagon</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Parallelogram">
            <Doc>
        <summary>Parallelogram</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Pentagon">
            <Doc>
        <summary>Pentagon</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.PentagonArrow">
            <Doc>
        <summary>PentagonArrow</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Picture">
            <Doc>
        <summary>Picture</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Plaque">
            <Doc>
        <summary>Plaque</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Plus">
            <Doc>
        <summary>Plus</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Prohibited">
            <Doc>
        <summary>Prohibited</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.QuadArrow">
            <Doc>
        <summary>QuadArrow</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.QuadArrowCallout">
            <Doc>
        <summary>QuadArrowCallout</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Rectangle">
            <Doc>
        <summary>Rectangle</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.RightArrow">
            <Doc>
        <summary>RightArrow</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.RightArrowCallout">
            <Doc>
        <summary>RightArrowCallout</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.RightBrace">
            <Doc>
        <summary>Right brace</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.RightBracket">
            <Doc>
        <summary>Right bracket</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.RightTriangle">
            <Doc>
        <summary>Right triangle</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.RoundRectangle">
            <Doc>
        <summary>Round rectangle</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.SmileyFace">
            <Doc>
        <summary>Smiley face</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Star16Point">
            <Doc>
        <summary>Star16Point</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Star24Point">
            <Doc>
        <summary>Star24Point</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Star32Point">
            <Doc>
        <summary>Star32Point</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Star4Point">
            <Doc>
        <summary>Star4Point</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Star8Point">
            <Doc>
        <summary>Star8Point</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.StripedRightArrow">
            <Doc>
        <summary>StripedRightArrow</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Sun">
            <Doc>
        <summary>Sun</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.TextBox">
            <Doc>
        <summary>TextBox</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Trapezoid">
            <Doc>
        <summary>Trapezoid</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Unsupported">
            <Doc>
        <summary>Unsupported</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.UpArrow">
            <Doc>
        <summary>UpArrow</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.UpArrowCallout">
            <Doc>
        <summary>UpArrowCallout</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.UpDownArrow">
            <Doc>
        <summary>UpDownArrow</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.UpDownArrowCallout">
            <Doc>
        <summary>UpDownArrowCallout</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.UpRibbon">
            <Doc>
        <summary>UpRibbon</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.UTurnArrow">
            <Doc>
        <summary>UTurnArrow</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.VerticalScroll">
            <Doc>
        <summary>VerticalScroll</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.Wave">
            <Doc>
        <summary>Wave</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.mMsoValue">
            <summary> 
            The MSO drawing object value. The type field of an SP subrecord (See EscherShapeType for a list)
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.mName">
            <summary>
            The assigned name of a ShapeType
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.mObjValue">
            <summary>
            The type of object. This is a name and a number; see ObjType for more information
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.mValue">
            <summary>
            TODO: this is not assigned anywhere. Maybe we should remove it? 
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.getKey(System.Int32,SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjType)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ShapeType&quot;]/Member[@signature=&quot;ShapeType.getKey(Int32, ObjType)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.getShapeType(System.Int32,SoftArtisans.OfficeWriter.Shared.EscherSubrecords.ObjType)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ShapeType&quot;]/Member[@signature=&quot;ShapeType.getShapeType(Int32, ObjType)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.toInt">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ShapeType&quot;]/Member[@signature=&quot;ShapeType.toInt()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ShapeType&quot;]/Member[@signature=&quot;ShapeType.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.MsoValue">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ShapeType&quot;]/Member[@signature=&quot;ShapeType.MsoValue&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ShapeType.ObjValue">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ShapeType&quot;]/Member[@signature=&quot;ShapeType.ObjValue&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.StreamSupportClass">
            <summary>
            This is a collection of functions which call a specific read (or available, etc) function
            in each object. They can't overload the .NET Read method because it takes unsigned bytes and this
            requires signed bytes.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StreamSupportClass.ReadSpecial_BDUN(System.IO.Stream,System.SByte[],System.Int32,System.Int32)">
            <summary>
            This piece of code is repeated everywhere. It calls the "read" function if it can.
            
            BDUN stands for BlockingInputStream, DocumentInputStream, UnsyncByteArrayInputStream,
            and Navigator.
            </summary>
            <param name="sourceStream">stream to read bytes from</param>
            <param name="target">sbyte array to fill</param>
            <param name="start">starting point in array</param>
            <param name="count">count of bytes to write</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StreamSupportClass.ReadSpecial_BDU(System.IO.Stream,System.SByte[],System.Int32,System.Int32)">
            <summary>
            BDU stands for BlockingInputStream, DocumentInputStream, UnsyncByteArrayInputStream.
            
            I think this is used only once. It calls the "read" function if it exists
            </summary>
            <param name="sourceStream"></param>
            <param name="target"></param>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StreamSupportClass.ReadSpecial_BDUN(System.IO.Stream,System.SByte[])">
            <summary>
            This is an overload of the other ReadSpecial_BDUN function, except without the offset or count parameters.
            </summary>
            <param name="sourceStream"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StreamSupportClass.ReadSpecial_BDU(System.IO.Stream,System.SByte[])">
            <summary>
            This is an overload of the other ReadSpecial_BDU function, except without the offset or count parameters.
            </summary>
            <param name="sourceStream"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StreamSupportClass.Available_BDUN(System.IO.Stream)">
            <summary>
            Calls available function if it exists, else calculates it from the Length and Position properties.
            
            available() usually returns an int. This function is usually cast from an int64 to an int.
            </summary>
            <param name="sourceStream"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StreamSupportClass.Skip_BDUN(System.IO.Stream,System.Int64)">
            <summary>
            Calls "skip" function on stream object if it exists. 
            </summary>
            <param name="inputStream"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SupportClass">
            <summary>
            Contains conversion support elements such as classes, interfaces and static methods.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.PrependStrings(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Prepend a string to a list of strings
            </summary>
            <param name="filenames"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies from to to
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns>the number of bytes copied</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.URShift(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.ToByteArray(System.SByte[])">
            <summary>
            Converts an array of sbytes to an array of bytes
            </summary>
            <param name="sbyteArray">The array of sbytes to be converted</param>
            <returns>The new array of bytes</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.ToSByteArray(System.Byte[])">
            <summary>
            Receives a byte array and returns it transformed in an sbyte array
            </summary>
            <param name="byteArray">Byte array to process</param>
            <returns>The transformed array</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.WriteStackTrace(System.Exception,System.IO.TextWriter)">
            <summary>
            Writes the exception stack trace to the received stream
            </summary>
            <param name="throwable">Exception to obtain information from</param>
            <param name="stream">Output sream used to write to</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.ReadInput(System.IO.Stream,System.SByte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source Stream and writes the data to the target array at the specified index.</summary>
            <param name="sourceStream">The source Stream to read from.</param>
            <param name="target">Contains the array of characteres read from the source Stream.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source Stream.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source Stream. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.ToCharArray(System.SByte[])">
            <summary>
            Converts an array of sbytes to an array of chars
            </summary>
            <param name="sByteArray">The array of sbytes to convert</param>
            <returns>The new array of chars</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.GetProperties">
            <summary>
            Gets the current System properties.
            </summary>
            <returns>The current system properties.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.GetCharsFromString(System.String,System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Copies an array of chars obtained from a String into a specified array of chars
            </summary>
            <param name="sourceString">The String to get the chars from</param>
            <param name="sourceStart">Position of the String to start getting the chars</param>
            <param name="sourceEnd">Position of the String to end getting the chars</param>
            <param name="destinationArray">Array to return the chars</param>
            <param name="destinationStart">Position of the destination array of chars to start storing the chars</param>
            <returns>An array of chars</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.FileCanWrite(System.IO.FileInfo)">
            <summary>
            Checks if a file have write permissions
            </summary>
            <param name="file">The file instance to check</param>
            <returns>True if have write permissions otherwise false</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.RGBtoHSB(System.Int32,System.Int32,System.Int32,System.Single[])">
            <summary>
            Populates or Creates an array containing the HSB value corresponding with RGB values.
            </summary>
            <param name="i">The red value</param>
            <param name="j">The green value</param>
            <param name="k">The blue value</param>
            <param name="HSBValues"></param>
            <returns>Returns an array containing the HSB values value based in the red, green and blue values passed</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SupportClass.ArraySupport">
            <summary>
            This class manages array operations.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.ArraySupport.Equals(System.Array,System.Array)">
            <summary>
            Compares the entire members of one array with the other one.
            </summary>
            <param name="array1">The array to be compared.</param>
            <param name="array2">The array to be compared with.</param>
            <returns>True if both arrays are equals otherwise it returns false.</returns>
            <remarks>Two arrays are equal if they contains the same elements in the same order.</remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SupportClass.BitArraySupport">
            <summary>
            SupportClass for the BitArray class.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.BitArraySupport.Set(System.Collections.BitArray,System.Int32)">
            <summary>
            Sets the specified bit to true.
            </summary>
            <param name="bits">The BitArray to modify.</param>
            <param name="index">The bit index to set to true.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.BitArraySupport.ToString(System.Collections.BitArray)">
            <summary>
            Returns a string representation of the BitArray object.
            </summary>
            <param name="bits">The BitArray object to convert to string.</param>
            <returns>A string representation of the BitArray object.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.BitArraySupport.LogicalOr(System.Collections.BitArray,System.Collections.BitArray)">
            <summary>
            Does a logical or of two Bit Arrays saving it to the first one.
            </summary>
            <remarks>This is the same as setting the length of the shorter method to that of the longer and then 
            calling <code>bitArrayA.Or(bitArrayB)</code>.</remarks>
            <param name="bitArrayA">the first array to be ored; this is wehere the result is stored</param>
            <param name="bitArrayB">the second array to be ored; this value is unchanged</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SupportClass.HashSetSupport`1">
            <summary>
            SupportClass for the HashSet class.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SupportClass.SetSupport`1">
            <summary>
            Represents a collection ob objects that contains no duplicate elements.
            </summary>	
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.SetSupport`1.AddAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds all the elements of the specified collection to the Set.
            </summary>
            <param name="c">Collection of objects to add.</param>
            <returns>true</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.HashSetSupport`1.Clone">
            <summary>
            Returns a copy of the HashSet instance.
            </summary>		
            <returns>Returns a shallow copy of the current HashSet.</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SupportClass.ICollectionSupport">
            <summary>
            This class provides functionality not found in .NET collection-related interfaces.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.ICollectionSupport.ToArray(System.Collections.ICollection)">
            <summary>
            Returns an array containing all the elements of the collection.
            </summary>
            <returns>The array containing all the elements of the collection.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.ICollectionSupport.ToArray(System.Collections.ICollection,System.Object[])">
            <summary>
            This is left here for backwards compatabilty reasons. Remove if you get the chance
            </summary>
            <param name="objects">The array into which the elements of the collection will be stored.</param>
            <returns>The array containing all the elements of the collection.</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SupportClass.IListSupport">
            <summary>
            Provides functionality for classes that implements the IList interface.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.IListSupport.EnsureCapacity(System.Collections.ArrayList,System.Int32)">
            <summary>
            Ensures the capacity of the list to be greater or equal than the specified.
            </summary>
            <param name="list">The list to be checked.</param>
            <param name="capacity">The expected capacity.</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SupportClass.StackSupport">
            <summary>
            SupportClass for the Stack class.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.StackSupport.Pop(System.Collections.ArrayList)">
            <summary>
            Removes the element at the top of the stack and returns it.
            </summary>
            <param name="stack">The stack where the element at the top will be returned and removed.</param>
            <returns>The element at the top of the stack.</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SupportClass.Tokenizer">
            <summary>
            The class performs token processing in strings
            </summary>
            <remarks>Mixing the <code>IEnumerator</code> methods with the other methods, may result in skipping elements, or 
            getting the same element more than once. </remarks>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.SupportClass.Tokenizer.tokenCache">
            <summary>
            The list of tokens
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.Tokenizer.#ctor(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Initializes a new class instance with a specified string to process
            </summary>
            <param name="source">String to tokenize</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.Tokenizer.#ctor(System.Collections.Generic.IEnumerable{System.Char},System.String)">
            <summary>
            Initializes a new class instance with a specified string to process
            and the specified token delimiters to use
            </summary>
            <param name="source">String to tokenize</param>
            <param name="delimiters">String containing the delimiters</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.Tokenizer.#ctor(System.Collections.Generic.IEnumerable{System.Char},System.String,System.Boolean)">
            <summary>
            Initializes a new class instance with a specified string to process, the specified token 
            delimiters to use, and whether the delimiters must be included in the results.
            </summary>
            <param name="source">String to tokenize</param>
            <param name="delimiters">String containing the delimiters</param>
            <param name="includeDelims">Determines if delimiters are included in the results.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.Tokenizer.NextToken">
            <summary>
            Returns the next token from the token list
            </summary>
            <returns>The string value of the token</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.Tokenizer.HasMoreTokens">
            <summary>
            Determines if there are more tokens to return from the source string
            </summary>
            <returns>True or false, depending if there are more tokens</returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.SupportClass.Tokenizer.Count">
            <summary>
            Remaining tokens count
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Trendline">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Trendline"/> object represents a series trendline. To create a <c>Trendline</c> object, call <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Trendlines.CreateTrendline(SoftArtisans.OfficeWriter.ExcelWriter.Trendline.Regression)"/> .</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.ClearIntercept">
            <Doc>
        <summary>
          <para>Specifies that the intercept value should not be used.</para>
        </summary>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Trendline&quot;]/Member[@signature=&quot;Trendline.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Trendline&quot;]/Member[@signature=&quot;Trendline.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.BackcastPeriods">
            <Doc>
        <summary>
          <para>For all trendline types except moving average, sets or returns the number of periods the regression should extrapolate backward.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.ForecastPeriods">
            <Doc>
        <summary>
          <para>For all trendline types except moving average, sets or returns the number of periods the regression should extrapolate forward.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.Intercept">
            <Doc>
        <summary>
          <para>For all trendline types except moving average, sets or returns the point on the value axis where the trendline should intercept.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.LegendEntryFont">
            <Doc>
        <summary>
          <para>Sets or returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Font"/> object for the trendline's legend entry.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.Line">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine"/> object representing the appearance of the trendline.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.Name">
            <Doc>
        <summary>
          <para>Sets or returns the name of the trendline.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.RegressionType">
            <Doc>
        <summary>
          <para>Sets or returns the type of regression used to construct this trendline.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.RegressionValue">
            <Doc>
        <summary>
          <para>Sets the or returns the value used to generate the regression equation. </para>
        </summary>
        <remarks>
          <para>For http://wiki.softartisans.com/display/EW70/Trendline.Regression#Polynomial regression trendlines, the value will be the order of the polynomial. For http://wiki.softartisans.com/display/EW70/Trendline.Regression#MovingAverage trendlines, the value specifies the number of periods over which the average is computed.</para>
          <para>An exception will be thrown if the following conditions are not met:</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.ShowEquation">
            <Doc>
        <summary>
          <para>Sets or returns whether the label will contain the equation for the trendline.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.ShowLegendEntry">
            <Doc>
        <summary>
          <para>Sets or returns whether an entry for the trendline will be displayed in the chart legend.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.ShowRSquaredValue">
            <Doc>
        <summary>
          <para>Sets or returns whether the label will contain the R-squared value for the Trendline's equation.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.TrendlineLabel">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartText"/> object representing a trendline label.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.UseIntercept">
            <Doc>
        <summary>
          <para>Controls whether the intercept value will be used by the trendline.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.Regression">
            <Doc>
        <summary>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.Regression"/> value specifies type of trendline to display on the graph.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.Regression.Exponential">
            <Doc>
          <summary>A curved line that is most useful when data values rise or fall at increasingly higher rates. You cannot create an exponential trendline if your data contains zero or negative values.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.Regression.Logarithmic">
            <Doc>
          <summary>A best-fit curved line used when the rate of change in the data increases or decreases quickly and then levels out.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.Regression.MovingAverage">
            <Doc>
          <summary>A line that smoothes out fluctuations in data to show a pattern or trend more clearly.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.Regression.Polynomial">
            <Doc>
          <summary>A curved line used when data fluctuates. The order of the polynomial can be determined by the number of fluctuations in the data or by how many bends (hills and valleys) appear in the curve.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.Regression.Power">
            <Doc>
          <summary>A curved line that is best used with data sets that compare measurements that increase at a specific rate.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.Regression.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Trendline&quot;]/Member[@signature=&quot;Trendline.Regression&quot;]/Member[@signature=&quot;Trendline.Regression.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.Regression.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Trendline&quot;]/Member[@signature=&quot;Trendline.Regression&quot;]/Member[@signature=&quot;Trendline.Regression.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.Regression.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Trendline&quot;]/Member[@signature=&quot;Trendline.Regression&quot;]/Member[@signature=&quot;Trendline.Regression.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.Regression.ToString">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Trendline&quot;]/Member[@signature=&quot;Trendline.Regression&quot;]/Member[@signature=&quot;Trendline.Regression.ToString()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.Regression.Value">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Trendline&quot;]/Member[@signature=&quot;Trendline.Regression&quot;]/Member[@signature=&quot;Trendline.Regression.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Trendlines">
            <Doc>
      <summary>
        <para>
          <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Trendlines"/> is a collection of all <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Trendline"/> objects associated with a data series in a chart. To return a <c>Trendlines</c> collection, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Series.Trendlines"/> .</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Trendlines.GetEnumerator">
            <Doc>
        <summary>
          <para>Returns an IEnumerator for the Trendlines in a Series</para>
        </summary>
        <returns>
          <para>An enumerator for the Trendlines in a Series as a System.Collections.IEnumerator</para>
        </returns>
        <example>
          <para>
            <code>
IEnumerator enumerator = series.Trendlines.GetEnumerator();
</code>
            <br/>
            <code>
Dim enumerator as IEnumerator = series.Trendlines.GetEnumerator()
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Trendlines.CreateTrendline(SoftArtisans.OfficeWriter.ExcelWriter.Trendline.Regression)">
            <Doc>
        <summary>
          <para>Creates a new <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Trendline"/> object that is automatically added to the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Trendlines"/> collection.</para>
        </summary>
        <param name="type">
          <para>One of the following <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Trendline.Regression"/> : http://wiki.softartisans.com/display/EW70/Trendline.Regression#Exponential , http://wiki.softartisans.com/display/EW70/Trendline.Regression#Logarithmic , http://wiki.softartisans.com/display/EW70/Trendline.Regression#MovingAverage , http://wiki.softartisans.com/display/EW70/Trendline.Regression#Polynomial , http://wiki.softartisans.com/display/EW70/Trendline.Regression#Power .</para>
        </param>
        <returns>
          <para>A <c>Trendline</c> object representing a new trendline.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Trendlines.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Trendlines&quot;]/Member[@signature=&quot;Trendlines.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Trendlines.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Trendlines&quot;]/Member[@signature=&quot;Trendlines.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Trendlines.Remove(System.Int32)">
            <Doc>
        <summary>
          <para>Removes the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Trendline"/> at the specified index from the collection.</para>
        </summary>
        <param name="index">
          <para>The 0-based index of the <c>Trendline</c> to remove.</para>
        </param>
        <returns>
          <para>The removed <c>Trendline</c> object.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Trendlines.Remove(SoftArtisans.OfficeWriter.ExcelWriter.Trendline)">
            <Doc>
        <summary>
          <para>Removes the specified <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Trendline"/> from the collection.</para>
        </summary>
        <param name="trendline">
          <para>The <c>Trendline</c> to remove.</para>
        </param>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Trendlines.Count">
            <Doc>
        <summary>
          <para>Returns the number of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Trendline"/> objects in the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Trendlines"/> collection.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Trendlines.Item(System.Int32)">
            <Doc>
        <summary>
          <para>Returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Trendline"/> object at the specified 0-based index.</para>
        </summary>
        <param name="index">
          <para>The 0-based index of the <c>Trendline</c> to return.</para>
        </param>
        <returns>
          <para>The <c>Trendline</c> object at the specified index.</para>
        </returns>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.UpDownBar">
            <Doc>
      <summary>
        <para>An <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.UpDownBar"/> object represents up/down bars in a line chart. Up/down bars connect data points in the highest and lowest series in a line chart to show motion during an interval.</para>
      </summary>
      <remarks>
        <para>To return an <c>UpDownBar</c> object, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.SettingsLineAreaScatter.UpDownBar"/> .</para>
      </remarks>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.UpDownBar.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;UpDownBar&quot;]/Member[@signature=&quot;UpDownBar.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.UpDownBar.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;UpDownBar&quot;]/Member[@signature=&quot;UpDownBar.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.UpDownBar.DownBarBorderLine">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine"/> object representing the border around the down bar portion of the</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.UpDownBar.DownBarInterior">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartInterior"/> object representing the area of the down bar portion of the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.UpDownBar"/> object.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.UpDownBar.GapBetweenBars">
            <Doc>
        <summary>
          <para>Sets or returns the width of the gap between the up/down bars.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.UpDownBar.UpBarBorderLine">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartLine"/> object representing the border around the up bar portion of the</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.UpDownBar.UpBarInterior">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ChartInterior"/> object representing the area of the up bar portion of the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.UpDownBar"/> object.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.ValueAxis">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ValueAxis"/> object represents a chart's value (y) axis. The <c>ValueAxis</c> class extends <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Axis"/> .</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ValueAxis.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ValueAxis&quot;]/Member[@signature=&quot;ValueAxis.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.ValueAxis.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;ValueAxis&quot;]/Member[@signature=&quot;ValueAxis.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ValueAxis.CategoryAxisCrossMaxValue">
            <Doc>
        <summary>
          <para>Sets or returns whether the category axis will cross the value axis at its maximum value.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ValueAxis.CategoryCrossingValue">
            <Doc>
        <summary>
          <para>Sets or returns the Y value at which the category axis crosses the value axis.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ValueAxis.MajorIncrement">
            <Doc>
        <summary>
          <para>Sets or returns the major increment of the axis, the increment between its major gridlines and/or major ticks marks.</para>
        </summary>
        <remarks>
          <para>If you set this to a negative value, it will set the major increment of the axis to auto.</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ValueAxis.MaxValue">
            <Doc>
        <summary>
          <para>Sets or returns the maximum value on the y axis.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ValueAxis.MinorIncrement">
            <Doc>
        <summary>
          <para>Sets or returns the minor unit of measurement of the axis, the gap between its minor gridlines and/or minor ticks marks.</para>
        </summary>
        <remarks>
          <para>If you set this to a negative value, it will set the minor increment of the axis to auto.</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ValueAxis.MinValue">
            <Doc>
        <summary>
          <para>Sets or returns the minimum value on the y axis.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.ValueAxis.UseLogarithmicScale">
            <Doc>
        <summary>
          <para>Sets or returns whether a logarithmic scale should be used on the axis.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Workbook">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Workbook"/>  object represents an Excel workbook. To return a  <c>Workbook</c> object:  Call <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication.Create"/>  to create a new Excel workbook.  Call <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.ExcelApplication.Open(System.String)"/>  to open an existing Excel workbook.</para>
      </summary>
      <example>
        <para>
          <code>

          //--- Create a new Workbook
          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Create();

          //--- Open an existing Workbook
          ExcelApplication xla = new ExcelApplication();
          Workbook wb = xla.Open(@"C:\Reports\Report.xls");
        </code>
          <br/>
          <code>

          '--- Create a new Workbook
          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Create()

          '--- Open an existing Workbook
          Dim xla As New ExcelApplication()
          Dim wb As Workbook = xla.Open("C:\Reports\Report.xls")
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.GetEnumerator">
            <Doc>
        <summary>
          <para>Returns an IEnumerator for the Worksheets in a Workbook</para>
        </summary>
        <returns>
          <para>An enumerator for the Worksheets in a Workbook as a System.Collections.IEnumerator</para>
        </returns>
        <example>
          <para>
            <code>
IEnumerator enumerator = wb.GetEnumerator();
</code>
            <br/>
            <code>
Dim enumerator as IEnumerator = wb.GetEnumerator()
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateConditionalFormat">
            <Doc>
        <summary>Creates a new <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat"/> object that can be set on <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/>s, <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/>s and <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/>s.</summary>
        <returns>
          <para>A <c>ConditionalFormat</c> object representing a conditional format that Excel will apply to a cell or group of cells if a specified condition is met.</para>
        </returns>
        <remarks>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/>, <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> or <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/> object holds its own copy of the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ConditionalFormat"/> when set; changes made to a <c>ConditionalFormat</c> after it is set will not affect the copies.</para>
        </remarks>
        <example>
          <para>
            <code>
wb.CreateConditionalFormat();</code>
            <br/>
            <code>
wb.CreateConditionalFormat()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateCopyPasteProperties(SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties.CopyPasteType)">
            <Doc>
        <summary>Creates a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties"/> object with the specified data type properties set. </summary>
        <param name="typeMask">
          <para>A CopyPasteProperties constant value indicating the types of data to copy from an external worksheet.</para>
        </param>
        <returns>
          <para>A <c>CopyPasteProperties</c> object.</para>
        </returns>
        <remarks>
          <para>This object is used when copying data from an external worksheet.</para>
          <para>Used with the <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CopyPaste(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Area,SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties)"/> method of the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet"/>.</para>
        </remarks>
        <example>
          <code>

          CopyPasteProperties properties =
               ws.CreateCopyPasteProperties(
               CopyPasteProperties.ValuesOnly);
        </code>
          <br/>
          <code>

          Dim properties As CopyPasteProperties = _
               ws.CreateCopyPasteProperties( _
               CopyPasteProperties.ValuesOnly)
        </code>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateDataImportProperties">
            <Doc>
        <summary>
          <para>Creates a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataImportProperties"/> object that contains a set of properties that can be used when importing data to a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet"/> or <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/>.</para>
        </summary>
        <returns>
          <para>A http://wiki.softartisans.com/display/EW70/DataImportProperties+ object.</para>
        </returns>
        <example>
          <para>
            <code>

          DataImportProperties importProps =
               wb.CreateDataImportProperties();
        </code>
            <br/>
            <code>

          Dim importProps As DataImportProperties = _
               wb.CreateDataImportProperties()
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateDataValidation(SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType,SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ComparisonType,System.String,System.String)">
            <Doc>
        <summary>
          <para>Creates a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation"/> object which can be set on a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/>, <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/>, or <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/>.</para>
        </summary>
        <param name="allowedType">
          <para>The data type allowed in the cell.</para>
        </param>
        <param name="comparison">
          <para>The comparison used to validate the cell's value.</para>
        </param>
        <param name="minimumValue">
          <para>A formula representing the cell's maximum value.</para>
        </param>
        <param name="maximumValue">
          <para>A formula representing the cell's minimum value.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation"/> object.</para>
        </returns>
        <example>
          <para>
            <code>

          DataValidation dataValidation =
               wb.createDataValidation(
               DataValidation.ValidationType.WholeNumber,
               DataValidation.ComparisonType.Between, "=1", "=100");
        </code>
            <br/>
            <code>

          Dim dataValidation As DataValidation = _
               wb.createDataValidation( _
               DataValidation.ValidationType.WholeNumber, _
               DataValidation.ComparisonType.Between, "=1", "=100")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateDataValidation(SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType,SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ComparisonType,System.String)">
            <Doc>
        <summary>
          <para>Creates a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation"/> object which can be set on a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/>, <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/>, or <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/>.</para>
        </summary>
        <param name="allowedType">
          <para>The data type allowed in the cell.</para>
        </param>
        <param name="comparison">
          <para>The comparison used to validate the cell's value.</para>
        </param>
        <param name="value">
          <para>A formula representing the constraint for the data validation.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation"/> object.</para>
        </returns>
        <example>
          <para>
            <code>

          DataValidation dataValidation =
               wb.createDataValidation(
               DataValidation.ValidationType.WholeNumber,
               DataValidation.ComparisonType.LessThan, "=1");
        </code>
            <br/>
            <code>

          Dim dataValidation As DataValidation = _
               wb.createDataValidation( _
               DataValidation.ValidationType.WholeNumber, _
               DataValidation.ComparisonType.LessThan, "=1")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateDataValidation(SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType,SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ComparisonType,System.Object,System.Object)">
            <Doc>
        <summary>
          <para>Creates a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation"/> object which can be set on a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/>, <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/>, or <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/>.</para>
        </summary>
        <param name="allowedType">
          <para>The data type allowed in the cell.</para>
        </param>
        <param name="comparison">
          <para>The comparison used to validate the cell's value.</para>
        </param>
        <param name="minimumValue">
          <para>A primitive or Date representing cell's maximum value.</para>
        </param>
        <param name="maximumValue">
          <para>A primitive or Date representing the cell's minimum value.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation"/> object.</para>
        </returns>
        <example>
          <para>
            <code>

          DataValidation dataValidation =
               wb.createDataValidation(
               DataValidation.ValidationType.WholeNumber,
               DataValidation.ComparisonType.Between, 1, 100);
        </code>
            <br/>
            <code>

          Dim dataValidation As DataValidation = _
               wb.createDataValidation( _
               DataValidation.ValidationType.WholeNumber, _
               DataValidation.ComparisonType.Between, 1, 100)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateDataValidation(SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType,SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ComparisonType,System.Object)">
            <Doc>
        <summary>
          <para>Creates a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation"/> object which can be set on a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/>, <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/>, or <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/>.</para>
        </summary>
        <param name="allowedType">
          <para>The data type allowed in the cell.</para>
        </param>
        <param name="comparison">
          <para>The comparison used to validate the cell's value.</para>
        </param>
        <param name="value">
          <para>A primitive or Date representing the constraint value for the data validation.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation"/> object.</para>
        </returns>
        <example>
          <para>
            <code>

          DataValidation dataValidation =
               wb.createDataValidation(
               DataValidation.ValidationType.WholeNumber,
               DataValidation.ComparisonType.LessThan, 1);
        </code>
            <br/>
            <code>

          Dim dataValidation As DataValidation = _
               wb.createDataValidation( _
               DataValidation.ValidationType.WholeNumber, _
               DataValidation.ComparisonType.LessThan, 1)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateDataValidation(SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType,System.String)">
            <Doc>
        <summary>
          <para>Creates a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation"/> object which can be set on a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/>, <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/>, or <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/>.</para>
        </summary>
        <param name="allowedType">
          <para>The data type allowed in the cell.</para>
        </param>
        <param name="formula">
          <para>For 'Custom' allowed type: the formula used to validate the cell's data.  For 'List' allowed type: the formula referencing a range in the worksheet.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation"/> object.</para>
        </returns>
        <example>
          <para>
            <code>

          DataValidation dataValidation =
               wb.createDataValidation(
               DataValidation.ValidationType.List,
               "C10:C18");
        </code>
            <br/>
            <code>

          Dim dataValidation As DataValidation = _
               wb.createDataValidation( _
               DataValidation.ValidationType.List, _
               "C10:C18")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateDataValidation(SoftArtisans.OfficeWriter.ExcelWriter.DataValidation.ValidationType,System.Object)">
            <Doc>
        <summary>
          <para>Creates a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation"/> object which can be set on a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/>, <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/>, or <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/>.</para>
        </summary>
        <param name="allowedType">
          <para>The data type allowed in the cell.</para>
        </param>
        <param name="sourceArray">
          <para>For 'List' allowed type: the array of valid values for the cell.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.DataValidation"/> object.</para>
        </returns>
        <example>
          <para>
            <code>

          DataValidation dataValidation =
               wb.createDataValidation(
               DataValidation.ValidationType.List,
               listArray);
        </code>
            <br/>
            <code>

          Dim dataValidation As DataValidation = _
               wb.createDataValidation( _
               DataValidation.ValidationType.List, _
               listArray)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateNamedRange(SoftArtisans.OfficeWriter.ExcelWriter.Area[],System.String)">
            <Doc>
        <summary>
          <para>Creates a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/> of cells from an array of Areas. A <c>Range</c> is a collection of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> s; an <c>Area</c> area is a rectangular collection of cells.</para>
        </summary>
        <param name="rangeAreas">
          <para>Array or Areas representing the range.</para>
        </param>
        <param name="rangeName">
          <para>The name to assign to the range.</para>
        </param>
        <returns>
          <para>A <c>Range</c> object representing the range of cells created.</para>
        </returns>
        <example>
          <para>
            <code>

          Range rng = wb.CreateNamedRange(
               new Area[]{
               worksheet1.CreateArea(2, 4, 2, 5),
               worksheet2.CreateArea(2, 4, 2, 5)},
               "MyRange");
        </code>
            <br/>
            <code>

          Dim rng As Range = wb.CreateNamedRange( _
               New Area(){ _
               worksheet1.CreateArea(2, 4, 2, 5), _
               worksheet2.CreateArea(2, 4, 2, 5)}, _
               "MyRange")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateNamedRange(System.String,System.String)">
            <Doc>
        <summary>
          <para>Creates a named <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/> of cells from a specified formula. A <c>Range</c> is a collection of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> s; an <c>Area</c> area is a rectangular collection of cells.</para>
        </summary>
        <param name="rangeFormula">
          <para>Formula representing the range, for example "=Sheet1!A1:G10". The formula must be three-dimensional (specify a sheet), and can include only sheet and cell references, and operators joining those references (range ':', intersection ' ', and union ','). Functions that return ranges cannot be used.</para>
        </param>
        <param name="rangeName">
          <para>The name to assign to the range.</para>
        </param>
        <returns>
          <para>Range A <c>Range</c> object representing the range of cells created.</para>
        </returns>
        <example>
          <para>
            <code>
Range rng = wb.CreateNamedRange("=Sheet1!A1:G10", "Range1");</code>
            <br/>
            <code>
Dim rng As Range = wb.CreateNamedRange("=Sheet1!A1:G10", "Range1")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateNamedStyle(System.String)">
            <Doc>
        <summary>
          <para>Creates a named global style, which can be bound to cells, areas, ranges, rows, and columns. Any later changes to this style will affect all cells to which the style was assigned.</para>
        </summary>
        <param name="styleName">
          <para>The name of the new style.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NamedStyle"/> object which can be assigned to cells, and can be accessed and modified from the generated Excel spreadsheet.</para>
        </returns>
        <remarks>
          <para>To bind a style to a cell or set of cells, use either <c>Style</c> or  <c>ApplyStyle</c>.  Both are accessible through the following objects: <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/>, <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/>, <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/>,   <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.RowProperties"/>, and <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ColumnProperties"/>.</para>
          <para>Style definitions created by <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateNamedStyle(System.String)"/> are saved in the generated spreadsheet, and can be accessed and modified when the file is opened in Microsoft Excel. If a style with the same name already exists an exception will be thrown.</para>
        </remarks>
        <example>
          <para>
            <code>
NamedStyle heading1Style = wb.CreateNamedStyle("Heading1");</code>
            <br/>
            <code>
Dim heading1Style As NamedStyle = wb.CreateNamedStyle("Heading1")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateRange(System.String)">
            <Doc>
        <summary>
          <para>Creates a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/> of cells from a specified formula. A <c>Range</c> is a collection of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> s; an <c>Area</c> area is a rectangular collection of cells.</para>
        </summary>
        <param name="rangeFormula">
          <para>Formula representing the range, for example "=Sheet1!A1:G10". The formula must be three-dimensional (specify a sheet), and can include only sheet and cell references, and operators joining those references (range ':', intersection ' ', and union ','). Functions that return ranges cannot be used.</para>
        </param>
        <returns>
          <para>A <c>Range</c> object representing the range of cells created.</para>
        </returns>
        <example>
          <para>
            <code>
Range rng = wb.CreateRange("=Sheet1!A1:G10");</code>
            <br/>
            <code>
Dim rng As Range = wb.CreateRange("=Sheet1!A1:G10")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateRange(SoftArtisans.OfficeWriter.ExcelWriter.Area[])">
            <Doc>
        <summary>
          <para>Creates a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/> of cells from an array of Areas. A <c>Range</c> is a collection of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/> s; an <c>Area</c> area is a rectangular collection of cells.</para>
        </summary>
        <param name="rangeAreas">
          <para>Array or Areas representing the range.</para>
        </param>
        <returns>
          <para>A <c>Range</c> object representing the range of cells created.</para>
        </returns>
        <example>
          <para>
            <code>

          Range rng = wb.CreateRange(
               new Area[]{
               worksheet1.CreateArea(2, 4, 2, 5),
               worksheet2.CreateArea(2, 4, 2, 5)});
        </code>
            <br/>
            <code>

          Dim rng As Range = wb.CreateRange( _
               New Area(){ _
               worksheet1.CreateArea(2, 4, 2, 5), _
               worksheet2.CreateArea(2, 4, 2, 5)})
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.CreateStyle">
            <Doc>
        <summary>
          <para>Creates a global style, which can be bound to cells, areas, ranges, rows, and columns. Any later changes to this style will affect all cells to which the style was bound.</para>
        </summary>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.GlobalStyle"/> object which can be linked and applied to cells, but will not be accessible from the generated Excel spreadsheet.</para>
        </returns>
        <remarks>
          <para>To bind a style to a cell or set of cells, use either <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Style"/> or  <c>ApplyStyle</c>.  Both are accessible through the following objects: <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Cell"/>, <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Area"/>, <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/>,   <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.RowProperties"/>, and <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.ColumnProperties"/>.</para>
        </remarks>
        <example>
          <para>
            <code>
Style styl = wb.CreateStyle();</code>
            <br/>
            <code>
Dim styl As Style = wb.CreateStyle()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Workbook&quot;]/Member[@signature=&quot;Workbook.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Workbook&quot;]/Member[@signature=&quot;Workbook.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.GetNamedObject(System.String)">
            <Doc>
        <summary>
          <para>Returns the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject"/> object that represents the name of a specified array, number, picture, or range. If the named object does not exist, the method returns null.</para>
        </summary>
        <param name="name">
          <para>The string representation of the object's name.</para>
        </param>
        <returns>
          <para>The <c>NamedObject</c> object of a specified array, number, picture, or range, or null if the named object does not exist.</para>
        </returns>
        <example>
          <para>
            <code>
NamedObject obj = wb.GetNamedObject("MyObject");</code>
            <br/>
            <code>
Dim obj As NamedObject = wb.GetNamedObject("MyObject")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.GetNamedRange(System.String)">
            <Doc>
        <summary>
          <para>Returns the specified named <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Range"/>. If the named range does not exist, the method returns null.</para>
        </summary>
        <param name="name">
          <para>The name of the range.</para>
        </param>
        <returns>
          <para>A named <c>Range</c> object, or null if the range does not exist.</para>
        </returns>
        <example>
          <para>
            <code>
Range rng = wb.GetNamedRange("Range1");</code>
            <br/>
            <code>
Dim rng As Range = wb.GetNamedRange("Range1")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.GetNamedStyle(System.String)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NamedStyle"/> if it exists. If the style does not exist, null is returned.</para>
        </summary>
        <param name="styleName">
          <para>The name of the style to retrieve.</para>
        </param>
        <returns>
          <para>The named style with the name <c>styleName</c>, or null if the style exists.</para>
        </returns>
        <example>
          <para>
            <code>
NamedStyle heading1Style = wb.GetNamedStyle("Heading1");</code>
            <br/>
            <code>
Dim heading1Style As NamedStyle = wb.GetNamedStyle("Heading1")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.GetTextHeight(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Font,System.Double)">
            <Doc>
        <summary>
          <para>Returns the minimum height required to fit the given text string using the given font. </para>
        </summary>
        <param name="text">
          <para>The text string whose height will be calculated.</para>
        </param>
        <param name="font">
          <para>The font that will be used to format the text.</para>
        </param>
        <param name="desiredWidth">
          <para>The width, in character units, of the cell or area into which the text will be inserted.</para>
        </param>
        <returns>
          <para>The minimum height, in character units, required to accomodate the given text string.</para>
        </returns>
        <remarks>
          <para>Themaximum height of any one row is 409 units, so if the height return is greater than 409, you must merge cells across multiple rows and set the height of each row to accomodate the total minimum height of the text.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- What is the width of column C?
          ColumnProperties colProps = worksheet.GetColumnProperties(2);

          //--- How tall will the data be?
          double requiredHeight =
               wb.GetTextHeight(longTextString,
               colProps.Style.Font,
               colProps.WidthInChars);

          //--- Will we need multiple rows to display all of the data?
          //--- Can not exceed 409 character units in height per row.
          int numRows = (int) Math.Round((requiredHeight / 409) + 0.5);

          //--- Evenly distribute the required height across all of the rows.
          worksheet.Cells[2, 2].Value = longTextString;
          Area a = worksheet.CreateArea(2, 2, numRows, 1);
          a.MergeCells();
          a.AllRowsHeight = (requiredHeight / numRows);
        </code>
            <br/>
            <code>

          '--- What is the width of column C?
          Dim colProps As ColumnProperties = worksheet.GetColumnProperties(2)

          '--- How tall will the data be?
          Dim requiredHeight As Double = _
               wb.GetTextHeight(longTextString, _
               colProps.Style.Font, _
               colProps.WidthInChars)

          '--- Will we need multiple rows to display all of the data?
          '--- Can not exceed 409 character units in height per row.
          Dim numRows As Integer = Math.Round((requiredHeight / 409) + 0.5)

          '--- Evenly distribute the required height across all of the rows.
          worksheet.Cells(2, 2).Value = longTextString
          Dim a As Area = worksheet.CreateArea(2, 2, numRows, 1)
          a.MergeCells()
          a.AllRowsHeight = (requiredHeight / numRows)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.GetTextWidth(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Font,System.Double)">
            <Doc>
        <summary>Returns the minimum width required to fit the given text string using the given font.  </summary>
        <param name="text">
          <para>The text string whose width will be calculated.</para>
        </param>
        <param name="font">
          <para>The font that will be used to format the text.</para>
        </param>
        <param name="desiredHeight">
          <para>The height, in character units, of the cell or area into which the text will be inserted.</para>
        </param>
        <returns>
          <para>The minimum width, in character units, required to accomodate the given text string.</para>
        </returns>
        <remarks>
          <para>The maximum width of any one column is 409 character units, so if the width return is greater than 409, you must merge cells across multiple columns and set the width of each column to accomodate the total minimum width of the text.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- What is the height of row 1?
          RowProperties rowProps = worksheet.GetRowProperties(0);

          //--- How wide will the data be?
          double requiredWidth =
               wb.GetTextWidth(longTextString,
               rowProps.Style.Font,
               rowProps.Height);

          //--- Will we need multiple columns to display all of the data?
          //--- Can not exceed 255 character units in width per column.
          int numCols = (int) Math.round((requiredWidth / 255) + 0.5);

          //--- Evenly distribute the required width between all of the columns.
          worksheet.Cells[0, 3].Value = longTextString;
          a = worksheet.createArea(0, 3, 1, numCols);
          a.MergeCells();
          a.AllColumnWidthsInChars = (requiredWidth / numCols);
        </code>
            <br/>
            <code>

          '--- What is the height of row 1?
          Dim rowProps As RowProperties = worksheet.GetRowProperties(0)

          '--- How wide will the data be?
          Dim requiredWidth As Double = _
               wb.GetTextWidth(longTextString, _
               rowProps.Style.Font, _
               rowProps.Height)

          '--- Will we need multiple columns to display all of the data?
          '--- Can not exceed 409 character units in width per column.
          Dim numCols As Integer = Math.Round((requiredWidth / 409) + 0.5)

          '--- Evenly distribute the required width between all of the columns.
          worksheet.Cells(0, 3).Value = longTextString
          Dim a As Area = worksheet.CreateArea(2, 2, numRows, 1)
          a.MergeCells()
          a.AllColumnWidthsInChars = (requiredHeight / numRows)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.Protect(System.String)">
            <Doc>
        <summary>
          <para>Protects the workbook structure using the supplied password.  End users will not be able to add or remove worksheets unless they enter the password.</para>
        </summary>
        <param name="password">
          <para>The password to use to protect the workbook. If the password = "" or null, then the workbook will be protected without a password.</para>
        </param>
        <remarks>
          <para>The equivalent to this action in Excel is to select "Protect structure and windows" from the review menu.</para>
          <para>Further protection can be extended to cells by using the <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Protect(System.String)"/> method to protect individual worksheets and by using the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.EncryptPassword"/> property to set a password that must be provided to open the workbook.  </para>
        </remarks>
        <example>
          <para>
            <code>
wb.Protect("MyPassword");</code>
            <br/>
            <code>
wb.Protect("MyPassword")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.Unprotect">
            <Doc>
        <summary>
          <para>Removes protection from the workbook.</para>
        </summary>
        <example>
          <para>
            <code>
wb.Unprotect();</code>
            <br/>
            <code>
wb.Unprotect()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.DisplayTabs">
            <Doc>
        <summary>
          <para>Shows or hides the worksheet tabs at the bottom of the workbook window.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get the DisplayTabs value of the workbook
          bool tabs = wb.DisplayTabs;

          //--- Set the DisplayTabs value of the workbook
          wb.DisplayTabs = true;
        </code>
            <br/>
            <code>

          '--- Get the DisplayTabs value of the workbook
          Dim tabs As Boolean = wb.DisplayTabs

          '--- Set the DisplayTabs value of the workbook
          wb.DisplayTabs = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.DocumentProperties">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.DocumentProperties"/> object that represents properties of the specified workbook, such as name, author, and summary. In Microsoft Excel, these properties are displayed in the file's Properties sheet. To view the Properties sheet in Excel, open Excel's File menu, and select Properties.</para>
        </summary>
        <example>
          <para>
            <code>

          DocumentProperties docProps =
               wb.DocumentProperties;
        </code>
            <br/>
            <code>

          Dim docProps As DocumentProperties = _
               wb.DocumentProperties
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.EncryptPassword">
            <Doc>
        <summary>
          <para>Sets or returns the password used to encrypt the spreadsheet. Standard "Office 97/2000 Compatible" encryption is used to encrypt the spreadsheet. This is the default encryption used by Excel 97 and later versions.</para>
        </summary>
        <remarks>
          <para>To further protect your spreadsheet, you can protect the workbook structure using the <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.Protect(System.String)"/> method or write-protect individual worksheets using the <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.Protect(System.String)"/> method.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get the EncryptPassword value for the workbook
          string pwd = wb.EncryptPassword;

          //--- Set the EncryptPassword value for the workbook
          wb.EncryptPassword = "MyPassword";
        </code>
            <br/>
            <code>

          '--- Get the EncryptPassword value for the workbook
          Dim pwd As String = wb.EncryptPassword

          '--- Set the EncryptPassword value for the workbook
          wb.EncryptPassword = "MyPassword"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.ExcludeMacros">
            <Doc>
        <summary>
          <para>Sets or returns whether ExcelWriter should remove macros from the generated workbook or leave them in. </para>
        </summary>
        <remarks>
          <para>When <c>ExcludeMacro</c> is set to true, buttons associated with macros may produce the error "Data may have been lost." Therefore, when excluding macros, remove all associated buttons from the spreadsheet. ExcelWriter, by default, will include macros in the generated workbook.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get the ExcludeMacros value for the workbook
          bool exclude = wb.ExcludeMacros;

          //--- Set the ExcludeMacros value for the workbook
          wb.ExcludeMacros = true;
        </code>
            <br/>
            <code>

          '--- Get the ExcludeMacros value for the workbook
          Dim exclude As Boolean = wb.ExcludeMacros

          '--- Set the ExcludeMacros value for the workbook
          wb.ExcludeMacros = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.FirstDisplayedTab">
            <Doc>
        <summary>
          <para>Sets or returns the first worksheet tab to display in the tab bar at the bottom of the workbook window.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get the FirstDisplayedTab value of the workbook
          int firstTab = wb.FirstDisplayedTab;

          //--- Set the FirstDisplayedTab value of the workbook
          wb.FirstDisplayedTab = 0;
        </code>
            <br/>
            <code>

          '--- Get the FirstDisplayedTab value of the workbook
          Dim firstTab As Integer = wb.FirstDisplayedTab

          '--- Set the FirstDisplayedTab value of the workbook
          wb.FirstDisplayedTab = 0
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.Height">
            <Doc>
        <summary>
          <para>Sets or returns the height of the workbook's window</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get the height of the workbook window
          int winHeight = wb.Height;

          //--- Set the height of the workbook window
          wb.Height = 500;
        </code>
            <br/>
            <code>

          '--- Get the height of the workbook window
          Dim winHeight As Integer = wb.Height

          '--- Set the height of the workbook window
          wb.Height = 500
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.HorizontalPosition">
            <Doc>
        <summary>
          <para>Sets or returns the horizontal (x) position of the workbook window's upper left corner when displayed in Excel.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get the horizontal position of the workbook window's upper left corner
          int winHoriz = wb.HorizontalPosition;

          //--- Set the horizontal position of the workbook window's upper left corner
          wb.HorizontalPosition = 100;
        </code>
            <br/>
            <code>

          '--- Get the horizontal position of the workbook window's upper left corner
          Dim winHoriz As Integer = wb.HorizontalPosition

          '--- Set the horizontal position of the workbook window's upper left corner
          wb.HorizontalPosition = 100
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.IsProtected">
            <Doc>
        <summary>
          <para>Returns whether or not the worksheet is protected.</para>
        </summary>
        <example>
          <para>
            <code>
bool protected = wb.IsProtected;</code>
            <br/>
            <code>
Dim protected As Boolean = wb.IsProtected</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.Item(System.Int32)">
            <Doc>
        <summary>Returns the worksheet specified by a 0-based index. This property is an indexer for the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Workbook"/> class.</summary>
        <param name="sheetOffset">
          <para>The 0-based index of the worksheet. The first worksheet is <c>Worksheet\[0\]</c>.</para>
        </param>
        <returns>
          <para>The worksheet at the specified index.</para>
        </returns>
        <example>
          <para>
            <code>
          //--- Get Worksheet at position 0
          Worksheet ws = wb[0];
</code>
            <br/>
            <code>
          '--- Get Worksheet at position 0
          Dim ws As Worksheet = wb(0)
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.Item(System.String)">
            <Doc>
        <summary>
          <para>Returns the worksheet with the specified name. This property is an indexer for the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Workbook"/> class.</para>
        </summary>
        <param name="name">
          <para>The name of the worksheet.</para>
        </param>
        <returns>
          <para>The worksheet with the specified name.</para>
        </returns>
        <example>
          <para>
            <code>

          //--- Get the worksheet titled "Sheet1"
          Worksheet ws = wb["Sheet1"];
        </code>
            <br/>
            <code>

          '--- Get the worksheet titled "Sheet1"
          Dim ws As Worksheet = wb("Sheet1")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.NumberFormat">
            <Doc>
        <summary>
          <para>Returns the <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.NumberFormat"/> used for formatting of numbers and dates.</para>
        </summary>
        <example>
          <para>
            <code>
NumberFormat format = wb.NumberFormat;</code>
            <br/>
            <code>
Dim format As NumberFormat = wb.NumberFormat</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.Palette">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.Palette"/> object that represents the specified workbook's color palette. </para>
        </summary>
        <remarks>
          <para>Each Excel workbook has a single color palette that manages formatting colors and some drawing layer colors. A color palette contains 56 colors that may be referenced. Each of these 56 colors may be customized, but changing a color in the palette will affect all formatting that uses the referenced color.</para>
        </remarks>
        <example>
          <para>
            <code>
Palette pal = wb.Palette;</code>
            <br/>
            <code>
Dim pal As Palette = wb.Palette</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.PasswordToModify">
            <Doc>
        <summary>
          <para>This sets the workbook so that it can be opened in read-only mode with the option to open in read-write mode, if the user supplies a matching password when opening the spreadsheet.</para>
        </summary>
        <example>
          <para>
            <code>
wb.PasswordToModify = "MyPassword";</code>
            <br/>
            <code>
wb.PasswordToModify = "MyPassword"</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.ProtectPasswordHash">
            <Doc>
        <summary>
          <para>Sets or returns the password hash that is used to protect the workbook.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get the ProtectPasswordHash value for the workbook
          int passwordHash = wb.ProtectPasswordHash;

          //--- Set the ProtectPasswordHash value for the workbook
          wb.ProtectPasswordHash = 12345
        </code>
            <br/>
            <code>

          '--- Get the ProtectPasswordHash value for the workbook
          Dim passwordHash As Integer = wb.ProtectPasswordHash

          '--- Set the ProtectPasswordHash value for the workbook
          wb.ProtectPasswordHash = 12345
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.ReadOnly">
            <Doc>
        <summary>
          <para>Determines whether the workbook can only be opened in read-only mode.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get the ReadOnly value for the workbook
          bool readOnly = wb.ReadOnly;

          //--- Set the ReadOnly value for the workbook
          wb.ReadOnly = true;
        </code>
            <br/>
            <code>

          '--- Get the ReadOnly value for the workbook
          Dim readOnly As Boolean = wb.ReadOnly

          '--- Set the ReadOnly value for the workbook
          wb.ReadOnly = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.ReadOnlyRecommended">
            <Doc>
        <summary>
          <para>Sets or returns whether Excel will recommend - when the workbook is opened - that it be viewed in read-only mode.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get the ReadOnlyRecommended value for the workbook
          bool readOnlyRec = wb.ReadOnlyRecommended;

          //--- Set the ReadOnlyRecommended value for the workbook
          wb.ReadOnlyRecommended = true;
        </code>
            <br/>
            <code>

          '--- Get the ReadOnlyRecommended value for the workbook
          Dim readOnlyRec As Boolean = wb.ReadOnlyRecommended

          '--- Set the ReadOnlyRecommended value for the workbook
          wb.ReadOnlyRecommended = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.ShowHorizontalScrollBar">
            <Doc>
        <summary>
          <para>When true, the horizontal scroll bar will be shown in the generated workbook. When false, the horizontal scroll bar will be hidden.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Set the ShowHorizontalScrollBar property value
          bool showHorizScroll = wb.ShowHorizontalScrollBar;

          //--- Get the ShowHorizontalScrollBar property value
          wb.ShowHorizontalScrollBar = true;
        </code>
            <br/>
            <code>

          '--- Set the ShowHorizontalScrollBar property value
          Dim showHorizScroll As Boolean = wb.ShowHorizontalScrollBar

          '--- Get the ShowHorizontalScrollBar property value
          wb.ShowHorizontalScrollBar = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.ShowVerticalScrollBar">
            <Doc>
        <summary>
          <para>Shows or hides the vertical scroll bar in the generated workbook.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get the ShowVerticalScrollBar property
          bool showVertScroll = wb.ShowVerticalScrollBar;

          //--- Set the ShowVerticalScrollBar property
          wb.ShowVerticalScrollBar = true;
        </code>
            <br/>
            <code>

          '--- Get the ShowVerticalScrollBar property
          Dim showVertScroll As Boolean = wb.ShowVerticalScrollBar

          '--- Set the ShowVerticalScrollBar property
          wb.ShowVertialScrollBar = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.TabRatio">
            <Doc>
        <summary>Sets or returns the ratio between the workbook's tab bar and the horizontal scroll bar.</summary>
        <remarks>
          <para>For example, if <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.TabRatio"/> is set to 50, the tab bar will take up 50% of the width of the workbook window, while the horizontal scroll bar will take up the other half.The value of <c>TabRatio</c> should be between 0 and 100. If the value is less than 0, ExcelWriter will set <c>TabRatio</c>  to 0.  If the value is greater than 100, ExcelWriter will set <c>TabRatio</c>  to 100.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get the ratio between the workbook's tab bar and the horizontal scroll bar
          double ratio = wb.TabRatio;

          //--- Set the ratio between the workbook's tab bar and the horizontal scroll bar
          wb.TabRatio = 20;
        </code>
            <br/>
            <code>

          '--- Get the ratio between the workbook's tab bar and the horizontal scroll bar
          Dim ratio As Double = wb.TabRatio

          '--- Set the ratio between the workbook's tab bar and the horizontal scroll bar
          wb.TabRatio = 20
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.UseRCFormulaNotation">
            <Doc>
        <summary>Indicates or sets the type of references used in this workbook.  </summary>
        <remarks>
          <para>When false, the default, all references will be in "Normal" style, and should be expressed as A1, $A$1, etc.  If set to true, references will be in RC style, and should be expressed as R1C1, R[1]C[1], etc.  All methods and properties that take formulas as input or output will pay attention to this value.  Setting this value will also affect the style of references that Excel displays on opening the file.  This option is analagous to the Tools-&gt;Options-&gt;General-&gt;R1C1 Reference Style in Excel.</para>
        </remarks>
        <example>
          <para>
            <code>

          wb.UseRCFormulaNotation = true;
          myCell.Formula = "=R3C2";
        </code>
            <br/>
            <code>

          wb.UseRCFormulaNotation = True
          myCell.Formula = "=R3C2"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.VerticalPosition">
            <Doc>
        <summary>
          <para>Sets or returns the vertical (y) position of the workbook window's upper left corner when displayed in Excel.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get the vertical position of the workbook window's upper left corner
          int winVert = wb.VerticalPosition;

          //--- Set the vertical position of the workbook window's upper left corner
          wb.VerticalPosition = 100;
        </code>
            <br/>
            <code>

          '--- Get the vertical position of the workbook window's upper left corner
          Dim winVert As Integer = wb.VerticalPosition

          '--- Set the vertical position of the workbook window's upper left corner
          wb.VerticalPosition = 100
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.Width">
            <Doc>
        <summary>
          <para>Sets or returns the width of the workbook's window.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get the width of the workbook window
          int winWidth = wb.Width;

          //--- Set the width of the workbook window
          wb.Width = 500;
        </code>
            <br/>
            <code>

          '--- Get the width of the workbook window
          Dim winWidth As Integer = wb.Width

          '--- Set the width of the workbook window
          wb.Width = 500
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.Worksheets">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.Worksheets"/> collection which provides access to all worksheets in the specified workbook, including charts displayed as sheets. </para>
        </summary>
        <remarks>
          <para>Use the <c>Worksheets</c> object to manage the worksheets in a workbook.<br/>ExcelWriter may not be able to parse some worksheets (such as macro sheets).</para>
        </remarks>
        <example>
          <para>
            <code>
Worksheets wkshts = wb.Worksheets;</code>
            <br/>
            <code>
Dim wkshts As Worksheets = wb.Worksheets</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.NamedRanges">
            <Doc>
        <summary>
          <para>Returns the named ranges of the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Workbook"/> as an array of <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.NamedObject"/> objects as an <see cref="T:System.Collections.IEnumerable"/> collection.  Though the named ranges are not returned in any particular order, they iterable.</para>
        </summary>
        <example>
          <para>
            <code>

          NamedObject[] ranges = wb.NamedRanges;
        </code>
            <br/>
            <code>

          Dim ranges as NamedObject() = wb.NamedRanges
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets"/> class represents the set of worksheets in an Excel workbook. This object is used to manage (add, copy, remove, etc.) the worksheets in the workbook To return a <c>Worksheets</c> object, use <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Workbook.Worksheets"/>.</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets.GetEnumerator">
            <Doc>
        <summary>
          <para>Returns an IEnumerator for the individual Worksheets in a Worksheets object</para>
        </summary>
        <returns>
          <para>An enumerator for the individual Worksheets in a Worksheets object as a System.Collections.IEnumerator</para>
        </returns>
        <example>
          <para>
            <code>
IEnumerator enumerator = worksheets.GetEnumerator();
</code>
            <br/>
            <code>
Dim enumerator as IEnumerator = worksheets.GetEnumerator()
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets.CopySheet(SoftArtisans.OfficeWriter.ExcelWriter.Worksheet,System.Int32,System.String)">
            <Doc>
        <summary>
          <para>Copies a worksheet in the workbook to another position in the workbook.</para>
        </summary>
        <param name="sheet">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet"/> object representing the sheet to copy.</para>
        </param>
        <param name="position">
          <para>The 0-based position at which to insert a copy of the specified worksheet. If <c>position</c> is less than 0, it is inserted before the first sheet in the workbook. If <c>position</c> is equal to or greater than <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets.Count"/>, it is inserted after the last worksheet.</para>
        </param>
        <param name="newName">
          <para>the new name to use for this worksheet.</para>
        </param>
        <remarks>
          <para>This method is intended to allow for copying of sheets from one position to another within a single workbook. To copy content from a worksheet in one workbook to worksheet in another workbook, use the <see cref="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet.CopyPaste(System.String,SoftArtisans.OfficeWriter.ExcelWriter.Area,SoftArtisans.OfficeWriter.ExcelWriter.CopyPasteProperties)"/></para>
        </remarks>
        <example>
          <para>
            <code>
sheets.CopySheet(ws1, 0, "Sheet2");</code>
            <br/>
            <code>
sheets.CopySheet(ws1, 0, "Sheet2")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets.CreateChartsheet(SoftArtisans.OfficeWriter.ExcelWriter.ChartType,System.String)">
            <Doc>
        <summary>
          <para>Creates a new chartsheet after the last existing worksheet in this workbook.</para>
        </summary>
        <param name="type">
          <para>The type of chart to create.  Specify both a chart type and sub-type, for example, http://wiki.softartisans.com/display/EW70/ChartType.Bar#Clustered.</para>
        </param>
        <param name="name">
          <para>Name for the new chartsheet.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Chartsheet"/> object representing the chartsheet created.</para>
        </returns>
        <example>
          <para>
            <code>
ChartSheet cs = 
     sheets.CreateChartsheet(ChartType.Bar.Clustered, "NewSheet");</code>
            <br/>
            <code>
Dim cs As ChartSheet = _
     sheets.CreateChartsheet(ChartType.Bar.Clustered, "NewSheet")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets.CreateChartsheet(SoftArtisans.OfficeWriter.ExcelWriter.ChartType,System.String,System.Int32)">
            <Doc>
        <summary>
          <para>Creates a new Chartsheet at a specified position in the workbook.</para>
        </summary>
        <param name="type">
          <para>The type of chart to create. Specify both a chart type and sub-type, for example, http://wiki.softartisans.com/display/EW70/ChartType.Bar#Clustered.</para>
        </param>
        <param name="name">
          <para>Name for the new chartsheet.</para>
        </param>
        <param name="position">
          <para>The 0-based position at which to insert the chartsheet. If <c>position</c> is greater than <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets.Count"/>, an exception will be thrown.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Chartsheet"/> object representing the chartsheet created.</para>
        </returns>
        <example>
          <para>
            <code>
ChartSheet cs =
     sheets.CreateWorksheet(ChartType.Bar.Clustered, "NewSheet", 0);</code>
            <br/>
            <code>
Dim cs As ChartSheet = _
     sheets.CreateWorksheet(ChartType.Bar.Clustered, "NewSheet", 0)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets.CreateWorksheet(System.String)">
            <Doc>
        <summary>
          <para>Creates a new worksheet after the last existing worksheet in this workbook.</para>
        </summary>
        <param name="name">
          <para>Name for the new worksheet.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet"/> object representing the worksheet created.</para>
        </returns>
        <example>
          <para>
            <code>
Worksheet ws = sheets.CreateWorksheet("NewSheet");</code>
            <br/>
            <code>
Dim ws As Worksheet = sheets.CreateWorksheet("NewSheet")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets.CreateWorksheet(System.String,System.Int32)">
            <Doc>
        <summary>
          <para>Creates a new worksheet at a specified position in the workbook.</para>
        </summary>
        <param name="name">
          <para>Name for the new worksheet.</para>
        </param>
        <param name="position">
          <para>The 0-based position at which to insert the worksheet. If <c>position</c> is greater than <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets.Count"/>, an exception will be thrown.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet"/> object representing the worksheet created.</para>
        </returns>
        <example>
          <para>
            <code>
Worksheet ws = sheets.CreateWorksheet("NewSheet", 0);</code>
            <br/>
            <code>
Dim ws As Worksheet = sheets.CreateWorksheet("NewSheet", 0)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets.Delete(System.String)">
            <Doc>
        <summary>
          <para>Deletes a worksheet from the workbook.</para>
        </summary>
        <param name="name">
          <para>The name of the sheet to remove.</para>
        </param>
        <example>
          <para>
            <code>
sheets.Delete("Sheet3");</code>
            <br/>
            <code>
sheets.Delete("Sheet3")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets.Delete(System.Int32)">
            <Doc>
        <summary>
          <para>Deletes a worksheet from the workbook.</para>
        </summary>
        <param name="position">
          <para>The 0-based sheet position.</para>
        </param>
        <example>
          <para>
            <code>
sheets.Delete(0);</code>
            <br/>
            <code>
sheets.Delete(0)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheets&quot;]/Member[@signature=&quot;Worksheets.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="ExcelWriter.api.xml" path="API/Member[@signature=&quot;Worksheets&quot;]/Member[@signature=&quot;Worksheets.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets.InsertSheet(System.String,System.Int32)">
            <Doc>
        <summary>
          <para>Inserts a new worksheet into the workbook at a specified position.</para>
        </summary>
        <param name="name">
          <para>The name of the sheet to create and insert.</para>
        </param>
        <param name="position">
          <para>The 0-based position at which to insert the worksheet. If <c>position</c> is less than 0, it is inserted before the first sheet in the workbook. If <c>position</c> is equal to or greater than <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets.Count"/>, it is inserted after the last worksheet.</para>
        </param>
        <returns>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet"/> object representing the inserted worksheet.</para>
        </returns>
        <example>
          <para>
            <code>
sheets.InsertSheet("NewSheet", 1);</code>
            <br/>
            <code>
sheets.InsertSheet("NewSheet", 1)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets.MoveSheet(SoftArtisans.OfficeWriter.ExcelWriter.Worksheet,System.Int32)">
            <Doc>
        <summary>
          <para>Moves a worksheet to a different position in the workbook.</para>
        </summary>
        <param name="sheet">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheet"/> object representing the sheet to move.</para>
        </param>
        <param name="position">
          <para>The 0-based position to which to move the specified worksheet. If <c>position</c> is less than 0, the sheet will be the first sheet in the workbook. If <c>position</c> is equal to or greater than <see cref="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets.Count"/>, it will be inserted after the last worksheet.</para>
        </param>
        <example>
          <para>
            <code>
sheets.MoveSheet(oWorkSheet, 3);</code>
            <br/>
            <code>
sheets.MoveSheet(oWorkSheet, 3)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets.Select(System.Object[])">
            <Doc>
        <summary>
          <para>Set the sheets that will be selected when the workbook is opened in Excel.</para>
        </summary>
        <param name="sheets">
          <para>Array of sheet indexes or sheet names.</para>
        </param>
        <example>
          <para>
            <code>
sheets.Select(arrSheets);</code>
            <br/>
            <code>
sheets.Select(arrSheets)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets.Count">
            <Doc>
        <summary>
          <para>Returns the number of worksheets in the workbook.</para>
        </summary>
        <example>
          <para>
            <code>
int numSheets = oWorksheets.Count;</code>
            <br/>
            <code>
Dim numSheets As Integer = oWorksheets.Count</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets.Item(System.Int32)">
            <Doc>
        <summary>
          <para>Returns the worksheet at the specified position. This property is an indexer for the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets"/> class.</para>
        </summary>
        <param name="position">
          <para>The 0-based position the worksheet to get.</para>
        </param>
        <returns>
          <para>The worksheet at the specified position.</para>
        </returns>
        <example>
          <para>
            <code>
Worksheet Sheet1 = oWorkbook.Worksheet[0];</code>
            <br/>
            <code>
Dim Sheet1 As Worksheet = oWorkbook.Worksheet(0)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets.Item(System.String)">
            <Doc>
        <summary>
          <para>Returns the worksheet with the specified name. This property is an indexer for the <see cref="T:SoftArtisans.OfficeWriter.ExcelWriter.Worksheets"/> class.</para>
        </summary>
        <param name="name">
          <para>The name of the worksheet to get.</para>
        </param>
        <returns>
          <para>The worksheet with the specified name.</para>
        </returns>
        <example>
          <code>
Worksheet Sheet1 = oWorkbook.Worksheet["Sheet1"];</code>
          <br/>
          <code>
Dim Sheet1 As Worksheet = oWorkbook.Worksheet("Sheet1")</code>
        </example>
      </Doc>
        </member>
    </members>
</doc>
